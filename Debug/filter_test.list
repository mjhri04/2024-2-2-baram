
filter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800fa58  0800fa58  00010a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fef0  0800fef0  000112cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fef0  0800fef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fef8  0800fef8  000112cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fef8  0800fef8  00010ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fefc  0800fefc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800ff00  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002058  200002d0  080101cc  000112d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002328  080101cc  00011328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019acf  00000000  00000000  000112fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e00  00000000  00000000  0002adcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0002ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7b9  00000000  00000000  00031306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae16  00000000  00000000  0004cabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8a5  00000000  00000000  000678d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010717a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f8  00000000  00000000  001071c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fa3c 	.word	0x0800fa3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800fa3c 	.word	0x0800fa3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
double ApplyLowPassFilter(double currentValue, double *prevValue);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(htim == &htim9){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d112      	bne.n	800102a <HAL_TIM_PeriodElapsedCallback+0x36>
		Read_Pressure_Data();
 8001004:	f000 fabe 	bl	8001584 <Read_Pressure_Data>

		HAL_UART_Receive_DMA(&huart1, IMU1array, IMU_DATA_SIZE);
 8001008:	221f      	movs	r2, #31
 800100a:	490b      	ldr	r1, [pc, #44]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800100c:	480b      	ldr	r0, [pc, #44]	@ (800103c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800100e:	f005 f8cc 	bl	80061aa <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart2, IMU2array, IMU_DATA_SIZE);
 8001012:	221f      	movs	r2, #31
 8001014:	490a      	ldr	r1, [pc, #40]	@ (8001040 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001016:	480b      	ldr	r0, [pc, #44]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001018:	f005 f8c7 	bl	80061aa <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart6, IMU3array, IMU_DATA_SIZE);
 800101c:	221f      	movs	r2, #31
 800101e:	490a      	ldr	r1, [pc, #40]	@ (8001048 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001020:	480a      	ldr	r0, [pc, #40]	@ (800104c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001022:	f005 f8c2 	bl	80061aa <HAL_UART_Receive_DMA>

		Read_All_IMU_Data();
 8001026:	f000 fd0b 	bl	8001a40 <Read_All_IMU_Data>

		//SendPacket();
	}
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000334 	.word	0x20000334
 8001038:	200004c4 	.word	0x200004c4
 800103c:	2000037c 	.word	0x2000037c
 8001040:	200004e4 	.word	0x200004e4
 8001044:	200003c4 	.word	0x200003c4
 8001048:	20000504 	.word	0x20000504
 800104c:	2000040c 	.word	0x2000040c

08001050 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1f      	ldr	r2, [pc, #124]	@ (80010dc <HAL_UART_RxCpltCallback+0x8c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d137      	bne.n	80010d2 <HAL_UART_RxCpltCallback+0x82>
        // IMU1 데이터 수신 및 파싱
    	roll1 = ApplyLowPassFilter(roll1, &roll1_prev);
 8001062:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_UART_RxCpltCallback+0x90>)
 8001064:	ed93 7b00 	vldr	d7, [r3]
 8001068:	481e      	ldr	r0, [pc, #120]	@ (80010e4 <HAL_UART_RxCpltCallback+0x94>)
 800106a:	eeb0 0a47 	vmov.f32	s0, s14
 800106e:	eef0 0a67 	vmov.f32	s1, s15
 8001072:	f000 fdc5 	bl	8001c00 <ApplyLowPassFilter>
 8001076:	eeb0 7a40 	vmov.f32	s14, s0
 800107a:	eef0 7a60 	vmov.f32	s15, s1
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_UART_RxCpltCallback+0x90>)
 8001080:	ed83 7b00 	vstr	d7, [r3]
		pitch1 = ApplyLowPassFilter(pitch1, &pitch1_prev);
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_UART_RxCpltCallback+0x98>)
 8001086:	ed93 7b00 	vldr	d7, [r3]
 800108a:	4818      	ldr	r0, [pc, #96]	@ (80010ec <HAL_UART_RxCpltCallback+0x9c>)
 800108c:	eeb0 0a47 	vmov.f32	s0, s14
 8001090:	eef0 0a67 	vmov.f32	s1, s15
 8001094:	f000 fdb4 	bl	8001c00 <ApplyLowPassFilter>
 8001098:	eeb0 7a40 	vmov.f32	s14, s0
 800109c:	eef0 7a60 	vmov.f32	s15, s1
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_UART_RxCpltCallback+0x98>)
 80010a2:	ed83 7b00 	vstr	d7, [r3]
		yaw1 = ApplyLowPassFilter(yaw1, &yaw1_prev);
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_UART_RxCpltCallback+0xa0>)
 80010a8:	ed93 7b00 	vldr	d7, [r3]
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <HAL_UART_RxCpltCallback+0xa4>)
 80010ae:	eeb0 0a47 	vmov.f32	s0, s14
 80010b2:	eef0 0a67 	vmov.f32	s1, s15
 80010b6:	f000 fda3 	bl	8001c00 <ApplyLowPassFilter>
 80010ba:	eeb0 7a40 	vmov.f32	s14, s0
 80010be:	eef0 7a60 	vmov.f32	s15, s1
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_UART_RxCpltCallback+0xa0>)
 80010c4:	ed83 7b00 	vstr	d7, [r3]
		HAL_UART_Receive_DMA(&huart1, IMU1array, IMU_DATA_SIZE);
 80010c8:	221f      	movs	r2, #31
 80010ca:	490b      	ldr	r1, [pc, #44]	@ (80010f8 <HAL_UART_RxCpltCallback+0xa8>)
 80010cc:	480b      	ldr	r0, [pc, #44]	@ (80010fc <HAL_UART_RxCpltCallback+0xac>)
 80010ce:	f005 f86c 	bl	80061aa <HAL_UART_Receive_DMA>
        // IMU3 데이터 수신 및 파싱
        Get_IMU_Data(&huart6, IMU3array, &roll3, &pitch3, &yaw3, &accelX3, &accelY3, &accelZ3, &gyroX3, &gyroY3, &gyroZ3);
        HAL_UART_Receive_DMA(&huart6, (uint8_t*)IMU3array, IMU_DATA_SIZE); // DMA 수신 재시작
    }
    */
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40011000 	.word	0x40011000
 80010e0:	20000540 	.word	0x20000540
 80010e4:	20000578 	.word	0x20000578
 80010e8:	20000548 	.word	0x20000548
 80010ec:	20000580 	.word	0x20000580
 80010f0:	20000550 	.word	0x20000550
 80010f4:	20000588 	.word	0x20000588
 80010f8:	200004c4 	.word	0x200004c4
 80010fc:	2000037c 	.word	0x2000037c

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001104:	f001 f8ac 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001108:	f000 f834 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110c:	f000 fa12 	bl	8001534 <MX_GPIO_Init>
  MX_DMA_Init();
 8001110:	f000 f9f6 	bl	8001500 <MX_DMA_Init>
  MX_ADC1_Init();
 8001114:	f000 f8d4 	bl	80012c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001118:	f000 f974 	bl	8001404 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800111c:	f000 f99c 	bl	8001458 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001120:	f000 f9c4 	bl	80014ac <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8001124:	f009 fc28 	bl	800a978 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 8001128:	f000 f932 	bl	8001390 <MX_TIM9_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800112c:	f000 f88c 	bl	8001248 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8001130:	4809      	ldr	r0, [pc, #36]	@ (8001158 <main+0x58>)
 8001132:	f004 fbd7 	bl	80058e4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)IMU1array, IMU_DATA_SIZE);
 8001136:	221f      	movs	r2, #31
 8001138:	4908      	ldr	r1, [pc, #32]	@ (800115c <main+0x5c>)
 800113a:	4809      	ldr	r0, [pc, #36]	@ (8001160 <main+0x60>)
 800113c:	f005 f835 	bl	80061aa <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)IMU2array, IMU_DATA_SIZE);
 8001140:	221f      	movs	r2, #31
 8001142:	4908      	ldr	r1, [pc, #32]	@ (8001164 <main+0x64>)
 8001144:	4808      	ldr	r0, [pc, #32]	@ (8001168 <main+0x68>)
 8001146:	f005 f830 	bl	80061aa <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart6, (uint8_t*)IMU3array, IMU_DATA_SIZE);
 800114a:	221f      	movs	r2, #31
 800114c:	4907      	ldr	r1, [pc, #28]	@ (800116c <main+0x6c>)
 800114e:	4808      	ldr	r0, [pc, #32]	@ (8001170 <main+0x70>)
 8001150:	f005 f82b 	bl	80061aa <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <main+0x54>
 8001158:	20000334 	.word	0x20000334
 800115c:	200004c4 	.word	0x200004c4
 8001160:	2000037c 	.word	0x2000037c
 8001164:	200004e4 	.word	0x200004e4
 8001168:	200003c4 	.word	0x200003c4
 800116c:	20000504 	.word	0x20000504
 8001170:	2000040c 	.word	0x2000040c

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	@ 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	@ 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00b fe8b 	bl	800ce9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <SystemClock_Config+0xcc>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <SystemClock_Config+0xcc>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c0:	4a20      	ldr	r2, [pc, #128]	@ (8001244 <SystemClock_Config+0xd0>)
 80011c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <SystemClock_Config+0xd0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011e8:	2310      	movs	r3, #16
 80011ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011ec:	23c0      	movs	r3, #192	@ 0xc0
 80011ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fec9 	bl	8004f94 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001208:	f000 fd38 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f004 f92c 	bl	8005484 <HAL_RCC_ClockConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001232:	f000 fd23 	bl	8001c7c <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	@ 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2018      	movs	r0, #24
 8001252:	f001 fe90 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001256:	2018      	movs	r0, #24
 8001258:	f001 fea9 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2025      	movs	r0, #37	@ 0x25
 8001262:	f001 fe88 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001266:	2025      	movs	r0, #37	@ 0x25
 8001268:	f001 fea1 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2026      	movs	r0, #38	@ 0x26
 8001272:	f001 fe80 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001276:	2026      	movs	r0, #38	@ 0x26
 8001278:	f001 fe99 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2047      	movs	r0, #71	@ 0x47
 8001282:	f001 fe78 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001286:	2047      	movs	r0, #71	@ 0x47
 8001288:	f001 fe91 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2012      	movs	r0, #18
 8001292:	f001 fe70 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001296:	2012      	movs	r0, #18
 8001298:	f001 fe89 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	203a      	movs	r0, #58	@ 0x3a
 80012a2:	f001 fe68 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012a6:	203a      	movs	r0, #58	@ 0x3a
 80012a8:	f001 fe81 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2043      	movs	r0, #67	@ 0x43
 80012b2:	f001 fe60 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80012b6:	2043      	movs	r0, #67	@ 0x43
 80012b8:	f001 fe79 	bl	8002fae <HAL_NVIC_EnableIRQ>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <MX_ADC1_Init+0xc4>)
 80012d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001388 <MX_ADC1_Init+0xc8>)
 80012d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <MX_ADC1_Init+0xc4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012de:	4b29      	ldr	r3, [pc, #164]	@ (8001384 <MX_ADC1_Init+0xc4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012e4:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <MX_ADC1_Init+0xc4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ea:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <MX_ADC1_Init+0xc4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f0:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <MX_ADC1_Init+0xc4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <MX_ADC1_Init+0xc4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <MX_ADC1_Init+0xc4>)
 8001300:	4a22      	ldr	r2, [pc, #136]	@ (800138c <MX_ADC1_Init+0xcc>)
 8001302:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001304:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <MX_ADC1_Init+0xc4>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <MX_ADC1_Init+0xc4>)
 800130c:	2201      	movs	r2, #1
 800130e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <MX_ADC1_Init+0xc4>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_ADC1_Init+0xc4>)
 800131a:	2201      	movs	r2, #1
 800131c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800131e:	4819      	ldr	r0, [pc, #100]	@ (8001384 <MX_ADC1_Init+0xc4>)
 8001320:	f001 f834 	bl	800238c <HAL_ADC_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 fca7 	bl	8001c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001336:	2306      	movs	r3, #6
 8001338:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4811      	ldr	r0, [pc, #68]	@ (8001384 <MX_ADC1_Init+0xc4>)
 8001340:	f001 fb16 	bl	8002970 <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800134a:	f000 fc97 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  for(int i=0;i < NUM_SENSORS; i++){
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e00e      	b.n	8001372 <MX_ADC1_Init+0xb2>
	  sConfig.Channel = ADC_CHANNEL_0 + i;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = i + 1;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800135e:	2301      	movs	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <MX_ADC1_Init+0xc4>)
 8001368:	f001 fb02 	bl	8002970 <HAL_ADC_ConfigChannel>
  for(int i=0;i < NUM_SENSORS; i++){
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b03      	cmp	r3, #3
 8001376:	dded      	ble.n	8001354 <MX_ADC1_Init+0x94>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002ec 	.word	0x200002ec
 8001388:	40012000 	.word	0x40012000
 800138c:	0f000001 	.word	0x0f000001

08001390 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <MX_TIM9_Init+0x6c>)
 80013a4:	4a16      	ldr	r2, [pc, #88]	@ (8001400 <MX_TIM9_Init+0x70>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <MX_TIM9_Init+0x6c>)
 80013aa:	f240 3247 	movw	r2, #839	@ 0x347
 80013ae:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_TIM9_Init+0x6c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_TIM9_Init+0x6c>)
 80013b8:	2263      	movs	r2, #99	@ 0x63
 80013ba:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_TIM9_Init+0x6c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <MX_TIM9_Init+0x6c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <MX_TIM9_Init+0x6c>)
 80013ca:	f004 fa3b 	bl	8005844 <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80013d4:	f000 fc52 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013dc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	@ (80013fc <MX_TIM9_Init+0x6c>)
 80013e4:	f004 fbd0 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80013ee:	f000 fc45 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000334 	.word	0x20000334
 8001400:	40014000 	.word	0x40014000

08001404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <MX_USART1_UART_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_USART1_UART_Init+0x4c>)
 800143c:	f004 fdce 	bl	8005fdc <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001446:	f000 fc19 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000037c 	.word	0x2000037c
 8001454:	40011000 	.word	0x40011000

08001458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <MX_USART2_UART_Init+0x50>)
 8001460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001490:	f004 fda4 	bl	8005fdc <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800149a:	f000 fbef 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200003c4 	.word	0x200003c4
 80014a8:	40004400 	.word	0x40004400

080014ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <MX_USART6_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014e4:	f004 fd7a 	bl	8005fdc <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014ee:	f000 fbc5 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000040c 	.word	0x2000040c
 80014fc:	40011400 	.word	0x40011400

08001500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_DMA_Init+0x30>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <MX_DMA_Init+0x30>)
 8001510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_DMA_Init+0x30>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <MX_GPIO_Init+0x4c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <MX_GPIO_Init+0x4c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <MX_GPIO_Init+0x4c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_GPIO_Init+0x4c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <MX_GPIO_Init+0x4c>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_GPIO_Init+0x4c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <Read_Pressure_Data>:

/* USER CODE BEGIN 4 */
void Read_Pressure_Data(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < NUM_SENSORS; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e06a      	b.n	8001672 <Read_Pressure_Data+0xee>
        // ADC 채널을 각 센서 핀에 맞게 설정 (IN0, IN1, IN4, IN5)
        switch(i) {
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d816      	bhi.n	80015d0 <Read_Pressure_Data+0x4c>
 80015a2:	a201      	add	r2, pc, #4	@ (adr r2, 80015a8 <Read_Pressure_Data+0x24>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015bf 	.word	0x080015bf
 80015b0:	080015c5 	.word	0x080015c5
 80015b4:	080015cb 	.word	0x080015cb
            case 0: sConfig.Channel = ADC_CHANNEL_0; break; // IN0
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	e008      	b.n	80015d0 <Read_Pressure_Data+0x4c>
            case 1: sConfig.Channel = ADC_CHANNEL_1; break; // IN1
 80015be:	2301      	movs	r3, #1
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	e005      	b.n	80015d0 <Read_Pressure_Data+0x4c>
            case 2: sConfig.Channel = ADC_CHANNEL_4; break; // IN4
 80015c4:	2304      	movs	r3, #4
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	e002      	b.n	80015d0 <Read_Pressure_Data+0x4c>
            case 3: sConfig.Channel = ADC_CHANNEL_5; break; // IN5
 80015ca:	2305      	movs	r3, #5
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	bf00      	nop
        }

        sConfig.Rank = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
        sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	4829      	ldr	r0, [pc, #164]	@ (8001684 <Read_Pressure_Data+0x100>)
 80015de:	f001 f9c7 	bl	8002970 <HAL_ADC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <Read_Pressure_Data+0x68>
            Error_Handler();
 80015e8:	f000 fb48 	bl	8001c7c <Error_Handler>
        }

        if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 80015ec:	4825      	ldr	r0, [pc, #148]	@ (8001684 <Read_Pressure_Data+0x100>)
 80015ee:	f000 ff11 	bl	8002414 <HAL_ADC_Start>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d137      	bne.n	8001668 <Read_Pressure_Data+0xe4>
            if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015fc:	4821      	ldr	r0, [pc, #132]	@ (8001684 <Read_Pressure_Data+0x100>)
 80015fe:	f000 fff0 	bl	80025e2 <HAL_ADC_PollForConversion>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d11f      	bne.n	8001648 <Read_Pressure_Data+0xc4>
            	double rawValue = HAL_ADC_GetValue(&hadc1);
 8001608:	481e      	ldr	r0, [pc, #120]	@ (8001684 <Read_Pressure_Data+0x100>)
 800160a:	f001 f985 	bl	8002918 <HAL_ADC_GetValue>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff7f 	bl	8000514 <__aeabi_ui2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            	sensorValues[i] = ApplyLowPassFilter(rawValue, &prevSensorValues[i]);
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4a19      	ldr	r2, [pc, #100]	@ (8001688 <Read_Pressure_Data+0x104>)
 8001624:	4413      	add	r3, r2
 8001626:	4618      	mov	r0, r3
 8001628:	ed97 0b04 	vldr	d0, [r7, #16]
 800162c:	f000 fae8 	bl	8001c00 <ApplyLowPassFilter>
 8001630:	ec53 2b10 	vmov	r2, r3, d0
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fabe 	bl	8000bb8 <__aeabi_d2uiz>
 800163c:	4602      	mov	r2, r0
 800163e:	4913      	ldr	r1, [pc, #76]	@ (800168c <Read_Pressure_Data+0x108>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001646:	e00b      	b.n	8001660 <Read_Pressure_Data+0xdc>
            } else if (i == 0){
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <Read_Pressure_Data+0xd8>
            	sensorValues[0] -= 2000;
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <Read_Pressure_Data+0x108>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001656:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <Read_Pressure_Data+0x108>)
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e001      	b.n	8001660 <Read_Pressure_Data+0xdc>
            } else {
                Error_Handler();
 800165c:	f000 fb0e 	bl	8001c7c <Error_Handler>
            }
            HAL_ADC_Stop(&hadc1);
 8001660:	4808      	ldr	r0, [pc, #32]	@ (8001684 <Read_Pressure_Data+0x100>)
 8001662:	f000 ff8b 	bl	800257c <HAL_ADC_Stop>
 8001666:	e001      	b.n	800166c <Read_Pressure_Data+0xe8>
        } else {
            Error_Handler();
 8001668:	f000 fb08 	bl	8001c7c <Error_Handler>
    for (int i = 0; i < NUM_SENSORS; i++) {
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3301      	adds	r3, #1
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2b03      	cmp	r3, #3
 8001676:	dd91      	ble.n	800159c <Read_Pressure_Data+0x18>
        }
    }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002ec 	.word	0x200002ec
 8001688:	20000558 	.word	0x20000558
 800168c:	200004b4 	.word	0x200004b4

08001690 <Get_IMU_Data>:




int Get_IMU_Data(UART_HandleTypeDef* huart, char* IMUarray, double* roll, double* pitch, double* yaw, double* accelX, double* accelY, double* accelZ, double* gyroX, double* gyroY, double* gyroZ) {
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b095      	sub	sp, #84	@ 0x54
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
    unsigned char star = '*';
 800169e:	232a      	movs	r3, #42	@ 0x2a
 80016a0:	75fb      	strb	r3, [r7, #23]
    unsigned char receivedChar;
    int cnt0 = 0, cnt1 = 0, cnt2 = 0, cnt3 = 0, cnt4 = 0, cnt5 = 0, cnt6 = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016a6:	2300      	movs	r3, #0
 80016a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016aa:	2300      	movs	r3, #0
 80016ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ae:	2300      	movs	r3, #0
 80016b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80016b2:	2300      	movs	r3, #0
 80016b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016b6:	2300      	movs	r3, #0
 80016b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016ba:	2300      	movs	r3, #0
 80016bc:	637b      	str	r3, [r7, #52]	@ 0x34
    char* pos;


    // UART에서 한 글자씩 받아서 '*'인지 확인
    while (1) {
    	HAL_UART_Receive(huart, &receivedChar, 1, HAL_MAX_DELAY);
 80016be:	f107 0116 	add.w	r1, r7, #22
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c6:	2201      	movs	r2, #1
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f004 fcd7 	bl	800607c <HAL_UART_Receive>
		if (receivedChar == star) {
 80016ce:	7dbb      	ldrb	r3, [r7, #22]
 80016d0:	7dfa      	ldrb	r2, [r7, #23]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d1f3      	bne.n	80016be <Get_IMU_Data+0x2e>
			// '*' 문자를 받으면 IMU 데이터 수신 시작
			HAL_UART_Receive_DMA(huart, (uint8_t*)IMUarray, IMU_DATA_SIZE);
 80016d6:	221f      	movs	r2, #31
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f004 fd65 	bl	80061aa <HAL_UART_Receive_DMA>
			break;
 80016e0:	bf00      	nop
		}
	}

    for (int i = 1; i < IMU_DATA_SIZE; i++) {
 80016e2:	2301      	movs	r3, #1
 80016e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80016e6:	e0b1      	b.n	800184c <Get_IMU_Data+0x1bc>
		if (IMUarray[i] == ',') {
 80016e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80016f2:	d125      	bne.n	8001740 <Get_IMU_Data+0xb0>
			if (cnt0 == 0) cnt1 = i + 1;
 80016f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d103      	bne.n	8001702 <Get_IMU_Data+0x72>
 80016fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fc:	3301      	adds	r3, #1
 80016fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001700:	e01a      	b.n	8001738 <Get_IMU_Data+0xa8>
			else if (cnt0 == 1) cnt2 = i + 1;
 8001702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d103      	bne.n	8001710 <Get_IMU_Data+0x80>
 8001708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170a:	3301      	adds	r3, #1
 800170c:	647b      	str	r3, [r7, #68]	@ 0x44
 800170e:	e013      	b.n	8001738 <Get_IMU_Data+0xa8>
			else if (cnt0 == 2) cnt3 = i + 1;
 8001710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001712:	2b02      	cmp	r3, #2
 8001714:	d103      	bne.n	800171e <Get_IMU_Data+0x8e>
 8001716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001718:	3301      	adds	r3, #1
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
 800171c:	e00c      	b.n	8001738 <Get_IMU_Data+0xa8>
			else if (cnt0 == 3) cnt4 = i + 1;
 800171e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001720:	2b03      	cmp	r3, #3
 8001722:	d103      	bne.n	800172c <Get_IMU_Data+0x9c>
 8001724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001726:	3301      	adds	r3, #1
 8001728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800172a:	e005      	b.n	8001738 <Get_IMU_Data+0xa8>
			else if (cnt0 == 4) cnt5 = i + 1;
 800172c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800172e:	2b04      	cmp	r3, #4
 8001730:	d102      	bne.n	8001738 <Get_IMU_Data+0xa8>
 8001732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001734:	3301      	adds	r3, #1
 8001736:	63bb      	str	r3, [r7, #56]	@ 0x38
			cnt0++;
 8001738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173a:	3301      	adds	r3, #1
 800173c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800173e:	e078      	b.n	8001832 <Get_IMU_Data+0x1a2>
		} else {
			switch (cnt0) {
 8001740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001742:	2b06      	cmp	r3, #6
 8001744:	d875      	bhi.n	8001832 <Get_IMU_Data+0x1a2>
 8001746:	a201      	add	r2, pc, #4	@ (adr r2, 800174c <Get_IMU_Data+0xbc>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	08001769 	.word	0x08001769
 8001750:	0800177b 	.word	0x0800177b
 8001754:	0800178f 	.word	0x0800178f
 8001758:	080017a3 	.word	0x080017a3
 800175c:	080017c7 	.word	0x080017c7
 8001760:	080017eb 	.word	0x080017eb
 8001764:	0800180f 	.word	0x0800180f
				case 0: alpha[i - 1] = IMUarray[i]; break;  // Roll
 8001768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	441a      	add	r2, r3
 800176e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001770:	3b01      	subs	r3, #1
 8001772:	7811      	ldrb	r1, [r2, #0]
 8001774:	4aae      	ldr	r2, [pc, #696]	@ (8001a30 <Get_IMU_Data+0x3a0>)
 8001776:	54d1      	strb	r1, [r2, r3]
 8001778:	e05b      	b.n	8001832 <Get_IMU_Data+0x1a2>
				case 1: beta[i - cnt1] = IMUarray[i]; break;  // Pitch
 800177a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	441a      	add	r2, r3
 8001780:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001784:	1acb      	subs	r3, r1, r3
 8001786:	7811      	ldrb	r1, [r2, #0]
 8001788:	4aaa      	ldr	r2, [pc, #680]	@ (8001a34 <Get_IMU_Data+0x3a4>)
 800178a:	54d1      	strb	r1, [r2, r3]
 800178c:	e051      	b.n	8001832 <Get_IMU_Data+0x1a2>
				case 2: gamm[i - cnt2] = IMUarray[i]; break;  // Yaw
 800178e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	441a      	add	r2, r3
 8001794:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001798:	1acb      	subs	r3, r1, r3
 800179a:	7811      	ldrb	r1, [r2, #0]
 800179c:	4aa6      	ldr	r2, [pc, #664]	@ (8001a38 <Get_IMU_Data+0x3a8>)
 800179e:	54d1      	strb	r1, [r2, r3]
 80017a0:	e047      	b.n	8001832 <Get_IMU_Data+0x1a2>
				case 3: accelX[i - cnt3] = IMUarray[i]; break;  // Accel X
 80017a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	4413      	add	r3, r2
 80017a8:	7819      	ldrb	r1, [r3, #0]
 80017aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80017b4:	18d4      	adds	r4, r2, r3
 80017b6:	4608      	mov	r0, r1
 80017b8:	f7fe feac 	bl	8000514 <__aeabi_ui2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	e9c4 2300 	strd	r2, r3, [r4]
 80017c4:	e035      	b.n	8001832 <Get_IMU_Data+0x1a2>
				case 4: accelY[i - cnt4] = IMUarray[i]; break;  // Accel Y
 80017c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	4413      	add	r3, r2
 80017cc:	7819      	ldrb	r1, [r3, #0]
 80017ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80017d8:	18d4      	adds	r4, r2, r3
 80017da:	4608      	mov	r0, r1
 80017dc:	f7fe fe9a 	bl	8000514 <__aeabi_ui2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	e9c4 2300 	strd	r2, r3, [r4]
 80017e8:	e023      	b.n	8001832 <Get_IMU_Data+0x1a2>
				case 5: accelZ[i - cnt5] = IMUarray[i]; break;  // Accel Z
 80017ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	7819      	ldrb	r1, [r3, #0]
 80017f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80017fc:	18d4      	adds	r4, r2, r3
 80017fe:	4608      	mov	r0, r1
 8001800:	f7fe fe88 	bl	8000514 <__aeabi_ui2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c4 2300 	strd	r2, r3, [r4]
 800180c:	e011      	b.n	8001832 <Get_IMU_Data+0x1a2>
				case 6: gyroX[i - cnt6] = IMUarray[i]; break;  // Gyro X
 800180e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001820:	18d4      	adds	r4, r2, r3
 8001822:	4608      	mov	r0, r1
 8001824:	f7fe fe76 	bl	8000514 <__aeabi_ui2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	e9c4 2300 	strd	r2, r3, [r4]
 8001830:	bf00      	nop
			}
		}
		if (IMUarray[i] == '\r') {
 8001832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b0d      	cmp	r3, #13
 800183c:	d103      	bne.n	8001846 <Get_IMU_Data+0x1b6>
			cnt6 = i + 1;
 800183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001840:	3301      	adds	r3, #1
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
			break;
 8001844:	e006      	b.n	8001854 <Get_IMU_Data+0x1c4>
    for (int i = 1; i < IMU_DATA_SIZE; i++) {
 8001846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001848:	3301      	adds	r3, #1
 800184a:	633b      	str	r3, [r7, #48]	@ 0x30
 800184c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800184e:	2b1e      	cmp	r3, #30
 8001850:	f77f af4a 	ble.w	80016e8 <Get_IMU_Data+0x58>
		}
	}
    // 문자열이 짧은 경우 0으로 채움
       for (int j = cnt1 - 2; j < 7; j++) alpha[j] = '0';
 8001854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001856:	3b02      	subs	r3, #2
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800185a:	e007      	b.n	800186c <Get_IMU_Data+0x1dc>
 800185c:	4a74      	ldr	r2, [pc, #464]	@ (8001a30 <Get_IMU_Data+0x3a0>)
 800185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001860:	4413      	add	r3, r2
 8001862:	2230      	movs	r2, #48	@ 0x30
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001868:	3301      	adds	r3, #1
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186e:	2b06      	cmp	r3, #6
 8001870:	ddf4      	ble.n	800185c <Get_IMU_Data+0x1cc>
       for (int k = cnt2 - (cnt1); k < 8; k++) beta[k - 1] = '0';
 8001872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800187a:	e007      	b.n	800188c <Get_IMU_Data+0x1fc>
 800187c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187e:	3b01      	subs	r3, #1
 8001880:	4a6c      	ldr	r2, [pc, #432]	@ (8001a34 <Get_IMU_Data+0x3a4>)
 8001882:	2130      	movs	r1, #48	@ 0x30
 8001884:	54d1      	strb	r1, [r2, r3]
 8001886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001888:	3301      	adds	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800188c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188e:	2b07      	cmp	r3, #7
 8001890:	ddf4      	ble.n	800187c <Get_IMU_Data+0x1ec>
       for (int l = cnt3 - (cnt2); l < 8; l++) gamm[l - 1] = '0';
 8001892:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
 800189a:	e007      	b.n	80018ac <Get_IMU_Data+0x21c>
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	3b01      	subs	r3, #1
 80018a0:	4a65      	ldr	r2, [pc, #404]	@ (8001a38 <Get_IMU_Data+0x3a8>)
 80018a2:	2130      	movs	r1, #48	@ 0x30
 80018a4:	54d1      	strb	r1, [r2, r3]
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	3301      	adds	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	ddf4      	ble.n	800189c <Get_IMU_Data+0x20c>
       for (int m = cnt4 - (cnt3); m < 8; m++) accelX[m - 1] = '0';
 80018b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	623b      	str	r3, [r7, #32]
 80018ba:	e00e      	b.n	80018da <Get_IMU_Data+0x24a>
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80018c2:	3b01      	subs	r3, #1
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80018c8:	18d1      	adds	r1, r2, r3
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b5b      	ldr	r3, [pc, #364]	@ (8001a3c <Get_IMU_Data+0x3ac>)
 80018d0:	e9c1 2300 	strd	r2, r3, [r1]
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	3301      	adds	r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	2b07      	cmp	r3, #7
 80018de:	dded      	ble.n	80018bc <Get_IMU_Data+0x22c>
       for (int n = cnt5 - (cnt4); n < 8; n++) accelY[n - 1] = '0';
 80018e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	e00e      	b.n	8001908 <Get_IMU_Data+0x278>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80018f0:	3b01      	subs	r3, #1
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80018f6:	18d1      	adds	r1, r2, r3
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b4f      	ldr	r3, [pc, #316]	@ (8001a3c <Get_IMU_Data+0x3ac>)
 80018fe:	e9c1 2300 	strd	r2, r3, [r1]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3301      	adds	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b07      	cmp	r3, #7
 800190c:	dded      	ble.n	80018ea <Get_IMU_Data+0x25a>
       for (int o = cnt6 - (cnt5); o < 8; o++) accelZ[o - 1] = '0';
 800190e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	e00e      	b.n	8001936 <Get_IMU_Data+0x2a6>
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800191e:	3b01      	subs	r3, #1
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001924:	18d1      	adds	r1, r2, r3
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b44      	ldr	r3, [pc, #272]	@ (8001a3c <Get_IMU_Data+0x3ac>)
 800192c:	e9c1 2300 	strd	r2, r3, [r1]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	3301      	adds	r3, #1
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b07      	cmp	r3, #7
 800193a:	dded      	ble.n	8001918 <Get_IMU_Data+0x288>

       // 문자열을 double로 변환
       *roll = strtod(alpha, &pos);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	483b      	ldr	r0, [pc, #236]	@ (8001a30 <Get_IMU_Data+0x3a0>)
 8001944:	f00a fb0e 	bl	800bf64 <strtod>
 8001948:	eeb0 7a40 	vmov.f32	s14, s0
 800194c:	eef0 7a60 	vmov.f32	s15, s1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	ed83 7b00 	vstr	d7, [r3]
       *pitch = strtod(beta, &pos);
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	4835      	ldr	r0, [pc, #212]	@ (8001a34 <Get_IMU_Data+0x3a4>)
 800195e:	f00a fb01 	bl	800bf64 <strtod>
 8001962:	eeb0 7a40 	vmov.f32	s14, s0
 8001966:	eef0 7a60 	vmov.f32	s15, s1
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	ed83 7b00 	vstr	d7, [r3]
       *yaw = strtod(gamm, &pos);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4830      	ldr	r0, [pc, #192]	@ (8001a38 <Get_IMU_Data+0x3a8>)
 8001978:	f00a faf4 	bl	800bf64 <strtod>
 800197c:	eeb0 7a40 	vmov.f32	s14, s0
 8001980:	eef0 7a60 	vmov.f32	s15, s1
 8001984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001986:	ed83 7b00 	vstr	d7, [r3]
       *accelX = strtod(accelX, &pos);
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	4619      	mov	r1, r3
 8001990:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001992:	f00a fae7 	bl	800bf64 <strtod>
 8001996:	eeb0 7a40 	vmov.f32	s14, s0
 800199a:	eef0 7a60 	vmov.f32	s15, s1
 800199e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019a0:	ed83 7b00 	vstr	d7, [r3]
       *accelY = strtod(accelY, &pos);
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	4619      	mov	r1, r3
 80019aa:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80019ac:	f00a fada 	bl	800bf64 <strtod>
 80019b0:	eeb0 7a40 	vmov.f32	s14, s0
 80019b4:	eef0 7a60 	vmov.f32	s15, s1
 80019b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019ba:	ed83 7b00 	vstr	d7, [r3]
       *accelZ = strtod(accelZ, &pos);
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4619      	mov	r1, r3
 80019c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019c6:	f00a facd 	bl	800bf64 <strtod>
 80019ca:	eeb0 7a40 	vmov.f32	s14, s0
 80019ce:	eef0 7a60 	vmov.f32	s15, s1
 80019d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019d4:	ed83 7b00 	vstr	d7, [r3]
       *gyroX = strtod(gyroX, &pos);
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80019e0:	f00a fac0 	bl	800bf64 <strtod>
 80019e4:	eeb0 7a40 	vmov.f32	s14, s0
 80019e8:	eef0 7a60 	vmov.f32	s15, s1
 80019ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019ee:	ed83 7b00 	vstr	d7, [r3]
       *gyroY = strtod(gyroY, &pos);
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80019fa:	f00a fab3 	bl	800bf64 <strtod>
 80019fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001a02:	eef0 7a60 	vmov.f32	s15, s1
 8001a06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a08:	ed83 7b00 	vstr	d7, [r3]
       *gyroZ = strtod(gyroZ, &pos);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4619      	mov	r1, r3
 8001a12:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001a14:	f00a faa6 	bl	800bf64 <strtod>
 8001a18:	eeb0 7a40 	vmov.f32	s14, s0
 8001a1c:	eef0 7a60 	vmov.f32	s15, s1
 8001a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a22:	ed83 7b00 	vstr	d7, [r3]
}
 8001a26:	bf00      	nop
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3754      	adds	r7, #84	@ 0x54
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	20000524 	.word	0x20000524
 8001a34:	2000052c 	.word	0x2000052c
 8001a38:	20000534 	.word	0x20000534
 8001a3c:	40480000 	.word	0x40480000

08001a40 <Read_All_IMU_Data>:

void Read_All_IMU_Data(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af08      	add	r7, sp, #32
    // IMU 1 (UART1)
    if (Get_IMU_Data(&huart1, IMU1array, &roll1, &pitch1, &yaw1, &accelX1, &accelY1, &accelZ1, &gyroX1, &gyroY1, &gyroZ1)) {
 8001a46:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb0 <Read_All_IMU_Data+0x170>)
 8001a48:	9306      	str	r3, [sp, #24]
 8001a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb4 <Read_All_IMU_Data+0x174>)
 8001a4c:	9305      	str	r3, [sp, #20]
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <Read_All_IMU_Data+0x178>)
 8001a50:	9304      	str	r3, [sp, #16]
 8001a52:	4b5a      	ldr	r3, [pc, #360]	@ (8001bbc <Read_All_IMU_Data+0x17c>)
 8001a54:	9303      	str	r3, [sp, #12]
 8001a56:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc0 <Read_All_IMU_Data+0x180>)
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc4 <Read_All_IMU_Data+0x184>)
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc8 <Read_All_IMU_Data+0x188>)
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4b5a      	ldr	r3, [pc, #360]	@ (8001bcc <Read_All_IMU_Data+0x18c>)
 8001a64:	4a5a      	ldr	r2, [pc, #360]	@ (8001bd0 <Read_All_IMU_Data+0x190>)
 8001a66:	495b      	ldr	r1, [pc, #364]	@ (8001bd4 <Read_All_IMU_Data+0x194>)
 8001a68:	485b      	ldr	r0, [pc, #364]	@ (8001bd8 <Read_All_IMU_Data+0x198>)
 8001a6a:	f7ff fe11 	bl	8001690 <Get_IMU_Data>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8099 	beq.w	8001ba8 <Read_All_IMU_Data+0x168>
        roll1 = ApplyLowPassFilter(roll1, &roll1_prev);
 8001a76:	4b56      	ldr	r3, [pc, #344]	@ (8001bd0 <Read_All_IMU_Data+0x190>)
 8001a78:	ed93 7b00 	vldr	d7, [r3]
 8001a7c:	4857      	ldr	r0, [pc, #348]	@ (8001bdc <Read_All_IMU_Data+0x19c>)
 8001a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a82:	eef0 0a67 	vmov.f32	s1, s15
 8001a86:	f000 f8bb 	bl	8001c00 <ApplyLowPassFilter>
 8001a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a8e:	eef0 7a60 	vmov.f32	s15, s1
 8001a92:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd0 <Read_All_IMU_Data+0x190>)
 8001a94:	ed83 7b00 	vstr	d7, [r3]
        pitch1 = ApplyLowPassFilter(pitch1, &pitch1_prev);
 8001a98:	4b4c      	ldr	r3, [pc, #304]	@ (8001bcc <Read_All_IMU_Data+0x18c>)
 8001a9a:	ed93 7b00 	vldr	d7, [r3]
 8001a9e:	4850      	ldr	r0, [pc, #320]	@ (8001be0 <Read_All_IMU_Data+0x1a0>)
 8001aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa4:	eef0 0a67 	vmov.f32	s1, s15
 8001aa8:	f000 f8aa 	bl	8001c00 <ApplyLowPassFilter>
 8001aac:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab0:	eef0 7a60 	vmov.f32	s15, s1
 8001ab4:	4b45      	ldr	r3, [pc, #276]	@ (8001bcc <Read_All_IMU_Data+0x18c>)
 8001ab6:	ed83 7b00 	vstr	d7, [r3]
        yaw1 = ApplyLowPassFilter(yaw1, &yaw1_prev);
 8001aba:	4b43      	ldr	r3, [pc, #268]	@ (8001bc8 <Read_All_IMU_Data+0x188>)
 8001abc:	ed93 7b00 	vldr	d7, [r3]
 8001ac0:	4848      	ldr	r0, [pc, #288]	@ (8001be4 <Read_All_IMU_Data+0x1a4>)
 8001ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac6:	eef0 0a67 	vmov.f32	s1, s15
 8001aca:	f000 f899 	bl	8001c00 <ApplyLowPassFilter>
 8001ace:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad2:	eef0 7a60 	vmov.f32	s15, s1
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc8 <Read_All_IMU_Data+0x188>)
 8001ad8:	ed83 7b00 	vstr	d7, [r3]

        accelX1 = ApplyLowPassFilter(accelX1, &prevAccelX1);  // 가속도 X 축 필터 적용
 8001adc:	4b39      	ldr	r3, [pc, #228]	@ (8001bc4 <Read_All_IMU_Data+0x184>)
 8001ade:	ed93 7b00 	vldr	d7, [r3]
 8001ae2:	4841      	ldr	r0, [pc, #260]	@ (8001be8 <Read_All_IMU_Data+0x1a8>)
 8001ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae8:	eef0 0a67 	vmov.f32	s1, s15
 8001aec:	f000 f888 	bl	8001c00 <ApplyLowPassFilter>
 8001af0:	eeb0 7a40 	vmov.f32	s14, s0
 8001af4:	eef0 7a60 	vmov.f32	s15, s1
 8001af8:	4b32      	ldr	r3, [pc, #200]	@ (8001bc4 <Read_All_IMU_Data+0x184>)
 8001afa:	ed83 7b00 	vstr	d7, [r3]
        accelY1 = ApplyLowPassFilter(accelY1, &prevAccelY1);  // 가속도 Y 축 필터 적용
 8001afe:	4b30      	ldr	r3, [pc, #192]	@ (8001bc0 <Read_All_IMU_Data+0x180>)
 8001b00:	ed93 7b00 	vldr	d7, [r3]
 8001b04:	4839      	ldr	r0, [pc, #228]	@ (8001bec <Read_All_IMU_Data+0x1ac>)
 8001b06:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0a:	eef0 0a67 	vmov.f32	s1, s15
 8001b0e:	f000 f877 	bl	8001c00 <ApplyLowPassFilter>
 8001b12:	eeb0 7a40 	vmov.f32	s14, s0
 8001b16:	eef0 7a60 	vmov.f32	s15, s1
 8001b1a:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <Read_All_IMU_Data+0x180>)
 8001b1c:	ed83 7b00 	vstr	d7, [r3]
        accelZ1 = ApplyLowPassFilter(accelZ1, &prevAccelZ1);  // 가속도 Z 축 필터 적용
 8001b20:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <Read_All_IMU_Data+0x17c>)
 8001b22:	ed93 7b00 	vldr	d7, [r3]
 8001b26:	4832      	ldr	r0, [pc, #200]	@ (8001bf0 <Read_All_IMU_Data+0x1b0>)
 8001b28:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2c:	eef0 0a67 	vmov.f32	s1, s15
 8001b30:	f000 f866 	bl	8001c00 <ApplyLowPassFilter>
 8001b34:	eeb0 7a40 	vmov.f32	s14, s0
 8001b38:	eef0 7a60 	vmov.f32	s15, s1
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <Read_All_IMU_Data+0x17c>)
 8001b3e:	ed83 7b00 	vstr	d7, [r3]

        gyroX1 = ApplyLowPassFilter(gyroX1, &prevGyroX1);  // 각속도 X 축 필터 적용
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <Read_All_IMU_Data+0x178>)
 8001b44:	ed93 7b00 	vldr	d7, [r3]
 8001b48:	482a      	ldr	r0, [pc, #168]	@ (8001bf4 <Read_All_IMU_Data+0x1b4>)
 8001b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4e:	eef0 0a67 	vmov.f32	s1, s15
 8001b52:	f000 f855 	bl	8001c00 <ApplyLowPassFilter>
 8001b56:	eeb0 7a40 	vmov.f32	s14, s0
 8001b5a:	eef0 7a60 	vmov.f32	s15, s1
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <Read_All_IMU_Data+0x178>)
 8001b60:	ed83 7b00 	vstr	d7, [r3]
        gyroY1 = ApplyLowPassFilter(gyroY1, &prevGyroY1);  // 각속도 Y 축 필터 적용
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <Read_All_IMU_Data+0x174>)
 8001b66:	ed93 7b00 	vldr	d7, [r3]
 8001b6a:	4823      	ldr	r0, [pc, #140]	@ (8001bf8 <Read_All_IMU_Data+0x1b8>)
 8001b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b70:	eef0 0a67 	vmov.f32	s1, s15
 8001b74:	f000 f844 	bl	8001c00 <ApplyLowPassFilter>
 8001b78:	eeb0 7a40 	vmov.f32	s14, s0
 8001b7c:	eef0 7a60 	vmov.f32	s15, s1
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <Read_All_IMU_Data+0x174>)
 8001b82:	ed83 7b00 	vstr	d7, [r3]
        gyroZ1 = ApplyLowPassFilter(gyroZ1, &prevGyroZ1);  // 각속도 Z 축 필터 적용
 8001b86:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <Read_All_IMU_Data+0x170>)
 8001b88:	ed93 7b00 	vldr	d7, [r3]
 8001b8c:	481b      	ldr	r0, [pc, #108]	@ (8001bfc <Read_All_IMU_Data+0x1bc>)
 8001b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b92:	eef0 0a67 	vmov.f32	s1, s15
 8001b96:	f000 f833 	bl	8001c00 <ApplyLowPassFilter>
 8001b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b9e:	eef0 7a60 	vmov.f32	s15, s1
 8001ba2:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <Read_All_IMU_Data+0x170>)
 8001ba4:	ed83 7b00 	vstr	d7, [r3]
        gyroX3 = ApplyLowPassFilter(gyroX3, &prevGyroX3);
        gyroY3 = ApplyLowPassFilter(gyroY3, &prevGyroY3);
        gyroZ3 = ApplyLowPassFilter(gyroZ3, &prevGyroZ3);
    }
    */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200005d0 	.word	0x200005d0
 8001bb4:	200005c8 	.word	0x200005c8
 8001bb8:	200005c0 	.word	0x200005c0
 8001bbc:	200005a0 	.word	0x200005a0
 8001bc0:	20000598 	.word	0x20000598
 8001bc4:	20000590 	.word	0x20000590
 8001bc8:	20000550 	.word	0x20000550
 8001bcc:	20000548 	.word	0x20000548
 8001bd0:	20000540 	.word	0x20000540
 8001bd4:	200004c4 	.word	0x200004c4
 8001bd8:	2000037c 	.word	0x2000037c
 8001bdc:	20000578 	.word	0x20000578
 8001be0:	20000580 	.word	0x20000580
 8001be4:	20000588 	.word	0x20000588
 8001be8:	200005a8 	.word	0x200005a8
 8001bec:	200005b0 	.word	0x200005b0
 8001bf0:	200005b8 	.word	0x200005b8
 8001bf4:	200005d8 	.word	0x200005d8
 8001bf8:	200005e0 	.word	0x200005e0
 8001bfc:	200005e8 	.word	0x200005e8

08001c00 <ApplyLowPassFilter>:
double ApplyLowPassFilter(double currentValue, double *prevValue){
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	ed87 0b02 	vstr	d0, [r7, #8]
 8001c0a:	6078      	str	r0, [r7, #4]
	*prevValue = alpha_value * currentValue + (1.0 - alpha_value) * (*prevValue);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <ApplyLowPassFilter+0x74>)
 8001c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c16:	f7fe fcf7 	bl	8000608 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4614      	mov	r4, r2
 8001c20:	461d      	mov	r5, r3
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <ApplyLowPassFilter+0x74>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	4912      	ldr	r1, [pc, #72]	@ (8001c78 <ApplyLowPassFilter+0x78>)
 8001c2e:	f7fe fb33 	bl	8000298 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fce2 	bl	8000608 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7fe fb26 	bl	800029c <__adddf3>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	e9c1 2300 	strd	r2, r3, [r1]
	return *prevValue;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c64:	eeb0 0a47 	vmov.f32	s0, s14
 8001c68:	eef0 0a67 	vmov.f32	s1, s15
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bdb0      	pop	{r4, r5, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000
 8001c78:	3ff00000 	.word	0x3ff00000

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <Error_Handler+0x8>

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	@ (8001d54 <HAL_ADC_MspInit+0x7c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d127      	bne.n	8001d4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <HAL_ADC_MspInit+0x80>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a15      	ldr	r2, [pc, #84]	@ (8001d58 <HAL_ADC_MspInit+0x80>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_ADC_MspInit+0x80>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d58 <HAL_ADC_MspInit+0x80>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d58 <HAL_ADC_MspInit+0x80>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <HAL_ADC_MspInit+0x80>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d32:	2333      	movs	r3, #51	@ 0x33
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d36:	2303      	movs	r3, #3
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <HAL_ADC_MspInit+0x84>)
 8001d46:	f001 fd4f 	bl	80037e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	@ 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40012000 	.word	0x40012000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000

08001d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d9c <HAL_TIM_Base_MspInit+0x3c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10d      	bne.n	8001d8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_TIM_Base_MspInit+0x40>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a09      	ldr	r2, [pc, #36]	@ (8001da0 <HAL_TIM_Base_MspInit+0x40>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <HAL_TIM_Base_MspInit+0x40>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	40023800 	.word	0x40023800

08001da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08e      	sub	sp, #56	@ 0x38
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a63      	ldr	r2, [pc, #396]	@ (8001f50 <HAL_UART_MspInit+0x1ac>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d15c      	bne.n	8001e80 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	4b62      	ldr	r3, [pc, #392]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	4a61      	ldr	r2, [pc, #388]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a5a      	ldr	r2, [pc, #360]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b58      	ldr	r3, [pc, #352]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e10:	2307      	movs	r3, #7
 8001e12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	484f      	ldr	r0, [pc, #316]	@ (8001f58 <HAL_UART_MspInit+0x1b4>)
 8001e1c:	f001 fce4 	bl	80037e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e20:	4b4e      	ldr	r3, [pc, #312]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e22:	4a4f      	ldr	r2, [pc, #316]	@ (8001f60 <HAL_UART_MspInit+0x1bc>)
 8001e24:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e26:	4b4d      	ldr	r3, [pc, #308]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e34:	4b49      	ldr	r3, [pc, #292]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e3a:	4b48      	ldr	r3, [pc, #288]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e40:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e42:	4b46      	ldr	r3, [pc, #280]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e48:	4b44      	ldr	r3, [pc, #272]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e4e:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e56:	4b41      	ldr	r3, [pc, #260]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e62:	483e      	ldr	r0, [pc, #248]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e64:	f001 f8be 	bl	8002fe4 <HAL_DMA_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e6e:	f7ff ff05 	bl	8001c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a39      	ldr	r2, [pc, #228]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e78:	4a38      	ldr	r2, [pc, #224]	@ (8001f5c <HAL_UART_MspInit+0x1b8>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e7e:	e062      	b.n	8001f46 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a37      	ldr	r2, [pc, #220]	@ (8001f64 <HAL_UART_MspInit+0x1c0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12c      	bne.n	8001ee4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	4b31      	ldr	r3, [pc, #196]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4a30      	ldr	r2, [pc, #192]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a29      	ldr	r2, [pc, #164]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b27      	ldr	r3, [pc, #156]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	481e      	ldr	r0, [pc, #120]	@ (8001f58 <HAL_UART_MspInit+0x1b4>)
 8001ede:	f001 fc83 	bl	80037e8 <HAL_GPIO_Init>
}
 8001ee2:	e030      	b.n	8001f46 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <HAL_UART_MspInit+0x1c4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d12b      	bne.n	8001f46 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a17      	ldr	r2, [pc, #92]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001ef8:	f043 0320 	orr.w	r3, r3, #32
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a10      	ldr	r2, [pc, #64]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <HAL_UART_MspInit+0x1b0>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f26:	23c0      	movs	r3, #192	@ 0xc0
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f36:	2308      	movs	r3, #8
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480a      	ldr	r0, [pc, #40]	@ (8001f6c <HAL_UART_MspInit+0x1c8>)
 8001f42:	f001 fc51 	bl	80037e8 <HAL_GPIO_Init>
}
 8001f46:	bf00      	nop
 8001f48:	3738      	adds	r7, #56	@ 0x38
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	20000454 	.word	0x20000454
 8001f60:	40026440 	.word	0x40026440
 8001f64:	40004400 	.word	0x40004400
 8001f68:	40011400 	.word	0x40011400
 8001f6c:	40020800 	.word	0x40020800

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <NMI_Handler+0x4>

08001f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <MemManage_Handler+0x4>

08001f88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc6:	f000 f99d 	bl	8002304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <ADC_IRQHandler+0x10>)
 8001fd6:	f000 fb8f 	bl	80026f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200002ec 	.word	0x200002ec

08001fe4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001fe8:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001fea:	f003 fcdd 	bl	80059a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000334 	.word	0x20000334

08001ff8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <USART1_IRQHandler+0x10>)
 8001ffe:	f004 f8f9 	bl	80061f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000037c 	.word	0x2000037c

0800200c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <USART2_IRQHandler+0x10>)
 8002012:	f004 f8ef 	bl	80061f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200003c4 	.word	0x200003c4

08002020 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA2_Stream2_IRQHandler+0x10>)
 8002026:	f001 f975 	bl	8003314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000454 	.word	0x20000454

08002034 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <OTG_FS_IRQHandler+0x10>)
 800203a:	f001 fe9d 	bl	8003d78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20001ad8 	.word	0x20001ad8

08002048 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <USART6_IRQHandler+0x10>)
 800204e:	f004 f8d1 	bl	80061f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000040c 	.word	0x2000040c

0800205c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return 1;
 8002060:	2301      	movs	r3, #1
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_kill>:

int _kill(int pid, int sig)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002076:	f00a ff77 	bl	800cf68 <__errno>
 800207a:	4603      	mov	r3, r0
 800207c:	2216      	movs	r2, #22
 800207e:	601a      	str	r2, [r3, #0]
  return -1;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_exit>:

void _exit (int status)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002094:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ffe7 	bl	800206c <_kill>
  while (1) {}    /* Make sure we hang here */
 800209e:	bf00      	nop
 80020a0:	e7fd      	b.n	800209e <_exit+0x12>

080020a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e00a      	b.n	80020ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b4:	f3af 8000 	nop.w
 80020b8:	4601      	mov	r1, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	60ba      	str	r2, [r7, #8]
 80020c0:	b2ca      	uxtb	r2, r1
 80020c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dbf0      	blt.n	80020b4 <_read+0x12>
  }

  return len;
 80020d2:	687b      	ldr	r3, [r7, #4]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e009      	b.n	8002102 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	60ba      	str	r2, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	dbf1      	blt.n	80020ee <_write+0x12>
  }
  return len;
 800210a:	687b      	ldr	r3, [r7, #4]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_close>:

int _close(int file)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800213c:	605a      	str	r2, [r3, #4]
  return 0;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_isatty>:

int _isatty(int file)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002154:	2301      	movs	r3, #1
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002184:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <_sbrk+0x5c>)
 8002186:	4b15      	ldr	r3, [pc, #84]	@ (80021dc <_sbrk+0x60>)
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <_sbrk+0x64>)
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <_sbrk+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d207      	bcs.n	80021bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ac:	f00a fedc 	bl	800cf68 <__errno>
 80021b0:	4603      	mov	r3, r0
 80021b2:	220c      	movs	r2, #12
 80021b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ba:	e009      	b.n	80021d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <_sbrk+0x64>)
 80021cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20018000 	.word	0x20018000
 80021dc:	00000400 	.word	0x00000400
 80021e0:	200005f0 	.word	0x200005f0
 80021e4:	20002328 	.word	0x20002328

080021e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <SystemInit+0x20>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <SystemInit+0x20>)
 80021f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002244 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002210:	f7ff ffea 	bl	80021e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	@ (800224c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	@ (8002258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800223a:	f00a fe9b 	bl	800cf74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223e:	f7fe ff5f 	bl	8001100 <main>
  bx  lr    
 8002242:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002244:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002250:	0800ff00 	.word	0x0800ff00
  ldr r2, =_sbss
 8002254:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002258:	20002328 	.word	0x20002328

0800225c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800225c:	e7fe      	b.n	800225c <DMA1_Stream0_IRQHandler>
	...

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002264:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <HAL_Init+0x40>)
 800226a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <HAL_Init+0x40>)
 8002276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800227a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <HAL_Init+0x40>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002288:	2003      	movs	r0, #3
 800228a:	f000 fe69 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228e:	200f      	movs	r0, #15
 8002290:	f000 f808 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002294:	f7ff fcf8 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023c00 	.word	0x40023c00

080022a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_InitTick+0x54>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_InitTick+0x58>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fe81 	bl	8002fca <HAL_SYSTICK_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00e      	b.n	80022f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d80a      	bhi.n	80022ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022e0:	f000 fe49 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e4:	4a06      	ldr	r2, [pc, #24]	@ (8002300 <HAL_InitTick+0x5c>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000008 	.word	0x20000008
 80022fc:	20000010 	.word	0x20000010
 8002300:	2000000c 	.word	0x2000000c

08002304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x20>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x24>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <HAL_IncTick+0x24>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000010 	.word	0x20000010
 8002328:	200005f4 	.word	0x200005f4

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_GetTick+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	200005f4 	.word	0x200005f4

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff ffee 	bl	800232c <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_Delay+0x44>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236a:	bf00      	nop
 800236c:	f7ff ffde 	bl	800232c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000010 	.word	0x20000010

0800238c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e033      	b.n	800240a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fc94 	bl	8001cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023d2:	f023 0302 	bic.w	r3, r3, #2
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fbe8 	bl	8002bb4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023fa:	e001      	b.n	8002400 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_ADC_Start+0x1a>
 800242a:	2302      	movs	r3, #2
 800242c:	e097      	b.n	800255e <HAL_ADC_Start+0x14a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d018      	beq.n	8002476 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002454:	4b45      	ldr	r3, [pc, #276]	@ (800256c <HAL_ADC_Start+0x158>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a45      	ldr	r2, [pc, #276]	@ (8002570 <HAL_ADC_Start+0x15c>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0c9a      	lsrs	r2, r3, #18
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002468:	e002      	b.n	8002470 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d15f      	bne.n	8002544 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c2:	d106      	bne.n	80024d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c8:	f023 0206 	bic.w	r2, r3, #6
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e0:	4b24      	ldr	r3, [pc, #144]	@ (8002574 <HAL_ADC_Start+0x160>)
 80024e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024ec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d129      	bne.n	800255c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e020      	b.n	800255c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a16      	ldr	r2, [pc, #88]	@ (8002578 <HAL_ADC_Start+0x164>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d11b      	bne.n	800255c <HAL_ADC_Start+0x148>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d114      	bne.n	800255c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	e00b      	b.n	800255c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f043 0210 	orr.w	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000008 	.word	0x20000008
 8002570:	431bde83 	.word	0x431bde83
 8002574:	40012300 	.word	0x40012300
 8002578:	40012000 	.word	0x40012000

0800257c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_ADC_Stop+0x16>
 800258e:	2302      	movs	r3, #2
 8002590:	e021      	b.n	80025d6 <HAL_ADC_Stop+0x5a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025fe:	d113      	bne.n	8002628 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800260a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800260e:	d10b      	bne.n	8002628 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e063      	b.n	80026f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002628:	f7ff fe80 	bl	800232c <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800262e:	e021      	b.n	8002674 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002636:	d01d      	beq.n	8002674 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <HAL_ADC_PollForConversion+0x6c>
 800263e:	f7ff fe75 	bl	800232c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d212      	bcs.n	8002674 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d00b      	beq.n	8002674 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03d      	b.n	80026f0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d1d6      	bne.n	8002630 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f06f 0212 	mvn.w	r2, #18
 800268a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d123      	bne.n	80026ee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d11f      	bne.n	80026ee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d111      	bne.n	80026ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d049      	beq.n	80027c2 <HAL_ADC_IRQHandler+0xca>
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d046      	beq.n	80027c2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d12b      	bne.n	80027b2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800275e:	2b00      	cmp	r3, #0
 8002760:	d127      	bne.n	80027b2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800277a:	2b00      	cmp	r3, #0
 800277c:	d119      	bne.n	80027b2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0220 	bic.w	r2, r2, #32
 800278c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8bd 	bl	8002932 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0212 	mvn.w	r2, #18
 80027c0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d057      	beq.n	8002888 <HAL_ADC_IRQHandler+0x190>
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d054      	beq.n	8002888 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d139      	bne.n	8002878 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800281c:	2b00      	cmp	r3, #0
 800281e:	d12b      	bne.n	8002878 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800282a:	2b00      	cmp	r3, #0
 800282c:	d124      	bne.n	8002878 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11d      	bne.n	8002878 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d119      	bne.n	8002878 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002852:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fa97 	bl	8002dac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f06f 020c 	mvn.w	r2, #12
 8002886:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002896:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d017      	beq.n	80028ce <HAL_ADC_IRQHandler+0x1d6>
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d014      	beq.n	80028ce <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10d      	bne.n	80028ce <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f841 	bl	8002946 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0201 	mvn.w	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028dc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_ADC_IRQHandler+0x218>
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d012      	beq.n	8002910 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f043 0202 	orr.w	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f06f 0220 	mvn.w	r2, #32
 80028fe:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f82a 	bl	800295a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0220 	mvn.w	r2, #32
 800290e:	601a      	str	r2, [r3, #0]
  }
}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x1c>
 8002988:	2302      	movs	r3, #2
 800298a:	e105      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x228>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b09      	cmp	r3, #9
 800299a:	d925      	bls.n	80029e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68d9      	ldr	r1, [r3, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	3b1e      	subs	r3, #30
 80029b2:	2207      	movs	r2, #7
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43da      	mvns	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	400a      	ands	r2, r1
 80029c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68d9      	ldr	r1, [r3, #12]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	4603      	mov	r3, r0
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4403      	add	r3, r0
 80029da:	3b1e      	subs	r3, #30
 80029dc:	409a      	lsls	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	e022      	b.n	8002a2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6919      	ldr	r1, [r3, #16]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	2207      	movs	r2, #7
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	400a      	ands	r2, r1
 8002a0a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6919      	ldr	r1, [r3, #16]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4403      	add	r3, r0
 8002a24:	409a      	lsls	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d824      	bhi.n	8002a80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	3b05      	subs	r3, #5
 8002a48:	221f      	movs	r2, #31
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	400a      	ands	r2, r1
 8002a56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4618      	mov	r0, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b05      	subs	r3, #5
 8002a72:	fa00 f203 	lsl.w	r2, r0, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a7e:	e04c      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d824      	bhi.n	8002ad2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	3b23      	subs	r3, #35	@ 0x23
 8002a9a:	221f      	movs	r2, #31
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3b23      	subs	r3, #35	@ 0x23
 8002ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ad0:	e023      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b41      	subs	r3, #65	@ 0x41
 8002ae4:	221f      	movs	r2, #31
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	400a      	ands	r2, r1
 8002af2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4618      	mov	r0, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b41      	subs	r3, #65	@ 0x41
 8002b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x234>)
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a21      	ldr	r2, [pc, #132]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x238>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d109      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x1cc>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b12      	cmp	r3, #18
 8002b2e:	d105      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a19      	ldr	r2, [pc, #100]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x238>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d123      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x21e>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d003      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x1e6>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b11      	cmp	r3, #17
 8002b54:	d11b      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d111      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_ADC_ConfigChannel+0x23c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x240>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	0c9a      	lsrs	r2, r3, #18
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b80:	e002      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f9      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40012300 	.word	0x40012300
 8002ba8:	40012000 	.word	0x40012000
 8002bac:	20000008 	.word	0x20000008
 8002bb0:	431bde83 	.word	0x431bde83

08002bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bbc:	4b79      	ldr	r3, [pc, #484]	@ (8002da4 <ADC_Init+0x1f0>)
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	021a      	lsls	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	4a58      	ldr	r2, [pc, #352]	@ (8002da8 <ADC_Init+0x1f4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6899      	ldr	r1, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	e00f      	b.n	8002cb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0202 	bic.w	r2, r2, #2
 8002cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e1b      	ldrb	r3, [r3, #24]
 8002ccc:	005a      	lsls	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	035a      	lsls	r2, r3, #13
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	e007      	b.n	8002d28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	051a      	lsls	r2, r3, #20
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d6a:	025a      	lsls	r2, r3, #9
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6899      	ldr	r1, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	029a      	lsls	r2, r3, #10
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40012300 	.word	0x40012300
 8002da8:	0f000001 	.word	0x0f000001

08002dac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4907      	ldr	r1, [pc, #28]	@ (8002e5c <__NVIC_EnableIRQ+0x38>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	@ (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	@ (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	@ 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f40:	f7ff ff8e 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff29 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff3e 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff8e 	bl	8002eb4 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff31 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa2 	bl	8002f1c <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff f99c 	bl	800232c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e099      	b.n	8003134 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003020:	e00f      	b.n	8003042 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003022:	f7ff f983 	bl	800232c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b05      	cmp	r3, #5
 800302e:	d908      	bls.n	8003042 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e078      	b.n	8003134 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e8      	bne.n	8003022 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4b38      	ldr	r3, [pc, #224]	@ (800313c <HAL_DMA_Init+0x158>)
 800305c:	4013      	ands	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	2b04      	cmp	r3, #4
 800309a:	d107      	bne.n	80030ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d117      	bne.n	8003106 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fb01 	bl	80036f0 <DMA_CheckFifoParam>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2240      	movs	r2, #64	@ 0x40
 80030f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003102:	2301      	movs	r3, #1
 8003104:	e016      	b.n	8003134 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fab8 	bl	8003684 <DMA_CalcBaseAndBitshift>
 8003114:	4603      	mov	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	223f      	movs	r2, #63	@ 0x3f
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	f010803f 	.word	0xf010803f

08003140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_DMA_Start_IT+0x26>
 8003162:	2302      	movs	r3, #2
 8003164:	e040      	b.n	80031e8 <HAL_DMA_Start_IT+0xa8>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d12f      	bne.n	80031da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa4a 	bl	8003628 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	223f      	movs	r2, #63	@ 0x3f
 800319a:	409a      	lsls	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0216 	orr.w	r2, r2, #22
 80031ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0208 	orr.w	r2, r2, #8
 80031c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e005      	b.n	80031e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031fe:	f7ff f895 	bl	800232c <HAL_GetTick>
 8003202:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d008      	beq.n	8003222 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	@ 0x80
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e052      	b.n	80032c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0216 	bic.w	r2, r2, #22
 8003230:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003240:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_DMA_Abort+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0208 	bic.w	r2, r2, #8
 8003260:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003272:	e013      	b.n	800329c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003274:	f7ff f85a 	bl	800232c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b05      	cmp	r3, #5
 8003280:	d90c      	bls.n	800329c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2203      	movs	r2, #3
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e015      	b.n	80032c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e4      	bne.n	8003274 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	223f      	movs	r2, #63	@ 0x3f
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2280      	movs	r2, #128	@ 0x80
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00c      	b.n	8003308 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2205      	movs	r2, #5
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003320:	4b8e      	ldr	r3, [pc, #568]	@ (800355c <HAL_DMA_IRQHandler+0x248>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a8e      	ldr	r2, [pc, #568]	@ (8003560 <HAL_DMA_IRQHandler+0x24c>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0a9b      	lsrs	r3, r3, #10
 800332c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	2208      	movs	r2, #8
 8003340:	409a      	lsls	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01a      	beq.n	8003380 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	2208      	movs	r2, #8
 800336e:	409a      	lsls	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	2201      	movs	r2, #1
 8003386:	409a      	lsls	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	2201      	movs	r2, #1
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	2204      	movs	r2, #4
 80033bc:	409a      	lsls	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d012      	beq.n	80033ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d8:	2204      	movs	r2, #4
 80033da:	409a      	lsls	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	2210      	movs	r2, #16
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d043      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d03c      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	2210      	movs	r2, #16
 8003410:	409a      	lsls	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d018      	beq.n	8003456 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d024      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
 8003442:	e01f      	b.n	8003484 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
 8003454:	e016      	b.n	8003484 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0208 	bic.w	r2, r2, #8
 8003472:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003488:	2220      	movs	r2, #32
 800348a:	409a      	lsls	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 808f 	beq.w	80035b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8087 	beq.w	80035b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	2220      	movs	r2, #32
 80034ac:	409a      	lsls	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d136      	bne.n	800352c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0216 	bic.w	r2, r2, #22
 80034cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_DMA_IRQHandler+0x1da>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0208 	bic.w	r2, r2, #8
 80034fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003502:	223f      	movs	r2, #63	@ 0x3f
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351e:	2b00      	cmp	r3, #0
 8003520:	d07e      	beq.n	8003620 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
        }
        return;
 800352a:	e079      	b.n	8003620 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01d      	beq.n	8003576 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	2b00      	cmp	r3, #0
 800354e:	d031      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
 8003558:	e02c      	b.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
 800355a:	bf00      	nop
 800355c:	20000008 	.word	0x20000008
 8003560:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e01e      	b.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10f      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0210 	bic.w	r2, r2, #16
 8003592:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d032      	beq.n	8003622 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d022      	beq.n	800360e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2205      	movs	r2, #5
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	3301      	adds	r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d307      	bcc.n	80035fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f2      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x2cc>
 80035fa:	e000      	b.n	80035fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
 800361e:	e000      	b.n	8003622 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003620:	bf00      	nop
    }
  }
}
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003644:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b40      	cmp	r3, #64	@ 0x40
 8003654:	d108      	bne.n	8003668 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003666:	e007      	b.n	8003678 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3b10      	subs	r3, #16
 8003694:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800369e:	4a13      	ldr	r2, [pc, #76]	@ (80036ec <DMA_CalcBaseAndBitshift+0x68>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d909      	bls.n	80036c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	1d1a      	adds	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80036c4:	e007      	b.n	80036d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	aaaaaaab 	.word	0xaaaaaaab
 80036ec:	0800fab8 	.word	0x0800fab8

080036f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11f      	bne.n	800374a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d856      	bhi.n	80037be <DMA_CheckFifoParam+0xce>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <DMA_CheckFifoParam+0x28>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003729 	.word	0x08003729
 800371c:	0800373b 	.word	0x0800373b
 8003720:	08003729 	.word	0x08003729
 8003724:	080037bf 	.word	0x080037bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d046      	beq.n	80037c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003738:	e043      	b.n	80037c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003742:	d140      	bne.n	80037c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003748:	e03d      	b.n	80037c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003752:	d121      	bne.n	8003798 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d837      	bhi.n	80037ca <DMA_CheckFifoParam+0xda>
 800375a:	a201      	add	r2, pc, #4	@ (adr r2, 8003760 <DMA_CheckFifoParam+0x70>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003771 	.word	0x08003771
 8003764:	08003777 	.word	0x08003777
 8003768:	08003771 	.word	0x08003771
 800376c:	08003789 	.word	0x08003789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      break;
 8003774:	e030      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d025      	beq.n	80037ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003786:	e022      	b.n	80037ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003790:	d11f      	bne.n	80037d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003796:	e01c      	b.n	80037d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d903      	bls.n	80037a6 <DMA_CheckFifoParam+0xb6>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d003      	beq.n	80037ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037a4:	e018      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      break;
 80037aa:	e015      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00e      	beq.n	80037d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      break;
 80037bc:	e00b      	b.n	80037d6 <DMA_CheckFifoParam+0xe6>
      break;
 80037be:	bf00      	nop
 80037c0:	e00a      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
 80037c4:	e008      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
 80037c8:	e006      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e004      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
    }
  } 
  
  return status; 
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	@ 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e159      	b.n	8003ab8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	429a      	cmp	r2, r3
 800381e:	f040 8148 	bne.w	8003ab2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d005      	beq.n	800383a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003836:	2b02      	cmp	r3, #2
 8003838:	d130      	bne.n	800389c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	2203      	movs	r2, #3
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 0201 	and.w	r2, r3, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d017      	beq.n	80038d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d123      	bne.n	800392c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	08da      	lsrs	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3208      	adds	r2, #8
 80038ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	220f      	movs	r2, #15
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	08da      	lsrs	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3208      	adds	r2, #8
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a2 	beq.w	8003ab2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	4a56      	ldr	r2, [pc, #344]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800397c:	6453      	str	r3, [r2, #68]	@ 0x44
 800397e:	4b54      	ldr	r3, [pc, #336]	@ (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398a:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <HAL_GPIO_Init+0x2ec>)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a49      	ldr	r2, [pc, #292]	@ (8003ad8 <HAL_GPIO_Init+0x2f0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_Init+0x202>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a48      	ldr	r2, [pc, #288]	@ (8003adc <HAL_GPIO_Init+0x2f4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0x1fe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a47      	ldr	r2, [pc, #284]	@ (8003ae0 <HAL_GPIO_Init+0x2f8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_Init+0x1fa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a46      	ldr	r2, [pc, #280]	@ (8003ae4 <HAL_GPIO_Init+0x2fc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_Init+0x1f6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a45      	ldr	r2, [pc, #276]	@ (8003ae8 <HAL_GPIO_Init+0x300>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_Init+0x1f2>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039da:	2307      	movs	r3, #7
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	@ (8003ad4 <HAL_GPIO_Init+0x2ec>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b38      	ldr	r3, [pc, #224]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a24      	ldr	r2, [pc, #144]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5e:	4b23      	ldr	r3, [pc, #140]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a82:	4a1a      	ldr	r2, [pc, #104]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aac:	4a0f      	ldr	r2, [pc, #60]	@ (8003aec <HAL_GPIO_Init+0x304>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f aea2 	bls.w	8003804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	@ 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40013c00 	.word	0x40013c00

08003af0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e101      	b.n	8003d06 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f007 f90b 	bl	800ad38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2203      	movs	r2, #3
 8003b26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b30:	d102      	bne.n	8003b38 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fd58 	bl	80075f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7c1a      	ldrb	r2, [r3, #16]
 8003b4a:	f88d 2000 	strb.w	r2, [sp]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b52:	f003 fc37 	bl	80073c4 <USB_CoreInit>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0ce      	b.n	8003d06 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fd50 	bl	8007614 <USB_SetCurrentMode>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0bf      	b.n	8003d06 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	e04a      	b.n	8003c22 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	3315      	adds	r3, #21
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3314      	adds	r3, #20
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	b298      	uxth	r0, r3
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	332e      	adds	r3, #46	@ 0x2e
 8003bc8:	4602      	mov	r2, r0
 8003bca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	3318      	adds	r3, #24
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	331c      	adds	r3, #28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	3320      	adds	r3, #32
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	3324      	adds	r3, #36	@ 0x24
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	791b      	ldrb	r3, [r3, #4]
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3af      	bcc.n	8003b8c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e044      	b.n	8003cbc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	791b      	ldrb	r3, [r3, #4]
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3b5      	bcc.n	8003c32 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7c1a      	ldrb	r2, [r3, #16]
 8003cce:	f88d 2000 	strb.w	r2, [sp]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cd6:	f003 fce9 	bl	80076ac <USB_DevInit>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e00c      	b.n	8003d06 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fd33 	bl	800876a <USB_DevDisconnect>

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_PCD_Start+0x1c>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e022      	b.n	8003d70 <HAL_PCD_Start+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d105      	bne.n	8003d52 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f003 fc3a 	bl	80075d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f004 fce1 	bl	8008728 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b08d      	sub	sp, #52	@ 0x34
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f004 fd9f 	bl	80088d2 <USB_GetMode>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f040 848c 	bne.w	80046b4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 fd03 	bl	80087ac <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8482 	beq.w	80046b2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 fcf0 	bl	80087ac <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f002 0202 	and.w	r2, r2, #2
 8003de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 fcde 	bl	80087ac <USB_ReadInterrupts>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d161      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0210 	bic.w	r2, r2, #16
 8003e08:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	3304      	adds	r3, #4
 8003e28:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	0c5b      	lsrs	r3, r3, #17
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d124      	bne.n	8003e80 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d035      	beq.n	8003eae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	6a38      	ldr	r0, [r7, #32]
 8003e56:	f004 fb15 	bl	8008484 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e66:	441a      	add	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e78:	441a      	add	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	615a      	str	r2, [r3, #20]
 8003e7e:	e016      	b.n	8003eae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	0c5b      	lsrs	r3, r3, #17
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	2b06      	cmp	r3, #6
 8003e8a:	d110      	bne.n	8003eae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e92:	2208      	movs	r2, #8
 8003e94:	4619      	mov	r1, r3
 8003e96:	6a38      	ldr	r0, [r7, #32]
 8003e98:	f004 faf4 	bl	8008484 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ea8:	441a      	add	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0210 	orr.w	r2, r2, #16
 8003ebc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f004 fc72 	bl	80087ac <USB_ReadInterrupts>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ece:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ed2:	f040 80a7 	bne.w	8004024 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 fc77 	bl	80087d2 <USB_ReadDevAllOutEpInterrupt>
 8003ee4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003ee6:	e099      	b.n	800401c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 808e 	beq.w	8004010 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f004 fc9b 	bl	800883a <USB_ReadDevOutEPInterrupt>
 8003f04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00c      	beq.n	8003f2a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2301      	movs	r3, #1
 8003f20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fea3 	bl	8004c70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00c      	beq.n	8003f4e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	2308      	movs	r3, #8
 8003f44:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 ff79 	bl	8004e40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f64:	461a      	mov	r2, r3
 8003f66:	2310      	movs	r3, #16
 8003f68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d030      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7c:	2b80      	cmp	r3, #128	@ 0x80
 8003f7e:	d109      	bne.n	8003f94 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f92:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	78db      	ldrb	r3, [r3, #3]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d108      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f006 ffb8 	bl	800af34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	2320      	movs	r3, #32
 8003ff0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004008:	461a      	mov	r2, r3
 800400a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800400e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	3301      	adds	r3, #1
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	f47f af62 	bne.w	8003ee8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f004 fbbf 	bl	80087ac <USB_ReadInterrupts>
 800402e:	4603      	mov	r3, r0
 8004030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004034:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004038:	f040 80db 	bne.w	80041f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f004 fbe0 	bl	8008806 <USB_ReadDevAllInEpInterrupt>
 8004046:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800404c:	e0cd      	b.n	80041ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80c2 	beq.w	80041de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f004 fc06 	bl	8008876 <USB_ReadDevInEPInterrupt>
 800406a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d057      	beq.n	8004126 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	2201      	movs	r2, #1
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800408a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	43db      	mvns	r3, r3
 8004090:	69f9      	ldr	r1, [r7, #28]
 8004092:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004096:	4013      	ands	r3, r2
 8004098:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a6:	461a      	mov	r2, r3
 80040a8:	2301      	movs	r3, #1
 80040aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	799b      	ldrb	r3, [r3, #6]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d132      	bne.n	800411a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	3320      	adds	r3, #32
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4403      	add	r3, r0
 80040d4:	331c      	adds	r3, #28
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4419      	add	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4403      	add	r3, r0
 80040e8:	3320      	adds	r3, #32
 80040ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d113      	bne.n	800411a <HAL_PCD_IRQHandler+0x3a2>
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	3324      	adds	r3, #36	@ 0x24
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d108      	bne.n	800411a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004112:	461a      	mov	r2, r3
 8004114:	2101      	movs	r1, #1
 8004116:	f004 fc0d 	bl	8008934 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	b2db      	uxtb	r3, r3
 800411e:	4619      	mov	r1, r3
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f006 fe82 	bl	800ae2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800413c:	461a      	mov	r2, r3
 800413e:	2308      	movs	r3, #8
 8004140:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004158:	461a      	mov	r2, r3
 800415a:	2310      	movs	r3, #16
 800415c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004174:	461a      	mov	r2, r3
 8004176:	2340      	movs	r3, #64	@ 0x40
 8004178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d023      	beq.n	80041cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004184:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004186:	6a38      	ldr	r0, [r7, #32]
 8004188:	f003 fbf4 	bl	8007974 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800418c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	3310      	adds	r3, #16
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	3304      	adds	r3, #4
 800419e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	78db      	ldrb	r3, [r3, #3]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d108      	bne.n	80041ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2200      	movs	r2, #0
 80041ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f006 fecf 	bl	800af58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c6:	461a      	mov	r2, r3
 80041c8:	2302      	movs	r3, #2
 80041ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fcbd 	bl	8004b58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	3301      	adds	r3, #1
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f47f af2e 	bne.w	800404e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f004 fad8 	bl	80087ac <USB_ReadInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004206:	d122      	bne.n	800424e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004222:	2b01      	cmp	r3, #1
 8004224:	d108      	bne.n	8004238 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800422e:	2100      	movs	r1, #0
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fea3 	bl	8004f7c <HAL_PCDEx_LPM_Callback>
 8004236:	e002      	b.n	800423e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f006 fe6d 	bl	800af18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800424c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f004 faaa 	bl	80087ac <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004262:	d112      	bne.n	800428a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d102      	bne.n	800427a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f006 fe29 	bl	800aecc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004288:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f004 fa8c 	bl	80087ac <USB_ReadInterrupts>
 8004294:	4603      	mov	r3, r0
 8004296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429e:	f040 80b7 	bne.w	8004410 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2110      	movs	r1, #16
 80042bc:	4618      	mov	r0, r3
 80042be:	f003 fb59 	bl	8007974 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c6:	e046      	b.n	8004356 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d4:	461a      	mov	r2, r3
 80042d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004308:	461a      	mov	r2, r3
 800430a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800430e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800432a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800432e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800434a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800434e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004352:	3301      	adds	r3, #1
 8004354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	791b      	ldrb	r3, [r3, #4]
 800435a:	461a      	mov	r2, r3
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	4293      	cmp	r3, r2
 8004360:	d3b2      	bcc.n	80042c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004370:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004374:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7bdb      	ldrb	r3, [r3, #15]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800438e:	f043 030b 	orr.w	r3, r3, #11
 8004392:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043a4:	f043 030b 	orr.w	r3, r3, #11
 80043a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80043aa:	e015      	b.n	80043d8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043be:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80043c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043d2:	f043 030b 	orr.w	r3, r3, #11
 80043d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80043ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f004 fa9a 	bl	8008934 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800440e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f004 f9c9 	bl	80087ac <USB_ReadInterrupts>
 800441a:	4603      	mov	r3, r0
 800441c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004424:	d123      	bne.n	800446e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f004 fa5f 	bl	80088ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f003 fb16 	bl	8007a66 <USB_GetDevSpeed>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681c      	ldr	r4, [r3, #0]
 8004446:	f001 f9c9 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 800444a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004450:	461a      	mov	r2, r3
 8004452:	4620      	mov	r0, r4
 8004454:	f003 f81a 	bl	800748c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f006 fd0e 	bl	800ae7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800446c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f004 f99a 	bl	80087ac <USB_ReadInterrupts>
 8004478:	4603      	mov	r3, r0
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b08      	cmp	r3, #8
 8004480:	d10a      	bne.n	8004498 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f006 fceb 	bl	800ae5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f002 0208 	and.w	r2, r2, #8
 8004496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f004 f985 	bl	80087ac <USB_ReadInterrupts>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a8:	2b80      	cmp	r3, #128	@ 0x80
 80044aa:	d123      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044b8:	2301      	movs	r3, #1
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80044bc:	e014      	b.n	80044e8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fb0a 	bl	8004af6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	3301      	adds	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	791b      	ldrb	r3, [r3, #4]
 80044ec:	461a      	mov	r2, r3
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d3e4      	bcc.n	80044be <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f004 f957 	bl	80087ac <USB_ReadInterrupts>
 80044fe:	4603      	mov	r3, r0
 8004500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004508:	d13c      	bne.n	8004584 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800450a:	2301      	movs	r3, #1
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
 800450e:	e02b      	b.n	8004568 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	3318      	adds	r3, #24
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d115      	bne.n	8004562 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004536:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004538:	2b00      	cmp	r3, #0
 800453a:	da12      	bge.n	8004562 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	3317      	adds	r3, #23
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004558:	b2db      	uxtb	r3, r3
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 faca 	bl	8004af6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	3301      	adds	r3, #1
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	791b      	ldrb	r3, [r3, #4]
 800456c:	461a      	mov	r2, r3
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	4293      	cmp	r3, r2
 8004572:	d3cd      	bcc.n	8004510 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f004 f90f 	bl	80087ac <USB_ReadInterrupts>
 800458e:	4603      	mov	r3, r0
 8004590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004594:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004598:	d156      	bne.n	8004648 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800459a:	2301      	movs	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
 800459e:	e045      	b.n	800462c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d12e      	bne.n	8004626 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	da2b      	bge.n	8004626 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80045da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045de:	429a      	cmp	r2, r3
 80045e0:	d121      	bne.n	8004626 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800461e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004622:	6053      	str	r3, [r2, #4]
            break;
 8004624:	e008      	b.n	8004638 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	3301      	adds	r3, #1
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	791b      	ldrb	r3, [r3, #4]
 8004630:	461a      	mov	r2, r3
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	4293      	cmp	r3, r2
 8004636:	d3b3      	bcc.n	80045a0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f004 f8ad 	bl	80087ac <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465c:	d10a      	bne.n	8004674 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f006 fc8c 	bl	800af7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f004 f897 	bl	80087ac <USB_ReadInterrupts>
 800467e:	4603      	mov	r3, r0
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b04      	cmp	r3, #4
 8004686:	d115      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f006 fc7c 	bl	800af98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	e000      	b.n	80046b4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80046b2:	bf00      	nop
    }
  }
}
 80046b4:	3734      	adds	r7, #52	@ 0x34
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd90      	pop	{r4, r7, pc}

080046ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_PCD_SetAddress+0x1a>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e012      	b.n	80046fa <HAL_PCD_SetAddress+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f003 fff6 	bl	80086dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	4608      	mov	r0, r1
 800470c:	4611      	mov	r1, r2
 800470e:	461a      	mov	r2, r3
 8004710:	4603      	mov	r3, r0
 8004712:	70fb      	strb	r3, [r7, #3]
 8004714:	460b      	mov	r3, r1
 8004716:	803b      	strh	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	da0f      	bge.n	8004748 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	3310      	adds	r3, #16
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4413      	add	r3, r2
 800473c:	3304      	adds	r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	705a      	strb	r2, [r3, #1]
 8004746:	e00f      	b.n	8004768 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	3304      	adds	r3, #4
 8004760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	b2da      	uxtb	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004774:	883b      	ldrh	r3, [r7, #0]
 8004776:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	78ba      	ldrb	r2, [r7, #2]
 8004782:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004796:	78bb      	ldrb	r3, [r7, #2]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d102      	bne.n	80047a2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_PCD_EP_Open+0xae>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e00e      	b.n	80047ce <HAL_PCD_EP_Open+0xcc>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68f9      	ldr	r1, [r7, #12]
 80047be:	4618      	mov	r0, r3
 80047c0:	f003 f976 	bl	8007ab0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80047cc:	7afb      	ldrb	r3, [r7, #11]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	da0f      	bge.n	800480a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	f003 020f 	and.w	r2, r3, #15
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	3310      	adds	r3, #16
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	3304      	adds	r3, #4
 8004800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	705a      	strb	r2, [r3, #1]
 8004808:	e00f      	b.n	800482a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 020f 	and.w	r2, r3, #15
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	4413      	add	r3, r2
 8004820:	3304      	adds	r3, #4
 8004822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_PCD_EP_Close+0x6e>
 8004840:	2302      	movs	r3, #2
 8004842:	e00e      	b.n	8004862 <HAL_PCD_EP_Close+0x8c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	4618      	mov	r0, r3
 8004854:	f003 f9b4 	bl	8007bc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	460b      	mov	r3, r1
 8004878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	f003 020f 	and.w	r2, r3, #15
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	3304      	adds	r3, #4
 8004892:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2200      	movs	r2, #0
 80048a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2200      	movs	r2, #0
 80048aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ac:	7afb      	ldrb	r3, [r7, #11]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	799b      	ldrb	r3, [r3, #6]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d102      	bne.n	80048c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	799b      	ldrb	r3, [r3, #6]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6979      	ldr	r1, [r7, #20]
 80048d2:	f003 fa51 	bl	8007d78 <USB_EPStartXfer>

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	f003 020f 	and.w	r2, r3, #15
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	460b      	mov	r3, r1
 800491e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004920:	7afb      	ldrb	r3, [r7, #11]
 8004922:	f003 020f 	and.w	r2, r3, #15
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	3310      	adds	r3, #16
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	3304      	adds	r3, #4
 8004936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2201      	movs	r2, #1
 800494e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004950:	7afb      	ldrb	r3, [r7, #11]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	b2da      	uxtb	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	799b      	ldrb	r3, [r3, #6]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	799b      	ldrb	r3, [r3, #6]
 8004972:	461a      	mov	r2, r3
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	f003 f9ff 	bl	8007d78 <USB_EPStartXfer>

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	7912      	ldrb	r2, [r2, #4]
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e04f      	b.n	8004a42 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da0f      	bge.n	80049ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	f003 020f 	and.w	r2, r3, #15
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3310      	adds	r3, #16
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	3304      	adds	r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	705a      	strb	r2, [r3, #1]
 80049c8:	e00d      	b.n	80049e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	3304      	adds	r3, #4
 80049de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_PCD_EP_SetStall+0x82>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e01d      	b.n	8004a42 <HAL_PCD_EP_SetStall+0xbe>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f003 fd8d 	bl	8008534 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	7999      	ldrb	r1, [r3, #6]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a32:	461a      	mov	r2, r3
 8004a34:	f003 ff7e 	bl	8008934 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	7912      	ldrb	r2, [r2, #4]
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e042      	b.n	8004aee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	da0f      	bge.n	8004a90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 020f 	and.w	r2, r3, #15
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	3310      	adds	r3, #16
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4413      	add	r3, r2
 8004a84:	3304      	adds	r3, #4
 8004a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	705a      	strb	r2, [r3, #1]
 8004a8e:	e00f      	b.n	8004ab0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_PCD_EP_ClrStall+0x86>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e00e      	b.n	8004aee <HAL_PCD_EP_ClrStall+0xa4>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f003 fd96 	bl	8008610 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	460b      	mov	r3, r1
 8004b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	da0c      	bge.n	8004b24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	f003 020f 	and.w	r2, r3, #15
 8004b10:	4613      	mov	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	3310      	adds	r3, #16
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3304      	adds	r3, #4
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e00c      	b.n	8004b3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 020f 	and.w	r2, r3, #15
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4413      	add	r3, r2
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f003 fbb5 	bl	80082b4 <USB_EPStopXfer>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	@ 0x28
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	3310      	adds	r3, #16
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d901      	bls.n	8004b90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e06b      	b.n	8004c68 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d902      	bls.n	8004bac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3303      	adds	r3, #3
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bb4:	e02a      	b.n	8004c0c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d902      	bls.n	8004bd2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3303      	adds	r3, #3
 8004bd6:	089b      	lsrs	r3, r3, #2
 8004bd8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68d9      	ldr	r1, [r3, #12]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4603      	mov	r3, r0
 8004bee:	6978      	ldr	r0, [r7, #20]
 8004bf0:	f003 fc0a 	bl	8008408 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	441a      	add	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	441a      	add	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d809      	bhi.n	8004c36 <PCD_WriteEmptyTxFifo+0xde>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d203      	bcs.n	8004c36 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1bf      	bne.n	8004bb6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d811      	bhi.n	8004c66 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	2201      	movs	r2, #1
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	6939      	ldr	r1, [r7, #16]
 8004c5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c62:	4013      	ands	r3, r2
 8004c64:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	333c      	adds	r3, #60	@ 0x3c
 8004c88:	3304      	adds	r3, #4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	799b      	ldrb	r3, [r3, #6]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d17b      	bne.n	8004d9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d015      	beq.n	8004cdc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4a61      	ldr	r2, [pc, #388]	@ (8004e38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	f240 80b9 	bls.w	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80b3 	beq.w	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cd8:	6093      	str	r3, [r2, #8]
 8004cda:	e0a7      	b.n	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	6093      	str	r3, [r2, #8]
 8004cf8:	e098      	b.n	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 8093 	bne.w	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4a4b      	ldr	r2, [pc, #300]	@ (8004e38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d90f      	bls.n	8004d2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	461a      	mov	r2, r3
 8004d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2a:	6093      	str	r3, [r2, #8]
 8004d2c:	e07e      	b.n	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3304      	adds	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	0159      	lsls	r1, r3, #5
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	440b      	add	r3, r1
 8004d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5a:	1ad2      	subs	r2, r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d114      	bne.n	8004d90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	f003 fdda 	bl	8008934 <USB_EP0_OutStart>
 8004d80:	e006      	b.n	8004d90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	441a      	add	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f006 f82c 	bl	800adf4 <HAL_PCD_DataOutStageCallback>
 8004d9c:	e046      	b.n	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4a26      	ldr	r2, [pc, #152]	@ (8004e3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d124      	bne.n	8004df0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc2:	6093      	str	r3, [r2, #8]
 8004dc4:	e032      	b.n	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ddc:	461a      	mov	r2, r3
 8004dde:	2320      	movs	r3, #32
 8004de0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f006 f803 	bl	800adf4 <HAL_PCD_DataOutStageCallback>
 8004dee:	e01d      	b.n	8004e2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d114      	bne.n	8004e20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d108      	bne.n	8004e20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	f003 fd8a 	bl	8008934 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f005 ffe4 	bl	800adf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	4f54300a 	.word	0x4f54300a
 8004e3c:	4f54310a 	.word	0x4f54310a

08004e40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	333c      	adds	r3, #60	@ 0x3c
 8004e58:	3304      	adds	r3, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a15      	ldr	r2, [pc, #84]	@ (8004ec8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d90e      	bls.n	8004e94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f005 ff9b 	bl	800add0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d90c      	bls.n	8004ebc <PCD_EP_OutSetupPacket_int+0x7c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	799b      	ldrb	r3, [r3, #6]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d108      	bne.n	8004ebc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	f003 fd3c 	bl	8008934 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	4f54300a 	.word	0x4f54300a

08004ecc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004eea:	883b      	ldrh	r3, [r7, #0]
 8004eec:	0419      	lsls	r1, r3, #16
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ef8:	e028      	b.n	8004f4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	4413      	add	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e00d      	b.n	8004f2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	3340      	adds	r3, #64	@ 0x40
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4413      	add	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	3301      	adds	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3ec      	bcc.n	8004f0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f34:	883b      	ldrh	r3, [r7, #0]
 8004f36:	0418      	lsls	r0, r3, #16
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	4302      	orrs	r2, r0
 8004f44:	3340      	adds	r3, #64	@ 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e267      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d075      	beq.n	800509e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fb2:	4b88      	ldr	r3, [pc, #544]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fbe:	4b85      	ldr	r3, [pc, #532]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d112      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fca:	4b82      	ldr	r3, [pc, #520]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d05b      	beq.n	800509c <HAL_RCC_OscConfig+0x108>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d157      	bne.n	800509c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e242      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff8:	d106      	bne.n	8005008 <HAL_RCC_OscConfig+0x74>
 8004ffa:	4b76      	ldr	r3, [pc, #472]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a75      	ldr	r2, [pc, #468]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e01d      	b.n	8005044 <HAL_RCC_OscConfig+0xb0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x98>
 8005012:	4b70      	ldr	r3, [pc, #448]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6f      	ldr	r2, [pc, #444]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b6d      	ldr	r3, [pc, #436]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a6c      	ldr	r2, [pc, #432]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e00b      	b.n	8005044 <HAL_RCC_OscConfig+0xb0>
 800502c:	4b69      	ldr	r3, [pc, #420]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a68      	ldr	r2, [pc, #416]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	4b66      	ldr	r3, [pc, #408]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a65      	ldr	r2, [pc, #404]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 800503e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d013      	beq.n	8005074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fd f96e 	bl	800232c <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005054:	f7fd f96a 	bl	800232c <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	@ 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e207      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005066:	4b5b      	ldr	r3, [pc, #364]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0xc0>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fd f95a 	bl	800232c <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800507c:	f7fd f956 	bl	800232c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	@ 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e1f3      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508e:	4b51      	ldr	r3, [pc, #324]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0xe8>
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d063      	beq.n	8005172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050aa:	4b4a      	ldr	r3, [pc, #296]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b6:	4b47      	ldr	r3, [pc, #284]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d11c      	bne.n	80050fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c2:	4b44      	ldr	r3, [pc, #272]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d116      	bne.n	80050fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	4b41      	ldr	r3, [pc, #260]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_RCC_OscConfig+0x152>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e1c7      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e6:	4b3b      	ldr	r3, [pc, #236]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4937      	ldr	r1, [pc, #220]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fa:	e03a      	b.n	8005172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005104:	4b34      	ldr	r3, [pc, #208]	@ (80051d8 <HAL_RCC_OscConfig+0x244>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fd f90f 	bl	800232c <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005112:	f7fd f90b 	bl	800232c <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e1a8      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005124:	4b2b      	ldr	r3, [pc, #172]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	4b28      	ldr	r3, [pc, #160]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4925      	ldr	r1, [pc, #148]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]
 8005144:	e015      	b.n	8005172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005146:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <HAL_RCC_OscConfig+0x244>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fd f8ee 	bl	800232c <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005154:	f7fd f8ea 	bl	800232c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e187      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005166:	4b1b      	ldr	r3, [pc, #108]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d036      	beq.n	80051ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005186:	4b15      	ldr	r3, [pc, #84]	@ (80051dc <HAL_RCC_OscConfig+0x248>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fd f8ce 	bl	800232c <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005194:	f7fd f8ca 	bl	800232c <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e167      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <HAL_RCC_OscConfig+0x240>)
 80051a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x200>
 80051b2:	e01b      	b.n	80051ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b4:	4b09      	ldr	r3, [pc, #36]	@ (80051dc <HAL_RCC_OscConfig+0x248>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7fd f8b7 	bl	800232c <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c0:	e00e      	b.n	80051e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c2:	f7fd f8b3 	bl	800232c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d907      	bls.n	80051e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e150      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
 80051d4:	40023800 	.word	0x40023800
 80051d8:	42470000 	.word	0x42470000
 80051dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e0:	4b88      	ldr	r3, [pc, #544]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80051e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ea      	bne.n	80051c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8097 	beq.w	8005328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fe:	4b81      	ldr	r3, [pc, #516]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10f      	bne.n	800522a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	4b7d      	ldr	r3, [pc, #500]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	4a7c      	ldr	r2, [pc, #496]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005218:	6413      	str	r3, [r2, #64]	@ 0x40
 800521a:	4b7a      	ldr	r3, [pc, #488]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	4b77      	ldr	r3, [pc, #476]	@ (8005408 <HAL_RCC_OscConfig+0x474>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d118      	bne.n	8005268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005236:	4b74      	ldr	r3, [pc, #464]	@ (8005408 <HAL_RCC_OscConfig+0x474>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a73      	ldr	r2, [pc, #460]	@ (8005408 <HAL_RCC_OscConfig+0x474>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fd f873 	bl	800232c <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fd f86f 	bl	800232c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e10c      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525c:	4b6a      	ldr	r3, [pc, #424]	@ (8005408 <HAL_RCC_OscConfig+0x474>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x2ea>
 8005270:	4b64      	ldr	r3, [pc, #400]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005274:	4a63      	ldr	r2, [pc, #396]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	6713      	str	r3, [r2, #112]	@ 0x70
 800527c:	e01c      	b.n	80052b8 <HAL_RCC_OscConfig+0x324>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b05      	cmp	r3, #5
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x30c>
 8005286:	4b5f      	ldr	r3, [pc, #380]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	4a5e      	ldr	r2, [pc, #376]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	6713      	str	r3, [r2, #112]	@ 0x70
 8005292:	4b5c      	ldr	r3, [pc, #368]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005296:	4a5b      	ldr	r2, [pc, #364]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6713      	str	r3, [r2, #112]	@ 0x70
 800529e:	e00b      	b.n	80052b8 <HAL_RCC_OscConfig+0x324>
 80052a0:	4b58      	ldr	r3, [pc, #352]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a4:	4a57      	ldr	r2, [pc, #348]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ac:	4b55      	ldr	r3, [pc, #340]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	4a54      	ldr	r2, [pc, #336]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052b2:	f023 0304 	bic.w	r3, r3, #4
 80052b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fd f834 	bl	800232c <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	e00a      	b.n	80052de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fd f830 	bl	800232c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0cb      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052de:	4b49      	ldr	r3, [pc, #292]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0ee      	beq.n	80052c8 <HAL_RCC_OscConfig+0x334>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ec:	f7fd f81e 	bl	800232c <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f2:	e00a      	b.n	800530a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f4:	f7fd f81a 	bl	800232c <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0b5      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530a:	4b3e      	ldr	r3, [pc, #248]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ee      	bne.n	80052f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531c:	4b39      	ldr	r3, [pc, #228]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	4a38      	ldr	r2, [pc, #224]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005326:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80a1 	beq.w	8005474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005332:	4b34      	ldr	r3, [pc, #208]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b08      	cmp	r3, #8
 800533c:	d05c      	beq.n	80053f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d141      	bne.n	80053ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b31      	ldr	r3, [pc, #196]	@ (800540c <HAL_RCC_OscConfig+0x478>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fc ffee 	bl	800232c <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005354:	f7fc ffea 	bl	800232c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e087      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	4b27      	ldr	r3, [pc, #156]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	3b01      	subs	r3, #1
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	061b      	lsls	r3, r3, #24
 8005396:	491b      	ldr	r1, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539c:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <HAL_RCC_OscConfig+0x478>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a2:	f7fc ffc3 	bl	800232c <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fc ffbf 	bl	800232c <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e05c      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053bc:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x416>
 80053c8:	e054      	b.n	8005474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b10      	ldr	r3, [pc, #64]	@ (800540c <HAL_RCC_OscConfig+0x478>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fc ffac 	bl	800232c <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fc ffa8 	bl	800232c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e045      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <HAL_RCC_OscConfig+0x470>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x444>
 80053f6:	e03d      	b.n	8005474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e038      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
 8005404:	40023800 	.word	0x40023800
 8005408:	40007000 	.word	0x40007000
 800540c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005410:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <HAL_RCC_OscConfig+0x4ec>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d028      	beq.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d121      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	429a      	cmp	r2, r3
 8005438:	d11a      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005440:	4013      	ands	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005448:	4293      	cmp	r3, r2
 800544a:	d111      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	3b01      	subs	r3, #1
 800545a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d107      	bne.n	8005470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800

08005484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0cc      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005498:	4b68      	ldr	r3, [pc, #416]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d90c      	bls.n	80054c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b65      	ldr	r3, [pc, #404]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b63      	ldr	r3, [pc, #396]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0b8      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d8:	4b59      	ldr	r3, [pc, #356]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4a58      	ldr	r2, [pc, #352]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f0:	4b53      	ldr	r3, [pc, #332]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a52      	ldr	r2, [pc, #328]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fc:	4b50      	ldr	r3, [pc, #320]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	494d      	ldr	r1, [pc, #308]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d044      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d107      	bne.n	8005532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005522:	4b47      	ldr	r3, [pc, #284]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d119      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d003      	beq.n	8005542 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800553e:	2b03      	cmp	r3, #3
 8005540:	d107      	bne.n	8005552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005542:	4b3f      	ldr	r3, [pc, #252]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e06f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005552:	4b3b      	ldr	r3, [pc, #236]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e067      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005562:	4b37      	ldr	r3, [pc, #220]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f023 0203 	bic.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4934      	ldr	r1, [pc, #208]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005574:	f7fc feda 	bl	800232c <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	e00a      	b.n	8005592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557c:	f7fc fed6 	bl	800232c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e04f      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	4b2b      	ldr	r3, [pc, #172]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 020c 	and.w	r2, r3, #12
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1eb      	bne.n	800557c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055a4:	4b25      	ldr	r3, [pc, #148]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d20c      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b22      	ldr	r3, [pc, #136]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b20      	ldr	r3, [pc, #128]	@ (800563c <HAL_RCC_ClockConfig+0x1b8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e032      	b.n	8005632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d8:	4b19      	ldr	r3, [pc, #100]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4916      	ldr	r1, [pc, #88]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	490e      	ldr	r1, [pc, #56]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800560a:	f000 f821 	bl	8005650 <HAL_RCC_GetSysClockFreq>
 800560e:	4602      	mov	r2, r0
 8005610:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	490a      	ldr	r1, [pc, #40]	@ (8005644 <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	5ccb      	ldrb	r3, [r1, r3]
 800561e:	fa22 f303 	lsr.w	r3, r2, r3
 8005622:	4a09      	ldr	r2, [pc, #36]	@ (8005648 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005626:	4b09      	ldr	r3, [pc, #36]	@ (800564c <HAL_RCC_ClockConfig+0x1c8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fc fe3a 	bl	80022a4 <HAL_InitTick>

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023c00 	.word	0x40023c00
 8005640:	40023800 	.word	0x40023800
 8005644:	0800faa0 	.word	0x0800faa0
 8005648:	20000008 	.word	0x20000008
 800564c:	2000000c 	.word	0x2000000c

08005650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005654:	b090      	sub	sp, #64	@ 0x40
 8005656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005668:	4b59      	ldr	r3, [pc, #356]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	2b08      	cmp	r3, #8
 8005672:	d00d      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0x40>
 8005674:	2b08      	cmp	r3, #8
 8005676:	f200 80a1 	bhi.w	80057bc <HAL_RCC_GetSysClockFreq+0x16c>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x34>
 800567e:	2b04      	cmp	r3, #4
 8005680:	d003      	beq.n	800568a <HAL_RCC_GetSysClockFreq+0x3a>
 8005682:	e09b      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005684:	4b53      	ldr	r3, [pc, #332]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005686:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005688:	e09b      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800568a:	4b53      	ldr	r3, [pc, #332]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800568c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800568e:	e098      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005690:	4b4f      	ldr	r3, [pc, #316]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005698:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800569a:	4b4d      	ldr	r3, [pc, #308]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d028      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a6:	4b4a      	ldr	r3, [pc, #296]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	099b      	lsrs	r3, r3, #6
 80056ac:	2200      	movs	r2, #0
 80056ae:	623b      	str	r3, [r7, #32]
 80056b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056b8:	2100      	movs	r1, #0
 80056ba:	4b47      	ldr	r3, [pc, #284]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80056bc:	fb03 f201 	mul.w	r2, r3, r1
 80056c0:	2300      	movs	r3, #0
 80056c2:	fb00 f303 	mul.w	r3, r0, r3
 80056c6:	4413      	add	r3, r2
 80056c8:	4a43      	ldr	r2, [pc, #268]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80056ca:	fba0 1202 	umull	r1, r2, r0, r2
 80056ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056d0:	460a      	mov	r2, r1
 80056d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80056d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d6:	4413      	add	r3, r2
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056dc:	2200      	movs	r2, #0
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	61fa      	str	r2, [r7, #28]
 80056e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80056ea:	f7fb fad5 	bl	8000c98 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4613      	mov	r3, r2
 80056f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056f6:	e053      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f8:	4b35      	ldr	r3, [pc, #212]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	099b      	lsrs	r3, r3, #6
 80056fe:	2200      	movs	r2, #0
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	617a      	str	r2, [r7, #20]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800570a:	f04f 0b00 	mov.w	fp, #0
 800570e:	4652      	mov	r2, sl
 8005710:	465b      	mov	r3, fp
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	0159      	lsls	r1, r3, #5
 800571c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005720:	0150      	lsls	r0, r2, #5
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	ebb2 080a 	subs.w	r8, r2, sl
 800572a:	eb63 090b 	sbc.w	r9, r3, fp
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800573a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800573e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005742:	ebb2 0408 	subs.w	r4, r2, r8
 8005746:	eb63 0509 	sbc.w	r5, r3, r9
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	00eb      	lsls	r3, r5, #3
 8005754:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005758:	00e2      	lsls	r2, r4, #3
 800575a:	4614      	mov	r4, r2
 800575c:	461d      	mov	r5, r3
 800575e:	eb14 030a 	adds.w	r3, r4, sl
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	eb45 030b 	adc.w	r3, r5, fp
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005776:	4629      	mov	r1, r5
 8005778:	028b      	lsls	r3, r1, #10
 800577a:	4621      	mov	r1, r4
 800577c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005780:	4621      	mov	r1, r4
 8005782:	028a      	lsls	r2, r1, #10
 8005784:	4610      	mov	r0, r2
 8005786:	4619      	mov	r1, r3
 8005788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578a:	2200      	movs	r2, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	60fa      	str	r2, [r7, #12]
 8005790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005794:	f7fb fa80 	bl	8000c98 <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4613      	mov	r3, r2
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057a0:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	3301      	adds	r3, #1
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80057b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057ba:	e002      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057bc:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80057be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3740      	adds	r7, #64	@ 0x40
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ce:	bf00      	nop
 80057d0:	40023800 	.word	0x40023800
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	017d7840 	.word	0x017d7840

080057dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e0:	4b03      	ldr	r3, [pc, #12]	@ (80057f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057e2:	681b      	ldr	r3, [r3, #0]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20000008 	.word	0x20000008

080057f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057f8:	f7ff fff0 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	0a9b      	lsrs	r3, r3, #10
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4903      	ldr	r1, [pc, #12]	@ (8005818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40023800 	.word	0x40023800
 8005818:	0800fab0 	.word	0x0800fab0

0800581c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005820:	f7ff ffdc 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8005824:	4602      	mov	r2, r0
 8005826:	4b05      	ldr	r3, [pc, #20]	@ (800583c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	0b5b      	lsrs	r3, r3, #13
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	4903      	ldr	r1, [pc, #12]	@ (8005840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005832:	5ccb      	ldrb	r3, [r1, r3]
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40023800 	.word	0x40023800
 8005840:	0800fab0 	.word	0x0800fab0

08005844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e041      	b.n	80058da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fc fa78 	bl	8001d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 fa70 	bl	8005d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e044      	b.n	8005986 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <HAL_TIM_Base_Start_IT+0xb0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d018      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005926:	d013      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1a      	ldr	r2, [pc, #104]	@ (8005998 <HAL_TIM_Base_Start_IT+0xb4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00e      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a19      	ldr	r2, [pc, #100]	@ (800599c <HAL_TIM_Base_Start_IT+0xb8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d009      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a17      	ldr	r2, [pc, #92]	@ (80059a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a16      	ldr	r2, [pc, #88]	@ (80059a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d111      	bne.n	8005974 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b06      	cmp	r3, #6
 8005960:	d010      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0201 	orr.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005972:	e007      	b.n	8005984 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40010000 	.word	0x40010000
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40014000 	.word	0x40014000

080059a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d020      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01b      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0202 	mvn.w	r2, #2
 80059dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f999 	bl	8005d2a <HAL_TIM_IC_CaptureCallback>
 80059f8:	e005      	b.n	8005a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f98b 	bl	8005d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f99c 	bl	8005d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d020      	beq.n	8005a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01b      	beq.n	8005a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0204 	mvn.w	r2, #4
 8005a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f973 	bl	8005d2a <HAL_TIM_IC_CaptureCallback>
 8005a44:	e005      	b.n	8005a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f965 	bl	8005d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f976 	bl	8005d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d020      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01b      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0208 	mvn.w	r2, #8
 8005a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f94d 	bl	8005d2a <HAL_TIM_IC_CaptureCallback>
 8005a90:	e005      	b.n	8005a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f93f 	bl	8005d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f950 	bl	8005d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d020      	beq.n	8005af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0210 	mvn.w	r2, #16
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f927 	bl	8005d2a <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f919 	bl	8005d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f92a 	bl	8005d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00c      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0201 	mvn.w	r2, #1
 8005b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fb fa70 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00c      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d007      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa48 	bl	8005fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00c      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d007      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8fb 	bl	8005d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00c      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0220 	mvn.w	r2, #32
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa1a 	bl	8005fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e0b4      	b.n	8005d0e <HAL_TIM_ConfigClockSource+0x186>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bdc:	d03e      	beq.n	8005c5c <HAL_TIM_ConfigClockSource+0xd4>
 8005bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be2:	f200 8087 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bea:	f000 8086 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x172>
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bf2:	d87f      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b70      	cmp	r3, #112	@ 0x70
 8005bf6:	d01a      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0xa6>
 8005bf8:	2b70      	cmp	r3, #112	@ 0x70
 8005bfa:	d87b      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b60      	cmp	r3, #96	@ 0x60
 8005bfe:	d050      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8005c00:	2b60      	cmp	r3, #96	@ 0x60
 8005c02:	d877      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	2b50      	cmp	r3, #80	@ 0x50
 8005c06:	d03c      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xfa>
 8005c08:	2b50      	cmp	r3, #80	@ 0x50
 8005c0a:	d873      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b40      	cmp	r3, #64	@ 0x40
 8005c0e:	d058      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	d86f      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b30      	cmp	r3, #48	@ 0x30
 8005c16:	d064      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c18:	2b30      	cmp	r3, #48	@ 0x30
 8005c1a:	d86b      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d060      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d867      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d05c      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d05a      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c2c:	e062      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c3e:	f000 f999 	bl	8005f74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	609a      	str	r2, [r3, #8]
      break;
 8005c5a:	e04f      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c6c:	f000 f982 	bl	8005f74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c7e:	609a      	str	r2, [r3, #8]
      break;
 8005c80:	e03c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f000 f8f6 	bl	8005e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2150      	movs	r1, #80	@ 0x50
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f94f 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 8005ca0:	e02c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f000 f915 	bl	8005ede <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2160      	movs	r1, #96	@ 0x60
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f93f 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 8005cc0:	e01c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f000 f8d6 	bl	8005e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2140      	movs	r1, #64	@ 0x40
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f92f 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 8005ce0:	e00c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f000 f926 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 8005cf2:	e003      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf8:	e000      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a3a      	ldr	r2, [pc, #232]	@ (8005e64 <TIM_Base_SetConfig+0xfc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00f      	beq.n	8005da0 <TIM_Base_SetConfig+0x38>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0x38>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a37      	ldr	r2, [pc, #220]	@ (8005e68 <TIM_Base_SetConfig+0x100>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0x38>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a36      	ldr	r2, [pc, #216]	@ (8005e6c <TIM_Base_SetConfig+0x104>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0x38>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a35      	ldr	r2, [pc, #212]	@ (8005e70 <TIM_Base_SetConfig+0x108>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d108      	bne.n	8005db2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e64 <TIM_Base_SetConfig+0xfc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01b      	beq.n	8005df2 <TIM_Base_SetConfig+0x8a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc0:	d017      	beq.n	8005df2 <TIM_Base_SetConfig+0x8a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a28      	ldr	r2, [pc, #160]	@ (8005e68 <TIM_Base_SetConfig+0x100>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <TIM_Base_SetConfig+0x8a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a27      	ldr	r2, [pc, #156]	@ (8005e6c <TIM_Base_SetConfig+0x104>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00f      	beq.n	8005df2 <TIM_Base_SetConfig+0x8a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a26      	ldr	r2, [pc, #152]	@ (8005e70 <TIM_Base_SetConfig+0x108>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <TIM_Base_SetConfig+0x8a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a25      	ldr	r2, [pc, #148]	@ (8005e74 <TIM_Base_SetConfig+0x10c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_Base_SetConfig+0x8a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a24      	ldr	r2, [pc, #144]	@ (8005e78 <TIM_Base_SetConfig+0x110>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a23      	ldr	r2, [pc, #140]	@ (8005e7c <TIM_Base_SetConfig+0x114>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d108      	bne.n	8005e04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8005e64 <TIM_Base_SetConfig+0xfc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d103      	bne.n	8005e38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d105      	bne.n	8005e56 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f023 0201 	bic.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	611a      	str	r2, [r3, #16]
  }
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800

08005e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f023 030a 	bic.w	r3, r3, #10
 8005ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b087      	sub	sp, #28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f023 0210 	bic.w	r2, r3, #16
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	031b      	lsls	r3, r3, #12
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f043 0307 	orr.w	r3, r3, #7
 8005f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	609a      	str	r2, [r3, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	021a      	lsls	r2, r3, #8
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	609a      	str	r2, [r3, #8]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e042      	b.n	8006074 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb fece 	bl	8001da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2224      	movs	r2, #36	@ 0x24
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800601e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 ff5b 	bl	8006edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	@ 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b20      	cmp	r3, #32
 800609a:	f040 8081 	bne.w	80061a0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <HAL_UART_Receive+0x2e>
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e079      	b.n	80061a2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2222      	movs	r2, #34	@ 0x22
 80060b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060c2:	f7fc f933 	bl	800232c <HAL_GetTick>
 80060c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	88fa      	ldrh	r2, [r7, #6]
 80060d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060dc:	d108      	bne.n	80060f0 <HAL_UART_Receive+0x74>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	e003      	b.n	80060f8 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80060f8:	e047      	b.n	800618a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	2120      	movs	r1, #32
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fc2f 	bl	8006968 <UART_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e042      	b.n	80061a2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10c      	bne.n	800613c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612e:	b29a      	uxth	r2, r3
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	3302      	adds	r3, #2
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	e01f      	b.n	800617c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006144:	d007      	beq.n	8006156 <HAL_UART_Receive+0xda>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <HAL_UART_Receive+0xe8>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e008      	b.n	8006176 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006170:	b2da      	uxtb	r2, r3
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	3301      	adds	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1b2      	bne.n	80060fa <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	e000      	b.n	80061a2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80061a0:	2302      	movs	r3, #2
  }
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3720      	adds	r7, #32
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d112      	bne.n	80061ea <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_UART_Receive_DMA+0x26>
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e00b      	b.n	80061ec <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	461a      	mov	r2, r3
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fc1b 	bl	8006a1c <UART_Start_Receive_DMA>
 80061e6:	4603      	mov	r3, r0
 80061e8:	e000      	b.n	80061ec <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
  }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b0ba      	sub	sp, #232	@ 0xe8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800621a:	2300      	movs	r3, #0
 800621c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006220:	2300      	movs	r3, #0
 8006222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10f      	bne.n	800625a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <HAL_UART_IRQHandler+0x66>
 8006246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fd83 	bl	8006d5e <UART_Receive_IT>
      return;
 8006258:	e25b      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800625a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80de 	beq.w	8006420 <HAL_UART_IRQHandler+0x22c>
 8006264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006274:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 80d1 	beq.w	8006420 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <HAL_UART_IRQHandler+0xae>
 800628a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629a:	f043 0201 	orr.w	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <HAL_UART_IRQHandler+0xd2>
 80062ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	f043 0202 	orr.w	r2, r3, #2
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_UART_IRQHandler+0xf6>
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	f043 0204 	orr.w	r2, r3, #4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d011      	beq.n	800631a <HAL_UART_IRQHandler+0x126>
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d105      	bne.n	800630e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006312:	f043 0208 	orr.w	r2, r3, #8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 81f2 	beq.w	8006708 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <HAL_UART_IRQHandler+0x14e>
 8006330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fd0e 	bl	8006d5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	bf0c      	ite	eq
 8006350:	2301      	moveq	r3, #1
 8006352:	2300      	movne	r3, #0
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <HAL_UART_IRQHandler+0x17a>
 8006366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d04f      	beq.n	800640e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fc16 	bl	8006ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637e:	2b40      	cmp	r3, #64	@ 0x40
 8006380:	d141      	bne.n	8006406 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800639c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1d9      	bne.n	8006382 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d013      	beq.n	80063fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063da:	4a7e      	ldr	r2, [pc, #504]	@ (80065d4 <HAL_UART_IRQHandler+0x3e0>)
 80063dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fc ff74 	bl	80032d0 <HAL_DMA_Abort_IT>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80063f8:	4610      	mov	r0, r2
 80063fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fc:	e00e      	b.n	800641c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f99e 	bl	8006740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006404:	e00a      	b.n	800641c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f99a 	bl	8006740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640c:	e006      	b.n	800641c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f996 	bl	8006740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800641a:	e175      	b.n	8006708 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	bf00      	nop
    return;
 800641e:	e173      	b.n	8006708 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006424:	2b01      	cmp	r3, #1
 8006426:	f040 814f 	bne.w	80066c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800642a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8148 	beq.w	80066c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8141 	beq.w	80066c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006466:	2b40      	cmp	r3, #64	@ 0x40
 8006468:	f040 80b6 	bne.w	80065d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8145 	beq.w	800670c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800648a:	429a      	cmp	r2, r3
 800648c:	f080 813e 	bcs.w	800670c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006496:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a2:	f000 8088 	beq.w	80065b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	330c      	adds	r3, #12
 80064ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1d9      	bne.n	80064a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3314      	adds	r3, #20
 80064f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006516:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800651a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800651e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e1      	bne.n	80064f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3314      	adds	r3, #20
 8006534:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800653e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3314      	adds	r3, #20
 800654e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006552:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006554:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006558:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e3      	bne.n	800652e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006586:	f023 0310 	bic.w	r3, r3, #16
 800658a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006598:	65ba      	str	r2, [r7, #88]	@ 0x58
 800659a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800659e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e3      	bne.n	8006574 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fc fe1d 	bl	80031f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f8c1 	bl	8006754 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d2:	e09b      	b.n	800670c <HAL_UART_IRQHandler+0x518>
 80065d4:	08006c67 	.word	0x08006c67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 808e 	beq.w	8006710 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80065f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8089 	beq.w	8006710 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006614:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006622:	647a      	str	r2, [r7, #68]	@ 0x44
 8006624:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e3      	bne.n	80065fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	623b      	str	r3, [r7, #32]
   return(result);
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3314      	adds	r3, #20
 8006656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800665a:	633a      	str	r2, [r7, #48]	@ 0x30
 800665c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e3      	bne.n	8006636 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	60fb      	str	r3, [r7, #12]
   return(result);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	330c      	adds	r3, #12
 800669c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066a0:	61fa      	str	r2, [r7, #28]
 80066a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	69b9      	ldr	r1, [r7, #24]
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	617b      	str	r3, [r7, #20]
   return(result);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e3      	bne.n	800667c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f847 	bl	8006754 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066c6:	e023      	b.n	8006710 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <HAL_UART_IRQHandler+0x4f4>
 80066d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fad4 	bl	8006c8e <UART_Transmit_IT>
    return;
 80066e6:	e014      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00e      	beq.n	8006712 <HAL_UART_IRQHandler+0x51e>
 80066f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fb14 	bl	8006d2e <UART_EndTransmit_IT>
    return;
 8006706:	e004      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
    return;
 8006708:	bf00      	nop
 800670a:	e002      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
      return;
 800670c:	bf00      	nop
 800670e:	e000      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
      return;
 8006710:	bf00      	nop
  }
}
 8006712:	37e8      	adds	r7, #232	@ 0xe8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b09c      	sub	sp, #112	@ 0x70
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d172      	bne.n	800686e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800678a:	2200      	movs	r2, #0
 800678c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800678e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800679e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80067ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067b0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3314      	adds	r3, #20
 80067c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80067da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80067e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3314      	adds	r3, #20
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	623b      	str	r3, [r7, #32]
   return(result);
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800680c:	663b      	str	r3, [r7, #96]	@ 0x60
 800680e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006816:	633a      	str	r2, [r7, #48]	@ 0x30
 8006818:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800681c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800682a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800682c:	2220      	movs	r2, #32
 800682e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006836:	2b01      	cmp	r3, #1
 8006838:	d119      	bne.n	800686e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	330c      	adds	r3, #12
 8006840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	60fb      	str	r3, [r7, #12]
   return(result);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0310 	bic.w	r3, r3, #16
 8006850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	330c      	adds	r3, #12
 8006858:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800685a:	61fa      	str	r2, [r7, #28]
 800685c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	69b9      	ldr	r1, [r7, #24]
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	617b      	str	r3, [r7, #20]
   return(result);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e5      	bne.n	800683a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800686e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006870:	2200      	movs	r2, #0
 8006872:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	2b01      	cmp	r3, #1
 800687a:	d106      	bne.n	800688a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800687c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800687e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006880:	4619      	mov	r1, r3
 8006882:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006884:	f7ff ff66 	bl	8006754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006888:	e002      	b.n	8006890 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800688a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800688c:	f7fa fbe0 	bl	8001050 <HAL_UART_RxCpltCallback>
}
 8006890:	bf00      	nop
 8006892:	3770      	adds	r7, #112	@ 0x70
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d108      	bne.n	80068c6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ff48 	bl	8006754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068c4:	e002      	b.n	80068cc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff ff30 	bl	800672c <HAL_UART_RxHalfCpltCallback>
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f0:	2b80      	cmp	r3, #128	@ 0x80
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b21      	cmp	r3, #33	@ 0x21
 8006906:	d108      	bne.n	800691a <UART_DMAError+0x46>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006914:	68b8      	ldr	r0, [r7, #8]
 8006916:	f000 f91b 	bl	8006b50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006924:	2b40      	cmp	r3, #64	@ 0x40
 8006926:	bf0c      	ite	eq
 8006928:	2301      	moveq	r3, #1
 800692a:	2300      	movne	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b22      	cmp	r3, #34	@ 0x22
 800693a:	d108      	bne.n	800694e <UART_DMAError+0x7a>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006948:	68b8      	ldr	r0, [r7, #8]
 800694a:	f000 f929 	bl	8006ba0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006952:	f043 0210 	orr.w	r2, r3, #16
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695a:	68b8      	ldr	r0, [r7, #8]
 800695c:	f7ff fef0 	bl	8006740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	4613      	mov	r3, r2
 8006976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006978:	e03b      	b.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006980:	d037      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006982:	f7fb fcd3 	bl	800232c <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	6a3a      	ldr	r2, [r7, #32]
 800698e:	429a      	cmp	r2, r3
 8006990:	d302      	bcc.n	8006998 <UART_WaitOnFlagUntilTimeout+0x30>
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e03a      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d023      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b80      	cmp	r3, #128	@ 0x80
 80069ae:	d020      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b40      	cmp	r3, #64	@ 0x40
 80069b4:	d01d      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d116      	bne.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f8e0 	bl	8006ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2208      	movs	r2, #8
 80069e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e00f      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4013      	ands	r3, r2
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d0b4      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b098      	sub	sp, #96	@ 0x60
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2222      	movs	r2, #34	@ 0x22
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a48:	4a3e      	ldr	r2, [pc, #248]	@ (8006b44 <UART_Start_Receive_DMA+0x128>)
 8006a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a50:	4a3d      	ldr	r2, [pc, #244]	@ (8006b48 <UART_Start_Receive_DMA+0x12c>)
 8006a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a58:	4a3c      	ldr	r2, [pc, #240]	@ (8006b4c <UART_Start_Receive_DMA+0x130>)
 8006a5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a60:	2200      	movs	r2, #0
 8006a62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a64:	f107 0308 	add.w	r3, r7, #8
 8006a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4619      	mov	r1, r3
 8006a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f7fc fb60 	bl	8003140 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a80:	2300      	movs	r3, #0
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d019      	beq.n	8006ad2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006abe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e5      	bne.n	8006a9e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3314      	adds	r3, #20
 8006ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3314      	adds	r3, #20
 8006af0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006af2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006af4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e5      	bne.n	8006ad2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	617b      	str	r3, [r7, #20]
   return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3314      	adds	r3, #20
 8006b24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b26:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6a39      	ldr	r1, [r7, #32]
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e5      	bne.n	8006b06 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3760      	adds	r7, #96	@ 0x60
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	0800676d 	.word	0x0800676d
 8006b48:	08006899 	.word	0x08006899
 8006b4c:	080068d5 	.word	0x080068d5

08006b50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b089      	sub	sp, #36	@ 0x24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	61ba      	str	r2, [r7, #24]
 8006b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6979      	ldr	r1, [r7, #20]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	613b      	str	r3, [r7, #16]
   return(result);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006b94:	bf00      	nop
 8006b96:	3724      	adds	r7, #36	@ 0x24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b095      	sub	sp, #84	@ 0x54
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e5      	bne.n	8006bdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d119      	bne.n	8006c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0310 	bic.w	r3, r3, #16
 8006c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	330c      	adds	r3, #12
 8006c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c38:	61ba      	str	r2, [r7, #24]
 8006c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e5      	bne.n	8006c18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c5a:	bf00      	nop
 8006c5c:	3754      	adds	r7, #84	@ 0x54
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff fd5d 	bl	8006740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c86:	bf00      	nop
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b21      	cmp	r3, #33	@ 0x21
 8006ca0:	d13e      	bne.n	8006d20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006caa:	d114      	bne.n	8006cd6 <UART_Transmit_IT+0x48>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d110      	bne.n	8006cd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	1c9a      	adds	r2, r3, #2
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	621a      	str	r2, [r3, #32]
 8006cd4:	e008      	b.n	8006ce8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	1c59      	adds	r1, r3, #1
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6211      	str	r1, [r2, #32]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10f      	bne.n	8006d1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e000      	b.n	8006d22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d20:	2302      	movs	r3, #2
  }
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fce2 	bl	8006718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b08c      	sub	sp, #48	@ 0x30
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b22      	cmp	r3, #34	@ 0x22
 8006d70:	f040 80ae 	bne.w	8006ed0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d7c:	d117      	bne.n	8006dae <UART_Receive_IT+0x50>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d113      	bne.n	8006dae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	1c9a      	adds	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dac:	e026      	b.n	8006dfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc0:	d007      	beq.n	8006dd2 <UART_Receive_IT+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <UART_Receive_IT+0x82>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	e008      	b.n	8006df2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d15d      	bne.n	8006ecc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0220 	bic.w	r2, r2, #32
 8006e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d135      	bne.n	8006ec2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 0310 	bic.w	r3, r3, #16
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7c:	623a      	str	r2, [r7, #32]
 8006e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	69f9      	ldr	r1, [r7, #28]
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	2b10      	cmp	r3, #16
 8006e9c:	d10a      	bne.n	8006eb4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff fc4a 	bl	8006754 <HAL_UARTEx_RxEventCallback>
 8006ec0:	e002      	b.n	8006ec8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fa f8c4 	bl	8001050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e002      	b.n	8006ed2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e000      	b.n	8006ed2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
  }
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3730      	adds	r7, #48	@ 0x30
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee0:	b0c0      	sub	sp, #256	@ 0x100
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef8:	68d9      	ldr	r1, [r3, #12]
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	ea40 0301 	orr.w	r3, r0, r1
 8006f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f34:	f021 010c 	bic.w	r1, r1, #12
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f42:	430b      	orrs	r3, r1
 8006f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f56:	6999      	ldr	r1, [r3, #24]
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	ea40 0301 	orr.w	r3, r0, r1
 8006f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80071a8 <UART_SetConfig+0x2cc>)
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d005      	beq.n	8006f7c <UART_SetConfig+0xa0>
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b8d      	ldr	r3, [pc, #564]	@ (80071ac <UART_SetConfig+0x2d0>)
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d104      	bne.n	8006f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fe fc4e 	bl	800581c <HAL_RCC_GetPCLK2Freq>
 8006f80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f84:	e003      	b.n	8006f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f86:	f7fe fc35 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8006f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f98:	f040 810c 	bne.w	80071b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	1891      	adds	r1, r2, r2
 8006fb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006fb6:	415b      	adcs	r3, r3
 8006fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	eb12 0801 	adds.w	r8, r2, r1
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	eb43 0901 	adc.w	r9, r3, r1
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fde:	4690      	mov	r8, r2
 8006fe0:	4699      	mov	r9, r3
 8006fe2:	4623      	mov	r3, r4
 8006fe4:	eb18 0303 	adds.w	r3, r8, r3
 8006fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fec:	462b      	mov	r3, r5
 8006fee:	eb49 0303 	adc.w	r3, r9, r3
 8006ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007002:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800700a:	460b      	mov	r3, r1
 800700c:	18db      	adds	r3, r3, r3
 800700e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007010:	4613      	mov	r3, r2
 8007012:	eb42 0303 	adc.w	r3, r2, r3
 8007016:	657b      	str	r3, [r7, #84]	@ 0x54
 8007018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800701c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007020:	f7f9 fe3a 	bl	8000c98 <__aeabi_uldivmod>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4b61      	ldr	r3, [pc, #388]	@ (80071b0 <UART_SetConfig+0x2d4>)
 800702a:	fba3 2302 	umull	r2, r3, r3, r2
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	011c      	lsls	r4, r3, #4
 8007032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007036:	2200      	movs	r2, #0
 8007038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800703c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007044:	4642      	mov	r2, r8
 8007046:	464b      	mov	r3, r9
 8007048:	1891      	adds	r1, r2, r2
 800704a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800704c:	415b      	adcs	r3, r3
 800704e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007054:	4641      	mov	r1, r8
 8007056:	eb12 0a01 	adds.w	sl, r2, r1
 800705a:	4649      	mov	r1, r9
 800705c:	eb43 0b01 	adc.w	fp, r3, r1
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800706c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007074:	4692      	mov	sl, r2
 8007076:	469b      	mov	fp, r3
 8007078:	4643      	mov	r3, r8
 800707a:	eb1a 0303 	adds.w	r3, sl, r3
 800707e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007082:	464b      	mov	r3, r9
 8007084:	eb4b 0303 	adc.w	r3, fp, r3
 8007088:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007098:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800709c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070a0:	460b      	mov	r3, r1
 80070a2:	18db      	adds	r3, r3, r3
 80070a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070a6:	4613      	mov	r3, r2
 80070a8:	eb42 0303 	adc.w	r3, r2, r3
 80070ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070b6:	f7f9 fdef 	bl	8000c98 <__aeabi_uldivmod>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	4b3b      	ldr	r3, [pc, #236]	@ (80071b0 <UART_SetConfig+0x2d4>)
 80070c2:	fba3 2301 	umull	r2, r3, r3, r1
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	2264      	movs	r2, #100	@ 0x64
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	1acb      	subs	r3, r1, r3
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070d6:	4b36      	ldr	r3, [pc, #216]	@ (80071b0 <UART_SetConfig+0x2d4>)
 80070d8:	fba3 2302 	umull	r2, r3, r3, r2
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070e4:	441c      	add	r4, r3
 80070e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	1891      	adds	r1, r2, r2
 80070fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007100:	415b      	adcs	r3, r3
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007108:	4641      	mov	r1, r8
 800710a:	1851      	adds	r1, r2, r1
 800710c:	6339      	str	r1, [r7, #48]	@ 0x30
 800710e:	4649      	mov	r1, r9
 8007110:	414b      	adcs	r3, r1
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007120:	4659      	mov	r1, fp
 8007122:	00cb      	lsls	r3, r1, #3
 8007124:	4651      	mov	r1, sl
 8007126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712a:	4651      	mov	r1, sl
 800712c:	00ca      	lsls	r2, r1, #3
 800712e:	4610      	mov	r0, r2
 8007130:	4619      	mov	r1, r3
 8007132:	4603      	mov	r3, r0
 8007134:	4642      	mov	r2, r8
 8007136:	189b      	adds	r3, r3, r2
 8007138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800713c:	464b      	mov	r3, r9
 800713e:	460a      	mov	r2, r1
 8007140:	eb42 0303 	adc.w	r3, r2, r3
 8007144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007154:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800715c:	460b      	mov	r3, r1
 800715e:	18db      	adds	r3, r3, r3
 8007160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007162:	4613      	mov	r3, r2
 8007164:	eb42 0303 	adc.w	r3, r2, r3
 8007168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800716a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800716e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007172:	f7f9 fd91 	bl	8000c98 <__aeabi_uldivmod>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <UART_SetConfig+0x2d4>)
 800717c:	fba3 1302 	umull	r1, r3, r3, r2
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	2164      	movs	r1, #100	@ 0x64
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	3332      	adds	r3, #50	@ 0x32
 800718e:	4a08      	ldr	r2, [pc, #32]	@ (80071b0 <UART_SetConfig+0x2d4>)
 8007190:	fba2 2303 	umull	r2, r3, r2, r3
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	f003 0207 	and.w	r2, r3, #7
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4422      	add	r2, r4
 80071a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071a4:	e106      	b.n	80073b4 <UART_SetConfig+0x4d8>
 80071a6:	bf00      	nop
 80071a8:	40011000 	.word	0x40011000
 80071ac:	40011400 	.word	0x40011400
 80071b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	1891      	adds	r1, r2, r2
 80071cc:	6239      	str	r1, [r7, #32]
 80071ce:	415b      	adcs	r3, r3
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071d6:	4641      	mov	r1, r8
 80071d8:	1854      	adds	r4, r2, r1
 80071da:	4649      	mov	r1, r9
 80071dc:	eb43 0501 	adc.w	r5, r3, r1
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	00eb      	lsls	r3, r5, #3
 80071ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ee:	00e2      	lsls	r2, r4, #3
 80071f0:	4614      	mov	r4, r2
 80071f2:	461d      	mov	r5, r3
 80071f4:	4643      	mov	r3, r8
 80071f6:	18e3      	adds	r3, r4, r3
 80071f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071fc:	464b      	mov	r3, r9
 80071fe:	eb45 0303 	adc.w	r3, r5, r3
 8007202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007212:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007222:	4629      	mov	r1, r5
 8007224:	008b      	lsls	r3, r1, #2
 8007226:	4621      	mov	r1, r4
 8007228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800722c:	4621      	mov	r1, r4
 800722e:	008a      	lsls	r2, r1, #2
 8007230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007234:	f7f9 fd30 	bl	8000c98 <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4b60      	ldr	r3, [pc, #384]	@ (80073c0 <UART_SetConfig+0x4e4>)
 800723e:	fba3 2302 	umull	r2, r3, r3, r2
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	011c      	lsls	r4, r3, #4
 8007246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800724a:	2200      	movs	r2, #0
 800724c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007250:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	1891      	adds	r1, r2, r2
 800725e:	61b9      	str	r1, [r7, #24]
 8007260:	415b      	adcs	r3, r3
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007268:	4641      	mov	r1, r8
 800726a:	1851      	adds	r1, r2, r1
 800726c:	6139      	str	r1, [r7, #16]
 800726e:	4649      	mov	r1, r9
 8007270:	414b      	adcs	r3, r1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007280:	4659      	mov	r1, fp
 8007282:	00cb      	lsls	r3, r1, #3
 8007284:	4651      	mov	r1, sl
 8007286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800728a:	4651      	mov	r1, sl
 800728c:	00ca      	lsls	r2, r1, #3
 800728e:	4610      	mov	r0, r2
 8007290:	4619      	mov	r1, r3
 8007292:	4603      	mov	r3, r0
 8007294:	4642      	mov	r2, r8
 8007296:	189b      	adds	r3, r3, r2
 8007298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800729c:	464b      	mov	r3, r9
 800729e:	460a      	mov	r2, r1
 80072a0:	eb42 0303 	adc.w	r3, r2, r3
 80072a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072c0:	4649      	mov	r1, r9
 80072c2:	008b      	lsls	r3, r1, #2
 80072c4:	4641      	mov	r1, r8
 80072c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ca:	4641      	mov	r1, r8
 80072cc:	008a      	lsls	r2, r1, #2
 80072ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072d2:	f7f9 fce1 	bl	8000c98 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	4b38      	ldr	r3, [pc, #224]	@ (80073c0 <UART_SetConfig+0x4e4>)
 80072de:	fba3 2301 	umull	r2, r3, r3, r1
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	2264      	movs	r2, #100	@ 0x64
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	1acb      	subs	r3, r1, r3
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	3332      	adds	r3, #50	@ 0x32
 80072f0:	4a33      	ldr	r2, [pc, #204]	@ (80073c0 <UART_SetConfig+0x4e4>)
 80072f2:	fba2 2303 	umull	r2, r3, r2, r3
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072fc:	441c      	add	r4, r3
 80072fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007302:	2200      	movs	r2, #0
 8007304:	673b      	str	r3, [r7, #112]	@ 0x70
 8007306:	677a      	str	r2, [r7, #116]	@ 0x74
 8007308:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800730c:	4642      	mov	r2, r8
 800730e:	464b      	mov	r3, r9
 8007310:	1891      	adds	r1, r2, r2
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	415b      	adcs	r3, r3
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800731c:	4641      	mov	r1, r8
 800731e:	1851      	adds	r1, r2, r1
 8007320:	6039      	str	r1, [r7, #0]
 8007322:	4649      	mov	r1, r9
 8007324:	414b      	adcs	r3, r1
 8007326:	607b      	str	r3, [r7, #4]
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007334:	4659      	mov	r1, fp
 8007336:	00cb      	lsls	r3, r1, #3
 8007338:	4651      	mov	r1, sl
 800733a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800733e:	4651      	mov	r1, sl
 8007340:	00ca      	lsls	r2, r1, #3
 8007342:	4610      	mov	r0, r2
 8007344:	4619      	mov	r1, r3
 8007346:	4603      	mov	r3, r0
 8007348:	4642      	mov	r2, r8
 800734a:	189b      	adds	r3, r3, r2
 800734c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800734e:	464b      	mov	r3, r9
 8007350:	460a      	mov	r2, r1
 8007352:	eb42 0303 	adc.w	r3, r2, r3
 8007356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	663b      	str	r3, [r7, #96]	@ 0x60
 8007362:	667a      	str	r2, [r7, #100]	@ 0x64
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007370:	4649      	mov	r1, r9
 8007372:	008b      	lsls	r3, r1, #2
 8007374:	4641      	mov	r1, r8
 8007376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800737a:	4641      	mov	r1, r8
 800737c:	008a      	lsls	r2, r1, #2
 800737e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007382:	f7f9 fc89 	bl	8000c98 <__aeabi_uldivmod>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <UART_SetConfig+0x4e4>)
 800738c:	fba3 1302 	umull	r1, r3, r3, r2
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	2164      	movs	r1, #100	@ 0x64
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	3332      	adds	r3, #50	@ 0x32
 800739e:	4a08      	ldr	r2, [pc, #32]	@ (80073c0 <UART_SetConfig+0x4e4>)
 80073a0:	fba2 2303 	umull	r2, r3, r2, r3
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4422      	add	r2, r4
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	bf00      	nop
 80073b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073ba:	46bd      	mov	sp, r7
 80073bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073c0:	51eb851f 	.word	0x51eb851f

080073c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073c4:	b084      	sub	sp, #16
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	f107 001c 	add.w	r0, r7, #28
 80073d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d123      	bne.n	8007426 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007406:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800740a:	2b01      	cmp	r3, #1
 800740c:	d105      	bne.n	800741a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 fae8 	bl	80089f0 <USB_CoreReset>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
 8007424:	e01b      	b.n	800745e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fadc 	bl	80089f0 <USB_CoreReset>
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800743c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007440:	2b00      	cmp	r3, #0
 8007442:	d106      	bne.n	8007452 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007448:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007450:	e005      	b.n	800745e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007456:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800745e:	7fbb      	ldrb	r3, [r7, #30]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10b      	bne.n	800747c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f043 0206 	orr.w	r2, r3, #6
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f043 0220 	orr.w	r2, r3, #32
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007488:	b004      	add	sp, #16
 800748a:	4770      	bx	lr

0800748c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4613      	mov	r3, r2
 8007498:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d165      	bne.n	800756c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4a41      	ldr	r2, [pc, #260]	@ (80075a8 <USB_SetTurnaroundTime+0x11c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d906      	bls.n	80074b6 <USB_SetTurnaroundTime+0x2a>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4a40      	ldr	r2, [pc, #256]	@ (80075ac <USB_SetTurnaroundTime+0x120>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d202      	bcs.n	80074b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80074b0:	230f      	movs	r3, #15
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e062      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4a3c      	ldr	r2, [pc, #240]	@ (80075ac <USB_SetTurnaroundTime+0x120>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d306      	bcc.n	80074cc <USB_SetTurnaroundTime+0x40>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	4a3b      	ldr	r2, [pc, #236]	@ (80075b0 <USB_SetTurnaroundTime+0x124>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d202      	bcs.n	80074cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80074c6:	230e      	movs	r3, #14
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	e057      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4a38      	ldr	r2, [pc, #224]	@ (80075b0 <USB_SetTurnaroundTime+0x124>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d306      	bcc.n	80074e2 <USB_SetTurnaroundTime+0x56>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4a37      	ldr	r2, [pc, #220]	@ (80075b4 <USB_SetTurnaroundTime+0x128>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d202      	bcs.n	80074e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80074dc:	230d      	movs	r3, #13
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	e04c      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	4a33      	ldr	r2, [pc, #204]	@ (80075b4 <USB_SetTurnaroundTime+0x128>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d306      	bcc.n	80074f8 <USB_SetTurnaroundTime+0x6c>
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4a32      	ldr	r2, [pc, #200]	@ (80075b8 <USB_SetTurnaroundTime+0x12c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d802      	bhi.n	80074f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80074f2:	230c      	movs	r3, #12
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	e041      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4a2f      	ldr	r2, [pc, #188]	@ (80075b8 <USB_SetTurnaroundTime+0x12c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d906      	bls.n	800750e <USB_SetTurnaroundTime+0x82>
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a2e      	ldr	r2, [pc, #184]	@ (80075bc <USB_SetTurnaroundTime+0x130>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d802      	bhi.n	800750e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007508:	230b      	movs	r3, #11
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	e036      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	4a2a      	ldr	r2, [pc, #168]	@ (80075bc <USB_SetTurnaroundTime+0x130>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d906      	bls.n	8007524 <USB_SetTurnaroundTime+0x98>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4a29      	ldr	r2, [pc, #164]	@ (80075c0 <USB_SetTurnaroundTime+0x134>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d802      	bhi.n	8007524 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800751e:	230a      	movs	r3, #10
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	e02b      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4a26      	ldr	r2, [pc, #152]	@ (80075c0 <USB_SetTurnaroundTime+0x134>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d906      	bls.n	800753a <USB_SetTurnaroundTime+0xae>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a25      	ldr	r2, [pc, #148]	@ (80075c4 <USB_SetTurnaroundTime+0x138>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d202      	bcs.n	800753a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007534:	2309      	movs	r3, #9
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	e020      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a21      	ldr	r2, [pc, #132]	@ (80075c4 <USB_SetTurnaroundTime+0x138>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d306      	bcc.n	8007550 <USB_SetTurnaroundTime+0xc4>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a20      	ldr	r2, [pc, #128]	@ (80075c8 <USB_SetTurnaroundTime+0x13c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d802      	bhi.n	8007550 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800754a:	2308      	movs	r3, #8
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e015      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	4a1d      	ldr	r2, [pc, #116]	@ (80075c8 <USB_SetTurnaroundTime+0x13c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d906      	bls.n	8007566 <USB_SetTurnaroundTime+0xda>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a1c      	ldr	r2, [pc, #112]	@ (80075cc <USB_SetTurnaroundTime+0x140>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d202      	bcs.n	8007566 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007560:	2307      	movs	r3, #7
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e00a      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007566:	2306      	movs	r3, #6
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	e007      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007572:	2309      	movs	r3, #9
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	e001      	b.n	800757c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007578:	2309      	movs	r3, #9
 800757a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	029b      	lsls	r3, r3, #10
 8007590:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007594:	431a      	orrs	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	00d8acbf 	.word	0x00d8acbf
 80075ac:	00e4e1c0 	.word	0x00e4e1c0
 80075b0:	00f42400 	.word	0x00f42400
 80075b4:	01067380 	.word	0x01067380
 80075b8:	011a499f 	.word	0x011a499f
 80075bc:	01312cff 	.word	0x01312cff
 80075c0:	014ca43f 	.word	0x014ca43f
 80075c4:	016e3600 	.word	0x016e3600
 80075c8:	01a6ab1f 	.word	0x01a6ab1f
 80075cc:	01e84800 	.word	0x01e84800

080075d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f043 0201 	orr.w	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f023 0201 	bic.w	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d115      	bne.n	8007662 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007642:	200a      	movs	r0, #10
 8007644:	f7fa fe7e 	bl	8002344 <HAL_Delay>
      ms += 10U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	330a      	adds	r3, #10
 800764c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 f93f 	bl	80088d2 <USB_GetMode>
 8007654:	4603      	mov	r3, r0
 8007656:	2b01      	cmp	r3, #1
 8007658:	d01e      	beq.n	8007698 <USB_SetCurrentMode+0x84>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2bc7      	cmp	r3, #199	@ 0xc7
 800765e:	d9f0      	bls.n	8007642 <USB_SetCurrentMode+0x2e>
 8007660:	e01a      	b.n	8007698 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d115      	bne.n	8007694 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007674:	200a      	movs	r0, #10
 8007676:	f7fa fe65 	bl	8002344 <HAL_Delay>
      ms += 10U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	330a      	adds	r3, #10
 800767e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 f926 	bl	80088d2 <USB_GetMode>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <USB_SetCurrentMode+0x84>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007690:	d9f0      	bls.n	8007674 <USB_SetCurrentMode+0x60>
 8007692:	e001      	b.n	8007698 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e005      	b.n	80076a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2bc8      	cmp	r3, #200	@ 0xc8
 800769c:	d101      	bne.n	80076a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076ac:	b084      	sub	sp, #16
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076c6:	2300      	movs	r3, #0
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	e009      	b.n	80076e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	3340      	adds	r3, #64	@ 0x40
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	3301      	adds	r3, #1
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b0e      	cmp	r3, #14
 80076e4:	d9f2      	bls.n	80076cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d11c      	bne.n	8007728 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076fc:	f043 0302 	orr.w	r3, r3, #2
 8007700:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007706:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007712:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	639a      	str	r2, [r3, #56]	@ 0x38
 8007726:	e00b      	b.n	8007740 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007738:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007746:	461a      	mov	r2, r3
 8007748:	2300      	movs	r3, #0
 800774a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800774c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10d      	bne.n	8007770 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800775c:	2100      	movs	r1, #0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f968 	bl	8007a34 <USB_SetDevSpeed>
 8007764:	e008      	b.n	8007778 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007766:	2101      	movs	r1, #1
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f963 	bl	8007a34 <USB_SetDevSpeed>
 800776e:	e003      	b.n	8007778 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007770:	2103      	movs	r1, #3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f95e 	bl	8007a34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007778:	2110      	movs	r1, #16
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8fa 	bl	8007974 <USB_FlushTxFifo>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f924 	bl	80079d8 <USB_FlushRxFifo>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ac:	461a      	mov	r2, r3
 80077ae:	2300      	movs	r3, #0
 80077b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b8:	461a      	mov	r2, r3
 80077ba:	2300      	movs	r3, #0
 80077bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077be:	2300      	movs	r3, #0
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	e043      	b.n	800784c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077da:	d118      	bne.n	800780e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10a      	bne.n	80077f8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ee:	461a      	mov	r2, r3
 80077f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	e013      	b.n	8007820 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007804:	461a      	mov	r2, r3
 8007806:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	e008      	b.n	8007820 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781a:	461a      	mov	r2, r3
 800781c:	2300      	movs	r3, #0
 800781e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782c:	461a      	mov	r2, r3
 800782e:	2300      	movs	r3, #0
 8007830:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783e:	461a      	mov	r2, r3
 8007840:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	3301      	adds	r3, #1
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007850:	461a      	mov	r2, r3
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	4293      	cmp	r3, r2
 8007856:	d3b5      	bcc.n	80077c4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007858:	2300      	movs	r3, #0
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	e043      	b.n	80078e6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007874:	d118      	bne.n	80078a8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007888:	461a      	mov	r2, r3
 800788a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	e013      	b.n	80078ba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789e:	461a      	mov	r2, r3
 80078a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	e008      	b.n	80078ba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b4:	461a      	mov	r2, r3
 80078b6:	2300      	movs	r3, #0
 80078b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c6:	461a      	mov	r2, r3
 80078c8:	2300      	movs	r3, #0
 80078ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d8:	461a      	mov	r2, r3
 80078da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	3301      	adds	r3, #1
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078ea:	461a      	mov	r2, r3
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d3b5      	bcc.n	800785e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007904:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007912:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007914:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007918:	2b00      	cmp	r3, #0
 800791a:	d105      	bne.n	8007928 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f043 0210 	orr.w	r2, r3, #16
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	4b10      	ldr	r3, [pc, #64]	@ (8007970 <USB_DevInit+0x2c4>)
 800792e:	4313      	orrs	r3, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007934:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f043 0208 	orr.w	r2, r3, #8
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007948:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800794c:	2b01      	cmp	r3, #1
 800794e:	d107      	bne.n	8007960 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007958:	f043 0304 	orr.w	r3, r3, #4
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800796c:	b004      	add	sp, #16
 800796e:	4770      	bx	lr
 8007970:	803c3800 	.word	0x803c3800

08007974 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800798e:	d901      	bls.n	8007994 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e01b      	b.n	80079cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	daf2      	bge.n	8007982 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	019b      	lsls	r3, r3, #6
 80079a4:	f043 0220 	orr.w	r2, r3, #32
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079b8:	d901      	bls.n	80079be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e006      	b.n	80079cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d0f0      	beq.n	80079ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079f0:	d901      	bls.n	80079f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e018      	b.n	8007a28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	daf2      	bge.n	80079e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2210      	movs	r2, #16
 8007a06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a14:	d901      	bls.n	8007a1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e006      	b.n	8007a28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	d0f0      	beq.n	8007a08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a54:	4313      	orrs	r3, r2
 8007a56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b087      	sub	sp, #28
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 0306 	and.w	r3, r3, #6
 8007a7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d102      	bne.n	8007a8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]
 8007a8a:	e00a      	b.n	8007aa2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d002      	beq.n	8007a98 <USB_GetDevSpeed+0x32>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b06      	cmp	r3, #6
 8007a96:	d102      	bne.n	8007a9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	75fb      	strb	r3, [r7, #23]
 8007a9c:	e001      	b.n	8007aa2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007a9e:	230f      	movs	r3, #15
 8007aa0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	371c      	adds	r7, #28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d13a      	bne.n	8007b42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	2101      	movs	r1, #1
 8007ade:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	68f9      	ldr	r1, [r7, #12]
 8007ae6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007aea:	4313      	orrs	r3, r2
 8007aec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d155      	bne.n	8007bb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	791b      	ldrb	r3, [r3, #4]
 8007b1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	059b      	lsls	r3, r3, #22
 8007b26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	0151      	lsls	r1, r2, #5
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	440a      	add	r2, r1
 8007b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	e036      	b.n	8007bb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b48:	69da      	ldr	r2, [r3, #28]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	2101      	movs	r1, #1
 8007b54:	fa01 f303 	lsl.w	r3, r1, r3
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b60:	4313      	orrs	r3, r2
 8007b62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d11a      	bne.n	8007bb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	791b      	ldrb	r3, [r3, #4]
 8007b94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b96:	430b      	orrs	r3, r1
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
	...

08007bc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d161      	bne.n	8007ca0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bf2:	d11f      	bne.n	8007c34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f003 030f 	and.w	r3, r3, #15
 8007c44:	2101      	movs	r1, #1
 8007c46:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c54:	4013      	ands	r3, r2
 8007c56:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	2101      	movs	r1, #1
 8007c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	43db      	mvns	r3, r3
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c78:	4013      	ands	r3, r2
 8007c7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	0159      	lsls	r1, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	440b      	add	r3, r1
 8007c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c96:	4619      	mov	r1, r3
 8007c98:	4b35      	ldr	r3, [pc, #212]	@ (8007d70 <USB_DeactivateEndpoint+0x1b0>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	600b      	str	r3, [r1, #0]
 8007c9e:	e060      	b.n	8007d62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cb6:	d11f      	bne.n	8007cf8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007cd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	0151      	lsls	r1, r2, #5
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	440a      	add	r2, r1
 8007cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	2101      	movs	r1, #1
 8007d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0e:	041b      	lsls	r3, r3, #16
 8007d10:	43db      	mvns	r3, r3
 8007d12:	68f9      	ldr	r1, [r7, #12]
 8007d14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d18:	4013      	ands	r3, r2
 8007d1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d32:	041b      	lsls	r3, r3, #16
 8007d34:	43db      	mvns	r3, r3
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	0159      	lsls	r1, r3, #5
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	440b      	add	r3, r1
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <USB_DeactivateEndpoint+0x1b4>)
 8007d5e:	4013      	ands	r3, r2
 8007d60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	ec337800 	.word	0xec337800
 8007d74:	eff37800 	.word	0xeff37800

08007d78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08a      	sub	sp, #40	@ 0x28
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	785b      	ldrb	r3, [r3, #1]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	f040 817f 	bne.w	8008098 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d132      	bne.n	8007e08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	0151      	lsls	r1, r2, #5
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	440a      	add	r2, r1
 8007db8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dbc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007dc0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007dc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007de0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	0151      	lsls	r1, r2, #5
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	440a      	add	r2, r1
 8007dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e00:	0cdb      	lsrs	r3, r3, #19
 8007e02:	04db      	lsls	r3, r3, #19
 8007e04:	6113      	str	r3, [r2, #16]
 8007e06:	e097      	b.n	8007f38 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	0151      	lsls	r1, r2, #5
 8007e1a:	69fa      	ldr	r2, [r7, #28]
 8007e1c:	440a      	add	r2, r1
 8007e1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e22:	0cdb      	lsrs	r3, r3, #19
 8007e24:	04db      	lsls	r3, r3, #19
 8007e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	0151      	lsls	r1, r2, #5
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e42:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e46:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e4a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d11a      	bne.n	8007e88 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d903      	bls.n	8007e66 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e84:	6113      	str	r3, [r2, #16]
 8007e86:	e044      	b.n	8007f12 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	4413      	add	r3, r2
 8007e92:	1e5a      	subs	r2, r3, #1
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eaa:	691a      	ldr	r2, [r3, #16]
 8007eac:	8afb      	ldrh	r3, [r7, #22]
 8007eae:	04d9      	lsls	r1, r3, #19
 8007eb0:	4ba4      	ldr	r3, [pc, #656]	@ (8008144 <USB_EPStartXfer+0x3cc>)
 8007eb2:	400b      	ands	r3, r1
 8007eb4:	69b9      	ldr	r1, [r7, #24]
 8007eb6:	0148      	lsls	r0, r1, #5
 8007eb8:	69f9      	ldr	r1, [r7, #28]
 8007eba:	4401      	add	r1, r0
 8007ebc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	791b      	ldrb	r3, [r3, #4]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d122      	bne.n	8007f12 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ee6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007eea:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	8afb      	ldrh	r3, [r7, #22]
 8007efc:	075b      	lsls	r3, r3, #29
 8007efe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007f02:	69b9      	ldr	r1, [r7, #24]
 8007f04:	0148      	lsls	r0, r1, #5
 8007f06:	69f9      	ldr	r1, [r7, #28]
 8007f08:	4401      	add	r1, r0
 8007f0a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f28:	69b9      	ldr	r1, [r7, #24]
 8007f2a:	0148      	lsls	r0, r1, #5
 8007f2c:	69f9      	ldr	r1, [r7, #28]
 8007f2e:	4401      	add	r1, r0
 8007f30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f34:	4313      	orrs	r3, r2
 8007f36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d14b      	bne.n	8007fd6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f52:	461a      	mov	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	791b      	ldrb	r3, [r3, #4]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d128      	bne.n	8007fb4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d110      	bne.n	8007f94 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	0151      	lsls	r1, r2, #5
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	440a      	add	r2, r1
 8007f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	e00f      	b.n	8007fb4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	0151      	lsls	r1, r2, #5
 8007fa6:	69fa      	ldr	r2, [r7, #28]
 8007fa8:	440a      	add	r2, r1
 8007faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fb2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	0151      	lsls	r1, r2, #5
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	440a      	add	r2, r1
 8007fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	e166      	b.n	80082a4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ff4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	791b      	ldrb	r3, [r3, #4]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d015      	beq.n	800802a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 814e 	beq.w	80082a4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	2101      	movs	r1, #1
 800801a:	fa01 f303 	lsl.w	r3, r1, r3
 800801e:	69f9      	ldr	r1, [r7, #28]
 8008020:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008024:	4313      	orrs	r3, r2
 8008026:	634b      	str	r3, [r1, #52]	@ 0x34
 8008028:	e13c      	b.n	80082a4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d110      	bne.n	800805c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008054:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	e00f      	b.n	800807c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800807a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	68d9      	ldr	r1, [r3, #12]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	781a      	ldrb	r2, [r3, #0]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	b298      	uxth	r0, r3
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	4603      	mov	r3, r0
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f9b9 	bl	8008408 <USB_WritePacket>
 8008096:	e105      	b.n	80082a4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080b2:	0cdb      	lsrs	r3, r3, #19
 80080b4:	04db      	lsls	r3, r3, #19
 80080b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80080d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80080da:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d132      	bne.n	8008148 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008106:	691a      	ldr	r2, [r3, #16]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008110:	69b9      	ldr	r1, [r7, #24]
 8008112:	0148      	lsls	r0, r1, #5
 8008114:	69f9      	ldr	r1, [r7, #28]
 8008116:	4401      	add	r1, r0
 8008118:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800811c:	4313      	orrs	r3, r2
 800811e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	0151      	lsls	r1, r2, #5
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	440a      	add	r2, r1
 8008136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800813a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800813e:	6113      	str	r3, [r2, #16]
 8008140:	e062      	b.n	8008208 <USB_EPStartXfer+0x490>
 8008142:	bf00      	nop
 8008144:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d123      	bne.n	8008198 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008166:	69b9      	ldr	r1, [r7, #24]
 8008168:	0148      	lsls	r0, r1, #5
 800816a:	69f9      	ldr	r1, [r7, #28]
 800816c:	4401      	add	r1, r0
 800816e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008172:	4313      	orrs	r3, r2
 8008174:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	0151      	lsls	r1, r2, #5
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	440a      	add	r2, r1
 800818c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008194:	6113      	str	r3, [r2, #16]
 8008196:	e037      	b.n	8008208 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	1e5a      	subs	r2, r3, #1
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ac:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	8afa      	ldrh	r2, [r7, #22]
 80081b4:	fb03 f202 	mul.w	r2, r3, r2
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	8afb      	ldrh	r3, [r7, #22]
 80081cc:	04d9      	lsls	r1, r3, #19
 80081ce:	4b38      	ldr	r3, [pc, #224]	@ (80082b0 <USB_EPStartXfer+0x538>)
 80081d0:	400b      	ands	r3, r1
 80081d2:	69b9      	ldr	r1, [r7, #24]
 80081d4:	0148      	lsls	r0, r1, #5
 80081d6:	69f9      	ldr	r1, [r7, #28]
 80081d8:	4401      	add	r1, r0
 80081da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081de:	4313      	orrs	r3, r2
 80081e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ee:	691a      	ldr	r2, [r3, #16]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081f8:	69b9      	ldr	r1, [r7, #24]
 80081fa:	0148      	lsls	r0, r1, #5
 80081fc:	69f9      	ldr	r1, [r7, #28]
 80081fe:	4401      	add	r1, r0
 8008200:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008204:	4313      	orrs	r3, r2
 8008206:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d10d      	bne.n	800822a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	68d9      	ldr	r1, [r3, #12]
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008226:	460a      	mov	r2, r1
 8008228:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	791b      	ldrb	r3, [r3, #4]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d128      	bne.n	8008284 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d110      	bne.n	8008264 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	0151      	lsls	r1, r2, #5
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	440a      	add	r2, r1
 8008258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800825c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	e00f      	b.n	8008284 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	0151      	lsls	r1, r2, #5
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	440a      	add	r2, r1
 800827a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800827e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008282:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	0151      	lsls	r1, r2, #5
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	440a      	add	r2, r1
 800829a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800829e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80082a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	1ff80000 	.word	0x1ff80000

080082b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d14a      	bne.n	8008368 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082ea:	f040 8086 	bne.w	80083fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	7812      	ldrb	r2, [r2, #0]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800830c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008310:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	7812      	ldrb	r2, [r2, #0]
 8008326:	0151      	lsls	r1, r2, #5
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	440a      	add	r2, r1
 800832c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008330:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008334:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3301      	adds	r3, #1
 800833a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008342:	4293      	cmp	r3, r2
 8008344:	d902      	bls.n	800834c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	75fb      	strb	r3, [r7, #23]
          break;
 800834a:	e056      	b.n	80083fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008360:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008364:	d0e7      	beq.n	8008336 <USB_EPStopXfer+0x82>
 8008366:	e048      	b.n	80083fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800837c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008380:	d13b      	bne.n	80083fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	7812      	ldrb	r2, [r2, #0]
 8008396:	0151      	lsls	r1, r2, #5
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	440a      	add	r2, r1
 800839c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80083a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	7812      	ldrb	r2, [r2, #0]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d902      	bls.n	80083e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	75fb      	strb	r3, [r7, #23]
          break;
 80083de:	e00c      	b.n	80083fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083f8:	d0e7      	beq.n	80083ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	371c      	adds	r7, #28
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008408:	b480      	push	{r7}
 800840a:	b089      	sub	sp, #36	@ 0x24
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4611      	mov	r1, r2
 8008414:	461a      	mov	r2, r3
 8008416:	460b      	mov	r3, r1
 8008418:	71fb      	strb	r3, [r7, #7]
 800841a:	4613      	mov	r3, r2
 800841c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008426:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	d123      	bne.n	8008476 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800842e:	88bb      	ldrh	r3, [r7, #4]
 8008430:	3303      	adds	r3, #3
 8008432:	089b      	lsrs	r3, r3, #2
 8008434:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008436:	2300      	movs	r3, #0
 8008438:	61bb      	str	r3, [r7, #24]
 800843a:	e018      	b.n	800846e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	031a      	lsls	r2, r3, #12
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	4413      	add	r3, r2
 8008444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008448:	461a      	mov	r2, r3
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	3301      	adds	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	3301      	adds	r3, #1
 800845a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	3301      	adds	r3, #1
 8008460:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	3301      	adds	r3, #1
 8008466:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	3301      	adds	r3, #1
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	429a      	cmp	r2, r3
 8008474:	d3e2      	bcc.n	800843c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3724      	adds	r7, #36	@ 0x24
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008484:	b480      	push	{r7}
 8008486:	b08b      	sub	sp, #44	@ 0x2c
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	089b      	lsrs	r3, r3, #2
 800849e:	b29b      	uxth	r3, r3
 80084a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	f003 0303 	and.w	r3, r3, #3
 80084a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80084aa:	2300      	movs	r3, #0
 80084ac:	623b      	str	r3, [r7, #32]
 80084ae:	e014      	b.n	80084da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084be:	3301      	adds	r3, #1
 80084c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c4:	3301      	adds	r3, #1
 80084c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	3301      	adds	r3, #1
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	3301      	adds	r3, #1
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	3301      	adds	r3, #1
 80084d8:	623b      	str	r3, [r7, #32]
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d3e6      	bcc.n	80084b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084e2:	8bfb      	ldrh	r3, [r7, #30]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01e      	beq.n	8008526 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084f2:	461a      	mov	r2, r3
 80084f4:	f107 0310 	add.w	r3, r7, #16
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	fa22 f303 	lsr.w	r3, r2, r3
 8008508:	b2da      	uxtb	r2, r3
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	701a      	strb	r2, [r3, #0]
      i++;
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	3301      	adds	r3, #1
 8008512:	623b      	str	r3, [r7, #32]
      pDest++;
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	3301      	adds	r3, #1
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800851a:	8bfb      	ldrh	r3, [r7, #30]
 800851c:	3b01      	subs	r3, #1
 800851e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008520:	8bfb      	ldrh	r3, [r7, #30]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1ea      	bne.n	80084fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008528:	4618      	mov	r0, r3
 800852a:	372c      	adds	r7, #44	@ 0x2c
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	785b      	ldrb	r3, [r3, #1]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d12c      	bne.n	80085aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	db12      	blt.n	8008588 <USB_EPSetStall+0x54>
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00f      	beq.n	8008588 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008582:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008586:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	e02b      	b.n	8008602 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	db12      	blt.n	80085e2 <USB_EPSetStall+0xae>
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00f      	beq.n	80085e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	0151      	lsls	r1, r2, #5
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	440a      	add	r2, r1
 80085d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	0151      	lsls	r1, r2, #5
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	440a      	add	r2, r1
 80085f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008600:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d128      	bne.n	800867e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	440a      	add	r2, r1
 8008642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008646:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800864a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	791b      	ldrb	r3, [r3, #4]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d003      	beq.n	800865c <USB_EPClearStall+0x4c>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d138      	bne.n	80086ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	0151      	lsls	r1, r2, #5
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	440a      	add	r2, r1
 8008672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	e027      	b.n	80086ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4413      	add	r3, r2
 8008686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	0151      	lsls	r1, r2, #5
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	440a      	add	r2, r1
 8008694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008698:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800869c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	791b      	ldrb	r3, [r3, #4]
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d003      	beq.n	80086ae <USB_EPClearStall+0x9e>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	791b      	ldrb	r3, [r3, #4]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d10f      	bne.n	80086ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80086fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008710:	68f9      	ldr	r1, [r7, #12]
 8008712:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008716:	4313      	orrs	r3, r2
 8008718:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008742:	f023 0303 	bic.w	r3, r3, #3
 8008746:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008756:	f023 0302 	bic.w	r3, r3, #2
 800875a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008784:	f023 0303 	bic.w	r3, r3, #3
 8008788:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008798:	f043 0302 	orr.w	r3, r3, #2
 800879c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4013      	ands	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087c4:	68fb      	ldr	r3, [r7, #12]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	4013      	ands	r3, r2
 80087f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	0c1b      	lsrs	r3, r3, #16
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	4013      	ands	r3, r2
 8008828:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	b29b      	uxth	r3, r3
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	4013      	ands	r3, r2
 8008866:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008868:	68bb      	ldr	r3, [r7, #8]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008876:	b480      	push	{r7}
 8008878:	b087      	sub	sp, #28
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008898:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	f003 030f 	and.w	r3, r3, #15
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	fa22 f303 	lsr.w	r3, r2, r3
 80088a6:	01db      	lsls	r3, r3, #7
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4013      	ands	r3, r2
 80088c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088c4:	68bb      	ldr	r3, [r7, #8]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	f003 0301 	and.w	r3, r3, #1
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b085      	sub	sp, #20
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008908:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800890c:	f023 0307 	bic.w	r3, r3, #7
 8008910:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008924:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	460b      	mov	r3, r1
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	333c      	adds	r3, #60	@ 0x3c
 800894a:	3304      	adds	r3, #4
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	4a26      	ldr	r2, [pc, #152]	@ (80089ec <USB_EP0_OutStart+0xb8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d90a      	bls.n	800896e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008968:	d101      	bne.n	800896e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	e037      	b.n	80089de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008974:	461a      	mov	r2, r3
 8008976:	2300      	movs	r3, #0
 8008978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008988:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800898c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800899c:	f043 0318 	orr.w	r3, r3, #24
 80089a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089b0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80089b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d10f      	bne.n	80089dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c2:	461a      	mov	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089d6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80089da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	4f54300a 	.word	0x4f54300a

080089f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3301      	adds	r3, #1
 8008a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a08:	d901      	bls.n	8008a0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e01b      	b.n	8008a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	daf2      	bge.n	80089fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f043 0201 	orr.w	r2, r3, #1
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a32:	d901      	bls.n	8008a38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e006      	b.n	8008a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d0f0      	beq.n	8008a26 <USB_CoreReset+0x36>

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
	...

08008a54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a60:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008a64:	f002 fc30 	bl	800b2c8 <USBD_static_malloc>
 8008a68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	32b0      	adds	r2, #176	@ 0xb0
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a80:	2302      	movs	r3, #2
 8008a82:	e0d4      	b.n	8008c2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008a84:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008a88:	2100      	movs	r1, #0
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f004 fa07 	bl	800ce9e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	32b0      	adds	r2, #176	@ 0xb0
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32b0      	adds	r2, #176	@ 0xb0
 8008aaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	7c1b      	ldrb	r3, [r3, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d138      	bne.n	8008b2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008abc:	4b5e      	ldr	r3, [pc, #376]	@ (8008c38 <USBD_CDC_Init+0x1e4>)
 8008abe:	7819      	ldrb	r1, [r3, #0]
 8008ac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f002 fadb 	bl	800b082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008acc:	4b5a      	ldr	r3, [pc, #360]	@ (8008c38 <USBD_CDC_Init+0x1e4>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 020f 	and.w	r2, r3, #15
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	3324      	adds	r3, #36	@ 0x24
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008ae6:	4b55      	ldr	r3, [pc, #340]	@ (8008c3c <USBD_CDC_Init+0x1e8>)
 8008ae8:	7819      	ldrb	r1, [r3, #0]
 8008aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008aee:	2202      	movs	r2, #2
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f002 fac6 	bl	800b082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008af6:	4b51      	ldr	r3, [pc, #324]	@ (8008c3c <USBD_CDC_Init+0x1e8>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	f003 020f 	and.w	r2, r3, #15
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b0e:	2201      	movs	r2, #1
 8008b10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b12:	4b4b      	ldr	r3, [pc, #300]	@ (8008c40 <USBD_CDC_Init+0x1ec>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f003 020f 	and.w	r2, r3, #15
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	3326      	adds	r3, #38	@ 0x26
 8008b28:	2210      	movs	r2, #16
 8008b2a:	801a      	strh	r2, [r3, #0]
 8008b2c:	e035      	b.n	8008b9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b2e:	4b42      	ldr	r3, [pc, #264]	@ (8008c38 <USBD_CDC_Init+0x1e4>)
 8008b30:	7819      	ldrb	r1, [r3, #0]
 8008b32:	2340      	movs	r3, #64	@ 0x40
 8008b34:	2202      	movs	r2, #2
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f002 faa3 	bl	800b082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8008c38 <USBD_CDC_Init+0x1e4>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f003 020f 	and.w	r2, r3, #15
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	440b      	add	r3, r1
 8008b50:	3324      	adds	r3, #36	@ 0x24
 8008b52:	2201      	movs	r2, #1
 8008b54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b56:	4b39      	ldr	r3, [pc, #228]	@ (8008c3c <USBD_CDC_Init+0x1e8>)
 8008b58:	7819      	ldrb	r1, [r3, #0]
 8008b5a:	2340      	movs	r3, #64	@ 0x40
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f002 fa8f 	bl	800b082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b64:	4b35      	ldr	r3, [pc, #212]	@ (8008c3c <USBD_CDC_Init+0x1e8>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f003 020f 	and.w	r2, r3, #15
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	440b      	add	r3, r1
 8008b78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b80:	4b2f      	ldr	r3, [pc, #188]	@ (8008c40 <USBD_CDC_Init+0x1ec>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	f003 020f 	and.w	r2, r3, #15
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	3326      	adds	r3, #38	@ 0x26
 8008b96:	2210      	movs	r2, #16
 8008b98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b9a:	4b29      	ldr	r3, [pc, #164]	@ (8008c40 <USBD_CDC_Init+0x1ec>)
 8008b9c:	7819      	ldrb	r1, [r3, #0]
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	2203      	movs	r2, #3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f002 fa6d 	bl	800b082 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008ba8:	4b25      	ldr	r3, [pc, #148]	@ (8008c40 <USBD_CDC_Init+0x1ec>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	f003 020f 	and.w	r2, r3, #15
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	3324      	adds	r3, #36	@ 0x24
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	33b0      	adds	r3, #176	@ 0xb0
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e018      	b.n	8008c2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	7c1b      	ldrb	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10a      	bne.n	8008c1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c04:	4b0d      	ldr	r3, [pc, #52]	@ (8008c3c <USBD_CDC_Init+0x1e8>)
 8008c06:	7819      	ldrb	r1, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f002 fb24 	bl	800b260 <USBD_LL_PrepareReceive>
 8008c18:	e008      	b.n	8008c2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c1a:	4b08      	ldr	r3, [pc, #32]	@ (8008c3c <USBD_CDC_Init+0x1e8>)
 8008c1c:	7819      	ldrb	r1, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c24:	2340      	movs	r3, #64	@ 0x40
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f002 fb1a 	bl	800b260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000009b 	.word	0x2000009b
 8008c3c:	2000009c 	.word	0x2000009c
 8008c40:	2000009d 	.word	0x2000009d

08008c44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008c50:	4b3a      	ldr	r3, [pc, #232]	@ (8008d3c <USBD_CDC_DeInit+0xf8>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f002 fa39 	bl	800b0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008c5c:	4b37      	ldr	r3, [pc, #220]	@ (8008d3c <USBD_CDC_DeInit+0xf8>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	f003 020f 	and.w	r2, r3, #15
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	440b      	add	r3, r1
 8008c70:	3324      	adds	r3, #36	@ 0x24
 8008c72:	2200      	movs	r2, #0
 8008c74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008c76:	4b32      	ldr	r3, [pc, #200]	@ (8008d40 <USBD_CDC_DeInit+0xfc>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f002 fa26 	bl	800b0ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008c82:	4b2f      	ldr	r3, [pc, #188]	@ (8008d40 <USBD_CDC_DeInit+0xfc>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	f003 020f 	and.w	r2, r3, #15
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	440b      	add	r3, r1
 8008c96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008c9e:	4b29      	ldr	r3, [pc, #164]	@ (8008d44 <USBD_CDC_DeInit+0x100>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f002 fa12 	bl	800b0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008caa:	4b26      	ldr	r3, [pc, #152]	@ (8008d44 <USBD_CDC_DeInit+0x100>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	f003 020f 	and.w	r2, r3, #15
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	3324      	adds	r3, #36	@ 0x24
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d44 <USBD_CDC_DeInit+0x100>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 020f 	and.w	r2, r3, #15
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	3326      	adds	r3, #38	@ 0x26
 8008cda:	2200      	movs	r2, #0
 8008cdc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	32b0      	adds	r2, #176	@ 0xb0
 8008ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01f      	beq.n	8008d30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	33b0      	adds	r3, #176	@ 0xb0
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	32b0      	adds	r2, #176	@ 0xb0
 8008d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 fae6 	bl	800b2e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32b0      	adds	r2, #176	@ 0xb0
 8008d22:	2100      	movs	r1, #0
 8008d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	2000009b 	.word	0x2000009b
 8008d40:	2000009c 	.word	0x2000009c
 8008d44:	2000009d 	.word	0x2000009d

08008d48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	32b0      	adds	r2, #176	@ 0xb0
 8008d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e0bf      	b.n	8008ef8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d050      	beq.n	8008e26 <USBD_CDC_Setup+0xde>
 8008d84:	2b20      	cmp	r3, #32
 8008d86:	f040 80af 	bne.w	8008ee8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	88db      	ldrh	r3, [r3, #6]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d03a      	beq.n	8008e08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	b25b      	sxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	da1b      	bge.n	8008dd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	33b0      	adds	r3, #176	@ 0xb0
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008db2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	88d2      	ldrh	r2, [r2, #6]
 8008db8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	88db      	ldrh	r3, [r3, #6]
 8008dbe:	2b07      	cmp	r3, #7
 8008dc0:	bf28      	it	cs
 8008dc2:	2307      	movcs	r3, #7
 8008dc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	89fa      	ldrh	r2, [r7, #14]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 fd53 	bl	800a878 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008dd2:	e090      	b.n	8008ef6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	785a      	ldrb	r2, [r3, #1]
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	88db      	ldrh	r3, [r3, #6]
 8008de2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008de4:	d803      	bhi.n	8008dee <USBD_CDC_Setup+0xa6>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88db      	ldrh	r3, [r3, #6]
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	e000      	b.n	8008df0 <USBD_CDC_Setup+0xa8>
 8008dee:	2240      	movs	r2, #64	@ 0x40
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008df6:	6939      	ldr	r1, [r7, #16]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008dfe:	461a      	mov	r2, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 fd65 	bl	800a8d0 <USBD_CtlPrepareRx>
      break;
 8008e06:	e076      	b.n	8008ef6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	33b0      	adds	r3, #176	@ 0xb0
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	7850      	ldrb	r0, [r2, #1]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	4798      	blx	r3
      break;
 8008e24:	e067      	b.n	8008ef6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	785b      	ldrb	r3, [r3, #1]
 8008e2a:	2b0b      	cmp	r3, #11
 8008e2c:	d851      	bhi.n	8008ed2 <USBD_CDC_Setup+0x18a>
 8008e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <USBD_CDC_Setup+0xec>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e65 	.word	0x08008e65
 8008e38:	08008ee1 	.word	0x08008ee1
 8008e3c:	08008ed3 	.word	0x08008ed3
 8008e40:	08008ed3 	.word	0x08008ed3
 8008e44:	08008ed3 	.word	0x08008ed3
 8008e48:	08008ed3 	.word	0x08008ed3
 8008e4c:	08008ed3 	.word	0x08008ed3
 8008e50:	08008ed3 	.word	0x08008ed3
 8008e54:	08008ed3 	.word	0x08008ed3
 8008e58:	08008ed3 	.word	0x08008ed3
 8008e5c:	08008e8f 	.word	0x08008e8f
 8008e60:	08008eb9 	.word	0x08008eb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d107      	bne.n	8008e80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e70:	f107 030a 	add.w	r3, r7, #10
 8008e74:	2202      	movs	r2, #2
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 fcfd 	bl	800a878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e7e:	e032      	b.n	8008ee6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fc7b 	bl	800a77e <USBD_CtlError>
            ret = USBD_FAIL;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e8c:	e02b      	b.n	8008ee6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d107      	bne.n	8008eaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e9a:	f107 030d 	add.w	r3, r7, #13
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 fce8 	bl	800a878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ea8:	e01d      	b.n	8008ee6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 fc66 	bl	800a77e <USBD_CtlError>
            ret = USBD_FAIL;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8008eb6:	e016      	b.n	8008ee6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d00f      	beq.n	8008ee4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 fc59 	bl	800a77e <USBD_CtlError>
            ret = USBD_FAIL;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ed0:	e008      	b.n	8008ee4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 fc52 	bl	800a77e <USBD_CtlError>
          ret = USBD_FAIL;
 8008eda:	2303      	movs	r3, #3
 8008edc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ede:	e002      	b.n	8008ee6 <USBD_CDC_Setup+0x19e>
          break;
 8008ee0:	bf00      	nop
 8008ee2:	e008      	b.n	8008ef6 <USBD_CDC_Setup+0x1ae>
          break;
 8008ee4:	bf00      	nop
      }
      break;
 8008ee6:	e006      	b.n	8008ef6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fc47 	bl	800a77e <USBD_CtlError>
      ret = USBD_FAIL;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	32b0      	adds	r2, #176	@ 0xb0
 8008f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e065      	b.n	8008ff6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	32b0      	adds	r2, #176	@ 0xb0
 8008f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	f003 020f 	and.w	r2, r3, #15
 8008f40:	6879      	ldr	r1, [r7, #4]
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	3318      	adds	r3, #24
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d02f      	beq.n	8008fb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	f003 020f 	and.w	r2, r3, #15
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	440b      	add	r3, r1
 8008f66:	3318      	adds	r3, #24
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	f003 010f 	and.w	r1, r3, #15
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	460b      	mov	r3, r1
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	440b      	add	r3, r1
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4403      	add	r3, r0
 8008f7c:	331c      	adds	r3, #28
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f84:	fb01 f303 	mul.w	r3, r1, r3
 8008f88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d112      	bne.n	8008fb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	3318      	adds	r3, #24
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fa6:	78f9      	ldrb	r1, [r7, #3]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	2200      	movs	r2, #0
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f002 f936 	bl	800b21e <USBD_LL_Transmit>
 8008fb2:	e01f      	b.n	8008ff4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	33b0      	adds	r3, #176	@ 0xb0
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d010      	beq.n	8008ff4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	33b0      	adds	r3, #176	@ 0xb0
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008ff0:	78fa      	ldrb	r2, [r7, #3]
 8008ff2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	460b      	mov	r3, r1
 8009008:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	32b0      	adds	r2, #176	@ 0xb0
 8009014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009018:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	32b0      	adds	r2, #176	@ 0xb0
 8009024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800902c:	2303      	movs	r3, #3
 800902e:	e01a      	b.n	8009066 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f002 f934 	bl	800b2a2 <USBD_LL_GetRxDataSize>
 800903a:	4602      	mov	r2, r0
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	33b0      	adds	r3, #176	@ 0xb0
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009060:	4611      	mov	r1, r2
 8009062:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	32b0      	adds	r2, #176	@ 0xb0
 8009080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009084:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800908c:	2303      	movs	r3, #3
 800908e:	e024      	b.n	80090da <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	33b0      	adds	r3, #176	@ 0xb0
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d019      	beq.n	80090d8 <USBD_CDC_EP0_RxReady+0x6a>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80090aa:	2bff      	cmp	r3, #255	@ 0xff
 80090ac:	d014      	beq.n	80090d8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	33b0      	adds	r3, #176	@ 0xb0
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80090c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80090ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	22ff      	movs	r2, #255	@ 0xff
 80090d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090ec:	2182      	movs	r1, #130	@ 0x82
 80090ee:	4818      	ldr	r0, [pc, #96]	@ (8009150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090f0:	f000 fd0f 	bl	8009b12 <USBD_GetEpDesc>
 80090f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090f6:	2101      	movs	r1, #1
 80090f8:	4815      	ldr	r0, [pc, #84]	@ (8009150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090fa:	f000 fd0a 	bl	8009b12 <USBD_GetEpDesc>
 80090fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009100:	2181      	movs	r1, #129	@ 0x81
 8009102:	4813      	ldr	r0, [pc, #76]	@ (8009150 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009104:	f000 fd05 	bl	8009b12 <USBD_GetEpDesc>
 8009108:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2210      	movs	r2, #16
 8009114:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d006      	beq.n	800912a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	2200      	movs	r2, #0
 8009120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009124:	711a      	strb	r2, [r3, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d006      	beq.n	800913e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009138:	711a      	strb	r2, [r3, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2243      	movs	r2, #67	@ 0x43
 8009142:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009144:	4b02      	ldr	r3, [pc, #8]	@ (8009150 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000058 	.word	0x20000058

08009154 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800915c:	2182      	movs	r1, #130	@ 0x82
 800915e:	4818      	ldr	r0, [pc, #96]	@ (80091c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009160:	f000 fcd7 	bl	8009b12 <USBD_GetEpDesc>
 8009164:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009166:	2101      	movs	r1, #1
 8009168:	4815      	ldr	r0, [pc, #84]	@ (80091c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800916a:	f000 fcd2 	bl	8009b12 <USBD_GetEpDesc>
 800916e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009170:	2181      	movs	r1, #129	@ 0x81
 8009172:	4813      	ldr	r0, [pc, #76]	@ (80091c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009174:	f000 fccd 	bl	8009b12 <USBD_GetEpDesc>
 8009178:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2210      	movs	r2, #16
 8009184:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d006      	beq.n	800919a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2200      	movs	r2, #0
 8009190:	711a      	strb	r2, [r3, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f042 0202 	orr.w	r2, r2, #2
 8009198:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d006      	beq.n	80091ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	711a      	strb	r2, [r3, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f042 0202 	orr.w	r2, r2, #2
 80091ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2243      	movs	r2, #67	@ 0x43
 80091b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091b4:	4b02      	ldr	r3, [pc, #8]	@ (80091c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000058 	.word	0x20000058

080091c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091cc:	2182      	movs	r1, #130	@ 0x82
 80091ce:	4818      	ldr	r0, [pc, #96]	@ (8009230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091d0:	f000 fc9f 	bl	8009b12 <USBD_GetEpDesc>
 80091d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091d6:	2101      	movs	r1, #1
 80091d8:	4815      	ldr	r0, [pc, #84]	@ (8009230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091da:	f000 fc9a 	bl	8009b12 <USBD_GetEpDesc>
 80091de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091e0:	2181      	movs	r1, #129	@ 0x81
 80091e2:	4813      	ldr	r0, [pc, #76]	@ (8009230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091e4:	f000 fc95 	bl	8009b12 <USBD_GetEpDesc>
 80091e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2210      	movs	r2, #16
 80091f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d006      	beq.n	800920a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	2200      	movs	r2, #0
 8009200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009204:	711a      	strb	r2, [r3, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d006      	beq.n	800921e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009218:	711a      	strb	r2, [r3, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2243      	movs	r2, #67	@ 0x43
 8009222:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009224:	4b02      	ldr	r3, [pc, #8]	@ (8009230 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	20000058 	.word	0x20000058

08009234 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	220a      	movs	r2, #10
 8009240:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009242:	4b03      	ldr	r3, [pc, #12]	@ (8009250 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	20000014 	.word	0x20000014

08009254 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009264:	2303      	movs	r3, #3
 8009266:	e009      	b.n	800927c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	33b0      	adds	r3, #176	@ 0xb0
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	32b0      	adds	r2, #176	@ 0xb0
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e008      	b.n	80092c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	32b0      	adds	r2, #176	@ 0xb0
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e004      	b.n	80092fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
	...

08009308 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	32b0      	adds	r2, #176	@ 0xb0
 800931a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	32b0      	adds	r2, #176	@ 0xb0
 800932a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009332:	2303      	movs	r3, #3
 8009334:	e018      	b.n	8009368 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7c1b      	ldrb	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10a      	bne.n	8009354 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800933e:	4b0c      	ldr	r3, [pc, #48]	@ (8009370 <USBD_CDC_ReceivePacket+0x68>)
 8009340:	7819      	ldrb	r1, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 ff87 	bl	800b260 <USBD_LL_PrepareReceive>
 8009352:	e008      	b.n	8009366 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009354:	4b06      	ldr	r3, [pc, #24]	@ (8009370 <USBD_CDC_ReceivePacket+0x68>)
 8009356:	7819      	ldrb	r1, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800935e:	2340      	movs	r3, #64	@ 0x40
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 ff7d 	bl	800b260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	2000009c 	.word	0x2000009c

08009374 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009388:	2303      	movs	r3, #3
 800938a:	e01f      	b.n	80093cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	79fa      	ldrb	r2, [r7, #7]
 80093be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f001 fdf7 	bl	800afb4 <USBD_LL_Init>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e025      	b.n	8009438 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	32ae      	adds	r2, #174	@ 0xae
 80093fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00f      	beq.n	8009428 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	32ae      	adds	r2, #174	@ 0xae
 8009412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009418:	f107 020e 	add.w	r2, r7, #14
 800941c:	4610      	mov	r0, r2
 800941e:	4798      	blx	r3
 8009420:	4602      	mov	r2, r0
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 fdff 	bl	800b04c <USBD_LL_Start>
 800944e:	4603      	mov	r3, r0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009460:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009484:	2b00      	cmp	r3, #0
 8009486:	d009      	beq.n	800949c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	4611      	mov	r1, r2
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800949c:	7bfb      	ldrb	r3, [r7, #15]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	460b      	mov	r3, r1
 80094b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	4611      	mov	r1, r2
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80094cc:	2303      	movs	r3, #3
 80094ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 f90c 	bl	800a70a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009500:	461a      	mov	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800950e:	f003 031f 	and.w	r3, r3, #31
 8009512:	2b02      	cmp	r3, #2
 8009514:	d01a      	beq.n	800954c <USBD_LL_SetupStage+0x72>
 8009516:	2b02      	cmp	r3, #2
 8009518:	d822      	bhi.n	8009560 <USBD_LL_SetupStage+0x86>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d002      	beq.n	8009524 <USBD_LL_SetupStage+0x4a>
 800951e:	2b01      	cmp	r3, #1
 8009520:	d00a      	beq.n	8009538 <USBD_LL_SetupStage+0x5e>
 8009522:	e01d      	b.n	8009560 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fb63 	bl	8009bf8 <USBD_StdDevReq>
 8009532:	4603      	mov	r3, r0
 8009534:	73fb      	strb	r3, [r7, #15]
      break;
 8009536:	e020      	b.n	800957a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fbcb 	bl	8009cdc <USBD_StdItfReq>
 8009546:	4603      	mov	r3, r0
 8009548:	73fb      	strb	r3, [r7, #15]
      break;
 800954a:	e016      	b.n	800957a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fc2d 	bl	8009db4 <USBD_StdEPReq>
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]
      break;
 800955e:	e00c      	b.n	800957a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009566:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800956a:	b2db      	uxtb	r3, r3
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 fdcc 	bl	800b10c <USBD_LL_StallEP>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]
      break;
 8009578:	bf00      	nop
  }

  return ret;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	460b      	mov	r3, r1
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009596:	7afb      	ldrb	r3, [r7, #11]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d16e      	bne.n	800967a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80095a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	f040 8098 	bne.w	80096e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	689a      	ldr	r2, [r3, #8]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d913      	bls.n	80095e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	1ad2      	subs	r2, r2, r3
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	4293      	cmp	r3, r2
 80095d4:	bf28      	it	cs
 80095d6:	4613      	movcs	r3, r2
 80095d8:	461a      	mov	r2, r3
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f001 f994 	bl	800a90a <USBD_CtlContinueRx>
 80095e2:	e07d      	b.n	80096e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095ea:	f003 031f 	and.w	r3, r3, #31
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d014      	beq.n	800961c <USBD_LL_DataOutStage+0x98>
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d81d      	bhi.n	8009632 <USBD_LL_DataOutStage+0xae>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <USBD_LL_DataOutStage+0x7c>
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d003      	beq.n	8009606 <USBD_LL_DataOutStage+0x82>
 80095fe:	e018      	b.n	8009632 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	75bb      	strb	r3, [r7, #22]
            break;
 8009604:	e018      	b.n	8009638 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800960c:	b2db      	uxtb	r3, r3
 800960e:	4619      	mov	r1, r3
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 fa64 	bl	8009ade <USBD_CoreFindIF>
 8009616:	4603      	mov	r3, r0
 8009618:	75bb      	strb	r3, [r7, #22]
            break;
 800961a:	e00d      	b.n	8009638 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009622:	b2db      	uxtb	r3, r3
 8009624:	4619      	mov	r1, r3
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 fa66 	bl	8009af8 <USBD_CoreFindEP>
 800962c:	4603      	mov	r3, r0
 800962e:	75bb      	strb	r3, [r7, #22]
            break;
 8009630:	e002      	b.n	8009638 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	75bb      	strb	r3, [r7, #22]
            break;
 8009636:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009638:	7dbb      	ldrb	r3, [r7, #22]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d119      	bne.n	8009672 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b03      	cmp	r3, #3
 8009648:	d113      	bne.n	8009672 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800964a:	7dba      	ldrb	r2, [r7, #22]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	32ae      	adds	r2, #174	@ 0xae
 8009650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00b      	beq.n	8009672 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800965a:	7dba      	ldrb	r2, [r7, #22]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009662:	7dba      	ldrb	r2, [r7, #22]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	32ae      	adds	r2, #174	@ 0xae
 8009668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f001 f95a 	bl	800a92c <USBD_CtlSendStatus>
 8009678:	e032      	b.n	80096e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800967a:	7afb      	ldrb	r3, [r7, #11]
 800967c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009680:	b2db      	uxtb	r3, r3
 8009682:	4619      	mov	r1, r3
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 fa37 	bl	8009af8 <USBD_CoreFindEP>
 800968a:	4603      	mov	r3, r0
 800968c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800968e:	7dbb      	ldrb	r3, [r7, #22]
 8009690:	2bff      	cmp	r3, #255	@ 0xff
 8009692:	d025      	beq.n	80096e0 <USBD_LL_DataOutStage+0x15c>
 8009694:	7dbb      	ldrb	r3, [r7, #22]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d122      	bne.n	80096e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d117      	bne.n	80096d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80096a6:	7dba      	ldrb	r2, [r7, #22]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	32ae      	adds	r2, #174	@ 0xae
 80096ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00f      	beq.n	80096d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80096b6:	7dba      	ldrb	r2, [r7, #22]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80096be:	7dba      	ldrb	r2, [r7, #22]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	32ae      	adds	r2, #174	@ 0xae
 80096c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	7afa      	ldrb	r2, [r7, #11]
 80096cc:	4611      	mov	r1, r2
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	4798      	blx	r3
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	e000      	b.n	80096e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b086      	sub	sp, #24
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	460b      	mov	r3, r1
 80096f4:	607a      	str	r2, [r7, #4]
 80096f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d16f      	bne.n	80097de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3314      	adds	r3, #20
 8009702:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800970a:	2b02      	cmp	r3, #2
 800970c:	d15a      	bne.n	80097c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	689a      	ldr	r2, [r3, #8]
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	429a      	cmp	r2, r3
 8009718:	d914      	bls.n	8009744 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	1ad2      	subs	r2, r2, r3
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	461a      	mov	r2, r3
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f001 f8bc 	bl	800a8ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009736:	2300      	movs	r3, #0
 8009738:	2200      	movs	r2, #0
 800973a:	2100      	movs	r1, #0
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f001 fd8f 	bl	800b260 <USBD_LL_PrepareReceive>
 8009742:	e03f      	b.n	80097c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	429a      	cmp	r2, r3
 800974e:	d11c      	bne.n	800978a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009758:	429a      	cmp	r2, r3
 800975a:	d316      	bcc.n	800978a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009766:	429a      	cmp	r2, r3
 8009768:	d20f      	bcs.n	800978a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800976a:	2200      	movs	r2, #0
 800976c:	2100      	movs	r1, #0
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f001 f89d 	bl	800a8ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800977c:	2300      	movs	r3, #0
 800977e:	2200      	movs	r2, #0
 8009780:	2100      	movs	r1, #0
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f001 fd6c 	bl	800b260 <USBD_LL_PrepareReceive>
 8009788:	e01c      	b.n	80097c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b03      	cmp	r3, #3
 8009794:	d10f      	bne.n	80097b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80097b6:	2180      	movs	r1, #128	@ 0x80
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f001 fca7 	bl	800b10c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f001 f8c7 	bl	800a952 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d03a      	beq.n	8009844 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff fe42 	bl	8009458 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80097dc:	e032      	b.n	8009844 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	4619      	mov	r1, r3
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f000 f985 	bl	8009af8 <USBD_CoreFindEP>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	2bff      	cmp	r3, #255	@ 0xff
 80097f6:	d025      	beq.n	8009844 <USBD_LL_DataInStage+0x15a>
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d122      	bne.n	8009844 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b03      	cmp	r3, #3
 8009808:	d11c      	bne.n	8009844 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800980a:	7dfa      	ldrb	r2, [r7, #23]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	32ae      	adds	r2, #174	@ 0xae
 8009810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d014      	beq.n	8009844 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800981a:	7dfa      	ldrb	r2, [r7, #23]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009822:	7dfa      	ldrb	r2, [r7, #23]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	32ae      	adds	r2, #174	@ 0xae
 8009828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	7afa      	ldrb	r2, [r7, #11]
 8009830:	4611      	mov	r1, r2
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	4798      	blx	r3
 8009836:	4603      	mov	r3, r0
 8009838:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800983a:	7dbb      	ldrb	r3, [r7, #22]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009840:	7dbb      	ldrb	r3, [r7, #22]
 8009842:	e000      	b.n	8009846 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009886:	2b00      	cmp	r3, #0
 8009888:	d014      	beq.n	80098b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00e      	beq.n	80098b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	6852      	ldr	r2, [r2, #4]
 80098a2:	b2d2      	uxtb	r2, r2
 80098a4:	4611      	mov	r1, r2
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80098b0:	2303      	movs	r3, #3
 80098b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098b4:	2340      	movs	r3, #64	@ 0x40
 80098b6:	2200      	movs	r2, #0
 80098b8:	2100      	movs	r1, #0
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fbe1 	bl	800b082 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2240      	movs	r2, #64	@ 0x40
 80098cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098d0:	2340      	movs	r3, #64	@ 0x40
 80098d2:	2200      	movs	r2, #0
 80098d4:	2180      	movs	r1, #128	@ 0x80
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f001 fbd3 	bl	800b082 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2240      	movs	r2, #64	@ 0x40
 80098e6:	621a      	str	r2, [r3, #32]

  return ret;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b083      	sub	sp, #12
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b04      	cmp	r3, #4
 8009924:	d006      	beq.n	8009934 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2204      	movs	r2, #4
 8009938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b04      	cmp	r3, #4
 800995c:	d106      	bne.n	800996c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009964:	b2da      	uxtb	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b03      	cmp	r3, #3
 800998c:	d110      	bne.n	80099b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	32ae      	adds	r2, #174	@ 0xae
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80099d8:	2303      	movs	r3, #3
 80099da:	e01c      	b.n	8009a16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d115      	bne.n	8009a14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	32ae      	adds	r2, #174	@ 0xae
 80099f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32ae      	adds	r2, #174	@ 0xae
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	460b      	mov	r3, r1
 8009a28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	32ae      	adds	r2, #174	@ 0xae
 8009a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e01c      	b.n	8009a7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d115      	bne.n	8009a78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	32ae      	adds	r2, #174	@ 0xae
 8009a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00b      	beq.n	8009a78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	32ae      	adds	r2, #174	@ 0xae
 8009a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	4611      	mov	r1, r2
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00e      	beq.n	8009ad4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	6852      	ldr	r2, [r2, #4]
 8009ac2:	b2d2      	uxtb	r2, r2
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009aea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	7812      	ldrb	r2, [r2, #0]
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d91f      	bls.n	8009b78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009b3e:	e013      	b.n	8009b68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009b40:	f107 030a 	add.w	r3, r7, #10
 8009b44:	4619      	mov	r1, r3
 8009b46:	6978      	ldr	r0, [r7, #20]
 8009b48:	f000 f81b 	bl	8009b82 <USBD_GetNextDesc>
 8009b4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	785b      	ldrb	r3, [r3, #1]
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	d108      	bne.n	8009b68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	789b      	ldrb	r3, [r3, #2]
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d008      	beq.n	8009b76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	885b      	ldrh	r3, [r3, #2]
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	897b      	ldrh	r3, [r7, #10]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d8e5      	bhi.n	8009b40 <USBD_GetEpDesc+0x2e>
 8009b74:	e000      	b.n	8009b78 <USBD_GetEpDesc+0x66>
          break;
 8009b76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009b78:	693b      	ldr	r3, [r7, #16]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b085      	sub	sp, #20
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	7812      	ldrb	r2, [r2, #0]
 8009b98:	4413      	add	r3, r2
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4413      	add	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009bac:	68fb      	ldr	r3, [r7, #12]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b087      	sub	sp, #28
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009bd8:	8a3b      	ldrh	r3, [r7, #16]
 8009bda:	021b      	lsls	r3, r3, #8
 8009bdc:	b21a      	sxth	r2, r3
 8009bde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	b21b      	sxth	r3, r3
 8009be6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009be8:	89fb      	ldrh	r3, [r7, #14]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	371c      	adds	r7, #28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
	...

08009bf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c0e:	2b40      	cmp	r3, #64	@ 0x40
 8009c10:	d005      	beq.n	8009c1e <USBD_StdDevReq+0x26>
 8009c12:	2b40      	cmp	r3, #64	@ 0x40
 8009c14:	d857      	bhi.n	8009cc6 <USBD_StdDevReq+0xce>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00f      	beq.n	8009c3a <USBD_StdDevReq+0x42>
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d153      	bne.n	8009cc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	32ae      	adds	r2, #174	@ 0xae
 8009c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	4798      	blx	r3
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
      break;
 8009c38:	e04a      	b.n	8009cd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b09      	cmp	r3, #9
 8009c40:	d83b      	bhi.n	8009cba <USBD_StdDevReq+0xc2>
 8009c42:	a201      	add	r2, pc, #4	@ (adr r2, 8009c48 <USBD_StdDevReq+0x50>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c9d 	.word	0x08009c9d
 8009c4c:	08009cb1 	.word	0x08009cb1
 8009c50:	08009cbb 	.word	0x08009cbb
 8009c54:	08009ca7 	.word	0x08009ca7
 8009c58:	08009cbb 	.word	0x08009cbb
 8009c5c:	08009c7b 	.word	0x08009c7b
 8009c60:	08009c71 	.word	0x08009c71
 8009c64:	08009cbb 	.word	0x08009cbb
 8009c68:	08009c93 	.word	0x08009c93
 8009c6c:	08009c85 	.word	0x08009c85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa3c 	bl	800a0f0 <USBD_GetDescriptor>
          break;
 8009c78:	e024      	b.n	8009cc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fba1 	bl	800a3c4 <USBD_SetAddress>
          break;
 8009c82:	e01f      	b.n	8009cc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fbe0 	bl	800a44c <USBD_SetConfig>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]
          break;
 8009c90:	e018      	b.n	8009cc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fc83 	bl	800a5a0 <USBD_GetConfig>
          break;
 8009c9a:	e013      	b.n	8009cc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fcb4 	bl	800a60c <USBD_GetStatus>
          break;
 8009ca4:	e00e      	b.n	8009cc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fce3 	bl	800a674 <USBD_SetFeature>
          break;
 8009cae:	e009      	b.n	8009cc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fd07 	bl	800a6c6 <USBD_ClrFeature>
          break;
 8009cb8:	e004      	b.n	8009cc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fd5e 	bl	800a77e <USBD_CtlError>
          break;
 8009cc2:	bf00      	nop
      }
      break;
 8009cc4:	e004      	b.n	8009cd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fd58 	bl	800a77e <USBD_CtlError>
      break;
 8009cce:	bf00      	nop
  }

  return ret;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop

08009cdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cf2:	2b40      	cmp	r3, #64	@ 0x40
 8009cf4:	d005      	beq.n	8009d02 <USBD_StdItfReq+0x26>
 8009cf6:	2b40      	cmp	r3, #64	@ 0x40
 8009cf8:	d852      	bhi.n	8009da0 <USBD_StdItfReq+0xc4>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <USBD_StdItfReq+0x26>
 8009cfe:	2b20      	cmp	r3, #32
 8009d00:	d14e      	bne.n	8009da0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d840      	bhi.n	8009d92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	889b      	ldrh	r3, [r3, #4]
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d836      	bhi.n	8009d88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	889b      	ldrh	r3, [r3, #4]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff fedb 	bl	8009ade <USBD_CoreFindIF>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	2bff      	cmp	r3, #255	@ 0xff
 8009d30:	d01d      	beq.n	8009d6e <USBD_StdItfReq+0x92>
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d11a      	bne.n	8009d6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d38:	7bba      	ldrb	r2, [r7, #14]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	32ae      	adds	r2, #174	@ 0xae
 8009d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00f      	beq.n	8009d68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009d48:	7bba      	ldrb	r2, [r7, #14]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d50:	7bba      	ldrb	r2, [r7, #14]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	32ae      	adds	r2, #174	@ 0xae
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d66:	e004      	b.n	8009d72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d6c:	e001      	b.n	8009d72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	88db      	ldrh	r3, [r3, #6]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d110      	bne.n	8009d9c <USBD_StdItfReq+0xc0>
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10d      	bne.n	8009d9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fdd3 	bl	800a92c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d86:	e009      	b.n	8009d9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fcf7 	bl	800a77e <USBD_CtlError>
          break;
 8009d90:	e004      	b.n	8009d9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fcf2 	bl	800a77e <USBD_CtlError>
          break;
 8009d9a:	e000      	b.n	8009d9e <USBD_StdItfReq+0xc2>
          break;
 8009d9c:	bf00      	nop
      }
      break;
 8009d9e:	e004      	b.n	8009daa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fceb 	bl	800a77e <USBD_CtlError>
      break;
 8009da8:	bf00      	nop
  }

  return ret;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	889b      	ldrh	r3, [r3, #4]
 8009dc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dd0:	2b40      	cmp	r3, #64	@ 0x40
 8009dd2:	d007      	beq.n	8009de4 <USBD_StdEPReq+0x30>
 8009dd4:	2b40      	cmp	r3, #64	@ 0x40
 8009dd6:	f200 817f 	bhi.w	800a0d8 <USBD_StdEPReq+0x324>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d02a      	beq.n	8009e34 <USBD_StdEPReq+0x80>
 8009dde:	2b20      	cmp	r3, #32
 8009de0:	f040 817a 	bne.w	800a0d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fe85 	bl	8009af8 <USBD_CoreFindEP>
 8009dee:	4603      	mov	r3, r0
 8009df0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009df2:	7b7b      	ldrb	r3, [r7, #13]
 8009df4:	2bff      	cmp	r3, #255	@ 0xff
 8009df6:	f000 8174 	beq.w	800a0e2 <USBD_StdEPReq+0x32e>
 8009dfa:	7b7b      	ldrb	r3, [r7, #13]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 8170 	bne.w	800a0e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009e02:	7b7a      	ldrb	r2, [r7, #13]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e0a:	7b7a      	ldrb	r2, [r7, #13]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	32ae      	adds	r2, #174	@ 0xae
 8009e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 8163 	beq.w	800a0e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009e1c:	7b7a      	ldrb	r2, [r7, #13]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	32ae      	adds	r2, #174	@ 0xae
 8009e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e32:	e156      	b.n	800a0e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d008      	beq.n	8009e4e <USBD_StdEPReq+0x9a>
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	f300 8145 	bgt.w	800a0cc <USBD_StdEPReq+0x318>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 809b 	beq.w	8009f7e <USBD_StdEPReq+0x1ca>
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d03c      	beq.n	8009ec6 <USBD_StdEPReq+0x112>
 8009e4c:	e13e      	b.n	800a0cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d002      	beq.n	8009e60 <USBD_StdEPReq+0xac>
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d016      	beq.n	8009e8c <USBD_StdEPReq+0xd8>
 8009e5e:	e02c      	b.n	8009eba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00d      	beq.n	8009e82 <USBD_StdEPReq+0xce>
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b80      	cmp	r3, #128	@ 0x80
 8009e6a:	d00a      	beq.n	8009e82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f94b 	bl	800b10c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e76:	2180      	movs	r1, #128	@ 0x80
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f947 	bl	800b10c <USBD_LL_StallEP>
 8009e7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e80:	e020      	b.n	8009ec4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fc7a 	bl	800a77e <USBD_CtlError>
              break;
 8009e8a:	e01b      	b.n	8009ec4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	885b      	ldrh	r3, [r3, #2]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10e      	bne.n	8009eb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00b      	beq.n	8009eb2 <USBD_StdEPReq+0xfe>
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	2b80      	cmp	r3, #128	@ 0x80
 8009e9e:	d008      	beq.n	8009eb2 <USBD_StdEPReq+0xfe>
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	88db      	ldrh	r3, [r3, #6]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d104      	bne.n	8009eb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 f92d 	bl	800b10c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fd3a 	bl	800a92c <USBD_CtlSendStatus>

              break;
 8009eb8:	e004      	b.n	8009ec4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fc5e 	bl	800a77e <USBD_CtlError>
              break;
 8009ec2:	bf00      	nop
          }
          break;
 8009ec4:	e107      	b.n	800a0d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d002      	beq.n	8009ed8 <USBD_StdEPReq+0x124>
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d016      	beq.n	8009f04 <USBD_StdEPReq+0x150>
 8009ed6:	e04b      	b.n	8009f70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00d      	beq.n	8009efa <USBD_StdEPReq+0x146>
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b80      	cmp	r3, #128	@ 0x80
 8009ee2:	d00a      	beq.n	8009efa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 f90f 	bl	800b10c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eee:	2180      	movs	r1, #128	@ 0x80
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 f90b 	bl	800b10c <USBD_LL_StallEP>
 8009ef6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ef8:	e040      	b.n	8009f7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fc3e 	bl	800a77e <USBD_CtlError>
              break;
 8009f02:	e03b      	b.n	8009f7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	885b      	ldrh	r3, [r3, #2]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d136      	bne.n	8009f7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d004      	beq.n	8009f20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 f915 	bl	800b14a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fd03 	bl	800a92c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff fde4 	bl	8009af8 <USBD_CoreFindEP>
 8009f30:	4603      	mov	r3, r0
 8009f32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f34:	7b7b      	ldrb	r3, [r7, #13]
 8009f36:	2bff      	cmp	r3, #255	@ 0xff
 8009f38:	d01f      	beq.n	8009f7a <USBD_StdEPReq+0x1c6>
 8009f3a:	7b7b      	ldrb	r3, [r7, #13]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d11c      	bne.n	8009f7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009f40:	7b7a      	ldrb	r2, [r7, #13]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009f48:	7b7a      	ldrb	r2, [r7, #13]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32ae      	adds	r2, #174	@ 0xae
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d010      	beq.n	8009f7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f58:	7b7a      	ldrb	r2, [r7, #13]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	32ae      	adds	r2, #174	@ 0xae
 8009f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	4798      	blx	r3
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009f6e:	e004      	b.n	8009f7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fc03 	bl	800a77e <USBD_CtlError>
              break;
 8009f78:	e000      	b.n	8009f7c <USBD_StdEPReq+0x1c8>
              break;
 8009f7a:	bf00      	nop
          }
          break;
 8009f7c:	e0ab      	b.n	800a0d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d002      	beq.n	8009f90 <USBD_StdEPReq+0x1dc>
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d032      	beq.n	8009ff4 <USBD_StdEPReq+0x240>
 8009f8e:	e097      	b.n	800a0c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d007      	beq.n	8009fa6 <USBD_StdEPReq+0x1f2>
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
 8009f98:	2b80      	cmp	r3, #128	@ 0x80
 8009f9a:	d004      	beq.n	8009fa6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fbed 	bl	800a77e <USBD_CtlError>
                break;
 8009fa4:	e091      	b.n	800a0ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	da0b      	bge.n	8009fc6 <USBD_StdEPReq+0x212>
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	3310      	adds	r3, #16
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	e00b      	b.n	8009fde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fc6:	7bbb      	ldrb	r3, [r7, #14]
 8009fc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	4413      	add	r3, r2
 8009fdc:	3304      	adds	r3, #4
 8009fde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fc43 	bl	800a878 <USBD_CtlSendData>
              break;
 8009ff2:	e06a      	b.n	800a0ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	da11      	bge.n	800a020 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	f003 020f 	and.w	r2, r3, #15
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	440b      	add	r3, r1
 800a00e:	3324      	adds	r3, #36	@ 0x24
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d117      	bne.n	800a046 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fbb0 	bl	800a77e <USBD_CtlError>
                  break;
 800a01e:	e054      	b.n	800a0ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	f003 020f 	and.w	r2, r3, #15
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	440b      	add	r3, r1
 800a032:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fb9d 	bl	800a77e <USBD_CtlError>
                  break;
 800a044:	e041      	b.n	800a0ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	da0b      	bge.n	800a066 <USBD_StdEPReq+0x2b2>
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	3310      	adds	r3, #16
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	4413      	add	r3, r2
 800a062:	3304      	adds	r3, #4
 800a064:	e00b      	b.n	800a07e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a066:	7bbb      	ldrb	r3, [r7, #14]
 800a068:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a06c:	4613      	mov	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	4413      	add	r3, r2
 800a07c:	3304      	adds	r3, #4
 800a07e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <USBD_StdEPReq+0x2d8>
 800a086:	7bbb      	ldrb	r3, [r7, #14]
 800a088:	2b80      	cmp	r3, #128	@ 0x80
 800a08a:	d103      	bne.n	800a094 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	e00e      	b.n	800a0b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f001 f875 	bl	800b188 <USBD_LL_IsStallEP>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	e002      	b.n	800a0b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fbdd 	bl	800a878 <USBD_CtlSendData>
              break;
 800a0be:	e004      	b.n	800a0ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fb5b 	bl	800a77e <USBD_CtlError>
              break;
 800a0c8:	bf00      	nop
          }
          break;
 800a0ca:	e004      	b.n	800a0d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fb55 	bl	800a77e <USBD_CtlError>
          break;
 800a0d4:	bf00      	nop
      }
      break;
 800a0d6:	e005      	b.n	800a0e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fb4f 	bl	800a77e <USBD_CtlError>
      break;
 800a0e0:	e000      	b.n	800a0e4 <USBD_StdEPReq+0x330>
      break;
 800a0e2:	bf00      	nop
  }

  return ret;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	885b      	ldrh	r3, [r3, #2]
 800a10a:	0a1b      	lsrs	r3, r3, #8
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	3b01      	subs	r3, #1
 800a110:	2b06      	cmp	r3, #6
 800a112:	f200 8128 	bhi.w	800a366 <USBD_GetDescriptor+0x276>
 800a116:	a201      	add	r2, pc, #4	@ (adr r2, 800a11c <USBD_GetDescriptor+0x2c>)
 800a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11c:	0800a139 	.word	0x0800a139
 800a120:	0800a151 	.word	0x0800a151
 800a124:	0800a191 	.word	0x0800a191
 800a128:	0800a367 	.word	0x0800a367
 800a12c:	0800a367 	.word	0x0800a367
 800a130:	0800a307 	.word	0x0800a307
 800a134:	0800a333 	.word	0x0800a333
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	7c12      	ldrb	r2, [r2, #16]
 800a144:	f107 0108 	add.w	r1, r7, #8
 800a148:	4610      	mov	r0, r2
 800a14a:	4798      	blx	r3
 800a14c:	60f8      	str	r0, [r7, #12]
      break;
 800a14e:	e112      	b.n	800a376 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	7c1b      	ldrb	r3, [r3, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10d      	bne.n	800a174 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a160:	f107 0208 	add.w	r2, r7, #8
 800a164:	4610      	mov	r0, r2
 800a166:	4798      	blx	r3
 800a168:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	2202      	movs	r2, #2
 800a170:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a172:	e100      	b.n	800a376 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17c:	f107 0208 	add.w	r2, r7, #8
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
 800a184:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	2202      	movs	r2, #2
 800a18c:	701a      	strb	r2, [r3, #0]
      break;
 800a18e:	e0f2      	b.n	800a376 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	885b      	ldrh	r3, [r3, #2]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b05      	cmp	r3, #5
 800a198:	f200 80ac 	bhi.w	800a2f4 <USBD_GetDescriptor+0x204>
 800a19c:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a4 <USBD_GetDescriptor+0xb4>)
 800a19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a2:	bf00      	nop
 800a1a4:	0800a1bd 	.word	0x0800a1bd
 800a1a8:	0800a1f1 	.word	0x0800a1f1
 800a1ac:	0800a225 	.word	0x0800a225
 800a1b0:	0800a259 	.word	0x0800a259
 800a1b4:	0800a28d 	.word	0x0800a28d
 800a1b8:	0800a2c1 	.word	0x0800a2c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00b      	beq.n	800a1e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	7c12      	ldrb	r2, [r2, #16]
 800a1d4:	f107 0108 	add.w	r1, r7, #8
 800a1d8:	4610      	mov	r0, r2
 800a1da:	4798      	blx	r3
 800a1dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1de:	e091      	b.n	800a304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 facb 	bl	800a77e <USBD_CtlError>
            err++;
 800a1e8:	7afb      	ldrb	r3, [r7, #11]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ee:	e089      	b.n	800a304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	7c12      	ldrb	r2, [r2, #16]
 800a208:	f107 0108 	add.w	r1, r7, #8
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
 800a210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a212:	e077      	b.n	800a304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fab1 	bl	800a77e <USBD_CtlError>
            err++;
 800a21c:	7afb      	ldrb	r3, [r7, #11]
 800a21e:	3301      	adds	r3, #1
 800a220:	72fb      	strb	r3, [r7, #11]
          break;
 800a222:	e06f      	b.n	800a304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00b      	beq.n	800a248 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	7c12      	ldrb	r2, [r2, #16]
 800a23c:	f107 0108 	add.w	r1, r7, #8
 800a240:	4610      	mov	r0, r2
 800a242:	4798      	blx	r3
 800a244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a246:	e05d      	b.n	800a304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fa97 	bl	800a77e <USBD_CtlError>
            err++;
 800a250:	7afb      	ldrb	r3, [r7, #11]
 800a252:	3301      	adds	r3, #1
 800a254:	72fb      	strb	r3, [r7, #11]
          break;
 800a256:	e055      	b.n	800a304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00b      	beq.n	800a27c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	7c12      	ldrb	r2, [r2, #16]
 800a270:	f107 0108 	add.w	r1, r7, #8
 800a274:	4610      	mov	r0, r2
 800a276:	4798      	blx	r3
 800a278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a27a:	e043      	b.n	800a304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fa7d 	bl	800a77e <USBD_CtlError>
            err++;
 800a284:	7afb      	ldrb	r3, [r7, #11]
 800a286:	3301      	adds	r3, #1
 800a288:	72fb      	strb	r3, [r7, #11]
          break;
 800a28a:	e03b      	b.n	800a304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00b      	beq.n	800a2b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	7c12      	ldrb	r2, [r2, #16]
 800a2a4:	f107 0108 	add.w	r1, r7, #8
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
 800a2ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ae:	e029      	b.n	800a304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fa63 	bl	800a77e <USBD_CtlError>
            err++;
 800a2b8:	7afb      	ldrb	r3, [r7, #11]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2be:	e021      	b.n	800a304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00b      	beq.n	800a2e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	7c12      	ldrb	r2, [r2, #16]
 800a2d8:	f107 0108 	add.w	r1, r7, #8
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4798      	blx	r3
 800a2e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2e2:	e00f      	b.n	800a304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fa49 	bl	800a77e <USBD_CtlError>
            err++;
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2f2:	e007      	b.n	800a304 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa41 	bl	800a77e <USBD_CtlError>
          err++;
 800a2fc:	7afb      	ldrb	r3, [r7, #11]
 800a2fe:	3301      	adds	r3, #1
 800a300:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a302:	bf00      	nop
      }
      break;
 800a304:	e037      	b.n	800a376 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	7c1b      	ldrb	r3, [r3, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d109      	bne.n	800a322 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a316:	f107 0208 	add.w	r2, r7, #8
 800a31a:	4610      	mov	r0, r2
 800a31c:	4798      	blx	r3
 800a31e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a320:	e029      	b.n	800a376 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fa2a 	bl	800a77e <USBD_CtlError>
        err++;
 800a32a:	7afb      	ldrb	r3, [r7, #11]
 800a32c:	3301      	adds	r3, #1
 800a32e:	72fb      	strb	r3, [r7, #11]
      break;
 800a330:	e021      	b.n	800a376 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	7c1b      	ldrb	r3, [r3, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10d      	bne.n	800a356 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a342:	f107 0208 	add.w	r2, r7, #8
 800a346:	4610      	mov	r0, r2
 800a348:	4798      	blx	r3
 800a34a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3301      	adds	r3, #1
 800a350:	2207      	movs	r2, #7
 800a352:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a354:	e00f      	b.n	800a376 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fa10 	bl	800a77e <USBD_CtlError>
        err++;
 800a35e:	7afb      	ldrb	r3, [r7, #11]
 800a360:	3301      	adds	r3, #1
 800a362:	72fb      	strb	r3, [r7, #11]
      break;
 800a364:	e007      	b.n	800a376 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fa08 	bl	800a77e <USBD_CtlError>
      err++;
 800a36e:	7afb      	ldrb	r3, [r7, #11]
 800a370:	3301      	adds	r3, #1
 800a372:	72fb      	strb	r3, [r7, #11]
      break;
 800a374:	bf00      	nop
  }

  if (err != 0U)
 800a376:	7afb      	ldrb	r3, [r7, #11]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d11e      	bne.n	800a3ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	88db      	ldrh	r3, [r3, #6]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d016      	beq.n	800a3b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a384:	893b      	ldrh	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00e      	beq.n	800a3a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	88da      	ldrh	r2, [r3, #6]
 800a38e:	893b      	ldrh	r3, [r7, #8]
 800a390:	4293      	cmp	r3, r2
 800a392:	bf28      	it	cs
 800a394:	4613      	movcs	r3, r2
 800a396:	b29b      	uxth	r3, r3
 800a398:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a39a:	893b      	ldrh	r3, [r7, #8]
 800a39c:	461a      	mov	r2, r3
 800a39e:	68f9      	ldr	r1, [r7, #12]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fa69 	bl	800a878 <USBD_CtlSendData>
 800a3a6:	e009      	b.n	800a3bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f9e7 	bl	800a77e <USBD_CtlError>
 800a3b0:	e004      	b.n	800a3bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 faba 	bl	800a92c <USBD_CtlSendStatus>
 800a3b8:	e000      	b.n	800a3bc <USBD_GetDescriptor+0x2cc>
    return;
 800a3ba:	bf00      	nop
  }
}
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop

0800a3c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	889b      	ldrh	r3, [r3, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d131      	bne.n	800a43a <USBD_SetAddress+0x76>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	88db      	ldrh	r3, [r3, #6]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d12d      	bne.n	800a43a <USBD_SetAddress+0x76>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	885b      	ldrh	r3, [r3, #2]
 800a3e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3e4:	d829      	bhi.n	800a43a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	885b      	ldrh	r3, [r3, #2]
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d104      	bne.n	800a408 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f9bc 	bl	800a77e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a406:	e01d      	b.n	800a444 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	7bfa      	ldrb	r2, [r7, #15]
 800a40c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fee3 	bl	800b1e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fa86 	bl	800a92c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d004      	beq.n	800a430 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2202      	movs	r2, #2
 800a42a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42e:	e009      	b.n	800a444 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a438:	e004      	b.n	800a444 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f99e 	bl	800a77e <USBD_CtlError>
  }
}
 800a442:	bf00      	nop
 800a444:	bf00      	nop
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	885b      	ldrh	r3, [r3, #2]
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	4b4e      	ldr	r3, [pc, #312]	@ (800a59c <USBD_SetConfig+0x150>)
 800a462:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a464:	4b4d      	ldr	r3, [pc, #308]	@ (800a59c <USBD_SetConfig+0x150>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d905      	bls.n	800a478 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f985 	bl	800a77e <USBD_CtlError>
    return USBD_FAIL;
 800a474:	2303      	movs	r3, #3
 800a476:	e08c      	b.n	800a592 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b02      	cmp	r3, #2
 800a482:	d002      	beq.n	800a48a <USBD_SetConfig+0x3e>
 800a484:	2b03      	cmp	r3, #3
 800a486:	d029      	beq.n	800a4dc <USBD_SetConfig+0x90>
 800a488:	e075      	b.n	800a576 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a48a:	4b44      	ldr	r3, [pc, #272]	@ (800a59c <USBD_SetConfig+0x150>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d020      	beq.n	800a4d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a492:	4b42      	ldr	r3, [pc, #264]	@ (800a59c <USBD_SetConfig+0x150>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a49c:	4b3f      	ldr	r3, [pc, #252]	@ (800a59c <USBD_SetConfig+0x150>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7fe ffe3 	bl	800946e <USBD_SetClassConfig>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d008      	beq.n	800a4c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f962 	bl	800a77e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4c2:	e065      	b.n	800a590 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fa31 	bl	800a92c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2203      	movs	r2, #3
 800a4ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4d2:	e05d      	b.n	800a590 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fa29 	bl	800a92c <USBD_CtlSendStatus>
      break;
 800a4da:	e059      	b.n	800a590 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4dc:	4b2f      	ldr	r3, [pc, #188]	@ (800a59c <USBD_SetConfig+0x150>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d112      	bne.n	800a50a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a4ec:	4b2b      	ldr	r3, [pc, #172]	@ (800a59c <USBD_SetConfig+0x150>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4f6:	4b29      	ldr	r3, [pc, #164]	@ (800a59c <USBD_SetConfig+0x150>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7fe ffd2 	bl	80094a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fa12 	bl	800a92c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a508:	e042      	b.n	800a590 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a50a:	4b24      	ldr	r3, [pc, #144]	@ (800a59c <USBD_SetConfig+0x150>)
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	429a      	cmp	r2, r3
 800a516:	d02a      	beq.n	800a56e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7fe ffc0 	bl	80094a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a526:	4b1d      	ldr	r3, [pc, #116]	@ (800a59c <USBD_SetConfig+0x150>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a530:	4b1a      	ldr	r3, [pc, #104]	@ (800a59c <USBD_SetConfig+0x150>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7fe ff99 	bl	800946e <USBD_SetClassConfig>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00f      	beq.n	800a566 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f918 	bl	800a77e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7fe ffa5 	bl	80094a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a564:	e014      	b.n	800a590 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f9e0 	bl	800a92c <USBD_CtlSendStatus>
      break;
 800a56c:	e010      	b.n	800a590 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f9dc 	bl	800a92c <USBD_CtlSendStatus>
      break;
 800a574:	e00c      	b.n	800a590 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f900 	bl	800a77e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a57e:	4b07      	ldr	r3, [pc, #28]	@ (800a59c <USBD_SetConfig+0x150>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7fe ff8e 	bl	80094a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a58a:	2303      	movs	r3, #3
 800a58c:	73fb      	strb	r3, [r7, #15]
      break;
 800a58e:	bf00      	nop
  }

  return ret;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	200005f8 	.word	0x200005f8

0800a5a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	88db      	ldrh	r3, [r3, #6]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d004      	beq.n	800a5bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f8e2 	bl	800a77e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5ba:	e023      	b.n	800a604 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	dc02      	bgt.n	800a5ce <USBD_GetConfig+0x2e>
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	dc03      	bgt.n	800a5d4 <USBD_GetConfig+0x34>
 800a5cc:	e015      	b.n	800a5fa <USBD_GetConfig+0x5a>
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d00b      	beq.n	800a5ea <USBD_GetConfig+0x4a>
 800a5d2:	e012      	b.n	800a5fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3308      	adds	r3, #8
 800a5de:	2201      	movs	r2, #1
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f948 	bl	800a878 <USBD_CtlSendData>
        break;
 800a5e8:	e00c      	b.n	800a604 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f940 	bl	800a878 <USBD_CtlSendData>
        break;
 800a5f8:	e004      	b.n	800a604 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f8be 	bl	800a77e <USBD_CtlError>
        break;
 800a602:	bf00      	nop
}
 800a604:	bf00      	nop
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	3b01      	subs	r3, #1
 800a620:	2b02      	cmp	r3, #2
 800a622:	d81e      	bhi.n	800a662 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	88db      	ldrh	r3, [r3, #6]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d004      	beq.n	800a636 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f8a5 	bl	800a77e <USBD_CtlError>
        break;
 800a634:	e01a      	b.n	800a66c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a642:	2b00      	cmp	r3, #0
 800a644:	d005      	beq.n	800a652 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f043 0202 	orr.w	r2, r3, #2
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	330c      	adds	r3, #12
 800a656:	2202      	movs	r2, #2
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f90c 	bl	800a878 <USBD_CtlSendData>
      break;
 800a660:	e004      	b.n	800a66c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f88a 	bl	800a77e <USBD_CtlError>
      break;
 800a66a:	bf00      	nop
  }
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	885b      	ldrh	r3, [r3, #2]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d107      	bne.n	800a696 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f94c 	bl	800a92c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a694:	e013      	b.n	800a6be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	885b      	ldrh	r3, [r3, #2]
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d10b      	bne.n	800a6b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	889b      	ldrh	r3, [r3, #4]
 800a6a2:	0a1b      	lsrs	r3, r3, #8
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f93c 	bl	800a92c <USBD_CtlSendStatus>
}
 800a6b4:	e003      	b.n	800a6be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f860 	bl	800a77e <USBD_CtlError>
}
 800a6be:	bf00      	nop
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d80b      	bhi.n	800a6f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	885b      	ldrh	r3, [r3, #2]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d10c      	bne.n	800a700 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f91c 	bl	800a92c <USBD_CtlSendStatus>
      }
      break;
 800a6f4:	e004      	b.n	800a700 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f840 	bl	800a77e <USBD_CtlError>
      break;
 800a6fe:	e000      	b.n	800a702 <USBD_ClrFeature+0x3c>
      break;
 800a700:	bf00      	nop
  }
}
 800a702:	bf00      	nop
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	781a      	ldrb	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3301      	adds	r3, #1
 800a724:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	781a      	ldrb	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	3301      	adds	r3, #1
 800a732:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f7ff fa40 	bl	8009bba <SWAPBYTE>
 800a73a:	4603      	mov	r3, r0
 800a73c:	461a      	mov	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3301      	adds	r3, #1
 800a746:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	3301      	adds	r3, #1
 800a74c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff fa33 	bl	8009bba <SWAPBYTE>
 800a754:	4603      	mov	r3, r0
 800a756:	461a      	mov	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3301      	adds	r3, #1
 800a760:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3301      	adds	r3, #1
 800a766:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff fa26 	bl	8009bba <SWAPBYTE>
 800a76e:	4603      	mov	r3, r0
 800a770:	461a      	mov	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	80da      	strh	r2, [r3, #6]
}
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a788:	2180      	movs	r1, #128	@ 0x80
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fcbe 	bl	800b10c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a790:	2100      	movs	r1, #0
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fcba 	bl	800b10c <USBD_LL_StallEP>
}
 800a798:	bf00      	nop
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d042      	beq.n	800a83c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a7ba:	6938      	ldr	r0, [r7, #16]
 800a7bc:	f000 f842 	bl	800a844 <USBD_GetLen>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7ca:	d808      	bhi.n	800a7de <USBD_GetString+0x3e>
 800a7cc:	6938      	ldr	r0, [r7, #16]
 800a7ce:	f000 f839 	bl	800a844 <USBD_GetLen>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	e001      	b.n	800a7e2 <USBD_GetString+0x42>
 800a7de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	7812      	ldrb	r2, [r2, #0]
 800a7f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	2203      	movs	r2, #3
 800a800:	701a      	strb	r2, [r3, #0]
  idx++;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	3301      	adds	r3, #1
 800a806:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a808:	e013      	b.n	800a832 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	4413      	add	r3, r2
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	7812      	ldrb	r2, [r2, #0]
 800a814:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	3301      	adds	r3, #1
 800a81a:	613b      	str	r3, [r7, #16]
    idx++;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	3301      	adds	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	4413      	add	r3, r2
 800a828:	2200      	movs	r2, #0
 800a82a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
 800a82e:	3301      	adds	r3, #1
 800a830:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1e7      	bne.n	800a80a <USBD_GetString+0x6a>
 800a83a:	e000      	b.n	800a83e <USBD_GetString+0x9e>
    return;
 800a83c:	bf00      	nop
  }
}
 800a83e:	3718      	adds	r7, #24
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a854:	e005      	b.n	800a862 <USBD_GetLen+0x1e>
  {
    len++;
 800a856:	7bfb      	ldrb	r3, [r7, #15]
 800a858:	3301      	adds	r3, #1
 800a85a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	3301      	adds	r3, #1
 800a860:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1f5      	bne.n	800a856 <USBD_GetLen+0x12>
  }

  return len;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2202      	movs	r2, #2
 800a888:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	2100      	movs	r1, #0
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f000 fcbd 	bl	800b21e <USBD_LL_Transmit>

  return USBD_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	2100      	movs	r1, #0
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 fcac 	bl	800b21e <USBD_LL_Transmit>

  return USBD_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2203      	movs	r2, #3
 800a8e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 fcb0 	bl	800b260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	2100      	movs	r1, #0
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 fc9f 	bl	800b260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2204      	movs	r2, #4
 800a938:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a93c:	2300      	movs	r3, #0
 800a93e:	2200      	movs	r2, #0
 800a940:	2100      	movs	r1, #0
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fc6b 	bl	800b21e <USBD_LL_Transmit>

  return USBD_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2205      	movs	r2, #5
 800a95e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a962:	2300      	movs	r3, #0
 800a964:	2200      	movs	r2, #0
 800a966:	2100      	movs	r1, #0
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fc79 	bl	800b260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a97c:	2200      	movs	r2, #0
 800a97e:	4912      	ldr	r1, [pc, #72]	@ (800a9c8 <MX_USB_DEVICE_Init+0x50>)
 800a980:	4812      	ldr	r0, [pc, #72]	@ (800a9cc <MX_USB_DEVICE_Init+0x54>)
 800a982:	f7fe fcf7 	bl	8009374 <USBD_Init>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a98c:	f7f7 f976 	bl	8001c7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a990:	490f      	ldr	r1, [pc, #60]	@ (800a9d0 <MX_USB_DEVICE_Init+0x58>)
 800a992:	480e      	ldr	r0, [pc, #56]	@ (800a9cc <MX_USB_DEVICE_Init+0x54>)
 800a994:	f7fe fd1e 	bl	80093d4 <USBD_RegisterClass>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a99e:	f7f7 f96d 	bl	8001c7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9a2:	490c      	ldr	r1, [pc, #48]	@ (800a9d4 <MX_USB_DEVICE_Init+0x5c>)
 800a9a4:	4809      	ldr	r0, [pc, #36]	@ (800a9cc <MX_USB_DEVICE_Init+0x54>)
 800a9a6:	f7fe fc55 	bl	8009254 <USBD_CDC_RegisterInterface>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a9b0:	f7f7 f964 	bl	8001c7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9b4:	4805      	ldr	r0, [pc, #20]	@ (800a9cc <MX_USB_DEVICE_Init+0x54>)
 800a9b6:	f7fe fd43 	bl	8009440 <USBD_Start>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a9c0:	f7f7 f95c 	bl	8001c7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9c4:	bf00      	nop
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	200000b4 	.word	0x200000b4
 800a9cc:	200005fc 	.word	0x200005fc
 800a9d0:	20000020 	.word	0x20000020
 800a9d4:	200000a0 	.word	0x200000a0

0800a9d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4905      	ldr	r1, [pc, #20]	@ (800a9f4 <CDC_Init_FS+0x1c>)
 800a9e0:	4805      	ldr	r0, [pc, #20]	@ (800a9f8 <CDC_Init_FS+0x20>)
 800a9e2:	f7fe fc51 	bl	8009288 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9e6:	4905      	ldr	r1, [pc, #20]	@ (800a9fc <CDC_Init_FS+0x24>)
 800a9e8:	4803      	ldr	r0, [pc, #12]	@ (800a9f8 <CDC_Init_FS+0x20>)
 800a9ea:	f7fe fc6f 	bl	80092cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	200010d8 	.word	0x200010d8
 800a9f8:	200005fc 	.word	0x200005fc
 800a9fc:	200008d8 	.word	0x200008d8

0800aa00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	6039      	str	r1, [r7, #0]
 800aa1a:	71fb      	strb	r3, [r7, #7]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	2b23      	cmp	r3, #35	@ 0x23
 800aa24:	d84a      	bhi.n	800aabc <CDC_Control_FS+0xac>
 800aa26:	a201      	add	r2, pc, #4	@ (adr r2, 800aa2c <CDC_Control_FS+0x1c>)
 800aa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2c:	0800aabd 	.word	0x0800aabd
 800aa30:	0800aabd 	.word	0x0800aabd
 800aa34:	0800aabd 	.word	0x0800aabd
 800aa38:	0800aabd 	.word	0x0800aabd
 800aa3c:	0800aabd 	.word	0x0800aabd
 800aa40:	0800aabd 	.word	0x0800aabd
 800aa44:	0800aabd 	.word	0x0800aabd
 800aa48:	0800aabd 	.word	0x0800aabd
 800aa4c:	0800aabd 	.word	0x0800aabd
 800aa50:	0800aabd 	.word	0x0800aabd
 800aa54:	0800aabd 	.word	0x0800aabd
 800aa58:	0800aabd 	.word	0x0800aabd
 800aa5c:	0800aabd 	.word	0x0800aabd
 800aa60:	0800aabd 	.word	0x0800aabd
 800aa64:	0800aabd 	.word	0x0800aabd
 800aa68:	0800aabd 	.word	0x0800aabd
 800aa6c:	0800aabd 	.word	0x0800aabd
 800aa70:	0800aabd 	.word	0x0800aabd
 800aa74:	0800aabd 	.word	0x0800aabd
 800aa78:	0800aabd 	.word	0x0800aabd
 800aa7c:	0800aabd 	.word	0x0800aabd
 800aa80:	0800aabd 	.word	0x0800aabd
 800aa84:	0800aabd 	.word	0x0800aabd
 800aa88:	0800aabd 	.word	0x0800aabd
 800aa8c:	0800aabd 	.word	0x0800aabd
 800aa90:	0800aabd 	.word	0x0800aabd
 800aa94:	0800aabd 	.word	0x0800aabd
 800aa98:	0800aabd 	.word	0x0800aabd
 800aa9c:	0800aabd 	.word	0x0800aabd
 800aaa0:	0800aabd 	.word	0x0800aabd
 800aaa4:	0800aabd 	.word	0x0800aabd
 800aaa8:	0800aabd 	.word	0x0800aabd
 800aaac:	0800aabd 	.word	0x0800aabd
 800aab0:	0800aabd 	.word	0x0800aabd
 800aab4:	0800aabd 	.word	0x0800aabd
 800aab8:	0800aabd 	.word	0x0800aabd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aabc:	bf00      	nop
  }

  return (USBD_OK);
 800aabe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	4805      	ldr	r0, [pc, #20]	@ (800aaf0 <CDC_Receive_FS+0x24>)
 800aada:	f7fe fbf7 	bl	80092cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aade:	4804      	ldr	r0, [pc, #16]	@ (800aaf0 <CDC_Receive_FS+0x24>)
 800aae0:	f7fe fc12 	bl	8009308 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aae4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	200005fc 	.word	0x200005fc

0800aaf4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
	...

0800ab18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2212      	movs	r2, #18
 800ab28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab2a:	4b03      	ldr	r3, [pc, #12]	@ (800ab38 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	200000d0 	.word	0x200000d0

0800ab3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	6039      	str	r1, [r7, #0]
 800ab46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2204      	movs	r2, #4
 800ab4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab4e:	4b03      	ldr	r3, [pc, #12]	@ (800ab5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	200000e4 	.word	0x200000e4

0800ab60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	4603      	mov	r3, r0
 800ab68:	6039      	str	r1, [r7, #0]
 800ab6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d105      	bne.n	800ab7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	4907      	ldr	r1, [pc, #28]	@ (800ab94 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab76:	4808      	ldr	r0, [pc, #32]	@ (800ab98 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab78:	f7ff fe12 	bl	800a7a0 <USBD_GetString>
 800ab7c:	e004      	b.n	800ab88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	4904      	ldr	r1, [pc, #16]	@ (800ab94 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab82:	4805      	ldr	r0, [pc, #20]	@ (800ab98 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab84:	f7ff fe0c 	bl	800a7a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab88:	4b02      	ldr	r3, [pc, #8]	@ (800ab94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	200018d8 	.word	0x200018d8
 800ab98:	0800fa58 	.word	0x0800fa58

0800ab9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	6039      	str	r1, [r7, #0]
 800aba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	4904      	ldr	r1, [pc, #16]	@ (800abbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800abac:	4804      	ldr	r0, [pc, #16]	@ (800abc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800abae:	f7ff fdf7 	bl	800a7a0 <USBD_GetString>
  return USBD_StrDesc;
 800abb2:	4b02      	ldr	r3, [pc, #8]	@ (800abbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	200018d8 	.word	0x200018d8
 800abc0:	0800fa70 	.word	0x0800fa70

0800abc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	6039      	str	r1, [r7, #0]
 800abce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	221a      	movs	r2, #26
 800abd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800abd6:	f000 f843 	bl	800ac60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800abda:	4b02      	ldr	r3, [pc, #8]	@ (800abe4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	200000e8 	.word	0x200000e8

0800abe8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	6039      	str	r1, [r7, #0]
 800abf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800abf4:	79fb      	ldrb	r3, [r7, #7]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	4907      	ldr	r1, [pc, #28]	@ (800ac1c <USBD_FS_ConfigStrDescriptor+0x34>)
 800abfe:	4808      	ldr	r0, [pc, #32]	@ (800ac20 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac00:	f7ff fdce 	bl	800a7a0 <USBD_GetString>
 800ac04:	e004      	b.n	800ac10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	4904      	ldr	r1, [pc, #16]	@ (800ac1c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac0a:	4805      	ldr	r0, [pc, #20]	@ (800ac20 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac0c:	f7ff fdc8 	bl	800a7a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac10:	4b02      	ldr	r3, [pc, #8]	@ (800ac1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	200018d8 	.word	0x200018d8
 800ac20:	0800fa84 	.word	0x0800fa84

0800ac24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac30:	79fb      	ldrb	r3, [r7, #7]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d105      	bne.n	800ac42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	4907      	ldr	r1, [pc, #28]	@ (800ac58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac3a:	4808      	ldr	r0, [pc, #32]	@ (800ac5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac3c:	f7ff fdb0 	bl	800a7a0 <USBD_GetString>
 800ac40:	e004      	b.n	800ac4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	4904      	ldr	r1, [pc, #16]	@ (800ac58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac46:	4805      	ldr	r0, [pc, #20]	@ (800ac5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac48:	f7ff fdaa 	bl	800a7a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac4c:	4b02      	ldr	r3, [pc, #8]	@ (800ac58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	200018d8 	.word	0x200018d8
 800ac5c:	0800fa90 	.word	0x0800fa90

0800ac60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac66:	4b0f      	ldr	r3, [pc, #60]	@ (800aca4 <Get_SerialNum+0x44>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac6c:	4b0e      	ldr	r3, [pc, #56]	@ (800aca8 <Get_SerialNum+0x48>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac72:	4b0e      	ldr	r3, [pc, #56]	@ (800acac <Get_SerialNum+0x4c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d009      	beq.n	800ac9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac86:	2208      	movs	r2, #8
 800ac88:	4909      	ldr	r1, [pc, #36]	@ (800acb0 <Get_SerialNum+0x50>)
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 f814 	bl	800acb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac90:	2204      	movs	r2, #4
 800ac92:	4908      	ldr	r1, [pc, #32]	@ (800acb4 <Get_SerialNum+0x54>)
 800ac94:	68b8      	ldr	r0, [r7, #8]
 800ac96:	f000 f80f 	bl	800acb8 <IntToUnicode>
  }
}
 800ac9a:	bf00      	nop
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	1fff7a10 	.word	0x1fff7a10
 800aca8:	1fff7a14 	.word	0x1fff7a14
 800acac:	1fff7a18 	.word	0x1fff7a18
 800acb0:	200000ea 	.word	0x200000ea
 800acb4:	200000fa 	.word	0x200000fa

0800acb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800acb8:	b480      	push	{r7}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	4613      	mov	r3, r2
 800acc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acca:	2300      	movs	r3, #0
 800accc:	75fb      	strb	r3, [r7, #23]
 800acce:	e027      	b.n	800ad20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	0f1b      	lsrs	r3, r3, #28
 800acd4:	2b09      	cmp	r3, #9
 800acd6:	d80b      	bhi.n	800acf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	0f1b      	lsrs	r3, r3, #28
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	4619      	mov	r1, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	440b      	add	r3, r1
 800ace8:	3230      	adds	r2, #48	@ 0x30
 800acea:	b2d2      	uxtb	r2, r2
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	e00a      	b.n	800ad06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	0f1b      	lsrs	r3, r3, #28
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	4619      	mov	r1, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	440b      	add	r3, r1
 800ad00:	3237      	adds	r2, #55	@ 0x37
 800ad02:	b2d2      	uxtb	r2, r2
 800ad04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	011b      	lsls	r3, r3, #4
 800ad0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	3301      	adds	r3, #1
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	4413      	add	r3, r2
 800ad16:	2200      	movs	r2, #0
 800ad18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	75fb      	strb	r3, [r7, #23]
 800ad20:	7dfa      	ldrb	r2, [r7, #23]
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d3d3      	bcc.n	800acd0 <IntToUnicode+0x18>
  }
}
 800ad28:	bf00      	nop
 800ad2a:	bf00      	nop
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
	...

0800ad38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08a      	sub	sp, #40	@ 0x28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad40:	f107 0314 	add.w	r3, r7, #20
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	605a      	str	r2, [r3, #4]
 800ad4a:	609a      	str	r2, [r3, #8]
 800ad4c:	60da      	str	r2, [r3, #12]
 800ad4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad58:	d132      	bne.n	800adc0 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	613b      	str	r3, [r7, #16]
 800ad5e:	4b1a      	ldr	r3, [pc, #104]	@ (800adc8 <HAL_PCD_MspInit+0x90>)
 800ad60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad62:	4a19      	ldr	r2, [pc, #100]	@ (800adc8 <HAL_PCD_MspInit+0x90>)
 800ad64:	f043 0301 	orr.w	r3, r3, #1
 800ad68:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad6a:	4b17      	ldr	r3, [pc, #92]	@ (800adc8 <HAL_PCD_MspInit+0x90>)
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	613b      	str	r3, [r7, #16]
 800ad74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad76:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ad7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad84:	2303      	movs	r3, #3
 800ad86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad88:	230a      	movs	r3, #10
 800ad8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad8c:	f107 0314 	add.w	r3, r7, #20
 800ad90:	4619      	mov	r1, r3
 800ad92:	480e      	ldr	r0, [pc, #56]	@ (800adcc <HAL_PCD_MspInit+0x94>)
 800ad94:	f7f8 fd28 	bl	80037e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad98:	4b0b      	ldr	r3, [pc, #44]	@ (800adc8 <HAL_PCD_MspInit+0x90>)
 800ad9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad9c:	4a0a      	ldr	r2, [pc, #40]	@ (800adc8 <HAL_PCD_MspInit+0x90>)
 800ad9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada2:	6353      	str	r3, [r2, #52]	@ 0x34
 800ada4:	2300      	movs	r3, #0
 800ada6:	60fb      	str	r3, [r7, #12]
 800ada8:	4b07      	ldr	r3, [pc, #28]	@ (800adc8 <HAL_PCD_MspInit+0x90>)
 800adaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adac:	4a06      	ldr	r2, [pc, #24]	@ (800adc8 <HAL_PCD_MspInit+0x90>)
 800adae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800adb2:	6453      	str	r3, [r2, #68]	@ 0x44
 800adb4:	4b04      	ldr	r3, [pc, #16]	@ (800adc8 <HAL_PCD_MspInit+0x90>)
 800adb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800adc0:	bf00      	nop
 800adc2:	3728      	adds	r7, #40	@ 0x28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	40023800 	.word	0x40023800
 800adcc:	40020000 	.word	0x40020000

0800add0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ade4:	4619      	mov	r1, r3
 800ade6:	4610      	mov	r0, r2
 800ade8:	f7fe fb77 	bl	80094da <USBD_LL_SetupStage>
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae06:	78fa      	ldrb	r2, [r7, #3]
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	78fb      	ldrb	r3, [r7, #3]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	f7fe fbb1 	bl	8009584 <USBD_LL_DataOutStage>
}
 800ae22:	bf00      	nop
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae3c:	78fa      	ldrb	r2, [r7, #3]
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	4613      	mov	r3, r2
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	440b      	add	r3, r1
 800ae4a:	3320      	adds	r3, #32
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	4619      	mov	r1, r3
 800ae52:	f7fe fc4a 	bl	80096ea <USBD_LL_DataInStage>
}
 800ae56:	bf00      	nop
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe fd84 	bl	800997a <USBD_LL_SOF>
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae82:	2301      	movs	r3, #1
 800ae84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	79db      	ldrb	r3, [r3, #7]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d102      	bne.n	800ae94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
 800ae92:	e008      	b.n	800aea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	79db      	ldrb	r3, [r3, #7]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d102      	bne.n	800aea2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	73fb      	strb	r3, [r7, #15]
 800aea0:	e001      	b.n	800aea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aea2:	f7f6 feeb 	bl	8001c7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aeac:	7bfa      	ldrb	r2, [r7, #15]
 800aeae:	4611      	mov	r1, r2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe fd1e 	bl	80098f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fe fcc6 	bl	800984e <USBD_LL_Reset>
}
 800aec2:	bf00      	nop
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe fd19 	bl	8009912 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	6812      	ldr	r2, [r2, #0]
 800aeee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aef2:	f043 0301 	orr.w	r3, r3, #1
 800aef6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	7adb      	ldrb	r3, [r3, #11]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d005      	beq.n	800af0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af00:	4b04      	ldr	r3, [pc, #16]	@ (800af14 <HAL_PCD_SuspendCallback+0x48>)
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	4a03      	ldr	r2, [pc, #12]	@ (800af14 <HAL_PCD_SuspendCallback+0x48>)
 800af06:	f043 0306 	orr.w	r3, r3, #6
 800af0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	e000ed00 	.word	0xe000ed00

0800af18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fd0f 	bl	800994a <USBD_LL_Resume>
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	460b      	mov	r3, r1
 800af3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af46:	78fa      	ldrb	r2, [r7, #3]
 800af48:	4611      	mov	r1, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fe fd67 	bl	8009a1e <USBD_LL_IsoOUTIncomplete>
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	460b      	mov	r3, r1
 800af62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af6a:	78fa      	ldrb	r2, [r7, #3]
 800af6c:	4611      	mov	r1, r2
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe fd23 	bl	80099ba <USBD_LL_IsoINIncomplete>
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe fd79 	bl	8009a82 <USBD_LL_DevConnected>
}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fe fd76 	bl	8009a98 <USBD_LL_DevDisconnected>
}
 800afac:	bf00      	nop
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d13c      	bne.n	800b03e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800afc4:	4a20      	ldr	r2, [pc, #128]	@ (800b048 <USBD_LL_Init+0x94>)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a1e      	ldr	r2, [pc, #120]	@ (800b048 <USBD_LL_Init+0x94>)
 800afd0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800afd4:	4b1c      	ldr	r3, [pc, #112]	@ (800b048 <USBD_LL_Init+0x94>)
 800afd6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800afda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800afdc:	4b1a      	ldr	r3, [pc, #104]	@ (800b048 <USBD_LL_Init+0x94>)
 800afde:	2204      	movs	r2, #4
 800afe0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800afe2:	4b19      	ldr	r3, [pc, #100]	@ (800b048 <USBD_LL_Init+0x94>)
 800afe4:	2202      	movs	r2, #2
 800afe6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800afe8:	4b17      	ldr	r3, [pc, #92]	@ (800b048 <USBD_LL_Init+0x94>)
 800afea:	2200      	movs	r2, #0
 800afec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afee:	4b16      	ldr	r3, [pc, #88]	@ (800b048 <USBD_LL_Init+0x94>)
 800aff0:	2202      	movs	r2, #2
 800aff2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aff4:	4b14      	ldr	r3, [pc, #80]	@ (800b048 <USBD_LL_Init+0x94>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800affa:	4b13      	ldr	r3, [pc, #76]	@ (800b048 <USBD_LL_Init+0x94>)
 800affc:	2200      	movs	r2, #0
 800affe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b000:	4b11      	ldr	r3, [pc, #68]	@ (800b048 <USBD_LL_Init+0x94>)
 800b002:	2200      	movs	r2, #0
 800b004:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b006:	4b10      	ldr	r3, [pc, #64]	@ (800b048 <USBD_LL_Init+0x94>)
 800b008:	2200      	movs	r2, #0
 800b00a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b00c:	4b0e      	ldr	r3, [pc, #56]	@ (800b048 <USBD_LL_Init+0x94>)
 800b00e:	2200      	movs	r2, #0
 800b010:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b012:	480d      	ldr	r0, [pc, #52]	@ (800b048 <USBD_LL_Init+0x94>)
 800b014:	f7f8 fd6c 	bl	8003af0 <HAL_PCD_Init>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b01e:	f7f6 fe2d 	bl	8001c7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b022:	2180      	movs	r1, #128	@ 0x80
 800b024:	4808      	ldr	r0, [pc, #32]	@ (800b048 <USBD_LL_Init+0x94>)
 800b026:	f7f9 ff98 	bl	8004f5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b02a:	2240      	movs	r2, #64	@ 0x40
 800b02c:	2100      	movs	r1, #0
 800b02e:	4806      	ldr	r0, [pc, #24]	@ (800b048 <USBD_LL_Init+0x94>)
 800b030:	f7f9 ff4c 	bl	8004ecc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b034:	2280      	movs	r2, #128	@ 0x80
 800b036:	2101      	movs	r1, #1
 800b038:	4803      	ldr	r0, [pc, #12]	@ (800b048 <USBD_LL_Init+0x94>)
 800b03a:	f7f9 ff47 	bl	8004ecc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20001ad8 	.word	0x20001ad8

0800b04c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b062:	4618      	mov	r0, r3
 800b064:	f7f8 fe53 	bl	8003d0e <HAL_PCD_Start>
 800b068:	4603      	mov	r3, r0
 800b06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 f942 	bl	800b2f8 <USBD_Get_USB_Status>
 800b074:	4603      	mov	r3, r0
 800b076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b078:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	4608      	mov	r0, r1
 800b08c:	4611      	mov	r1, r2
 800b08e:	461a      	mov	r2, r3
 800b090:	4603      	mov	r3, r0
 800b092:	70fb      	strb	r3, [r7, #3]
 800b094:	460b      	mov	r3, r1
 800b096:	70bb      	strb	r3, [r7, #2]
 800b098:	4613      	mov	r3, r2
 800b09a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b0aa:	78bb      	ldrb	r3, [r7, #2]
 800b0ac:	883a      	ldrh	r2, [r7, #0]
 800b0ae:	78f9      	ldrb	r1, [r7, #3]
 800b0b0:	f7f9 fb27 	bl	8004702 <HAL_PCD_EP_Open>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 f91c 	bl	800b2f8 <USBD_Get_USB_Status>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0e8:	78fa      	ldrb	r2, [r7, #3]
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7f9 fb72 	bl	80047d6 <HAL_PCD_EP_Close>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 f8fd 	bl	800b2f8 <USBD_Get_USB_Status>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b102:	7bbb      	ldrb	r3, [r7, #14]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b126:	78fa      	ldrb	r2, [r7, #3]
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7f9 fc2a 	bl	8004984 <HAL_PCD_EP_SetStall>
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f8de 	bl	800b2f8 <USBD_Get_USB_Status>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b140:	7bbb      	ldrb	r3, [r7, #14]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	460b      	mov	r3, r1
 800b154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b164:	78fa      	ldrb	r2, [r7, #3]
 800b166:	4611      	mov	r1, r2
 800b168:	4618      	mov	r0, r3
 800b16a:	f7f9 fc6e 	bl	8004a4a <HAL_PCD_EP_ClrStall>
 800b16e:	4603      	mov	r3, r0
 800b170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	4618      	mov	r0, r3
 800b176:	f000 f8bf 	bl	800b2f8 <USBD_Get_USB_Status>
 800b17a:	4603      	mov	r3, r0
 800b17c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b19a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b19c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	da0b      	bge.n	800b1bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1aa:	68f9      	ldr	r1, [r7, #12]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	00db      	lsls	r3, r3, #3
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	3316      	adds	r3, #22
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	e00b      	b.n	800b1d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1c2:	68f9      	ldr	r1, [r7, #12]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	440b      	add	r3, r1
 800b1ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b1d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1fa:	78fa      	ldrb	r2, [r7, #3]
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7f9 fa5b 	bl	80046ba <HAL_PCD_SetAddress>
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f000 f874 	bl	800b2f8 <USBD_Get_USB_Status>
 800b210:	4603      	mov	r3, r0
 800b212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b214:	7bbb      	ldrb	r3, [r7, #14]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b086      	sub	sp, #24
 800b222:	af00      	add	r7, sp, #0
 800b224:	60f8      	str	r0, [r7, #12]
 800b226:	607a      	str	r2, [r7, #4]
 800b228:	603b      	str	r3, [r7, #0]
 800b22a:	460b      	mov	r3, r1
 800b22c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b23c:	7af9      	ldrb	r1, [r7, #11]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	f7f9 fb65 	bl	8004910 <HAL_PCD_EP_Transmit>
 800b246:	4603      	mov	r3, r0
 800b248:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 f853 	bl	800b2f8 <USBD_Get_USB_Status>
 800b252:	4603      	mov	r3, r0
 800b254:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b256:	7dbb      	ldrb	r3, [r7, #22]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	607a      	str	r2, [r7, #4]
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	460b      	mov	r3, r1
 800b26e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b27e:	7af9      	ldrb	r1, [r7, #11]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	f7f9 faf1 	bl	800486a <HAL_PCD_EP_Receive>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 f832 	bl	800b2f8 <USBD_Get_USB_Status>
 800b294:	4603      	mov	r3, r0
 800b296:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b298:	7dbb      	ldrb	r3, [r7, #22]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b082      	sub	sp, #8
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2b4:	78fa      	ldrb	r2, [r7, #3]
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7f9 fb11 	bl	80048e0 <HAL_PCD_EP_GetRxCount>
 800b2be:	4603      	mov	r3, r0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2d0:	4b03      	ldr	r3, [pc, #12]	@ (800b2e0 <USBD_static_malloc+0x18>)
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	20001fbc 	.word	0x20001fbc

0800b2e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]

}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b306:	79fb      	ldrb	r3, [r7, #7]
 800b308:	2b03      	cmp	r3, #3
 800b30a:	d817      	bhi.n	800b33c <USBD_Get_USB_Status+0x44>
 800b30c:	a201      	add	r2, pc, #4	@ (adr r2, 800b314 <USBD_Get_USB_Status+0x1c>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b325 	.word	0x0800b325
 800b318:	0800b32b 	.word	0x0800b32b
 800b31c:	0800b331 	.word	0x0800b331
 800b320:	0800b337 	.word	0x0800b337
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	73fb      	strb	r3, [r7, #15]
    break;
 800b328:	e00b      	b.n	800b342 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b32a:	2303      	movs	r3, #3
 800b32c:	73fb      	strb	r3, [r7, #15]
    break;
 800b32e:	e008      	b.n	800b342 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b330:	2301      	movs	r3, #1
 800b332:	73fb      	strb	r3, [r7, #15]
    break;
 800b334:	e005      	b.n	800b342 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b336:	2303      	movs	r3, #3
 800b338:	73fb      	strb	r3, [r7, #15]
    break;
 800b33a:	e002      	b.n	800b342 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b33c:	2303      	movs	r3, #3
 800b33e:	73fb      	strb	r3, [r7, #15]
    break;
 800b340:	bf00      	nop
  }
  return usb_status;
 800b342:	7bfb      	ldrb	r3, [r7, #15]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <sulp>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	4604      	mov	r4, r0
 800b354:	460d      	mov	r5, r1
 800b356:	ec45 4b10 	vmov	d0, r4, r5
 800b35a:	4616      	mov	r6, r2
 800b35c:	f003 fc5c 	bl	800ec18 <__ulp>
 800b360:	ec51 0b10 	vmov	r0, r1, d0
 800b364:	b17e      	cbz	r6, 800b386 <sulp+0x36>
 800b366:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b36a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b36e:	2b00      	cmp	r3, #0
 800b370:	dd09      	ble.n	800b386 <sulp+0x36>
 800b372:	051b      	lsls	r3, r3, #20
 800b374:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b378:	2400      	movs	r4, #0
 800b37a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b37e:	4622      	mov	r2, r4
 800b380:	462b      	mov	r3, r5
 800b382:	f7f5 f941 	bl	8000608 <__aeabi_dmul>
 800b386:	ec41 0b10 	vmov	d0, r0, r1
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	0000      	movs	r0, r0
	...

0800b390 <_strtod_l>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	b09f      	sub	sp, #124	@ 0x7c
 800b396:	460c      	mov	r4, r1
 800b398:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b39a:	2200      	movs	r2, #0
 800b39c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b39e:	9005      	str	r0, [sp, #20]
 800b3a0:	f04f 0a00 	mov.w	sl, #0
 800b3a4:	f04f 0b00 	mov.w	fp, #0
 800b3a8:	460a      	mov	r2, r1
 800b3aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3ac:	7811      	ldrb	r1, [r2, #0]
 800b3ae:	292b      	cmp	r1, #43	@ 0x2b
 800b3b0:	d04a      	beq.n	800b448 <_strtod_l+0xb8>
 800b3b2:	d838      	bhi.n	800b426 <_strtod_l+0x96>
 800b3b4:	290d      	cmp	r1, #13
 800b3b6:	d832      	bhi.n	800b41e <_strtod_l+0x8e>
 800b3b8:	2908      	cmp	r1, #8
 800b3ba:	d832      	bhi.n	800b422 <_strtod_l+0x92>
 800b3bc:	2900      	cmp	r1, #0
 800b3be:	d03b      	beq.n	800b438 <_strtod_l+0xa8>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b3c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b3c6:	782a      	ldrb	r2, [r5, #0]
 800b3c8:	2a30      	cmp	r2, #48	@ 0x30
 800b3ca:	f040 80b3 	bne.w	800b534 <_strtod_l+0x1a4>
 800b3ce:	786a      	ldrb	r2, [r5, #1]
 800b3d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b3d4:	2a58      	cmp	r2, #88	@ 0x58
 800b3d6:	d16e      	bne.n	800b4b6 <_strtod_l+0x126>
 800b3d8:	9302      	str	r3, [sp, #8]
 800b3da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	ab1a      	add	r3, sp, #104	@ 0x68
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	4a8e      	ldr	r2, [pc, #568]	@ (800b61c <_strtod_l+0x28c>)
 800b3e4:	9805      	ldr	r0, [sp, #20]
 800b3e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b3e8:	a919      	add	r1, sp, #100	@ 0x64
 800b3ea:	f002 fd07 	bl	800ddfc <__gethex>
 800b3ee:	f010 060f 	ands.w	r6, r0, #15
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	d005      	beq.n	800b402 <_strtod_l+0x72>
 800b3f6:	2e06      	cmp	r6, #6
 800b3f8:	d128      	bne.n	800b44c <_strtod_l+0xbc>
 800b3fa:	3501      	adds	r5, #1
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800b400:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b402:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b404:	2b00      	cmp	r3, #0
 800b406:	f040 858e 	bne.w	800bf26 <_strtod_l+0xb96>
 800b40a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b40c:	b1cb      	cbz	r3, 800b442 <_strtod_l+0xb2>
 800b40e:	4652      	mov	r2, sl
 800b410:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b414:	ec43 2b10 	vmov	d0, r2, r3
 800b418:	b01f      	add	sp, #124	@ 0x7c
 800b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41e:	2920      	cmp	r1, #32
 800b420:	d1ce      	bne.n	800b3c0 <_strtod_l+0x30>
 800b422:	3201      	adds	r2, #1
 800b424:	e7c1      	b.n	800b3aa <_strtod_l+0x1a>
 800b426:	292d      	cmp	r1, #45	@ 0x2d
 800b428:	d1ca      	bne.n	800b3c0 <_strtod_l+0x30>
 800b42a:	2101      	movs	r1, #1
 800b42c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b42e:	1c51      	adds	r1, r2, #1
 800b430:	9119      	str	r1, [sp, #100]	@ 0x64
 800b432:	7852      	ldrb	r2, [r2, #1]
 800b434:	2a00      	cmp	r2, #0
 800b436:	d1c5      	bne.n	800b3c4 <_strtod_l+0x34>
 800b438:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b43a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 8570 	bne.w	800bf22 <_strtod_l+0xb92>
 800b442:	4652      	mov	r2, sl
 800b444:	465b      	mov	r3, fp
 800b446:	e7e5      	b.n	800b414 <_strtod_l+0x84>
 800b448:	2100      	movs	r1, #0
 800b44a:	e7ef      	b.n	800b42c <_strtod_l+0x9c>
 800b44c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b44e:	b13a      	cbz	r2, 800b460 <_strtod_l+0xd0>
 800b450:	2135      	movs	r1, #53	@ 0x35
 800b452:	a81c      	add	r0, sp, #112	@ 0x70
 800b454:	f003 fcda 	bl	800ee0c <__copybits>
 800b458:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b45a:	9805      	ldr	r0, [sp, #20]
 800b45c:	f003 f8a8 	bl	800e5b0 <_Bfree>
 800b460:	3e01      	subs	r6, #1
 800b462:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b464:	2e04      	cmp	r6, #4
 800b466:	d806      	bhi.n	800b476 <_strtod_l+0xe6>
 800b468:	e8df f006 	tbb	[pc, r6]
 800b46c:	201d0314 	.word	0x201d0314
 800b470:	14          	.byte	0x14
 800b471:	00          	.byte	0x00
 800b472:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b476:	05e1      	lsls	r1, r4, #23
 800b478:	bf48      	it	mi
 800b47a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b47e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b482:	0d1b      	lsrs	r3, r3, #20
 800b484:	051b      	lsls	r3, r3, #20
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1bb      	bne.n	800b402 <_strtod_l+0x72>
 800b48a:	f001 fd6d 	bl	800cf68 <__errno>
 800b48e:	2322      	movs	r3, #34	@ 0x22
 800b490:	6003      	str	r3, [r0, #0]
 800b492:	e7b6      	b.n	800b402 <_strtod_l+0x72>
 800b494:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b498:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b49c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b4a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b4a4:	e7e7      	b.n	800b476 <_strtod_l+0xe6>
 800b4a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b624 <_strtod_l+0x294>
 800b4aa:	e7e4      	b.n	800b476 <_strtod_l+0xe6>
 800b4ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b4b0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b4b4:	e7df      	b.n	800b476 <_strtod_l+0xe6>
 800b4b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	2b30      	cmp	r3, #48	@ 0x30
 800b4c0:	d0f9      	beq.n	800b4b6 <_strtod_l+0x126>
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d09d      	beq.n	800b402 <_strtod_l+0x72>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9308      	str	r3, [sp, #32]
 800b4d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4d4:	461f      	mov	r7, r3
 800b4d6:	220a      	movs	r2, #10
 800b4d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b4da:	7805      	ldrb	r5, [r0, #0]
 800b4dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b4e0:	b2d9      	uxtb	r1, r3
 800b4e2:	2909      	cmp	r1, #9
 800b4e4:	d928      	bls.n	800b538 <_strtod_l+0x1a8>
 800b4e6:	494e      	ldr	r1, [pc, #312]	@ (800b620 <_strtod_l+0x290>)
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f001 fce0 	bl	800ceae <strncmp>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d032      	beq.n	800b558 <_strtod_l+0x1c8>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	462a      	mov	r2, r5
 800b4f6:	4681      	mov	r9, r0
 800b4f8:	463d      	mov	r5, r7
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2a65      	cmp	r2, #101	@ 0x65
 800b4fe:	d001      	beq.n	800b504 <_strtod_l+0x174>
 800b500:	2a45      	cmp	r2, #69	@ 0x45
 800b502:	d114      	bne.n	800b52e <_strtod_l+0x19e>
 800b504:	b91d      	cbnz	r5, 800b50e <_strtod_l+0x17e>
 800b506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b508:	4302      	orrs	r2, r0
 800b50a:	d095      	beq.n	800b438 <_strtod_l+0xa8>
 800b50c:	2500      	movs	r5, #0
 800b50e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b510:	1c62      	adds	r2, r4, #1
 800b512:	9219      	str	r2, [sp, #100]	@ 0x64
 800b514:	7862      	ldrb	r2, [r4, #1]
 800b516:	2a2b      	cmp	r2, #43	@ 0x2b
 800b518:	d077      	beq.n	800b60a <_strtod_l+0x27a>
 800b51a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b51c:	d07b      	beq.n	800b616 <_strtod_l+0x286>
 800b51e:	f04f 0c00 	mov.w	ip, #0
 800b522:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b526:	2909      	cmp	r1, #9
 800b528:	f240 8082 	bls.w	800b630 <_strtod_l+0x2a0>
 800b52c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b52e:	f04f 0800 	mov.w	r8, #0
 800b532:	e0a2      	b.n	800b67a <_strtod_l+0x2ea>
 800b534:	2300      	movs	r3, #0
 800b536:	e7c7      	b.n	800b4c8 <_strtod_l+0x138>
 800b538:	2f08      	cmp	r7, #8
 800b53a:	bfd5      	itete	le
 800b53c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b53e:	9908      	ldrgt	r1, [sp, #32]
 800b540:	fb02 3301 	mlale	r3, r2, r1, r3
 800b544:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b548:	f100 0001 	add.w	r0, r0, #1
 800b54c:	bfd4      	ite	le
 800b54e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b550:	9308      	strgt	r3, [sp, #32]
 800b552:	3701      	adds	r7, #1
 800b554:	9019      	str	r0, [sp, #100]	@ 0x64
 800b556:	e7bf      	b.n	800b4d8 <_strtod_l+0x148>
 800b558:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b55e:	785a      	ldrb	r2, [r3, #1]
 800b560:	b37f      	cbz	r7, 800b5c2 <_strtod_l+0x232>
 800b562:	4681      	mov	r9, r0
 800b564:	463d      	mov	r5, r7
 800b566:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b56a:	2b09      	cmp	r3, #9
 800b56c:	d912      	bls.n	800b594 <_strtod_l+0x204>
 800b56e:	2301      	movs	r3, #1
 800b570:	e7c4      	b.n	800b4fc <_strtod_l+0x16c>
 800b572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	9219      	str	r2, [sp, #100]	@ 0x64
 800b578:	785a      	ldrb	r2, [r3, #1]
 800b57a:	3001      	adds	r0, #1
 800b57c:	2a30      	cmp	r2, #48	@ 0x30
 800b57e:	d0f8      	beq.n	800b572 <_strtod_l+0x1e2>
 800b580:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b584:	2b08      	cmp	r3, #8
 800b586:	f200 84d3 	bhi.w	800bf30 <_strtod_l+0xba0>
 800b58a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b58c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b58e:	4681      	mov	r9, r0
 800b590:	2000      	movs	r0, #0
 800b592:	4605      	mov	r5, r0
 800b594:	3a30      	subs	r2, #48	@ 0x30
 800b596:	f100 0301 	add.w	r3, r0, #1
 800b59a:	d02a      	beq.n	800b5f2 <_strtod_l+0x262>
 800b59c:	4499      	add	r9, r3
 800b59e:	eb00 0c05 	add.w	ip, r0, r5
 800b5a2:	462b      	mov	r3, r5
 800b5a4:	210a      	movs	r1, #10
 800b5a6:	4563      	cmp	r3, ip
 800b5a8:	d10d      	bne.n	800b5c6 <_strtod_l+0x236>
 800b5aa:	1c69      	adds	r1, r5, #1
 800b5ac:	4401      	add	r1, r0
 800b5ae:	4428      	add	r0, r5
 800b5b0:	2808      	cmp	r0, #8
 800b5b2:	dc16      	bgt.n	800b5e2 <_strtod_l+0x252>
 800b5b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b5b6:	230a      	movs	r3, #10
 800b5b8:	fb03 2300 	mla	r3, r3, r0, r2
 800b5bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e018      	b.n	800b5f4 <_strtod_l+0x264>
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	e7da      	b.n	800b57c <_strtod_l+0x1ec>
 800b5c6:	2b08      	cmp	r3, #8
 800b5c8:	f103 0301 	add.w	r3, r3, #1
 800b5cc:	dc03      	bgt.n	800b5d6 <_strtod_l+0x246>
 800b5ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b5d0:	434e      	muls	r6, r1
 800b5d2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b5d4:	e7e7      	b.n	800b5a6 <_strtod_l+0x216>
 800b5d6:	2b10      	cmp	r3, #16
 800b5d8:	bfde      	ittt	le
 800b5da:	9e08      	ldrle	r6, [sp, #32]
 800b5dc:	434e      	mulle	r6, r1
 800b5de:	9608      	strle	r6, [sp, #32]
 800b5e0:	e7e1      	b.n	800b5a6 <_strtod_l+0x216>
 800b5e2:	280f      	cmp	r0, #15
 800b5e4:	dceb      	bgt.n	800b5be <_strtod_l+0x22e>
 800b5e6:	9808      	ldr	r0, [sp, #32]
 800b5e8:	230a      	movs	r3, #10
 800b5ea:	fb03 2300 	mla	r3, r3, r0, r2
 800b5ee:	9308      	str	r3, [sp, #32]
 800b5f0:	e7e5      	b.n	800b5be <_strtod_l+0x22e>
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5f6:	1c50      	adds	r0, r2, #1
 800b5f8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5fa:	7852      	ldrb	r2, [r2, #1]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	460d      	mov	r5, r1
 800b600:	e7b1      	b.n	800b566 <_strtod_l+0x1d6>
 800b602:	f04f 0900 	mov.w	r9, #0
 800b606:	2301      	movs	r3, #1
 800b608:	e77d      	b.n	800b506 <_strtod_l+0x176>
 800b60a:	f04f 0c00 	mov.w	ip, #0
 800b60e:	1ca2      	adds	r2, r4, #2
 800b610:	9219      	str	r2, [sp, #100]	@ 0x64
 800b612:	78a2      	ldrb	r2, [r4, #2]
 800b614:	e785      	b.n	800b522 <_strtod_l+0x192>
 800b616:	f04f 0c01 	mov.w	ip, #1
 800b61a:	e7f8      	b.n	800b60e <_strtod_l+0x27e>
 800b61c:	0800fad8 	.word	0x0800fad8
 800b620:	0800fac0 	.word	0x0800fac0
 800b624:	7ff00000 	.word	0x7ff00000
 800b628:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b62a:	1c51      	adds	r1, r2, #1
 800b62c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b62e:	7852      	ldrb	r2, [r2, #1]
 800b630:	2a30      	cmp	r2, #48	@ 0x30
 800b632:	d0f9      	beq.n	800b628 <_strtod_l+0x298>
 800b634:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b638:	2908      	cmp	r1, #8
 800b63a:	f63f af78 	bhi.w	800b52e <_strtod_l+0x19e>
 800b63e:	3a30      	subs	r2, #48	@ 0x30
 800b640:	920e      	str	r2, [sp, #56]	@ 0x38
 800b642:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b644:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b646:	f04f 080a 	mov.w	r8, #10
 800b64a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b64c:	1c56      	adds	r6, r2, #1
 800b64e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b650:	7852      	ldrb	r2, [r2, #1]
 800b652:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b656:	f1be 0f09 	cmp.w	lr, #9
 800b65a:	d939      	bls.n	800b6d0 <_strtod_l+0x340>
 800b65c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b65e:	1a76      	subs	r6, r6, r1
 800b660:	2e08      	cmp	r6, #8
 800b662:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b666:	dc03      	bgt.n	800b670 <_strtod_l+0x2e0>
 800b668:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b66a:	4588      	cmp	r8, r1
 800b66c:	bfa8      	it	ge
 800b66e:	4688      	movge	r8, r1
 800b670:	f1bc 0f00 	cmp.w	ip, #0
 800b674:	d001      	beq.n	800b67a <_strtod_l+0x2ea>
 800b676:	f1c8 0800 	rsb	r8, r8, #0
 800b67a:	2d00      	cmp	r5, #0
 800b67c:	d14e      	bne.n	800b71c <_strtod_l+0x38c>
 800b67e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b680:	4308      	orrs	r0, r1
 800b682:	f47f aebe 	bne.w	800b402 <_strtod_l+0x72>
 800b686:	2b00      	cmp	r3, #0
 800b688:	f47f aed6 	bne.w	800b438 <_strtod_l+0xa8>
 800b68c:	2a69      	cmp	r2, #105	@ 0x69
 800b68e:	d028      	beq.n	800b6e2 <_strtod_l+0x352>
 800b690:	dc25      	bgt.n	800b6de <_strtod_l+0x34e>
 800b692:	2a49      	cmp	r2, #73	@ 0x49
 800b694:	d025      	beq.n	800b6e2 <_strtod_l+0x352>
 800b696:	2a4e      	cmp	r2, #78	@ 0x4e
 800b698:	f47f aece 	bne.w	800b438 <_strtod_l+0xa8>
 800b69c:	499b      	ldr	r1, [pc, #620]	@ (800b90c <_strtod_l+0x57c>)
 800b69e:	a819      	add	r0, sp, #100	@ 0x64
 800b6a0:	f002 fdce 	bl	800e240 <__match>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	f43f aec7 	beq.w	800b438 <_strtod_l+0xa8>
 800b6aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	2b28      	cmp	r3, #40	@ 0x28
 800b6b0:	d12e      	bne.n	800b710 <_strtod_l+0x380>
 800b6b2:	4997      	ldr	r1, [pc, #604]	@ (800b910 <_strtod_l+0x580>)
 800b6b4:	aa1c      	add	r2, sp, #112	@ 0x70
 800b6b6:	a819      	add	r0, sp, #100	@ 0x64
 800b6b8:	f002 fdd6 	bl	800e268 <__hexnan>
 800b6bc:	2805      	cmp	r0, #5
 800b6be:	d127      	bne.n	800b710 <_strtod_l+0x380>
 800b6c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b6c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b6c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b6ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b6ce:	e698      	b.n	800b402 <_strtod_l+0x72>
 800b6d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b6d2:	fb08 2101 	mla	r1, r8, r1, r2
 800b6d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b6da:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6dc:	e7b5      	b.n	800b64a <_strtod_l+0x2ba>
 800b6de:	2a6e      	cmp	r2, #110	@ 0x6e
 800b6e0:	e7da      	b.n	800b698 <_strtod_l+0x308>
 800b6e2:	498c      	ldr	r1, [pc, #560]	@ (800b914 <_strtod_l+0x584>)
 800b6e4:	a819      	add	r0, sp, #100	@ 0x64
 800b6e6:	f002 fdab 	bl	800e240 <__match>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f43f aea4 	beq.w	800b438 <_strtod_l+0xa8>
 800b6f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6f2:	4989      	ldr	r1, [pc, #548]	@ (800b918 <_strtod_l+0x588>)
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	a819      	add	r0, sp, #100	@ 0x64
 800b6f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6fa:	f002 fda1 	bl	800e240 <__match>
 800b6fe:	b910      	cbnz	r0, 800b706 <_strtod_l+0x376>
 800b700:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b702:	3301      	adds	r3, #1
 800b704:	9319      	str	r3, [sp, #100]	@ 0x64
 800b706:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b928 <_strtod_l+0x598>
 800b70a:	f04f 0a00 	mov.w	sl, #0
 800b70e:	e678      	b.n	800b402 <_strtod_l+0x72>
 800b710:	4882      	ldr	r0, [pc, #520]	@ (800b91c <_strtod_l+0x58c>)
 800b712:	f001 fc65 	bl	800cfe0 <nan>
 800b716:	ec5b ab10 	vmov	sl, fp, d0
 800b71a:	e672      	b.n	800b402 <_strtod_l+0x72>
 800b71c:	eba8 0309 	sub.w	r3, r8, r9
 800b720:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b722:	9309      	str	r3, [sp, #36]	@ 0x24
 800b724:	2f00      	cmp	r7, #0
 800b726:	bf08      	it	eq
 800b728:	462f      	moveq	r7, r5
 800b72a:	2d10      	cmp	r5, #16
 800b72c:	462c      	mov	r4, r5
 800b72e:	bfa8      	it	ge
 800b730:	2410      	movge	r4, #16
 800b732:	f7f4 feef 	bl	8000514 <__aeabi_ui2d>
 800b736:	2d09      	cmp	r5, #9
 800b738:	4682      	mov	sl, r0
 800b73a:	468b      	mov	fp, r1
 800b73c:	dc13      	bgt.n	800b766 <_strtod_l+0x3d6>
 800b73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b740:	2b00      	cmp	r3, #0
 800b742:	f43f ae5e 	beq.w	800b402 <_strtod_l+0x72>
 800b746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b748:	dd78      	ble.n	800b83c <_strtod_l+0x4ac>
 800b74a:	2b16      	cmp	r3, #22
 800b74c:	dc5f      	bgt.n	800b80e <_strtod_l+0x47e>
 800b74e:	4974      	ldr	r1, [pc, #464]	@ (800b920 <_strtod_l+0x590>)
 800b750:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b754:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b758:	4652      	mov	r2, sl
 800b75a:	465b      	mov	r3, fp
 800b75c:	f7f4 ff54 	bl	8000608 <__aeabi_dmul>
 800b760:	4682      	mov	sl, r0
 800b762:	468b      	mov	fp, r1
 800b764:	e64d      	b.n	800b402 <_strtod_l+0x72>
 800b766:	4b6e      	ldr	r3, [pc, #440]	@ (800b920 <_strtod_l+0x590>)
 800b768:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b76c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b770:	f7f4 ff4a 	bl	8000608 <__aeabi_dmul>
 800b774:	4682      	mov	sl, r0
 800b776:	9808      	ldr	r0, [sp, #32]
 800b778:	468b      	mov	fp, r1
 800b77a:	f7f4 fecb 	bl	8000514 <__aeabi_ui2d>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	4650      	mov	r0, sl
 800b784:	4659      	mov	r1, fp
 800b786:	f7f4 fd89 	bl	800029c <__adddf3>
 800b78a:	2d0f      	cmp	r5, #15
 800b78c:	4682      	mov	sl, r0
 800b78e:	468b      	mov	fp, r1
 800b790:	ddd5      	ble.n	800b73e <_strtod_l+0x3ae>
 800b792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b794:	1b2c      	subs	r4, r5, r4
 800b796:	441c      	add	r4, r3
 800b798:	2c00      	cmp	r4, #0
 800b79a:	f340 8096 	ble.w	800b8ca <_strtod_l+0x53a>
 800b79e:	f014 030f 	ands.w	r3, r4, #15
 800b7a2:	d00a      	beq.n	800b7ba <_strtod_l+0x42a>
 800b7a4:	495e      	ldr	r1, [pc, #376]	@ (800b920 <_strtod_l+0x590>)
 800b7a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7aa:	4652      	mov	r2, sl
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7b2:	f7f4 ff29 	bl	8000608 <__aeabi_dmul>
 800b7b6:	4682      	mov	sl, r0
 800b7b8:	468b      	mov	fp, r1
 800b7ba:	f034 040f 	bics.w	r4, r4, #15
 800b7be:	d073      	beq.n	800b8a8 <_strtod_l+0x518>
 800b7c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b7c4:	dd48      	ble.n	800b858 <_strtod_l+0x4c8>
 800b7c6:	2400      	movs	r4, #0
 800b7c8:	46a0      	mov	r8, r4
 800b7ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800b7cc:	46a1      	mov	r9, r4
 800b7ce:	9a05      	ldr	r2, [sp, #20]
 800b7d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b928 <_strtod_l+0x598>
 800b7d4:	2322      	movs	r3, #34	@ 0x22
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	f04f 0a00 	mov.w	sl, #0
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f43f ae0f 	beq.w	800b402 <_strtod_l+0x72>
 800b7e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7e6:	9805      	ldr	r0, [sp, #20]
 800b7e8:	f002 fee2 	bl	800e5b0 <_Bfree>
 800b7ec:	9805      	ldr	r0, [sp, #20]
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	f002 fede 	bl	800e5b0 <_Bfree>
 800b7f4:	9805      	ldr	r0, [sp, #20]
 800b7f6:	4641      	mov	r1, r8
 800b7f8:	f002 feda 	bl	800e5b0 <_Bfree>
 800b7fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b7fe:	9805      	ldr	r0, [sp, #20]
 800b800:	f002 fed6 	bl	800e5b0 <_Bfree>
 800b804:	9805      	ldr	r0, [sp, #20]
 800b806:	4621      	mov	r1, r4
 800b808:	f002 fed2 	bl	800e5b0 <_Bfree>
 800b80c:	e5f9      	b.n	800b402 <_strtod_l+0x72>
 800b80e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b810:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b814:	4293      	cmp	r3, r2
 800b816:	dbbc      	blt.n	800b792 <_strtod_l+0x402>
 800b818:	4c41      	ldr	r4, [pc, #260]	@ (800b920 <_strtod_l+0x590>)
 800b81a:	f1c5 050f 	rsb	r5, r5, #15
 800b81e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b822:	4652      	mov	r2, sl
 800b824:	465b      	mov	r3, fp
 800b826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b82a:	f7f4 feed 	bl	8000608 <__aeabi_dmul>
 800b82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b830:	1b5d      	subs	r5, r3, r5
 800b832:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b836:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b83a:	e78f      	b.n	800b75c <_strtod_l+0x3cc>
 800b83c:	3316      	adds	r3, #22
 800b83e:	dba8      	blt.n	800b792 <_strtod_l+0x402>
 800b840:	4b37      	ldr	r3, [pc, #220]	@ (800b920 <_strtod_l+0x590>)
 800b842:	eba9 0808 	sub.w	r8, r9, r8
 800b846:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b84a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b84e:	4650      	mov	r0, sl
 800b850:	4659      	mov	r1, fp
 800b852:	f7f5 f803 	bl	800085c <__aeabi_ddiv>
 800b856:	e783      	b.n	800b760 <_strtod_l+0x3d0>
 800b858:	4b32      	ldr	r3, [pc, #200]	@ (800b924 <_strtod_l+0x594>)
 800b85a:	9308      	str	r3, [sp, #32]
 800b85c:	2300      	movs	r3, #0
 800b85e:	1124      	asrs	r4, r4, #4
 800b860:	4650      	mov	r0, sl
 800b862:	4659      	mov	r1, fp
 800b864:	461e      	mov	r6, r3
 800b866:	2c01      	cmp	r4, #1
 800b868:	dc21      	bgt.n	800b8ae <_strtod_l+0x51e>
 800b86a:	b10b      	cbz	r3, 800b870 <_strtod_l+0x4e0>
 800b86c:	4682      	mov	sl, r0
 800b86e:	468b      	mov	fp, r1
 800b870:	492c      	ldr	r1, [pc, #176]	@ (800b924 <_strtod_l+0x594>)
 800b872:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b876:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b87a:	4652      	mov	r2, sl
 800b87c:	465b      	mov	r3, fp
 800b87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b882:	f7f4 fec1 	bl	8000608 <__aeabi_dmul>
 800b886:	4b28      	ldr	r3, [pc, #160]	@ (800b928 <_strtod_l+0x598>)
 800b888:	460a      	mov	r2, r1
 800b88a:	400b      	ands	r3, r1
 800b88c:	4927      	ldr	r1, [pc, #156]	@ (800b92c <_strtod_l+0x59c>)
 800b88e:	428b      	cmp	r3, r1
 800b890:	4682      	mov	sl, r0
 800b892:	d898      	bhi.n	800b7c6 <_strtod_l+0x436>
 800b894:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b898:	428b      	cmp	r3, r1
 800b89a:	bf86      	itte	hi
 800b89c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b930 <_strtod_l+0x5a0>
 800b8a0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b8a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9308      	str	r3, [sp, #32]
 800b8ac:	e07a      	b.n	800b9a4 <_strtod_l+0x614>
 800b8ae:	07e2      	lsls	r2, r4, #31
 800b8b0:	d505      	bpl.n	800b8be <_strtod_l+0x52e>
 800b8b2:	9b08      	ldr	r3, [sp, #32]
 800b8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b8:	f7f4 fea6 	bl	8000608 <__aeabi_dmul>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	9a08      	ldr	r2, [sp, #32]
 800b8c0:	3208      	adds	r2, #8
 800b8c2:	3601      	adds	r6, #1
 800b8c4:	1064      	asrs	r4, r4, #1
 800b8c6:	9208      	str	r2, [sp, #32]
 800b8c8:	e7cd      	b.n	800b866 <_strtod_l+0x4d6>
 800b8ca:	d0ed      	beq.n	800b8a8 <_strtod_l+0x518>
 800b8cc:	4264      	negs	r4, r4
 800b8ce:	f014 020f 	ands.w	r2, r4, #15
 800b8d2:	d00a      	beq.n	800b8ea <_strtod_l+0x55a>
 800b8d4:	4b12      	ldr	r3, [pc, #72]	@ (800b920 <_strtod_l+0x590>)
 800b8d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8da:	4650      	mov	r0, sl
 800b8dc:	4659      	mov	r1, fp
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f7f4 ffbb 	bl	800085c <__aeabi_ddiv>
 800b8e6:	4682      	mov	sl, r0
 800b8e8:	468b      	mov	fp, r1
 800b8ea:	1124      	asrs	r4, r4, #4
 800b8ec:	d0dc      	beq.n	800b8a8 <_strtod_l+0x518>
 800b8ee:	2c1f      	cmp	r4, #31
 800b8f0:	dd20      	ble.n	800b934 <_strtod_l+0x5a4>
 800b8f2:	2400      	movs	r4, #0
 800b8f4:	46a0      	mov	r8, r4
 800b8f6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b8f8:	46a1      	mov	r9, r4
 800b8fa:	9a05      	ldr	r2, [sp, #20]
 800b8fc:	2322      	movs	r3, #34	@ 0x22
 800b8fe:	f04f 0a00 	mov.w	sl, #0
 800b902:	f04f 0b00 	mov.w	fp, #0
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	e768      	b.n	800b7dc <_strtod_l+0x44c>
 800b90a:	bf00      	nop
 800b90c:	0800fb25 	.word	0x0800fb25
 800b910:	0800fac4 	.word	0x0800fac4
 800b914:	0800fb1d 	.word	0x0800fb1d
 800b918:	0800fb5c 	.word	0x0800fb5c
 800b91c:	0800feed 	.word	0x0800feed
 800b920:	0800fcd8 	.word	0x0800fcd8
 800b924:	0800fcb0 	.word	0x0800fcb0
 800b928:	7ff00000 	.word	0x7ff00000
 800b92c:	7ca00000 	.word	0x7ca00000
 800b930:	7fefffff 	.word	0x7fefffff
 800b934:	f014 0310 	ands.w	r3, r4, #16
 800b938:	bf18      	it	ne
 800b93a:	236a      	movne	r3, #106	@ 0x6a
 800b93c:	4ea9      	ldr	r6, [pc, #676]	@ (800bbe4 <_strtod_l+0x854>)
 800b93e:	9308      	str	r3, [sp, #32]
 800b940:	4650      	mov	r0, sl
 800b942:	4659      	mov	r1, fp
 800b944:	2300      	movs	r3, #0
 800b946:	07e2      	lsls	r2, r4, #31
 800b948:	d504      	bpl.n	800b954 <_strtod_l+0x5c4>
 800b94a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b94e:	f7f4 fe5b 	bl	8000608 <__aeabi_dmul>
 800b952:	2301      	movs	r3, #1
 800b954:	1064      	asrs	r4, r4, #1
 800b956:	f106 0608 	add.w	r6, r6, #8
 800b95a:	d1f4      	bne.n	800b946 <_strtod_l+0x5b6>
 800b95c:	b10b      	cbz	r3, 800b962 <_strtod_l+0x5d2>
 800b95e:	4682      	mov	sl, r0
 800b960:	468b      	mov	fp, r1
 800b962:	9b08      	ldr	r3, [sp, #32]
 800b964:	b1b3      	cbz	r3, 800b994 <_strtod_l+0x604>
 800b966:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b96a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b96e:	2b00      	cmp	r3, #0
 800b970:	4659      	mov	r1, fp
 800b972:	dd0f      	ble.n	800b994 <_strtod_l+0x604>
 800b974:	2b1f      	cmp	r3, #31
 800b976:	dd55      	ble.n	800ba24 <_strtod_l+0x694>
 800b978:	2b34      	cmp	r3, #52	@ 0x34
 800b97a:	bfde      	ittt	le
 800b97c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b980:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b984:	4093      	lslle	r3, r2
 800b986:	f04f 0a00 	mov.w	sl, #0
 800b98a:	bfcc      	ite	gt
 800b98c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b990:	ea03 0b01 	andle.w	fp, r3, r1
 800b994:	2200      	movs	r2, #0
 800b996:	2300      	movs	r3, #0
 800b998:	4650      	mov	r0, sl
 800b99a:	4659      	mov	r1, fp
 800b99c:	f7f5 f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	d1a6      	bne.n	800b8f2 <_strtod_l+0x562>
 800b9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b9aa:	9805      	ldr	r0, [sp, #20]
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	463a      	mov	r2, r7
 800b9b0:	f002 fe66 	bl	800e680 <__s2b>
 800b9b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	f43f af05 	beq.w	800b7c6 <_strtod_l+0x436>
 800b9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9be:	2a00      	cmp	r2, #0
 800b9c0:	eba9 0308 	sub.w	r3, r9, r8
 800b9c4:	bfa8      	it	ge
 800b9c6:	2300      	movge	r3, #0
 800b9c8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9ca:	2400      	movs	r4, #0
 800b9cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b9d0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b9d2:	46a0      	mov	r8, r4
 800b9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9d6:	9805      	ldr	r0, [sp, #20]
 800b9d8:	6859      	ldr	r1, [r3, #4]
 800b9da:	f002 fda9 	bl	800e530 <_Balloc>
 800b9de:	4681      	mov	r9, r0
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	f43f aef4 	beq.w	800b7ce <_strtod_l+0x43e>
 800b9e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9e8:	691a      	ldr	r2, [r3, #16]
 800b9ea:	3202      	adds	r2, #2
 800b9ec:	f103 010c 	add.w	r1, r3, #12
 800b9f0:	0092      	lsls	r2, r2, #2
 800b9f2:	300c      	adds	r0, #12
 800b9f4:	f001 fae5 	bl	800cfc2 <memcpy>
 800b9f8:	ec4b ab10 	vmov	d0, sl, fp
 800b9fc:	9805      	ldr	r0, [sp, #20]
 800b9fe:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba00:	a91b      	add	r1, sp, #108	@ 0x6c
 800ba02:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ba06:	f003 f977 	bl	800ecf8 <__d2b>
 800ba0a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	f43f aede 	beq.w	800b7ce <_strtod_l+0x43e>
 800ba12:	9805      	ldr	r0, [sp, #20]
 800ba14:	2101      	movs	r1, #1
 800ba16:	f002 fec9 	bl	800e7ac <__i2b>
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	b948      	cbnz	r0, 800ba32 <_strtod_l+0x6a2>
 800ba1e:	f04f 0800 	mov.w	r8, #0
 800ba22:	e6d4      	b.n	800b7ce <_strtod_l+0x43e>
 800ba24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba28:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2c:	ea03 0a0a 	and.w	sl, r3, sl
 800ba30:	e7b0      	b.n	800b994 <_strtod_l+0x604>
 800ba32:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ba34:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ba36:	2d00      	cmp	r5, #0
 800ba38:	bfab      	itete	ge
 800ba3a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ba3c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ba3e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ba40:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ba42:	bfac      	ite	ge
 800ba44:	18ef      	addge	r7, r5, r3
 800ba46:	1b5e      	sublt	r6, r3, r5
 800ba48:	9b08      	ldr	r3, [sp, #32]
 800ba4a:	1aed      	subs	r5, r5, r3
 800ba4c:	4415      	add	r5, r2
 800ba4e:	4b66      	ldr	r3, [pc, #408]	@ (800bbe8 <_strtod_l+0x858>)
 800ba50:	3d01      	subs	r5, #1
 800ba52:	429d      	cmp	r5, r3
 800ba54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba58:	da50      	bge.n	800bafc <_strtod_l+0x76c>
 800ba5a:	1b5b      	subs	r3, r3, r5
 800ba5c:	2b1f      	cmp	r3, #31
 800ba5e:	eba2 0203 	sub.w	r2, r2, r3
 800ba62:	f04f 0101 	mov.w	r1, #1
 800ba66:	dc3d      	bgt.n	800bae4 <_strtod_l+0x754>
 800ba68:	fa01 f303 	lsl.w	r3, r1, r3
 800ba6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba6e:	2300      	movs	r3, #0
 800ba70:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba72:	18bd      	adds	r5, r7, r2
 800ba74:	9b08      	ldr	r3, [sp, #32]
 800ba76:	42af      	cmp	r7, r5
 800ba78:	4416      	add	r6, r2
 800ba7a:	441e      	add	r6, r3
 800ba7c:	463b      	mov	r3, r7
 800ba7e:	bfa8      	it	ge
 800ba80:	462b      	movge	r3, r5
 800ba82:	42b3      	cmp	r3, r6
 800ba84:	bfa8      	it	ge
 800ba86:	4633      	movge	r3, r6
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	bfc2      	ittt	gt
 800ba8c:	1aed      	subgt	r5, r5, r3
 800ba8e:	1af6      	subgt	r6, r6, r3
 800ba90:	1aff      	subgt	r7, r7, r3
 800ba92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	dd16      	ble.n	800bac6 <_strtod_l+0x736>
 800ba98:	4641      	mov	r1, r8
 800ba9a:	9805      	ldr	r0, [sp, #20]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f002 ff45 	bl	800e92c <__pow5mult>
 800baa2:	4680      	mov	r8, r0
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d0ba      	beq.n	800ba1e <_strtod_l+0x68e>
 800baa8:	4601      	mov	r1, r0
 800baaa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800baac:	9805      	ldr	r0, [sp, #20]
 800baae:	f002 fe93 	bl	800e7d8 <__multiply>
 800bab2:	900e      	str	r0, [sp, #56]	@ 0x38
 800bab4:	2800      	cmp	r0, #0
 800bab6:	f43f ae8a 	beq.w	800b7ce <_strtod_l+0x43e>
 800baba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800babc:	9805      	ldr	r0, [sp, #20]
 800babe:	f002 fd77 	bl	800e5b0 <_Bfree>
 800bac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bac4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bac6:	2d00      	cmp	r5, #0
 800bac8:	dc1d      	bgt.n	800bb06 <_strtod_l+0x776>
 800baca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dd23      	ble.n	800bb18 <_strtod_l+0x788>
 800bad0:	4649      	mov	r1, r9
 800bad2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bad4:	9805      	ldr	r0, [sp, #20]
 800bad6:	f002 ff29 	bl	800e92c <__pow5mult>
 800bada:	4681      	mov	r9, r0
 800badc:	b9e0      	cbnz	r0, 800bb18 <_strtod_l+0x788>
 800bade:	f04f 0900 	mov.w	r9, #0
 800bae2:	e674      	b.n	800b7ce <_strtod_l+0x43e>
 800bae4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bae8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800baec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800baf0:	35e2      	adds	r5, #226	@ 0xe2
 800baf2:	fa01 f305 	lsl.w	r3, r1, r5
 800baf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800baf8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bafa:	e7ba      	b.n	800ba72 <_strtod_l+0x6e2>
 800bafc:	2300      	movs	r3, #0
 800bafe:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb00:	2301      	movs	r3, #1
 800bb02:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb04:	e7b5      	b.n	800ba72 <_strtod_l+0x6e2>
 800bb06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb08:	9805      	ldr	r0, [sp, #20]
 800bb0a:	462a      	mov	r2, r5
 800bb0c:	f002 ff68 	bl	800e9e0 <__lshift>
 800bb10:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d1d9      	bne.n	800baca <_strtod_l+0x73a>
 800bb16:	e65a      	b.n	800b7ce <_strtod_l+0x43e>
 800bb18:	2e00      	cmp	r6, #0
 800bb1a:	dd07      	ble.n	800bb2c <_strtod_l+0x79c>
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	9805      	ldr	r0, [sp, #20]
 800bb20:	4632      	mov	r2, r6
 800bb22:	f002 ff5d 	bl	800e9e0 <__lshift>
 800bb26:	4681      	mov	r9, r0
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d0d8      	beq.n	800bade <_strtod_l+0x74e>
 800bb2c:	2f00      	cmp	r7, #0
 800bb2e:	dd08      	ble.n	800bb42 <_strtod_l+0x7b2>
 800bb30:	4641      	mov	r1, r8
 800bb32:	9805      	ldr	r0, [sp, #20]
 800bb34:	463a      	mov	r2, r7
 800bb36:	f002 ff53 	bl	800e9e0 <__lshift>
 800bb3a:	4680      	mov	r8, r0
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	f43f ae46 	beq.w	800b7ce <_strtod_l+0x43e>
 800bb42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb44:	9805      	ldr	r0, [sp, #20]
 800bb46:	464a      	mov	r2, r9
 800bb48:	f002 ffd2 	bl	800eaf0 <__mdiff>
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	f43f ae3d 	beq.w	800b7ce <_strtod_l+0x43e>
 800bb54:	68c3      	ldr	r3, [r0, #12]
 800bb56:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb58:	2300      	movs	r3, #0
 800bb5a:	60c3      	str	r3, [r0, #12]
 800bb5c:	4641      	mov	r1, r8
 800bb5e:	f002 ffab 	bl	800eab8 <__mcmp>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	da46      	bge.n	800bbf4 <_strtod_l+0x864>
 800bb66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb68:	ea53 030a 	orrs.w	r3, r3, sl
 800bb6c:	d16c      	bne.n	800bc48 <_strtod_l+0x8b8>
 800bb6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d168      	bne.n	800bc48 <_strtod_l+0x8b8>
 800bb76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb7a:	0d1b      	lsrs	r3, r3, #20
 800bb7c:	051b      	lsls	r3, r3, #20
 800bb7e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb82:	d961      	bls.n	800bc48 <_strtod_l+0x8b8>
 800bb84:	6963      	ldr	r3, [r4, #20]
 800bb86:	b913      	cbnz	r3, 800bb8e <_strtod_l+0x7fe>
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	dd5c      	ble.n	800bc48 <_strtod_l+0x8b8>
 800bb8e:	4621      	mov	r1, r4
 800bb90:	2201      	movs	r2, #1
 800bb92:	9805      	ldr	r0, [sp, #20]
 800bb94:	f002 ff24 	bl	800e9e0 <__lshift>
 800bb98:	4641      	mov	r1, r8
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	f002 ff8c 	bl	800eab8 <__mcmp>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	dd51      	ble.n	800bc48 <_strtod_l+0x8b8>
 800bba4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bba8:	9a08      	ldr	r2, [sp, #32]
 800bbaa:	0d1b      	lsrs	r3, r3, #20
 800bbac:	051b      	lsls	r3, r3, #20
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	d06b      	beq.n	800bc8a <_strtod_l+0x8fa>
 800bbb2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bbb6:	d868      	bhi.n	800bc8a <_strtod_l+0x8fa>
 800bbb8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bbbc:	f67f ae9d 	bls.w	800b8fa <_strtod_l+0x56a>
 800bbc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbec <_strtod_l+0x85c>)
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	4659      	mov	r1, fp
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f7f4 fd1e 	bl	8000608 <__aeabi_dmul>
 800bbcc:	4b08      	ldr	r3, [pc, #32]	@ (800bbf0 <_strtod_l+0x860>)
 800bbce:	400b      	ands	r3, r1
 800bbd0:	4682      	mov	sl, r0
 800bbd2:	468b      	mov	fp, r1
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f47f ae05 	bne.w	800b7e4 <_strtod_l+0x454>
 800bbda:	9a05      	ldr	r2, [sp, #20]
 800bbdc:	2322      	movs	r3, #34	@ 0x22
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	e600      	b.n	800b7e4 <_strtod_l+0x454>
 800bbe2:	bf00      	nop
 800bbe4:	0800faf0 	.word	0x0800faf0
 800bbe8:	fffffc02 	.word	0xfffffc02
 800bbec:	39500000 	.word	0x39500000
 800bbf0:	7ff00000 	.word	0x7ff00000
 800bbf4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bbf8:	d165      	bne.n	800bcc6 <_strtod_l+0x936>
 800bbfa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bbfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc00:	b35a      	cbz	r2, 800bc5a <_strtod_l+0x8ca>
 800bc02:	4a9f      	ldr	r2, [pc, #636]	@ (800be80 <_strtod_l+0xaf0>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d12b      	bne.n	800bc60 <_strtod_l+0x8d0>
 800bc08:	9b08      	ldr	r3, [sp, #32]
 800bc0a:	4651      	mov	r1, sl
 800bc0c:	b303      	cbz	r3, 800bc50 <_strtod_l+0x8c0>
 800bc0e:	4b9d      	ldr	r3, [pc, #628]	@ (800be84 <_strtod_l+0xaf4>)
 800bc10:	465a      	mov	r2, fp
 800bc12:	4013      	ands	r3, r2
 800bc14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bc18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc1c:	d81b      	bhi.n	800bc56 <_strtod_l+0x8c6>
 800bc1e:	0d1b      	lsrs	r3, r3, #20
 800bc20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc24:	fa02 f303 	lsl.w	r3, r2, r3
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d119      	bne.n	800bc60 <_strtod_l+0x8d0>
 800bc2c:	4b96      	ldr	r3, [pc, #600]	@ (800be88 <_strtod_l+0xaf8>)
 800bc2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d102      	bne.n	800bc3a <_strtod_l+0x8aa>
 800bc34:	3101      	adds	r1, #1
 800bc36:	f43f adca 	beq.w	800b7ce <_strtod_l+0x43e>
 800bc3a:	4b92      	ldr	r3, [pc, #584]	@ (800be84 <_strtod_l+0xaf4>)
 800bc3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc3e:	401a      	ands	r2, r3
 800bc40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bc44:	f04f 0a00 	mov.w	sl, #0
 800bc48:	9b08      	ldr	r3, [sp, #32]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1b8      	bne.n	800bbc0 <_strtod_l+0x830>
 800bc4e:	e5c9      	b.n	800b7e4 <_strtod_l+0x454>
 800bc50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc54:	e7e8      	b.n	800bc28 <_strtod_l+0x898>
 800bc56:	4613      	mov	r3, r2
 800bc58:	e7e6      	b.n	800bc28 <_strtod_l+0x898>
 800bc5a:	ea53 030a 	orrs.w	r3, r3, sl
 800bc5e:	d0a1      	beq.n	800bba4 <_strtod_l+0x814>
 800bc60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc62:	b1db      	cbz	r3, 800bc9c <_strtod_l+0x90c>
 800bc64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc66:	4213      	tst	r3, r2
 800bc68:	d0ee      	beq.n	800bc48 <_strtod_l+0x8b8>
 800bc6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc6c:	9a08      	ldr	r2, [sp, #32]
 800bc6e:	4650      	mov	r0, sl
 800bc70:	4659      	mov	r1, fp
 800bc72:	b1bb      	cbz	r3, 800bca4 <_strtod_l+0x914>
 800bc74:	f7ff fb6c 	bl	800b350 <sulp>
 800bc78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc7c:	ec53 2b10 	vmov	r2, r3, d0
 800bc80:	f7f4 fb0c 	bl	800029c <__adddf3>
 800bc84:	4682      	mov	sl, r0
 800bc86:	468b      	mov	fp, r1
 800bc88:	e7de      	b.n	800bc48 <_strtod_l+0x8b8>
 800bc8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bc8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bc92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bc96:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bc9a:	e7d5      	b.n	800bc48 <_strtod_l+0x8b8>
 800bc9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc9e:	ea13 0f0a 	tst.w	r3, sl
 800bca2:	e7e1      	b.n	800bc68 <_strtod_l+0x8d8>
 800bca4:	f7ff fb54 	bl	800b350 <sulp>
 800bca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcac:	ec53 2b10 	vmov	r2, r3, d0
 800bcb0:	f7f4 faf2 	bl	8000298 <__aeabi_dsub>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	4682      	mov	sl, r0
 800bcba:	468b      	mov	fp, r1
 800bcbc:	f7f4 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d0c1      	beq.n	800bc48 <_strtod_l+0x8b8>
 800bcc4:	e619      	b.n	800b8fa <_strtod_l+0x56a>
 800bcc6:	4641      	mov	r1, r8
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f003 f86d 	bl	800eda8 <__ratio>
 800bcce:	ec57 6b10 	vmov	r6, r7, d0
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 ff10 	bl	8000b00 <__aeabi_dcmple>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d06f      	beq.n	800bdc4 <_strtod_l+0xa34>
 800bce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d17a      	bne.n	800bde0 <_strtod_l+0xa50>
 800bcea:	f1ba 0f00 	cmp.w	sl, #0
 800bcee:	d158      	bne.n	800bda2 <_strtod_l+0xa12>
 800bcf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d15a      	bne.n	800bdb0 <_strtod_l+0xa20>
 800bcfa:	4b64      	ldr	r3, [pc, #400]	@ (800be8c <_strtod_l+0xafc>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4630      	mov	r0, r6
 800bd00:	4639      	mov	r1, r7
 800bd02:	f7f4 fef3 	bl	8000aec <__aeabi_dcmplt>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d159      	bne.n	800bdbe <_strtod_l+0xa2e>
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	4b60      	ldr	r3, [pc, #384]	@ (800be90 <_strtod_l+0xb00>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	f7f4 fc79 	bl	8000608 <__aeabi_dmul>
 800bd16:	4606      	mov	r6, r0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bd1e:	9606      	str	r6, [sp, #24]
 800bd20:	9307      	str	r3, [sp, #28]
 800bd22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd26:	4d57      	ldr	r5, [pc, #348]	@ (800be84 <_strtod_l+0xaf4>)
 800bd28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd2e:	401d      	ands	r5, r3
 800bd30:	4b58      	ldr	r3, [pc, #352]	@ (800be94 <_strtod_l+0xb04>)
 800bd32:	429d      	cmp	r5, r3
 800bd34:	f040 80b2 	bne.w	800be9c <_strtod_l+0xb0c>
 800bd38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bd3e:	ec4b ab10 	vmov	d0, sl, fp
 800bd42:	f002 ff69 	bl	800ec18 <__ulp>
 800bd46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd4a:	ec51 0b10 	vmov	r0, r1, d0
 800bd4e:	f7f4 fc5b 	bl	8000608 <__aeabi_dmul>
 800bd52:	4652      	mov	r2, sl
 800bd54:	465b      	mov	r3, fp
 800bd56:	f7f4 faa1 	bl	800029c <__adddf3>
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4949      	ldr	r1, [pc, #292]	@ (800be84 <_strtod_l+0xaf4>)
 800bd5e:	4a4e      	ldr	r2, [pc, #312]	@ (800be98 <_strtod_l+0xb08>)
 800bd60:	4019      	ands	r1, r3
 800bd62:	4291      	cmp	r1, r2
 800bd64:	4682      	mov	sl, r0
 800bd66:	d942      	bls.n	800bdee <_strtod_l+0xa5e>
 800bd68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd6a:	4b47      	ldr	r3, [pc, #284]	@ (800be88 <_strtod_l+0xaf8>)
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d103      	bne.n	800bd78 <_strtod_l+0x9e8>
 800bd70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd72:	3301      	adds	r3, #1
 800bd74:	f43f ad2b 	beq.w	800b7ce <_strtod_l+0x43e>
 800bd78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800be88 <_strtod_l+0xaf8>
 800bd7c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bd80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd82:	9805      	ldr	r0, [sp, #20]
 800bd84:	f002 fc14 	bl	800e5b0 <_Bfree>
 800bd88:	9805      	ldr	r0, [sp, #20]
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	f002 fc10 	bl	800e5b0 <_Bfree>
 800bd90:	9805      	ldr	r0, [sp, #20]
 800bd92:	4641      	mov	r1, r8
 800bd94:	f002 fc0c 	bl	800e5b0 <_Bfree>
 800bd98:	9805      	ldr	r0, [sp, #20]
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	f002 fc08 	bl	800e5b0 <_Bfree>
 800bda0:	e618      	b.n	800b9d4 <_strtod_l+0x644>
 800bda2:	f1ba 0f01 	cmp.w	sl, #1
 800bda6:	d103      	bne.n	800bdb0 <_strtod_l+0xa20>
 800bda8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f43f ada5 	beq.w	800b8fa <_strtod_l+0x56a>
 800bdb0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800be60 <_strtod_l+0xad0>
 800bdb4:	4f35      	ldr	r7, [pc, #212]	@ (800be8c <_strtod_l+0xafc>)
 800bdb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdba:	2600      	movs	r6, #0
 800bdbc:	e7b1      	b.n	800bd22 <_strtod_l+0x992>
 800bdbe:	4f34      	ldr	r7, [pc, #208]	@ (800be90 <_strtod_l+0xb00>)
 800bdc0:	2600      	movs	r6, #0
 800bdc2:	e7aa      	b.n	800bd1a <_strtod_l+0x98a>
 800bdc4:	4b32      	ldr	r3, [pc, #200]	@ (800be90 <_strtod_l+0xb00>)
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	4639      	mov	r1, r7
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f7f4 fc1c 	bl	8000608 <__aeabi_dmul>
 800bdd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460f      	mov	r7, r1
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d09f      	beq.n	800bd1a <_strtod_l+0x98a>
 800bdda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bdde:	e7a0      	b.n	800bd22 <_strtod_l+0x992>
 800bde0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800be68 <_strtod_l+0xad8>
 800bde4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bde8:	ec57 6b17 	vmov	r6, r7, d7
 800bdec:	e799      	b.n	800bd22 <_strtod_l+0x992>
 800bdee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bdf2:	9b08      	ldr	r3, [sp, #32]
 800bdf4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1c1      	bne.n	800bd80 <_strtod_l+0x9f0>
 800bdfc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be00:	0d1b      	lsrs	r3, r3, #20
 800be02:	051b      	lsls	r3, r3, #20
 800be04:	429d      	cmp	r5, r3
 800be06:	d1bb      	bne.n	800bd80 <_strtod_l+0x9f0>
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	f7f4 ff5c 	bl	8000cc8 <__aeabi_d2lz>
 800be10:	f7f4 fbcc 	bl	80005ac <__aeabi_l2d>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4630      	mov	r0, r6
 800be1a:	4639      	mov	r1, r7
 800be1c:	f7f4 fa3c 	bl	8000298 <__aeabi_dsub>
 800be20:	460b      	mov	r3, r1
 800be22:	4602      	mov	r2, r0
 800be24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be2e:	ea46 060a 	orr.w	r6, r6, sl
 800be32:	431e      	orrs	r6, r3
 800be34:	d06f      	beq.n	800bf16 <_strtod_l+0xb86>
 800be36:	a30e      	add	r3, pc, #56	@ (adr r3, 800be70 <_strtod_l+0xae0>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	f7f4 fe56 	bl	8000aec <__aeabi_dcmplt>
 800be40:	2800      	cmp	r0, #0
 800be42:	f47f accf 	bne.w	800b7e4 <_strtod_l+0x454>
 800be46:	a30c      	add	r3, pc, #48	@ (adr r3, 800be78 <_strtod_l+0xae8>)
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be50:	f7f4 fe6a 	bl	8000b28 <__aeabi_dcmpgt>
 800be54:	2800      	cmp	r0, #0
 800be56:	d093      	beq.n	800bd80 <_strtod_l+0x9f0>
 800be58:	e4c4      	b.n	800b7e4 <_strtod_l+0x454>
 800be5a:	bf00      	nop
 800be5c:	f3af 8000 	nop.w
 800be60:	00000000 	.word	0x00000000
 800be64:	bff00000 	.word	0xbff00000
 800be68:	00000000 	.word	0x00000000
 800be6c:	3ff00000 	.word	0x3ff00000
 800be70:	94a03595 	.word	0x94a03595
 800be74:	3fdfffff 	.word	0x3fdfffff
 800be78:	35afe535 	.word	0x35afe535
 800be7c:	3fe00000 	.word	0x3fe00000
 800be80:	000fffff 	.word	0x000fffff
 800be84:	7ff00000 	.word	0x7ff00000
 800be88:	7fefffff 	.word	0x7fefffff
 800be8c:	3ff00000 	.word	0x3ff00000
 800be90:	3fe00000 	.word	0x3fe00000
 800be94:	7fe00000 	.word	0x7fe00000
 800be98:	7c9fffff 	.word	0x7c9fffff
 800be9c:	9b08      	ldr	r3, [sp, #32]
 800be9e:	b323      	cbz	r3, 800beea <_strtod_l+0xb5a>
 800bea0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bea4:	d821      	bhi.n	800beea <_strtod_l+0xb5a>
 800bea6:	a328      	add	r3, pc, #160	@ (adr r3, 800bf48 <_strtod_l+0xbb8>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	4630      	mov	r0, r6
 800beae:	4639      	mov	r1, r7
 800beb0:	f7f4 fe26 	bl	8000b00 <__aeabi_dcmple>
 800beb4:	b1a0      	cbz	r0, 800bee0 <_strtod_l+0xb50>
 800beb6:	4639      	mov	r1, r7
 800beb8:	4630      	mov	r0, r6
 800beba:	f7f4 fe7d 	bl	8000bb8 <__aeabi_d2uiz>
 800bebe:	2801      	cmp	r0, #1
 800bec0:	bf38      	it	cc
 800bec2:	2001      	movcc	r0, #1
 800bec4:	f7f4 fb26 	bl	8000514 <__aeabi_ui2d>
 800bec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beca:	4606      	mov	r6, r0
 800becc:	460f      	mov	r7, r1
 800bece:	b9fb      	cbnz	r3, 800bf10 <_strtod_l+0xb80>
 800bed0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bed4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bed6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bed8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bedc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bee0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bee2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bee6:	1b5b      	subs	r3, r3, r5
 800bee8:	9311      	str	r3, [sp, #68]	@ 0x44
 800beea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800beee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bef2:	f002 fe91 	bl	800ec18 <__ulp>
 800bef6:	4650      	mov	r0, sl
 800bef8:	ec53 2b10 	vmov	r2, r3, d0
 800befc:	4659      	mov	r1, fp
 800befe:	f7f4 fb83 	bl	8000608 <__aeabi_dmul>
 800bf02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf06:	f7f4 f9c9 	bl	800029c <__adddf3>
 800bf0a:	4682      	mov	sl, r0
 800bf0c:	468b      	mov	fp, r1
 800bf0e:	e770      	b.n	800bdf2 <_strtod_l+0xa62>
 800bf10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bf14:	e7e0      	b.n	800bed8 <_strtod_l+0xb48>
 800bf16:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf50 <_strtod_l+0xbc0>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f7f4 fde6 	bl	8000aec <__aeabi_dcmplt>
 800bf20:	e798      	b.n	800be54 <_strtod_l+0xac4>
 800bf22:	2300      	movs	r3, #0
 800bf24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bf28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf2a:	6013      	str	r3, [r2, #0]
 800bf2c:	f7ff ba6d 	b.w	800b40a <_strtod_l+0x7a>
 800bf30:	2a65      	cmp	r2, #101	@ 0x65
 800bf32:	f43f ab66 	beq.w	800b602 <_strtod_l+0x272>
 800bf36:	2a45      	cmp	r2, #69	@ 0x45
 800bf38:	f43f ab63 	beq.w	800b602 <_strtod_l+0x272>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	f7ff bb9e 	b.w	800b67e <_strtod_l+0x2ee>
 800bf42:	bf00      	nop
 800bf44:	f3af 8000 	nop.w
 800bf48:	ffc00000 	.word	0xffc00000
 800bf4c:	41dfffff 	.word	0x41dfffff
 800bf50:	94a03595 	.word	0x94a03595
 800bf54:	3fcfffff 	.word	0x3fcfffff

0800bf58 <_strtod_r>:
 800bf58:	4b01      	ldr	r3, [pc, #4]	@ (800bf60 <_strtod_r+0x8>)
 800bf5a:	f7ff ba19 	b.w	800b390 <_strtod_l>
 800bf5e:	bf00      	nop
 800bf60:	20000110 	.word	0x20000110

0800bf64 <strtod>:
 800bf64:	460a      	mov	r2, r1
 800bf66:	4601      	mov	r1, r0
 800bf68:	4802      	ldr	r0, [pc, #8]	@ (800bf74 <strtod+0x10>)
 800bf6a:	4b03      	ldr	r3, [pc, #12]	@ (800bf78 <strtod+0x14>)
 800bf6c:	6800      	ldr	r0, [r0, #0]
 800bf6e:	f7ff ba0f 	b.w	800b390 <_strtod_l>
 800bf72:	bf00      	nop
 800bf74:	2000027c 	.word	0x2000027c
 800bf78:	20000110 	.word	0x20000110

0800bf7c <__cvt>:
 800bf7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf80:	ec57 6b10 	vmov	r6, r7, d0
 800bf84:	2f00      	cmp	r7, #0
 800bf86:	460c      	mov	r4, r1
 800bf88:	4619      	mov	r1, r3
 800bf8a:	463b      	mov	r3, r7
 800bf8c:	bfbb      	ittet	lt
 800bf8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bf92:	461f      	movlt	r7, r3
 800bf94:	2300      	movge	r3, #0
 800bf96:	232d      	movlt	r3, #45	@ 0x2d
 800bf98:	700b      	strb	r3, [r1, #0]
 800bf9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bfa0:	4691      	mov	r9, r2
 800bfa2:	f023 0820 	bic.w	r8, r3, #32
 800bfa6:	bfbc      	itt	lt
 800bfa8:	4632      	movlt	r2, r6
 800bfaa:	4616      	movlt	r6, r2
 800bfac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bfb0:	d005      	beq.n	800bfbe <__cvt+0x42>
 800bfb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bfb6:	d100      	bne.n	800bfba <__cvt+0x3e>
 800bfb8:	3401      	adds	r4, #1
 800bfba:	2102      	movs	r1, #2
 800bfbc:	e000      	b.n	800bfc0 <__cvt+0x44>
 800bfbe:	2103      	movs	r1, #3
 800bfc0:	ab03      	add	r3, sp, #12
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	ab02      	add	r3, sp, #8
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	ec47 6b10 	vmov	d0, r6, r7
 800bfcc:	4653      	mov	r3, sl
 800bfce:	4622      	mov	r2, r4
 800bfd0:	f001 f89e 	bl	800d110 <_dtoa_r>
 800bfd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bfd8:	4605      	mov	r5, r0
 800bfda:	d119      	bne.n	800c010 <__cvt+0x94>
 800bfdc:	f019 0f01 	tst.w	r9, #1
 800bfe0:	d00e      	beq.n	800c000 <__cvt+0x84>
 800bfe2:	eb00 0904 	add.w	r9, r0, r4
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4630      	mov	r0, r6
 800bfec:	4639      	mov	r1, r7
 800bfee:	f7f4 fd73 	bl	8000ad8 <__aeabi_dcmpeq>
 800bff2:	b108      	cbz	r0, 800bff8 <__cvt+0x7c>
 800bff4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bff8:	2230      	movs	r2, #48	@ 0x30
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	454b      	cmp	r3, r9
 800bffe:	d31e      	bcc.n	800c03e <__cvt+0xc2>
 800c000:	9b03      	ldr	r3, [sp, #12]
 800c002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c004:	1b5b      	subs	r3, r3, r5
 800c006:	4628      	mov	r0, r5
 800c008:	6013      	str	r3, [r2, #0]
 800c00a:	b004      	add	sp, #16
 800c00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c014:	eb00 0904 	add.w	r9, r0, r4
 800c018:	d1e5      	bne.n	800bfe6 <__cvt+0x6a>
 800c01a:	7803      	ldrb	r3, [r0, #0]
 800c01c:	2b30      	cmp	r3, #48	@ 0x30
 800c01e:	d10a      	bne.n	800c036 <__cvt+0xba>
 800c020:	2200      	movs	r2, #0
 800c022:	2300      	movs	r3, #0
 800c024:	4630      	mov	r0, r6
 800c026:	4639      	mov	r1, r7
 800c028:	f7f4 fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800c02c:	b918      	cbnz	r0, 800c036 <__cvt+0xba>
 800c02e:	f1c4 0401 	rsb	r4, r4, #1
 800c032:	f8ca 4000 	str.w	r4, [sl]
 800c036:	f8da 3000 	ldr.w	r3, [sl]
 800c03a:	4499      	add	r9, r3
 800c03c:	e7d3      	b.n	800bfe6 <__cvt+0x6a>
 800c03e:	1c59      	adds	r1, r3, #1
 800c040:	9103      	str	r1, [sp, #12]
 800c042:	701a      	strb	r2, [r3, #0]
 800c044:	e7d9      	b.n	800bffa <__cvt+0x7e>

0800c046 <__exponent>:
 800c046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c048:	2900      	cmp	r1, #0
 800c04a:	bfba      	itte	lt
 800c04c:	4249      	neglt	r1, r1
 800c04e:	232d      	movlt	r3, #45	@ 0x2d
 800c050:	232b      	movge	r3, #43	@ 0x2b
 800c052:	2909      	cmp	r1, #9
 800c054:	7002      	strb	r2, [r0, #0]
 800c056:	7043      	strb	r3, [r0, #1]
 800c058:	dd29      	ble.n	800c0ae <__exponent+0x68>
 800c05a:	f10d 0307 	add.w	r3, sp, #7
 800c05e:	461d      	mov	r5, r3
 800c060:	270a      	movs	r7, #10
 800c062:	461a      	mov	r2, r3
 800c064:	fbb1 f6f7 	udiv	r6, r1, r7
 800c068:	fb07 1416 	mls	r4, r7, r6, r1
 800c06c:	3430      	adds	r4, #48	@ 0x30
 800c06e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c072:	460c      	mov	r4, r1
 800c074:	2c63      	cmp	r4, #99	@ 0x63
 800c076:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c07a:	4631      	mov	r1, r6
 800c07c:	dcf1      	bgt.n	800c062 <__exponent+0x1c>
 800c07e:	3130      	adds	r1, #48	@ 0x30
 800c080:	1e94      	subs	r4, r2, #2
 800c082:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c086:	1c41      	adds	r1, r0, #1
 800c088:	4623      	mov	r3, r4
 800c08a:	42ab      	cmp	r3, r5
 800c08c:	d30a      	bcc.n	800c0a4 <__exponent+0x5e>
 800c08e:	f10d 0309 	add.w	r3, sp, #9
 800c092:	1a9b      	subs	r3, r3, r2
 800c094:	42ac      	cmp	r4, r5
 800c096:	bf88      	it	hi
 800c098:	2300      	movhi	r3, #0
 800c09a:	3302      	adds	r3, #2
 800c09c:	4403      	add	r3, r0
 800c09e:	1a18      	subs	r0, r3, r0
 800c0a0:	b003      	add	sp, #12
 800c0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c0a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c0ac:	e7ed      	b.n	800c08a <__exponent+0x44>
 800c0ae:	2330      	movs	r3, #48	@ 0x30
 800c0b0:	3130      	adds	r1, #48	@ 0x30
 800c0b2:	7083      	strb	r3, [r0, #2]
 800c0b4:	70c1      	strb	r1, [r0, #3]
 800c0b6:	1d03      	adds	r3, r0, #4
 800c0b8:	e7f1      	b.n	800c09e <__exponent+0x58>
	...

0800c0bc <_printf_float>:
 800c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c0:	b08d      	sub	sp, #52	@ 0x34
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	461f      	mov	r7, r3
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	f000 ff01 	bl	800ced4 <_localeconv_r>
 800c0d2:	6803      	ldr	r3, [r0, #0]
 800c0d4:	9304      	str	r3, [sp, #16]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7f4 f8d2 	bl	8000280 <strlen>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e4:	9005      	str	r0, [sp, #20]
 800c0e6:	3307      	adds	r3, #7
 800c0e8:	f023 0307 	bic.w	r3, r3, #7
 800c0ec:	f103 0208 	add.w	r2, r3, #8
 800c0f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c0f4:	f8d4 b000 	ldr.w	fp, [r4]
 800c0f8:	f8c8 2000 	str.w	r2, [r8]
 800c0fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c100:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c104:	9307      	str	r3, [sp, #28]
 800c106:	f8cd 8018 	str.w	r8, [sp, #24]
 800c10a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c10e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c112:	4b9c      	ldr	r3, [pc, #624]	@ (800c384 <_printf_float+0x2c8>)
 800c114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c118:	f7f4 fd10 	bl	8000b3c <__aeabi_dcmpun>
 800c11c:	bb70      	cbnz	r0, 800c17c <_printf_float+0xc0>
 800c11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c122:	4b98      	ldr	r3, [pc, #608]	@ (800c384 <_printf_float+0x2c8>)
 800c124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c128:	f7f4 fcea 	bl	8000b00 <__aeabi_dcmple>
 800c12c:	bb30      	cbnz	r0, 800c17c <_printf_float+0xc0>
 800c12e:	2200      	movs	r2, #0
 800c130:	2300      	movs	r3, #0
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 fcd9 	bl	8000aec <__aeabi_dcmplt>
 800c13a:	b110      	cbz	r0, 800c142 <_printf_float+0x86>
 800c13c:	232d      	movs	r3, #45	@ 0x2d
 800c13e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c142:	4a91      	ldr	r2, [pc, #580]	@ (800c388 <_printf_float+0x2cc>)
 800c144:	4b91      	ldr	r3, [pc, #580]	@ (800c38c <_printf_float+0x2d0>)
 800c146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c14a:	bf94      	ite	ls
 800c14c:	4690      	movls	r8, r2
 800c14e:	4698      	movhi	r8, r3
 800c150:	2303      	movs	r3, #3
 800c152:	6123      	str	r3, [r4, #16]
 800c154:	f02b 0304 	bic.w	r3, fp, #4
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	f04f 0900 	mov.w	r9, #0
 800c15e:	9700      	str	r7, [sp, #0]
 800c160:	4633      	mov	r3, r6
 800c162:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c164:	4621      	mov	r1, r4
 800c166:	4628      	mov	r0, r5
 800c168:	f000 f9d2 	bl	800c510 <_printf_common>
 800c16c:	3001      	adds	r0, #1
 800c16e:	f040 808d 	bne.w	800c28c <_printf_float+0x1d0>
 800c172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c176:	b00d      	add	sp, #52	@ 0x34
 800c178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17c:	4642      	mov	r2, r8
 800c17e:	464b      	mov	r3, r9
 800c180:	4640      	mov	r0, r8
 800c182:	4649      	mov	r1, r9
 800c184:	f7f4 fcda 	bl	8000b3c <__aeabi_dcmpun>
 800c188:	b140      	cbz	r0, 800c19c <_printf_float+0xe0>
 800c18a:	464b      	mov	r3, r9
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	bfbc      	itt	lt
 800c190:	232d      	movlt	r3, #45	@ 0x2d
 800c192:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c196:	4a7e      	ldr	r2, [pc, #504]	@ (800c390 <_printf_float+0x2d4>)
 800c198:	4b7e      	ldr	r3, [pc, #504]	@ (800c394 <_printf_float+0x2d8>)
 800c19a:	e7d4      	b.n	800c146 <_printf_float+0x8a>
 800c19c:	6863      	ldr	r3, [r4, #4]
 800c19e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c1a2:	9206      	str	r2, [sp, #24]
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	d13b      	bne.n	800c220 <_printf_float+0x164>
 800c1a8:	2306      	movs	r3, #6
 800c1aa:	6063      	str	r3, [r4, #4]
 800c1ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6022      	str	r2, [r4, #0]
 800c1b4:	9303      	str	r3, [sp, #12]
 800c1b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c1b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c1bc:	ab09      	add	r3, sp, #36	@ 0x24
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	6861      	ldr	r1, [r4, #4]
 800c1c2:	ec49 8b10 	vmov	d0, r8, r9
 800c1c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f7ff fed6 	bl	800bf7c <__cvt>
 800c1d0:	9b06      	ldr	r3, [sp, #24]
 800c1d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1d4:	2b47      	cmp	r3, #71	@ 0x47
 800c1d6:	4680      	mov	r8, r0
 800c1d8:	d129      	bne.n	800c22e <_printf_float+0x172>
 800c1da:	1cc8      	adds	r0, r1, #3
 800c1dc:	db02      	blt.n	800c1e4 <_printf_float+0x128>
 800c1de:	6863      	ldr	r3, [r4, #4]
 800c1e0:	4299      	cmp	r1, r3
 800c1e2:	dd41      	ble.n	800c268 <_printf_float+0x1ac>
 800c1e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c1e8:	fa5f fa8a 	uxtb.w	sl, sl
 800c1ec:	3901      	subs	r1, #1
 800c1ee:	4652      	mov	r2, sl
 800c1f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c1f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1f6:	f7ff ff26 	bl	800c046 <__exponent>
 800c1fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1fc:	1813      	adds	r3, r2, r0
 800c1fe:	2a01      	cmp	r2, #1
 800c200:	4681      	mov	r9, r0
 800c202:	6123      	str	r3, [r4, #16]
 800c204:	dc02      	bgt.n	800c20c <_printf_float+0x150>
 800c206:	6822      	ldr	r2, [r4, #0]
 800c208:	07d2      	lsls	r2, r2, #31
 800c20a:	d501      	bpl.n	800c210 <_printf_float+0x154>
 800c20c:	3301      	adds	r3, #1
 800c20e:	6123      	str	r3, [r4, #16]
 800c210:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c214:	2b00      	cmp	r3, #0
 800c216:	d0a2      	beq.n	800c15e <_printf_float+0xa2>
 800c218:	232d      	movs	r3, #45	@ 0x2d
 800c21a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c21e:	e79e      	b.n	800c15e <_printf_float+0xa2>
 800c220:	9a06      	ldr	r2, [sp, #24]
 800c222:	2a47      	cmp	r2, #71	@ 0x47
 800c224:	d1c2      	bne.n	800c1ac <_printf_float+0xf0>
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1c0      	bne.n	800c1ac <_printf_float+0xf0>
 800c22a:	2301      	movs	r3, #1
 800c22c:	e7bd      	b.n	800c1aa <_printf_float+0xee>
 800c22e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c232:	d9db      	bls.n	800c1ec <_printf_float+0x130>
 800c234:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c238:	d118      	bne.n	800c26c <_printf_float+0x1b0>
 800c23a:	2900      	cmp	r1, #0
 800c23c:	6863      	ldr	r3, [r4, #4]
 800c23e:	dd0b      	ble.n	800c258 <_printf_float+0x19c>
 800c240:	6121      	str	r1, [r4, #16]
 800c242:	b913      	cbnz	r3, 800c24a <_printf_float+0x18e>
 800c244:	6822      	ldr	r2, [r4, #0]
 800c246:	07d0      	lsls	r0, r2, #31
 800c248:	d502      	bpl.n	800c250 <_printf_float+0x194>
 800c24a:	3301      	adds	r3, #1
 800c24c:	440b      	add	r3, r1
 800c24e:	6123      	str	r3, [r4, #16]
 800c250:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c252:	f04f 0900 	mov.w	r9, #0
 800c256:	e7db      	b.n	800c210 <_printf_float+0x154>
 800c258:	b913      	cbnz	r3, 800c260 <_printf_float+0x1a4>
 800c25a:	6822      	ldr	r2, [r4, #0]
 800c25c:	07d2      	lsls	r2, r2, #31
 800c25e:	d501      	bpl.n	800c264 <_printf_float+0x1a8>
 800c260:	3302      	adds	r3, #2
 800c262:	e7f4      	b.n	800c24e <_printf_float+0x192>
 800c264:	2301      	movs	r3, #1
 800c266:	e7f2      	b.n	800c24e <_printf_float+0x192>
 800c268:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c26e:	4299      	cmp	r1, r3
 800c270:	db05      	blt.n	800c27e <_printf_float+0x1c2>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	6121      	str	r1, [r4, #16]
 800c276:	07d8      	lsls	r0, r3, #31
 800c278:	d5ea      	bpl.n	800c250 <_printf_float+0x194>
 800c27a:	1c4b      	adds	r3, r1, #1
 800c27c:	e7e7      	b.n	800c24e <_printf_float+0x192>
 800c27e:	2900      	cmp	r1, #0
 800c280:	bfd4      	ite	le
 800c282:	f1c1 0202 	rsble	r2, r1, #2
 800c286:	2201      	movgt	r2, #1
 800c288:	4413      	add	r3, r2
 800c28a:	e7e0      	b.n	800c24e <_printf_float+0x192>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	055a      	lsls	r2, r3, #21
 800c290:	d407      	bmi.n	800c2a2 <_printf_float+0x1e6>
 800c292:	6923      	ldr	r3, [r4, #16]
 800c294:	4642      	mov	r2, r8
 800c296:	4631      	mov	r1, r6
 800c298:	4628      	mov	r0, r5
 800c29a:	47b8      	blx	r7
 800c29c:	3001      	adds	r0, #1
 800c29e:	d12b      	bne.n	800c2f8 <_printf_float+0x23c>
 800c2a0:	e767      	b.n	800c172 <_printf_float+0xb6>
 800c2a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c2a6:	f240 80dd 	bls.w	800c464 <_printf_float+0x3a8>
 800c2aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f7f4 fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	d033      	beq.n	800c322 <_printf_float+0x266>
 800c2ba:	4a37      	ldr	r2, [pc, #220]	@ (800c398 <_printf_float+0x2dc>)
 800c2bc:	2301      	movs	r3, #1
 800c2be:	4631      	mov	r1, r6
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	47b8      	blx	r7
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	f43f af54 	beq.w	800c172 <_printf_float+0xb6>
 800c2ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c2ce:	4543      	cmp	r3, r8
 800c2d0:	db02      	blt.n	800c2d8 <_printf_float+0x21c>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	07d8      	lsls	r0, r3, #31
 800c2d6:	d50f      	bpl.n	800c2f8 <_printf_float+0x23c>
 800c2d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4628      	mov	r0, r5
 800c2e0:	47b8      	blx	r7
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	f43f af45 	beq.w	800c172 <_printf_float+0xb6>
 800c2e8:	f04f 0900 	mov.w	r9, #0
 800c2ec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c2f0:	f104 0a1a 	add.w	sl, r4, #26
 800c2f4:	45c8      	cmp	r8, r9
 800c2f6:	dc09      	bgt.n	800c30c <_printf_float+0x250>
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	079b      	lsls	r3, r3, #30
 800c2fc:	f100 8103 	bmi.w	800c506 <_printf_float+0x44a>
 800c300:	68e0      	ldr	r0, [r4, #12]
 800c302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c304:	4298      	cmp	r0, r3
 800c306:	bfb8      	it	lt
 800c308:	4618      	movlt	r0, r3
 800c30a:	e734      	b.n	800c176 <_printf_float+0xba>
 800c30c:	2301      	movs	r3, #1
 800c30e:	4652      	mov	r2, sl
 800c310:	4631      	mov	r1, r6
 800c312:	4628      	mov	r0, r5
 800c314:	47b8      	blx	r7
 800c316:	3001      	adds	r0, #1
 800c318:	f43f af2b 	beq.w	800c172 <_printf_float+0xb6>
 800c31c:	f109 0901 	add.w	r9, r9, #1
 800c320:	e7e8      	b.n	800c2f4 <_printf_float+0x238>
 800c322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c324:	2b00      	cmp	r3, #0
 800c326:	dc39      	bgt.n	800c39c <_printf_float+0x2e0>
 800c328:	4a1b      	ldr	r2, [pc, #108]	@ (800c398 <_printf_float+0x2dc>)
 800c32a:	2301      	movs	r3, #1
 800c32c:	4631      	mov	r1, r6
 800c32e:	4628      	mov	r0, r5
 800c330:	47b8      	blx	r7
 800c332:	3001      	adds	r0, #1
 800c334:	f43f af1d 	beq.w	800c172 <_printf_float+0xb6>
 800c338:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c33c:	ea59 0303 	orrs.w	r3, r9, r3
 800c340:	d102      	bne.n	800c348 <_printf_float+0x28c>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	07d9      	lsls	r1, r3, #31
 800c346:	d5d7      	bpl.n	800c2f8 <_printf_float+0x23c>
 800c348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c34c:	4631      	mov	r1, r6
 800c34e:	4628      	mov	r0, r5
 800c350:	47b8      	blx	r7
 800c352:	3001      	adds	r0, #1
 800c354:	f43f af0d 	beq.w	800c172 <_printf_float+0xb6>
 800c358:	f04f 0a00 	mov.w	sl, #0
 800c35c:	f104 0b1a 	add.w	fp, r4, #26
 800c360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c362:	425b      	negs	r3, r3
 800c364:	4553      	cmp	r3, sl
 800c366:	dc01      	bgt.n	800c36c <_printf_float+0x2b0>
 800c368:	464b      	mov	r3, r9
 800c36a:	e793      	b.n	800c294 <_printf_float+0x1d8>
 800c36c:	2301      	movs	r3, #1
 800c36e:	465a      	mov	r2, fp
 800c370:	4631      	mov	r1, r6
 800c372:	4628      	mov	r0, r5
 800c374:	47b8      	blx	r7
 800c376:	3001      	adds	r0, #1
 800c378:	f43f aefb 	beq.w	800c172 <_printf_float+0xb6>
 800c37c:	f10a 0a01 	add.w	sl, sl, #1
 800c380:	e7ee      	b.n	800c360 <_printf_float+0x2a4>
 800c382:	bf00      	nop
 800c384:	7fefffff 	.word	0x7fefffff
 800c388:	0800fb18 	.word	0x0800fb18
 800c38c:	0800fb1c 	.word	0x0800fb1c
 800c390:	0800fb20 	.word	0x0800fb20
 800c394:	0800fb24 	.word	0x0800fb24
 800c398:	0800fb28 	.word	0x0800fb28
 800c39c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c39e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c3a2:	4553      	cmp	r3, sl
 800c3a4:	bfa8      	it	ge
 800c3a6:	4653      	movge	r3, sl
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	4699      	mov	r9, r3
 800c3ac:	dc36      	bgt.n	800c41c <_printf_float+0x360>
 800c3ae:	f04f 0b00 	mov.w	fp, #0
 800c3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3b6:	f104 021a 	add.w	r2, r4, #26
 800c3ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c3bc:	9306      	str	r3, [sp, #24]
 800c3be:	eba3 0309 	sub.w	r3, r3, r9
 800c3c2:	455b      	cmp	r3, fp
 800c3c4:	dc31      	bgt.n	800c42a <_printf_float+0x36e>
 800c3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c8:	459a      	cmp	sl, r3
 800c3ca:	dc3a      	bgt.n	800c442 <_printf_float+0x386>
 800c3cc:	6823      	ldr	r3, [r4, #0]
 800c3ce:	07da      	lsls	r2, r3, #31
 800c3d0:	d437      	bmi.n	800c442 <_printf_float+0x386>
 800c3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3d4:	ebaa 0903 	sub.w	r9, sl, r3
 800c3d8:	9b06      	ldr	r3, [sp, #24]
 800c3da:	ebaa 0303 	sub.w	r3, sl, r3
 800c3de:	4599      	cmp	r9, r3
 800c3e0:	bfa8      	it	ge
 800c3e2:	4699      	movge	r9, r3
 800c3e4:	f1b9 0f00 	cmp.w	r9, #0
 800c3e8:	dc33      	bgt.n	800c452 <_printf_float+0x396>
 800c3ea:	f04f 0800 	mov.w	r8, #0
 800c3ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3f2:	f104 0b1a 	add.w	fp, r4, #26
 800c3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3f8:	ebaa 0303 	sub.w	r3, sl, r3
 800c3fc:	eba3 0309 	sub.w	r3, r3, r9
 800c400:	4543      	cmp	r3, r8
 800c402:	f77f af79 	ble.w	800c2f8 <_printf_float+0x23c>
 800c406:	2301      	movs	r3, #1
 800c408:	465a      	mov	r2, fp
 800c40a:	4631      	mov	r1, r6
 800c40c:	4628      	mov	r0, r5
 800c40e:	47b8      	blx	r7
 800c410:	3001      	adds	r0, #1
 800c412:	f43f aeae 	beq.w	800c172 <_printf_float+0xb6>
 800c416:	f108 0801 	add.w	r8, r8, #1
 800c41a:	e7ec      	b.n	800c3f6 <_printf_float+0x33a>
 800c41c:	4642      	mov	r2, r8
 800c41e:	4631      	mov	r1, r6
 800c420:	4628      	mov	r0, r5
 800c422:	47b8      	blx	r7
 800c424:	3001      	adds	r0, #1
 800c426:	d1c2      	bne.n	800c3ae <_printf_float+0x2f2>
 800c428:	e6a3      	b.n	800c172 <_printf_float+0xb6>
 800c42a:	2301      	movs	r3, #1
 800c42c:	4631      	mov	r1, r6
 800c42e:	4628      	mov	r0, r5
 800c430:	9206      	str	r2, [sp, #24]
 800c432:	47b8      	blx	r7
 800c434:	3001      	adds	r0, #1
 800c436:	f43f ae9c 	beq.w	800c172 <_printf_float+0xb6>
 800c43a:	9a06      	ldr	r2, [sp, #24]
 800c43c:	f10b 0b01 	add.w	fp, fp, #1
 800c440:	e7bb      	b.n	800c3ba <_printf_float+0x2fe>
 800c442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c446:	4631      	mov	r1, r6
 800c448:	4628      	mov	r0, r5
 800c44a:	47b8      	blx	r7
 800c44c:	3001      	adds	r0, #1
 800c44e:	d1c0      	bne.n	800c3d2 <_printf_float+0x316>
 800c450:	e68f      	b.n	800c172 <_printf_float+0xb6>
 800c452:	9a06      	ldr	r2, [sp, #24]
 800c454:	464b      	mov	r3, r9
 800c456:	4442      	add	r2, r8
 800c458:	4631      	mov	r1, r6
 800c45a:	4628      	mov	r0, r5
 800c45c:	47b8      	blx	r7
 800c45e:	3001      	adds	r0, #1
 800c460:	d1c3      	bne.n	800c3ea <_printf_float+0x32e>
 800c462:	e686      	b.n	800c172 <_printf_float+0xb6>
 800c464:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c468:	f1ba 0f01 	cmp.w	sl, #1
 800c46c:	dc01      	bgt.n	800c472 <_printf_float+0x3b6>
 800c46e:	07db      	lsls	r3, r3, #31
 800c470:	d536      	bpl.n	800c4e0 <_printf_float+0x424>
 800c472:	2301      	movs	r3, #1
 800c474:	4642      	mov	r2, r8
 800c476:	4631      	mov	r1, r6
 800c478:	4628      	mov	r0, r5
 800c47a:	47b8      	blx	r7
 800c47c:	3001      	adds	r0, #1
 800c47e:	f43f ae78 	beq.w	800c172 <_printf_float+0xb6>
 800c482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c486:	4631      	mov	r1, r6
 800c488:	4628      	mov	r0, r5
 800c48a:	47b8      	blx	r7
 800c48c:	3001      	adds	r0, #1
 800c48e:	f43f ae70 	beq.w	800c172 <_printf_float+0xb6>
 800c492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c496:	2200      	movs	r2, #0
 800c498:	2300      	movs	r3, #0
 800c49a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c49e:	f7f4 fb1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4a2:	b9c0      	cbnz	r0, 800c4d6 <_printf_float+0x41a>
 800c4a4:	4653      	mov	r3, sl
 800c4a6:	f108 0201 	add.w	r2, r8, #1
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d10c      	bne.n	800c4ce <_printf_float+0x412>
 800c4b4:	e65d      	b.n	800c172 <_printf_float+0xb6>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	465a      	mov	r2, fp
 800c4ba:	4631      	mov	r1, r6
 800c4bc:	4628      	mov	r0, r5
 800c4be:	47b8      	blx	r7
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	f43f ae56 	beq.w	800c172 <_printf_float+0xb6>
 800c4c6:	f108 0801 	add.w	r8, r8, #1
 800c4ca:	45d0      	cmp	r8, sl
 800c4cc:	dbf3      	blt.n	800c4b6 <_printf_float+0x3fa>
 800c4ce:	464b      	mov	r3, r9
 800c4d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c4d4:	e6df      	b.n	800c296 <_printf_float+0x1da>
 800c4d6:	f04f 0800 	mov.w	r8, #0
 800c4da:	f104 0b1a 	add.w	fp, r4, #26
 800c4de:	e7f4      	b.n	800c4ca <_printf_float+0x40e>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	4642      	mov	r2, r8
 800c4e4:	e7e1      	b.n	800c4aa <_printf_float+0x3ee>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	464a      	mov	r2, r9
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b8      	blx	r7
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	f43f ae3e 	beq.w	800c172 <_printf_float+0xb6>
 800c4f6:	f108 0801 	add.w	r8, r8, #1
 800c4fa:	68e3      	ldr	r3, [r4, #12]
 800c4fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4fe:	1a5b      	subs	r3, r3, r1
 800c500:	4543      	cmp	r3, r8
 800c502:	dcf0      	bgt.n	800c4e6 <_printf_float+0x42a>
 800c504:	e6fc      	b.n	800c300 <_printf_float+0x244>
 800c506:	f04f 0800 	mov.w	r8, #0
 800c50a:	f104 0919 	add.w	r9, r4, #25
 800c50e:	e7f4      	b.n	800c4fa <_printf_float+0x43e>

0800c510 <_printf_common>:
 800c510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c514:	4616      	mov	r6, r2
 800c516:	4698      	mov	r8, r3
 800c518:	688a      	ldr	r2, [r1, #8]
 800c51a:	690b      	ldr	r3, [r1, #16]
 800c51c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c520:	4293      	cmp	r3, r2
 800c522:	bfb8      	it	lt
 800c524:	4613      	movlt	r3, r2
 800c526:	6033      	str	r3, [r6, #0]
 800c528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c52c:	4607      	mov	r7, r0
 800c52e:	460c      	mov	r4, r1
 800c530:	b10a      	cbz	r2, 800c536 <_printf_common+0x26>
 800c532:	3301      	adds	r3, #1
 800c534:	6033      	str	r3, [r6, #0]
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	0699      	lsls	r1, r3, #26
 800c53a:	bf42      	ittt	mi
 800c53c:	6833      	ldrmi	r3, [r6, #0]
 800c53e:	3302      	addmi	r3, #2
 800c540:	6033      	strmi	r3, [r6, #0]
 800c542:	6825      	ldr	r5, [r4, #0]
 800c544:	f015 0506 	ands.w	r5, r5, #6
 800c548:	d106      	bne.n	800c558 <_printf_common+0x48>
 800c54a:	f104 0a19 	add.w	sl, r4, #25
 800c54e:	68e3      	ldr	r3, [r4, #12]
 800c550:	6832      	ldr	r2, [r6, #0]
 800c552:	1a9b      	subs	r3, r3, r2
 800c554:	42ab      	cmp	r3, r5
 800c556:	dc26      	bgt.n	800c5a6 <_printf_common+0x96>
 800c558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c55c:	6822      	ldr	r2, [r4, #0]
 800c55e:	3b00      	subs	r3, #0
 800c560:	bf18      	it	ne
 800c562:	2301      	movne	r3, #1
 800c564:	0692      	lsls	r2, r2, #26
 800c566:	d42b      	bmi.n	800c5c0 <_printf_common+0xb0>
 800c568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c56c:	4641      	mov	r1, r8
 800c56e:	4638      	mov	r0, r7
 800c570:	47c8      	blx	r9
 800c572:	3001      	adds	r0, #1
 800c574:	d01e      	beq.n	800c5b4 <_printf_common+0xa4>
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	6922      	ldr	r2, [r4, #16]
 800c57a:	f003 0306 	and.w	r3, r3, #6
 800c57e:	2b04      	cmp	r3, #4
 800c580:	bf02      	ittt	eq
 800c582:	68e5      	ldreq	r5, [r4, #12]
 800c584:	6833      	ldreq	r3, [r6, #0]
 800c586:	1aed      	subeq	r5, r5, r3
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	bf0c      	ite	eq
 800c58c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c590:	2500      	movne	r5, #0
 800c592:	4293      	cmp	r3, r2
 800c594:	bfc4      	itt	gt
 800c596:	1a9b      	subgt	r3, r3, r2
 800c598:	18ed      	addgt	r5, r5, r3
 800c59a:	2600      	movs	r6, #0
 800c59c:	341a      	adds	r4, #26
 800c59e:	42b5      	cmp	r5, r6
 800c5a0:	d11a      	bne.n	800c5d8 <_printf_common+0xc8>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e008      	b.n	800c5b8 <_printf_common+0xa8>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	4652      	mov	r2, sl
 800c5aa:	4641      	mov	r1, r8
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	47c8      	blx	r9
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d103      	bne.n	800c5bc <_printf_common+0xac>
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5bc:	3501      	adds	r5, #1
 800c5be:	e7c6      	b.n	800c54e <_printf_common+0x3e>
 800c5c0:	18e1      	adds	r1, r4, r3
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	2030      	movs	r0, #48	@ 0x30
 800c5c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5ca:	4422      	add	r2, r4
 800c5cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5d4:	3302      	adds	r3, #2
 800c5d6:	e7c7      	b.n	800c568 <_printf_common+0x58>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	4622      	mov	r2, r4
 800c5dc:	4641      	mov	r1, r8
 800c5de:	4638      	mov	r0, r7
 800c5e0:	47c8      	blx	r9
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d0e6      	beq.n	800c5b4 <_printf_common+0xa4>
 800c5e6:	3601      	adds	r6, #1
 800c5e8:	e7d9      	b.n	800c59e <_printf_common+0x8e>
	...

0800c5ec <_printf_i>:
 800c5ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f0:	7e0f      	ldrb	r7, [r1, #24]
 800c5f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5f4:	2f78      	cmp	r7, #120	@ 0x78
 800c5f6:	4691      	mov	r9, r2
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	469a      	mov	sl, r3
 800c5fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c602:	d807      	bhi.n	800c614 <_printf_i+0x28>
 800c604:	2f62      	cmp	r7, #98	@ 0x62
 800c606:	d80a      	bhi.n	800c61e <_printf_i+0x32>
 800c608:	2f00      	cmp	r7, #0
 800c60a:	f000 80d2 	beq.w	800c7b2 <_printf_i+0x1c6>
 800c60e:	2f58      	cmp	r7, #88	@ 0x58
 800c610:	f000 80b9 	beq.w	800c786 <_printf_i+0x19a>
 800c614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c61c:	e03a      	b.n	800c694 <_printf_i+0xa8>
 800c61e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c622:	2b15      	cmp	r3, #21
 800c624:	d8f6      	bhi.n	800c614 <_printf_i+0x28>
 800c626:	a101      	add	r1, pc, #4	@ (adr r1, 800c62c <_printf_i+0x40>)
 800c628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c62c:	0800c685 	.word	0x0800c685
 800c630:	0800c699 	.word	0x0800c699
 800c634:	0800c615 	.word	0x0800c615
 800c638:	0800c615 	.word	0x0800c615
 800c63c:	0800c615 	.word	0x0800c615
 800c640:	0800c615 	.word	0x0800c615
 800c644:	0800c699 	.word	0x0800c699
 800c648:	0800c615 	.word	0x0800c615
 800c64c:	0800c615 	.word	0x0800c615
 800c650:	0800c615 	.word	0x0800c615
 800c654:	0800c615 	.word	0x0800c615
 800c658:	0800c799 	.word	0x0800c799
 800c65c:	0800c6c3 	.word	0x0800c6c3
 800c660:	0800c753 	.word	0x0800c753
 800c664:	0800c615 	.word	0x0800c615
 800c668:	0800c615 	.word	0x0800c615
 800c66c:	0800c7bb 	.word	0x0800c7bb
 800c670:	0800c615 	.word	0x0800c615
 800c674:	0800c6c3 	.word	0x0800c6c3
 800c678:	0800c615 	.word	0x0800c615
 800c67c:	0800c615 	.word	0x0800c615
 800c680:	0800c75b 	.word	0x0800c75b
 800c684:	6833      	ldr	r3, [r6, #0]
 800c686:	1d1a      	adds	r2, r3, #4
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	6032      	str	r2, [r6, #0]
 800c68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c694:	2301      	movs	r3, #1
 800c696:	e09d      	b.n	800c7d4 <_printf_i+0x1e8>
 800c698:	6833      	ldr	r3, [r6, #0]
 800c69a:	6820      	ldr	r0, [r4, #0]
 800c69c:	1d19      	adds	r1, r3, #4
 800c69e:	6031      	str	r1, [r6, #0]
 800c6a0:	0606      	lsls	r6, r0, #24
 800c6a2:	d501      	bpl.n	800c6a8 <_printf_i+0xbc>
 800c6a4:	681d      	ldr	r5, [r3, #0]
 800c6a6:	e003      	b.n	800c6b0 <_printf_i+0xc4>
 800c6a8:	0645      	lsls	r5, r0, #25
 800c6aa:	d5fb      	bpl.n	800c6a4 <_printf_i+0xb8>
 800c6ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6b0:	2d00      	cmp	r5, #0
 800c6b2:	da03      	bge.n	800c6bc <_printf_i+0xd0>
 800c6b4:	232d      	movs	r3, #45	@ 0x2d
 800c6b6:	426d      	negs	r5, r5
 800c6b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6bc:	4859      	ldr	r0, [pc, #356]	@ (800c824 <_printf_i+0x238>)
 800c6be:	230a      	movs	r3, #10
 800c6c0:	e011      	b.n	800c6e6 <_printf_i+0xfa>
 800c6c2:	6821      	ldr	r1, [r4, #0]
 800c6c4:	6833      	ldr	r3, [r6, #0]
 800c6c6:	0608      	lsls	r0, r1, #24
 800c6c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6cc:	d402      	bmi.n	800c6d4 <_printf_i+0xe8>
 800c6ce:	0649      	lsls	r1, r1, #25
 800c6d0:	bf48      	it	mi
 800c6d2:	b2ad      	uxthmi	r5, r5
 800c6d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6d6:	4853      	ldr	r0, [pc, #332]	@ (800c824 <_printf_i+0x238>)
 800c6d8:	6033      	str	r3, [r6, #0]
 800c6da:	bf14      	ite	ne
 800c6dc:	230a      	movne	r3, #10
 800c6de:	2308      	moveq	r3, #8
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6e6:	6866      	ldr	r6, [r4, #4]
 800c6e8:	60a6      	str	r6, [r4, #8]
 800c6ea:	2e00      	cmp	r6, #0
 800c6ec:	bfa2      	ittt	ge
 800c6ee:	6821      	ldrge	r1, [r4, #0]
 800c6f0:	f021 0104 	bicge.w	r1, r1, #4
 800c6f4:	6021      	strge	r1, [r4, #0]
 800c6f6:	b90d      	cbnz	r5, 800c6fc <_printf_i+0x110>
 800c6f8:	2e00      	cmp	r6, #0
 800c6fa:	d04b      	beq.n	800c794 <_printf_i+0x1a8>
 800c6fc:	4616      	mov	r6, r2
 800c6fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800c702:	fb03 5711 	mls	r7, r3, r1, r5
 800c706:	5dc7      	ldrb	r7, [r0, r7]
 800c708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c70c:	462f      	mov	r7, r5
 800c70e:	42bb      	cmp	r3, r7
 800c710:	460d      	mov	r5, r1
 800c712:	d9f4      	bls.n	800c6fe <_printf_i+0x112>
 800c714:	2b08      	cmp	r3, #8
 800c716:	d10b      	bne.n	800c730 <_printf_i+0x144>
 800c718:	6823      	ldr	r3, [r4, #0]
 800c71a:	07df      	lsls	r7, r3, #31
 800c71c:	d508      	bpl.n	800c730 <_printf_i+0x144>
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	6861      	ldr	r1, [r4, #4]
 800c722:	4299      	cmp	r1, r3
 800c724:	bfde      	ittt	le
 800c726:	2330      	movle	r3, #48	@ 0x30
 800c728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c72c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c730:	1b92      	subs	r2, r2, r6
 800c732:	6122      	str	r2, [r4, #16]
 800c734:	f8cd a000 	str.w	sl, [sp]
 800c738:	464b      	mov	r3, r9
 800c73a:	aa03      	add	r2, sp, #12
 800c73c:	4621      	mov	r1, r4
 800c73e:	4640      	mov	r0, r8
 800c740:	f7ff fee6 	bl	800c510 <_printf_common>
 800c744:	3001      	adds	r0, #1
 800c746:	d14a      	bne.n	800c7de <_printf_i+0x1f2>
 800c748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c74c:	b004      	add	sp, #16
 800c74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	f043 0320 	orr.w	r3, r3, #32
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	4833      	ldr	r0, [pc, #204]	@ (800c828 <_printf_i+0x23c>)
 800c75c:	2778      	movs	r7, #120	@ 0x78
 800c75e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	6831      	ldr	r1, [r6, #0]
 800c766:	061f      	lsls	r7, r3, #24
 800c768:	f851 5b04 	ldr.w	r5, [r1], #4
 800c76c:	d402      	bmi.n	800c774 <_printf_i+0x188>
 800c76e:	065f      	lsls	r7, r3, #25
 800c770:	bf48      	it	mi
 800c772:	b2ad      	uxthmi	r5, r5
 800c774:	6031      	str	r1, [r6, #0]
 800c776:	07d9      	lsls	r1, r3, #31
 800c778:	bf44      	itt	mi
 800c77a:	f043 0320 	orrmi.w	r3, r3, #32
 800c77e:	6023      	strmi	r3, [r4, #0]
 800c780:	b11d      	cbz	r5, 800c78a <_printf_i+0x19e>
 800c782:	2310      	movs	r3, #16
 800c784:	e7ac      	b.n	800c6e0 <_printf_i+0xf4>
 800c786:	4827      	ldr	r0, [pc, #156]	@ (800c824 <_printf_i+0x238>)
 800c788:	e7e9      	b.n	800c75e <_printf_i+0x172>
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	f023 0320 	bic.w	r3, r3, #32
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	e7f6      	b.n	800c782 <_printf_i+0x196>
 800c794:	4616      	mov	r6, r2
 800c796:	e7bd      	b.n	800c714 <_printf_i+0x128>
 800c798:	6833      	ldr	r3, [r6, #0]
 800c79a:	6825      	ldr	r5, [r4, #0]
 800c79c:	6961      	ldr	r1, [r4, #20]
 800c79e:	1d18      	adds	r0, r3, #4
 800c7a0:	6030      	str	r0, [r6, #0]
 800c7a2:	062e      	lsls	r6, r5, #24
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	d501      	bpl.n	800c7ac <_printf_i+0x1c0>
 800c7a8:	6019      	str	r1, [r3, #0]
 800c7aa:	e002      	b.n	800c7b2 <_printf_i+0x1c6>
 800c7ac:	0668      	lsls	r0, r5, #25
 800c7ae:	d5fb      	bpl.n	800c7a8 <_printf_i+0x1bc>
 800c7b0:	8019      	strh	r1, [r3, #0]
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	6123      	str	r3, [r4, #16]
 800c7b6:	4616      	mov	r6, r2
 800c7b8:	e7bc      	b.n	800c734 <_printf_i+0x148>
 800c7ba:	6833      	ldr	r3, [r6, #0]
 800c7bc:	1d1a      	adds	r2, r3, #4
 800c7be:	6032      	str	r2, [r6, #0]
 800c7c0:	681e      	ldr	r6, [r3, #0]
 800c7c2:	6862      	ldr	r2, [r4, #4]
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7f3 fd0a 	bl	80001e0 <memchr>
 800c7cc:	b108      	cbz	r0, 800c7d2 <_printf_i+0x1e6>
 800c7ce:	1b80      	subs	r0, r0, r6
 800c7d0:	6060      	str	r0, [r4, #4]
 800c7d2:	6863      	ldr	r3, [r4, #4]
 800c7d4:	6123      	str	r3, [r4, #16]
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7dc:	e7aa      	b.n	800c734 <_printf_i+0x148>
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	4632      	mov	r2, r6
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	47d0      	blx	sl
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	d0ad      	beq.n	800c748 <_printf_i+0x15c>
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	079b      	lsls	r3, r3, #30
 800c7f0:	d413      	bmi.n	800c81a <_printf_i+0x22e>
 800c7f2:	68e0      	ldr	r0, [r4, #12]
 800c7f4:	9b03      	ldr	r3, [sp, #12]
 800c7f6:	4298      	cmp	r0, r3
 800c7f8:	bfb8      	it	lt
 800c7fa:	4618      	movlt	r0, r3
 800c7fc:	e7a6      	b.n	800c74c <_printf_i+0x160>
 800c7fe:	2301      	movs	r3, #1
 800c800:	4632      	mov	r2, r6
 800c802:	4649      	mov	r1, r9
 800c804:	4640      	mov	r0, r8
 800c806:	47d0      	blx	sl
 800c808:	3001      	adds	r0, #1
 800c80a:	d09d      	beq.n	800c748 <_printf_i+0x15c>
 800c80c:	3501      	adds	r5, #1
 800c80e:	68e3      	ldr	r3, [r4, #12]
 800c810:	9903      	ldr	r1, [sp, #12]
 800c812:	1a5b      	subs	r3, r3, r1
 800c814:	42ab      	cmp	r3, r5
 800c816:	dcf2      	bgt.n	800c7fe <_printf_i+0x212>
 800c818:	e7eb      	b.n	800c7f2 <_printf_i+0x206>
 800c81a:	2500      	movs	r5, #0
 800c81c:	f104 0619 	add.w	r6, r4, #25
 800c820:	e7f5      	b.n	800c80e <_printf_i+0x222>
 800c822:	bf00      	nop
 800c824:	0800fb2a 	.word	0x0800fb2a
 800c828:	0800fb3b 	.word	0x0800fb3b

0800c82c <_scanf_float>:
 800c82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c830:	b087      	sub	sp, #28
 800c832:	4617      	mov	r7, r2
 800c834:	9303      	str	r3, [sp, #12]
 800c836:	688b      	ldr	r3, [r1, #8]
 800c838:	1e5a      	subs	r2, r3, #1
 800c83a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c83e:	bf81      	itttt	hi
 800c840:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c844:	eb03 0b05 	addhi.w	fp, r3, r5
 800c848:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c84c:	608b      	strhi	r3, [r1, #8]
 800c84e:	680b      	ldr	r3, [r1, #0]
 800c850:	460a      	mov	r2, r1
 800c852:	f04f 0500 	mov.w	r5, #0
 800c856:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c85a:	f842 3b1c 	str.w	r3, [r2], #28
 800c85e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c862:	4680      	mov	r8, r0
 800c864:	460c      	mov	r4, r1
 800c866:	bf98      	it	ls
 800c868:	f04f 0b00 	movls.w	fp, #0
 800c86c:	9201      	str	r2, [sp, #4]
 800c86e:	4616      	mov	r6, r2
 800c870:	46aa      	mov	sl, r5
 800c872:	46a9      	mov	r9, r5
 800c874:	9502      	str	r5, [sp, #8]
 800c876:	68a2      	ldr	r2, [r4, #8]
 800c878:	b152      	cbz	r2, 800c890 <_scanf_float+0x64>
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b4e      	cmp	r3, #78	@ 0x4e
 800c880:	d864      	bhi.n	800c94c <_scanf_float+0x120>
 800c882:	2b40      	cmp	r3, #64	@ 0x40
 800c884:	d83c      	bhi.n	800c900 <_scanf_float+0xd4>
 800c886:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c88a:	b2c8      	uxtb	r0, r1
 800c88c:	280e      	cmp	r0, #14
 800c88e:	d93a      	bls.n	800c906 <_scanf_float+0xda>
 800c890:	f1b9 0f00 	cmp.w	r9, #0
 800c894:	d003      	beq.n	800c89e <_scanf_float+0x72>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c8a2:	f1ba 0f01 	cmp.w	sl, #1
 800c8a6:	f200 8117 	bhi.w	800cad8 <_scanf_float+0x2ac>
 800c8aa:	9b01      	ldr	r3, [sp, #4]
 800c8ac:	429e      	cmp	r6, r3
 800c8ae:	f200 8108 	bhi.w	800cac2 <_scanf_float+0x296>
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	b007      	add	sp, #28
 800c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ba:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c8be:	2a0d      	cmp	r2, #13
 800c8c0:	d8e6      	bhi.n	800c890 <_scanf_float+0x64>
 800c8c2:	a101      	add	r1, pc, #4	@ (adr r1, 800c8c8 <_scanf_float+0x9c>)
 800c8c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c8c8:	0800ca0f 	.word	0x0800ca0f
 800c8cc:	0800c891 	.word	0x0800c891
 800c8d0:	0800c891 	.word	0x0800c891
 800c8d4:	0800c891 	.word	0x0800c891
 800c8d8:	0800ca6f 	.word	0x0800ca6f
 800c8dc:	0800ca47 	.word	0x0800ca47
 800c8e0:	0800c891 	.word	0x0800c891
 800c8e4:	0800c891 	.word	0x0800c891
 800c8e8:	0800ca1d 	.word	0x0800ca1d
 800c8ec:	0800c891 	.word	0x0800c891
 800c8f0:	0800c891 	.word	0x0800c891
 800c8f4:	0800c891 	.word	0x0800c891
 800c8f8:	0800c891 	.word	0x0800c891
 800c8fc:	0800c9d5 	.word	0x0800c9d5
 800c900:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c904:	e7db      	b.n	800c8be <_scanf_float+0x92>
 800c906:	290e      	cmp	r1, #14
 800c908:	d8c2      	bhi.n	800c890 <_scanf_float+0x64>
 800c90a:	a001      	add	r0, pc, #4	@ (adr r0, 800c910 <_scanf_float+0xe4>)
 800c90c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c910:	0800c9c5 	.word	0x0800c9c5
 800c914:	0800c891 	.word	0x0800c891
 800c918:	0800c9c5 	.word	0x0800c9c5
 800c91c:	0800ca5b 	.word	0x0800ca5b
 800c920:	0800c891 	.word	0x0800c891
 800c924:	0800c96d 	.word	0x0800c96d
 800c928:	0800c9ab 	.word	0x0800c9ab
 800c92c:	0800c9ab 	.word	0x0800c9ab
 800c930:	0800c9ab 	.word	0x0800c9ab
 800c934:	0800c9ab 	.word	0x0800c9ab
 800c938:	0800c9ab 	.word	0x0800c9ab
 800c93c:	0800c9ab 	.word	0x0800c9ab
 800c940:	0800c9ab 	.word	0x0800c9ab
 800c944:	0800c9ab 	.word	0x0800c9ab
 800c948:	0800c9ab 	.word	0x0800c9ab
 800c94c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c94e:	d809      	bhi.n	800c964 <_scanf_float+0x138>
 800c950:	2b60      	cmp	r3, #96	@ 0x60
 800c952:	d8b2      	bhi.n	800c8ba <_scanf_float+0x8e>
 800c954:	2b54      	cmp	r3, #84	@ 0x54
 800c956:	d07b      	beq.n	800ca50 <_scanf_float+0x224>
 800c958:	2b59      	cmp	r3, #89	@ 0x59
 800c95a:	d199      	bne.n	800c890 <_scanf_float+0x64>
 800c95c:	2d07      	cmp	r5, #7
 800c95e:	d197      	bne.n	800c890 <_scanf_float+0x64>
 800c960:	2508      	movs	r5, #8
 800c962:	e02c      	b.n	800c9be <_scanf_float+0x192>
 800c964:	2b74      	cmp	r3, #116	@ 0x74
 800c966:	d073      	beq.n	800ca50 <_scanf_float+0x224>
 800c968:	2b79      	cmp	r3, #121	@ 0x79
 800c96a:	e7f6      	b.n	800c95a <_scanf_float+0x12e>
 800c96c:	6821      	ldr	r1, [r4, #0]
 800c96e:	05c8      	lsls	r0, r1, #23
 800c970:	d51b      	bpl.n	800c9aa <_scanf_float+0x17e>
 800c972:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c976:	6021      	str	r1, [r4, #0]
 800c978:	f109 0901 	add.w	r9, r9, #1
 800c97c:	f1bb 0f00 	cmp.w	fp, #0
 800c980:	d003      	beq.n	800c98a <_scanf_float+0x15e>
 800c982:	3201      	adds	r2, #1
 800c984:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800c988:	60a2      	str	r2, [r4, #8]
 800c98a:	68a3      	ldr	r3, [r4, #8]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	60a3      	str	r3, [r4, #8]
 800c990:	6923      	ldr	r3, [r4, #16]
 800c992:	3301      	adds	r3, #1
 800c994:	6123      	str	r3, [r4, #16]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3b01      	subs	r3, #1
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	607b      	str	r3, [r7, #4]
 800c99e:	f340 8087 	ble.w	800cab0 <_scanf_float+0x284>
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	603b      	str	r3, [r7, #0]
 800c9a8:	e765      	b.n	800c876 <_scanf_float+0x4a>
 800c9aa:	eb1a 0105 	adds.w	r1, sl, r5
 800c9ae:	f47f af6f 	bne.w	800c890 <_scanf_float+0x64>
 800c9b2:	6822      	ldr	r2, [r4, #0]
 800c9b4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c9b8:	6022      	str	r2, [r4, #0]
 800c9ba:	460d      	mov	r5, r1
 800c9bc:	468a      	mov	sl, r1
 800c9be:	f806 3b01 	strb.w	r3, [r6], #1
 800c9c2:	e7e2      	b.n	800c98a <_scanf_float+0x15e>
 800c9c4:	6822      	ldr	r2, [r4, #0]
 800c9c6:	0610      	lsls	r0, r2, #24
 800c9c8:	f57f af62 	bpl.w	800c890 <_scanf_float+0x64>
 800c9cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c9d0:	6022      	str	r2, [r4, #0]
 800c9d2:	e7f4      	b.n	800c9be <_scanf_float+0x192>
 800c9d4:	f1ba 0f00 	cmp.w	sl, #0
 800c9d8:	d10e      	bne.n	800c9f8 <_scanf_float+0x1cc>
 800c9da:	f1b9 0f00 	cmp.w	r9, #0
 800c9de:	d10e      	bne.n	800c9fe <_scanf_float+0x1d2>
 800c9e0:	6822      	ldr	r2, [r4, #0]
 800c9e2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c9e6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9ea:	d108      	bne.n	800c9fe <_scanf_float+0x1d2>
 800c9ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9f0:	6022      	str	r2, [r4, #0]
 800c9f2:	f04f 0a01 	mov.w	sl, #1
 800c9f6:	e7e2      	b.n	800c9be <_scanf_float+0x192>
 800c9f8:	f1ba 0f02 	cmp.w	sl, #2
 800c9fc:	d055      	beq.n	800caaa <_scanf_float+0x27e>
 800c9fe:	2d01      	cmp	r5, #1
 800ca00:	d002      	beq.n	800ca08 <_scanf_float+0x1dc>
 800ca02:	2d04      	cmp	r5, #4
 800ca04:	f47f af44 	bne.w	800c890 <_scanf_float+0x64>
 800ca08:	3501      	adds	r5, #1
 800ca0a:	b2ed      	uxtb	r5, r5
 800ca0c:	e7d7      	b.n	800c9be <_scanf_float+0x192>
 800ca0e:	f1ba 0f01 	cmp.w	sl, #1
 800ca12:	f47f af3d 	bne.w	800c890 <_scanf_float+0x64>
 800ca16:	f04f 0a02 	mov.w	sl, #2
 800ca1a:	e7d0      	b.n	800c9be <_scanf_float+0x192>
 800ca1c:	b97d      	cbnz	r5, 800ca3e <_scanf_float+0x212>
 800ca1e:	f1b9 0f00 	cmp.w	r9, #0
 800ca22:	f47f af38 	bne.w	800c896 <_scanf_float+0x6a>
 800ca26:	6822      	ldr	r2, [r4, #0]
 800ca28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca30:	f040 8108 	bne.w	800cc44 <_scanf_float+0x418>
 800ca34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca38:	6022      	str	r2, [r4, #0]
 800ca3a:	2501      	movs	r5, #1
 800ca3c:	e7bf      	b.n	800c9be <_scanf_float+0x192>
 800ca3e:	2d03      	cmp	r5, #3
 800ca40:	d0e2      	beq.n	800ca08 <_scanf_float+0x1dc>
 800ca42:	2d05      	cmp	r5, #5
 800ca44:	e7de      	b.n	800ca04 <_scanf_float+0x1d8>
 800ca46:	2d02      	cmp	r5, #2
 800ca48:	f47f af22 	bne.w	800c890 <_scanf_float+0x64>
 800ca4c:	2503      	movs	r5, #3
 800ca4e:	e7b6      	b.n	800c9be <_scanf_float+0x192>
 800ca50:	2d06      	cmp	r5, #6
 800ca52:	f47f af1d 	bne.w	800c890 <_scanf_float+0x64>
 800ca56:	2507      	movs	r5, #7
 800ca58:	e7b1      	b.n	800c9be <_scanf_float+0x192>
 800ca5a:	6822      	ldr	r2, [r4, #0]
 800ca5c:	0591      	lsls	r1, r2, #22
 800ca5e:	f57f af17 	bpl.w	800c890 <_scanf_float+0x64>
 800ca62:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ca66:	6022      	str	r2, [r4, #0]
 800ca68:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca6c:	e7a7      	b.n	800c9be <_scanf_float+0x192>
 800ca6e:	6822      	ldr	r2, [r4, #0]
 800ca70:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ca74:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ca78:	d006      	beq.n	800ca88 <_scanf_float+0x25c>
 800ca7a:	0550      	lsls	r0, r2, #21
 800ca7c:	f57f af08 	bpl.w	800c890 <_scanf_float+0x64>
 800ca80:	f1b9 0f00 	cmp.w	r9, #0
 800ca84:	f000 80de 	beq.w	800cc44 <_scanf_float+0x418>
 800ca88:	0591      	lsls	r1, r2, #22
 800ca8a:	bf58      	it	pl
 800ca8c:	9902      	ldrpl	r1, [sp, #8]
 800ca8e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca92:	bf58      	it	pl
 800ca94:	eba9 0101 	subpl.w	r1, r9, r1
 800ca98:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ca9c:	bf58      	it	pl
 800ca9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800caa2:	6022      	str	r2, [r4, #0]
 800caa4:	f04f 0900 	mov.w	r9, #0
 800caa8:	e789      	b.n	800c9be <_scanf_float+0x192>
 800caaa:	f04f 0a03 	mov.w	sl, #3
 800caae:	e786      	b.n	800c9be <_scanf_float+0x192>
 800cab0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cab4:	4639      	mov	r1, r7
 800cab6:	4640      	mov	r0, r8
 800cab8:	4798      	blx	r3
 800caba:	2800      	cmp	r0, #0
 800cabc:	f43f aedb 	beq.w	800c876 <_scanf_float+0x4a>
 800cac0:	e6e6      	b.n	800c890 <_scanf_float+0x64>
 800cac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800caca:	463a      	mov	r2, r7
 800cacc:	4640      	mov	r0, r8
 800cace:	4798      	blx	r3
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	3b01      	subs	r3, #1
 800cad4:	6123      	str	r3, [r4, #16]
 800cad6:	e6e8      	b.n	800c8aa <_scanf_float+0x7e>
 800cad8:	1e6b      	subs	r3, r5, #1
 800cada:	2b06      	cmp	r3, #6
 800cadc:	d824      	bhi.n	800cb28 <_scanf_float+0x2fc>
 800cade:	2d02      	cmp	r5, #2
 800cae0:	d836      	bhi.n	800cb50 <_scanf_float+0x324>
 800cae2:	9b01      	ldr	r3, [sp, #4]
 800cae4:	429e      	cmp	r6, r3
 800cae6:	f67f aee4 	bls.w	800c8b2 <_scanf_float+0x86>
 800caea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800caee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800caf2:	463a      	mov	r2, r7
 800caf4:	4640      	mov	r0, r8
 800caf6:	4798      	blx	r3
 800caf8:	6923      	ldr	r3, [r4, #16]
 800cafa:	3b01      	subs	r3, #1
 800cafc:	6123      	str	r3, [r4, #16]
 800cafe:	e7f0      	b.n	800cae2 <_scanf_float+0x2b6>
 800cb00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb04:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cb08:	463a      	mov	r2, r7
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	4798      	blx	r3
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	6123      	str	r3, [r4, #16]
 800cb14:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cb18:	fa5f fa8a 	uxtb.w	sl, sl
 800cb1c:	f1ba 0f02 	cmp.w	sl, #2
 800cb20:	d1ee      	bne.n	800cb00 <_scanf_float+0x2d4>
 800cb22:	3d03      	subs	r5, #3
 800cb24:	b2ed      	uxtb	r5, r5
 800cb26:	1b76      	subs	r6, r6, r5
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	05da      	lsls	r2, r3, #23
 800cb2c:	d530      	bpl.n	800cb90 <_scanf_float+0x364>
 800cb2e:	055b      	lsls	r3, r3, #21
 800cb30:	d511      	bpl.n	800cb56 <_scanf_float+0x32a>
 800cb32:	9b01      	ldr	r3, [sp, #4]
 800cb34:	429e      	cmp	r6, r3
 800cb36:	f67f aebc 	bls.w	800c8b2 <_scanf_float+0x86>
 800cb3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb42:	463a      	mov	r2, r7
 800cb44:	4640      	mov	r0, r8
 800cb46:	4798      	blx	r3
 800cb48:	6923      	ldr	r3, [r4, #16]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	e7f0      	b.n	800cb32 <_scanf_float+0x306>
 800cb50:	46aa      	mov	sl, r5
 800cb52:	46b3      	mov	fp, r6
 800cb54:	e7de      	b.n	800cb14 <_scanf_float+0x2e8>
 800cb56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb5a:	6923      	ldr	r3, [r4, #16]
 800cb5c:	2965      	cmp	r1, #101	@ 0x65
 800cb5e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cb62:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cb66:	6123      	str	r3, [r4, #16]
 800cb68:	d00c      	beq.n	800cb84 <_scanf_float+0x358>
 800cb6a:	2945      	cmp	r1, #69	@ 0x45
 800cb6c:	d00a      	beq.n	800cb84 <_scanf_float+0x358>
 800cb6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb72:	463a      	mov	r2, r7
 800cb74:	4640      	mov	r0, r8
 800cb76:	4798      	blx	r3
 800cb78:	6923      	ldr	r3, [r4, #16]
 800cb7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	1eb5      	subs	r5, r6, #2
 800cb82:	6123      	str	r3, [r4, #16]
 800cb84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb88:	463a      	mov	r2, r7
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	4798      	blx	r3
 800cb8e:	462e      	mov	r6, r5
 800cb90:	6822      	ldr	r2, [r4, #0]
 800cb92:	f012 0210 	ands.w	r2, r2, #16
 800cb96:	d001      	beq.n	800cb9c <_scanf_float+0x370>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	e68b      	b.n	800c8b4 <_scanf_float+0x88>
 800cb9c:	7032      	strb	r2, [r6, #0]
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cba8:	d11c      	bne.n	800cbe4 <_scanf_float+0x3b8>
 800cbaa:	9b02      	ldr	r3, [sp, #8]
 800cbac:	454b      	cmp	r3, r9
 800cbae:	eba3 0209 	sub.w	r2, r3, r9
 800cbb2:	d123      	bne.n	800cbfc <_scanf_float+0x3d0>
 800cbb4:	9901      	ldr	r1, [sp, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	4640      	mov	r0, r8
 800cbba:	f7ff f9cd 	bl	800bf58 <_strtod_r>
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	6821      	ldr	r1, [r4, #0]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f011 0f02 	tst.w	r1, #2
 800cbc8:	ec57 6b10 	vmov	r6, r7, d0
 800cbcc:	f103 0204 	add.w	r2, r3, #4
 800cbd0:	d01f      	beq.n	800cc12 <_scanf_float+0x3e6>
 800cbd2:	9903      	ldr	r1, [sp, #12]
 800cbd4:	600a      	str	r2, [r1, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	e9c3 6700 	strd	r6, r7, [r3]
 800cbdc:	68e3      	ldr	r3, [r4, #12]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	60e3      	str	r3, [r4, #12]
 800cbe2:	e7d9      	b.n	800cb98 <_scanf_float+0x36c>
 800cbe4:	9b04      	ldr	r3, [sp, #16]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d0e4      	beq.n	800cbb4 <_scanf_float+0x388>
 800cbea:	9905      	ldr	r1, [sp, #20]
 800cbec:	230a      	movs	r3, #10
 800cbee:	3101      	adds	r1, #1
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	f002 f9c9 	bl	800ef88 <_strtol_r>
 800cbf6:	9b04      	ldr	r3, [sp, #16]
 800cbf8:	9e05      	ldr	r6, [sp, #20]
 800cbfa:	1ac2      	subs	r2, r0, r3
 800cbfc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cc00:	429e      	cmp	r6, r3
 800cc02:	bf28      	it	cs
 800cc04:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cc08:	4910      	ldr	r1, [pc, #64]	@ (800cc4c <_scanf_float+0x420>)
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f000 f8e4 	bl	800cdd8 <siprintf>
 800cc10:	e7d0      	b.n	800cbb4 <_scanf_float+0x388>
 800cc12:	f011 0f04 	tst.w	r1, #4
 800cc16:	9903      	ldr	r1, [sp, #12]
 800cc18:	600a      	str	r2, [r1, #0]
 800cc1a:	d1dc      	bne.n	800cbd6 <_scanf_float+0x3aa>
 800cc1c:	681d      	ldr	r5, [r3, #0]
 800cc1e:	4632      	mov	r2, r6
 800cc20:	463b      	mov	r3, r7
 800cc22:	4630      	mov	r0, r6
 800cc24:	4639      	mov	r1, r7
 800cc26:	f7f3 ff89 	bl	8000b3c <__aeabi_dcmpun>
 800cc2a:	b128      	cbz	r0, 800cc38 <_scanf_float+0x40c>
 800cc2c:	4808      	ldr	r0, [pc, #32]	@ (800cc50 <_scanf_float+0x424>)
 800cc2e:	f000 f9df 	bl	800cff0 <nanf>
 800cc32:	ed85 0a00 	vstr	s0, [r5]
 800cc36:	e7d1      	b.n	800cbdc <_scanf_float+0x3b0>
 800cc38:	4630      	mov	r0, r6
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	f7f3 ffdc 	bl	8000bf8 <__aeabi_d2f>
 800cc40:	6028      	str	r0, [r5, #0]
 800cc42:	e7cb      	b.n	800cbdc <_scanf_float+0x3b0>
 800cc44:	f04f 0900 	mov.w	r9, #0
 800cc48:	e629      	b.n	800c89e <_scanf_float+0x72>
 800cc4a:	bf00      	nop
 800cc4c:	0800fb4c 	.word	0x0800fb4c
 800cc50:	0800feed 	.word	0x0800feed

0800cc54 <std>:
 800cc54:	2300      	movs	r3, #0
 800cc56:	b510      	push	{r4, lr}
 800cc58:	4604      	mov	r4, r0
 800cc5a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc62:	6083      	str	r3, [r0, #8]
 800cc64:	8181      	strh	r1, [r0, #12]
 800cc66:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc68:	81c2      	strh	r2, [r0, #14]
 800cc6a:	6183      	str	r3, [r0, #24]
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	2208      	movs	r2, #8
 800cc70:	305c      	adds	r0, #92	@ 0x5c
 800cc72:	f000 f914 	bl	800ce9e <memset>
 800cc76:	4b0d      	ldr	r3, [pc, #52]	@ (800ccac <std+0x58>)
 800cc78:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb0 <std+0x5c>)
 800cc7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb4 <std+0x60>)
 800cc80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc82:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb8 <std+0x64>)
 800cc84:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc86:	4b0d      	ldr	r3, [pc, #52]	@ (800ccbc <std+0x68>)
 800cc88:	6224      	str	r4, [r4, #32]
 800cc8a:	429c      	cmp	r4, r3
 800cc8c:	d006      	beq.n	800cc9c <std+0x48>
 800cc8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc92:	4294      	cmp	r4, r2
 800cc94:	d002      	beq.n	800cc9c <std+0x48>
 800cc96:	33d0      	adds	r3, #208	@ 0xd0
 800cc98:	429c      	cmp	r4, r3
 800cc9a:	d105      	bne.n	800cca8 <std+0x54>
 800cc9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca4:	f000 b98a 	b.w	800cfbc <__retarget_lock_init_recursive>
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	bf00      	nop
 800ccac:	0800ce19 	.word	0x0800ce19
 800ccb0:	0800ce3b 	.word	0x0800ce3b
 800ccb4:	0800ce73 	.word	0x0800ce73
 800ccb8:	0800ce97 	.word	0x0800ce97
 800ccbc:	200021dc 	.word	0x200021dc

0800ccc0 <stdio_exit_handler>:
 800ccc0:	4a02      	ldr	r2, [pc, #8]	@ (800cccc <stdio_exit_handler+0xc>)
 800ccc2:	4903      	ldr	r1, [pc, #12]	@ (800ccd0 <stdio_exit_handler+0x10>)
 800ccc4:	4803      	ldr	r0, [pc, #12]	@ (800ccd4 <stdio_exit_handler+0x14>)
 800ccc6:	f000 b869 	b.w	800cd9c <_fwalk_sglue>
 800ccca:	bf00      	nop
 800cccc:	20000104 	.word	0x20000104
 800ccd0:	0800f35d 	.word	0x0800f35d
 800ccd4:	20000280 	.word	0x20000280

0800ccd8 <cleanup_stdio>:
 800ccd8:	6841      	ldr	r1, [r0, #4]
 800ccda:	4b0c      	ldr	r3, [pc, #48]	@ (800cd0c <cleanup_stdio+0x34>)
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	b510      	push	{r4, lr}
 800cce0:	4604      	mov	r4, r0
 800cce2:	d001      	beq.n	800cce8 <cleanup_stdio+0x10>
 800cce4:	f002 fb3a 	bl	800f35c <_fflush_r>
 800cce8:	68a1      	ldr	r1, [r4, #8]
 800ccea:	4b09      	ldr	r3, [pc, #36]	@ (800cd10 <cleanup_stdio+0x38>)
 800ccec:	4299      	cmp	r1, r3
 800ccee:	d002      	beq.n	800ccf6 <cleanup_stdio+0x1e>
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f002 fb33 	bl	800f35c <_fflush_r>
 800ccf6:	68e1      	ldr	r1, [r4, #12]
 800ccf8:	4b06      	ldr	r3, [pc, #24]	@ (800cd14 <cleanup_stdio+0x3c>)
 800ccfa:	4299      	cmp	r1, r3
 800ccfc:	d004      	beq.n	800cd08 <cleanup_stdio+0x30>
 800ccfe:	4620      	mov	r0, r4
 800cd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd04:	f002 bb2a 	b.w	800f35c <_fflush_r>
 800cd08:	bd10      	pop	{r4, pc}
 800cd0a:	bf00      	nop
 800cd0c:	200021dc 	.word	0x200021dc
 800cd10:	20002244 	.word	0x20002244
 800cd14:	200022ac 	.word	0x200022ac

0800cd18 <global_stdio_init.part.0>:
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	4b0b      	ldr	r3, [pc, #44]	@ (800cd48 <global_stdio_init.part.0+0x30>)
 800cd1c:	4c0b      	ldr	r4, [pc, #44]	@ (800cd4c <global_stdio_init.part.0+0x34>)
 800cd1e:	4a0c      	ldr	r2, [pc, #48]	@ (800cd50 <global_stdio_init.part.0+0x38>)
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	4620      	mov	r0, r4
 800cd24:	2200      	movs	r2, #0
 800cd26:	2104      	movs	r1, #4
 800cd28:	f7ff ff94 	bl	800cc54 <std>
 800cd2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd30:	2201      	movs	r2, #1
 800cd32:	2109      	movs	r1, #9
 800cd34:	f7ff ff8e 	bl	800cc54 <std>
 800cd38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd3c:	2202      	movs	r2, #2
 800cd3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd42:	2112      	movs	r1, #18
 800cd44:	f7ff bf86 	b.w	800cc54 <std>
 800cd48:	20002314 	.word	0x20002314
 800cd4c:	200021dc 	.word	0x200021dc
 800cd50:	0800ccc1 	.word	0x0800ccc1

0800cd54 <__sfp_lock_acquire>:
 800cd54:	4801      	ldr	r0, [pc, #4]	@ (800cd5c <__sfp_lock_acquire+0x8>)
 800cd56:	f000 b932 	b.w	800cfbe <__retarget_lock_acquire_recursive>
 800cd5a:	bf00      	nop
 800cd5c:	2000231d 	.word	0x2000231d

0800cd60 <__sfp_lock_release>:
 800cd60:	4801      	ldr	r0, [pc, #4]	@ (800cd68 <__sfp_lock_release+0x8>)
 800cd62:	f000 b92d 	b.w	800cfc0 <__retarget_lock_release_recursive>
 800cd66:	bf00      	nop
 800cd68:	2000231d 	.word	0x2000231d

0800cd6c <__sinit>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	4604      	mov	r4, r0
 800cd70:	f7ff fff0 	bl	800cd54 <__sfp_lock_acquire>
 800cd74:	6a23      	ldr	r3, [r4, #32]
 800cd76:	b11b      	cbz	r3, 800cd80 <__sinit+0x14>
 800cd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd7c:	f7ff bff0 	b.w	800cd60 <__sfp_lock_release>
 800cd80:	4b04      	ldr	r3, [pc, #16]	@ (800cd94 <__sinit+0x28>)
 800cd82:	6223      	str	r3, [r4, #32]
 800cd84:	4b04      	ldr	r3, [pc, #16]	@ (800cd98 <__sinit+0x2c>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1f5      	bne.n	800cd78 <__sinit+0xc>
 800cd8c:	f7ff ffc4 	bl	800cd18 <global_stdio_init.part.0>
 800cd90:	e7f2      	b.n	800cd78 <__sinit+0xc>
 800cd92:	bf00      	nop
 800cd94:	0800ccd9 	.word	0x0800ccd9
 800cd98:	20002314 	.word	0x20002314

0800cd9c <_fwalk_sglue>:
 800cd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda0:	4607      	mov	r7, r0
 800cda2:	4688      	mov	r8, r1
 800cda4:	4614      	mov	r4, r2
 800cda6:	2600      	movs	r6, #0
 800cda8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdac:	f1b9 0901 	subs.w	r9, r9, #1
 800cdb0:	d505      	bpl.n	800cdbe <_fwalk_sglue+0x22>
 800cdb2:	6824      	ldr	r4, [r4, #0]
 800cdb4:	2c00      	cmp	r4, #0
 800cdb6:	d1f7      	bne.n	800cda8 <_fwalk_sglue+0xc>
 800cdb8:	4630      	mov	r0, r6
 800cdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdbe:	89ab      	ldrh	r3, [r5, #12]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d907      	bls.n	800cdd4 <_fwalk_sglue+0x38>
 800cdc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	d003      	beq.n	800cdd4 <_fwalk_sglue+0x38>
 800cdcc:	4629      	mov	r1, r5
 800cdce:	4638      	mov	r0, r7
 800cdd0:	47c0      	blx	r8
 800cdd2:	4306      	orrs	r6, r0
 800cdd4:	3568      	adds	r5, #104	@ 0x68
 800cdd6:	e7e9      	b.n	800cdac <_fwalk_sglue+0x10>

0800cdd8 <siprintf>:
 800cdd8:	b40e      	push	{r1, r2, r3}
 800cdda:	b500      	push	{lr}
 800cddc:	b09c      	sub	sp, #112	@ 0x70
 800cdde:	ab1d      	add	r3, sp, #116	@ 0x74
 800cde0:	9002      	str	r0, [sp, #8]
 800cde2:	9006      	str	r0, [sp, #24]
 800cde4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cde8:	4809      	ldr	r0, [pc, #36]	@ (800ce10 <siprintf+0x38>)
 800cdea:	9107      	str	r1, [sp, #28]
 800cdec:	9104      	str	r1, [sp, #16]
 800cdee:	4909      	ldr	r1, [pc, #36]	@ (800ce14 <siprintf+0x3c>)
 800cdf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdf4:	9105      	str	r1, [sp, #20]
 800cdf6:	6800      	ldr	r0, [r0, #0]
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	a902      	add	r1, sp, #8
 800cdfc:	f002 f92e 	bl	800f05c <_svfiprintf_r>
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	2200      	movs	r2, #0
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	b01c      	add	sp, #112	@ 0x70
 800ce08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce0c:	b003      	add	sp, #12
 800ce0e:	4770      	bx	lr
 800ce10:	2000027c 	.word	0x2000027c
 800ce14:	ffff0208 	.word	0xffff0208

0800ce18 <__sread>:
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce20:	f000 f87e 	bl	800cf20 <_read_r>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	bfab      	itete	ge
 800ce28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce2c:	181b      	addge	r3, r3, r0
 800ce2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce32:	bfac      	ite	ge
 800ce34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce36:	81a3      	strhlt	r3, [r4, #12]
 800ce38:	bd10      	pop	{r4, pc}

0800ce3a <__swrite>:
 800ce3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3e:	461f      	mov	r7, r3
 800ce40:	898b      	ldrh	r3, [r1, #12]
 800ce42:	05db      	lsls	r3, r3, #23
 800ce44:	4605      	mov	r5, r0
 800ce46:	460c      	mov	r4, r1
 800ce48:	4616      	mov	r6, r2
 800ce4a:	d505      	bpl.n	800ce58 <__swrite+0x1e>
 800ce4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce50:	2302      	movs	r3, #2
 800ce52:	2200      	movs	r2, #0
 800ce54:	f000 f852 	bl	800cefc <_lseek_r>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	4632      	mov	r2, r6
 800ce66:	463b      	mov	r3, r7
 800ce68:	4628      	mov	r0, r5
 800ce6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6e:	f000 b869 	b.w	800cf44 <_write_r>

0800ce72 <__sseek>:
 800ce72:	b510      	push	{r4, lr}
 800ce74:	460c      	mov	r4, r1
 800ce76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7a:	f000 f83f 	bl	800cefc <_lseek_r>
 800ce7e:	1c43      	adds	r3, r0, #1
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	bf15      	itete	ne
 800ce84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce8e:	81a3      	strheq	r3, [r4, #12]
 800ce90:	bf18      	it	ne
 800ce92:	81a3      	strhne	r3, [r4, #12]
 800ce94:	bd10      	pop	{r4, pc}

0800ce96 <__sclose>:
 800ce96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce9a:	f000 b81f 	b.w	800cedc <_close_r>

0800ce9e <memset>:
 800ce9e:	4402      	add	r2, r0
 800cea0:	4603      	mov	r3, r0
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d100      	bne.n	800cea8 <memset+0xa>
 800cea6:	4770      	bx	lr
 800cea8:	f803 1b01 	strb.w	r1, [r3], #1
 800ceac:	e7f9      	b.n	800cea2 <memset+0x4>

0800ceae <strncmp>:
 800ceae:	b510      	push	{r4, lr}
 800ceb0:	b16a      	cbz	r2, 800cece <strncmp+0x20>
 800ceb2:	3901      	subs	r1, #1
 800ceb4:	1884      	adds	r4, r0, r2
 800ceb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d103      	bne.n	800ceca <strncmp+0x1c>
 800cec2:	42a0      	cmp	r0, r4
 800cec4:	d001      	beq.n	800ceca <strncmp+0x1c>
 800cec6:	2a00      	cmp	r2, #0
 800cec8:	d1f5      	bne.n	800ceb6 <strncmp+0x8>
 800ceca:	1ad0      	subs	r0, r2, r3
 800cecc:	bd10      	pop	{r4, pc}
 800cece:	4610      	mov	r0, r2
 800ced0:	e7fc      	b.n	800cecc <strncmp+0x1e>
	...

0800ced4 <_localeconv_r>:
 800ced4:	4800      	ldr	r0, [pc, #0]	@ (800ced8 <_localeconv_r+0x4>)
 800ced6:	4770      	bx	lr
 800ced8:	20000200 	.word	0x20000200

0800cedc <_close_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d06      	ldr	r5, [pc, #24]	@ (800cef8 <_close_r+0x1c>)
 800cee0:	2300      	movs	r3, #0
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	602b      	str	r3, [r5, #0]
 800cee8:	f7f5 f914 	bl	8002114 <_close>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_close_r+0x1a>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_close_r+0x1a>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	20002318 	.word	0x20002318

0800cefc <_lseek_r>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	4d07      	ldr	r5, [pc, #28]	@ (800cf1c <_lseek_r+0x20>)
 800cf00:	4604      	mov	r4, r0
 800cf02:	4608      	mov	r0, r1
 800cf04:	4611      	mov	r1, r2
 800cf06:	2200      	movs	r2, #0
 800cf08:	602a      	str	r2, [r5, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f7f5 f929 	bl	8002162 <_lseek>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_lseek_r+0x1e>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_lseek_r+0x1e>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	20002318 	.word	0x20002318

0800cf20 <_read_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d07      	ldr	r5, [pc, #28]	@ (800cf40 <_read_r+0x20>)
 800cf24:	4604      	mov	r4, r0
 800cf26:	4608      	mov	r0, r1
 800cf28:	4611      	mov	r1, r2
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	602a      	str	r2, [r5, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f7f5 f8b7 	bl	80020a2 <_read>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	d102      	bne.n	800cf3e <_read_r+0x1e>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	b103      	cbz	r3, 800cf3e <_read_r+0x1e>
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	20002318 	.word	0x20002318

0800cf44 <_write_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4d07      	ldr	r5, [pc, #28]	@ (800cf64 <_write_r+0x20>)
 800cf48:	4604      	mov	r4, r0
 800cf4a:	4608      	mov	r0, r1
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	2200      	movs	r2, #0
 800cf50:	602a      	str	r2, [r5, #0]
 800cf52:	461a      	mov	r2, r3
 800cf54:	f7f5 f8c2 	bl	80020dc <_write>
 800cf58:	1c43      	adds	r3, r0, #1
 800cf5a:	d102      	bne.n	800cf62 <_write_r+0x1e>
 800cf5c:	682b      	ldr	r3, [r5, #0]
 800cf5e:	b103      	cbz	r3, 800cf62 <_write_r+0x1e>
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	20002318 	.word	0x20002318

0800cf68 <__errno>:
 800cf68:	4b01      	ldr	r3, [pc, #4]	@ (800cf70 <__errno+0x8>)
 800cf6a:	6818      	ldr	r0, [r3, #0]
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	2000027c 	.word	0x2000027c

0800cf74 <__libc_init_array>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	4d0d      	ldr	r5, [pc, #52]	@ (800cfac <__libc_init_array+0x38>)
 800cf78:	4c0d      	ldr	r4, [pc, #52]	@ (800cfb0 <__libc_init_array+0x3c>)
 800cf7a:	1b64      	subs	r4, r4, r5
 800cf7c:	10a4      	asrs	r4, r4, #2
 800cf7e:	2600      	movs	r6, #0
 800cf80:	42a6      	cmp	r6, r4
 800cf82:	d109      	bne.n	800cf98 <__libc_init_array+0x24>
 800cf84:	4d0b      	ldr	r5, [pc, #44]	@ (800cfb4 <__libc_init_array+0x40>)
 800cf86:	4c0c      	ldr	r4, [pc, #48]	@ (800cfb8 <__libc_init_array+0x44>)
 800cf88:	f002 fd58 	bl	800fa3c <_init>
 800cf8c:	1b64      	subs	r4, r4, r5
 800cf8e:	10a4      	asrs	r4, r4, #2
 800cf90:	2600      	movs	r6, #0
 800cf92:	42a6      	cmp	r6, r4
 800cf94:	d105      	bne.n	800cfa2 <__libc_init_array+0x2e>
 800cf96:	bd70      	pop	{r4, r5, r6, pc}
 800cf98:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf9c:	4798      	blx	r3
 800cf9e:	3601      	adds	r6, #1
 800cfa0:	e7ee      	b.n	800cf80 <__libc_init_array+0xc>
 800cfa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfa6:	4798      	blx	r3
 800cfa8:	3601      	adds	r6, #1
 800cfaa:	e7f2      	b.n	800cf92 <__libc_init_array+0x1e>
 800cfac:	0800fef8 	.word	0x0800fef8
 800cfb0:	0800fef8 	.word	0x0800fef8
 800cfb4:	0800fef8 	.word	0x0800fef8
 800cfb8:	0800fefc 	.word	0x0800fefc

0800cfbc <__retarget_lock_init_recursive>:
 800cfbc:	4770      	bx	lr

0800cfbe <__retarget_lock_acquire_recursive>:
 800cfbe:	4770      	bx	lr

0800cfc0 <__retarget_lock_release_recursive>:
 800cfc0:	4770      	bx	lr

0800cfc2 <memcpy>:
 800cfc2:	440a      	add	r2, r1
 800cfc4:	4291      	cmp	r1, r2
 800cfc6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cfca:	d100      	bne.n	800cfce <memcpy+0xc>
 800cfcc:	4770      	bx	lr
 800cfce:	b510      	push	{r4, lr}
 800cfd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfd8:	4291      	cmp	r1, r2
 800cfda:	d1f9      	bne.n	800cfd0 <memcpy+0xe>
 800cfdc:	bd10      	pop	{r4, pc}
	...

0800cfe0 <nan>:
 800cfe0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cfe8 <nan+0x8>
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	00000000 	.word	0x00000000
 800cfec:	7ff80000 	.word	0x7ff80000

0800cff0 <nanf>:
 800cff0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cff8 <nanf+0x8>
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	7fc00000 	.word	0x7fc00000

0800cffc <quorem>:
 800cffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	6903      	ldr	r3, [r0, #16]
 800d002:	690c      	ldr	r4, [r1, #16]
 800d004:	42a3      	cmp	r3, r4
 800d006:	4607      	mov	r7, r0
 800d008:	db7e      	blt.n	800d108 <quorem+0x10c>
 800d00a:	3c01      	subs	r4, #1
 800d00c:	f101 0814 	add.w	r8, r1, #20
 800d010:	00a3      	lsls	r3, r4, #2
 800d012:	f100 0514 	add.w	r5, r0, #20
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d026:	3301      	adds	r3, #1
 800d028:	429a      	cmp	r2, r3
 800d02a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d02e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d032:	d32e      	bcc.n	800d092 <quorem+0x96>
 800d034:	f04f 0a00 	mov.w	sl, #0
 800d038:	46c4      	mov	ip, r8
 800d03a:	46ae      	mov	lr, r5
 800d03c:	46d3      	mov	fp, sl
 800d03e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d042:	b298      	uxth	r0, r3
 800d044:	fb06 a000 	mla	r0, r6, r0, sl
 800d048:	0c02      	lsrs	r2, r0, #16
 800d04a:	0c1b      	lsrs	r3, r3, #16
 800d04c:	fb06 2303 	mla	r3, r6, r3, r2
 800d050:	f8de 2000 	ldr.w	r2, [lr]
 800d054:	b280      	uxth	r0, r0
 800d056:	b292      	uxth	r2, r2
 800d058:	1a12      	subs	r2, r2, r0
 800d05a:	445a      	add	r2, fp
 800d05c:	f8de 0000 	ldr.w	r0, [lr]
 800d060:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d064:	b29b      	uxth	r3, r3
 800d066:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d06a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d06e:	b292      	uxth	r2, r2
 800d070:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d074:	45e1      	cmp	r9, ip
 800d076:	f84e 2b04 	str.w	r2, [lr], #4
 800d07a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d07e:	d2de      	bcs.n	800d03e <quorem+0x42>
 800d080:	9b00      	ldr	r3, [sp, #0]
 800d082:	58eb      	ldr	r3, [r5, r3]
 800d084:	b92b      	cbnz	r3, 800d092 <quorem+0x96>
 800d086:	9b01      	ldr	r3, [sp, #4]
 800d088:	3b04      	subs	r3, #4
 800d08a:	429d      	cmp	r5, r3
 800d08c:	461a      	mov	r2, r3
 800d08e:	d32f      	bcc.n	800d0f0 <quorem+0xf4>
 800d090:	613c      	str	r4, [r7, #16]
 800d092:	4638      	mov	r0, r7
 800d094:	f001 fd10 	bl	800eab8 <__mcmp>
 800d098:	2800      	cmp	r0, #0
 800d09a:	db25      	blt.n	800d0e8 <quorem+0xec>
 800d09c:	4629      	mov	r1, r5
 800d09e:	2000      	movs	r0, #0
 800d0a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0a4:	f8d1 c000 	ldr.w	ip, [r1]
 800d0a8:	fa1f fe82 	uxth.w	lr, r2
 800d0ac:	fa1f f38c 	uxth.w	r3, ip
 800d0b0:	eba3 030e 	sub.w	r3, r3, lr
 800d0b4:	4403      	add	r3, r0
 800d0b6:	0c12      	lsrs	r2, r2, #16
 800d0b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d0bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0c6:	45c1      	cmp	r9, r8
 800d0c8:	f841 3b04 	str.w	r3, [r1], #4
 800d0cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d0d0:	d2e6      	bcs.n	800d0a0 <quorem+0xa4>
 800d0d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0da:	b922      	cbnz	r2, 800d0e6 <quorem+0xea>
 800d0dc:	3b04      	subs	r3, #4
 800d0de:	429d      	cmp	r5, r3
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	d30b      	bcc.n	800d0fc <quorem+0x100>
 800d0e4:	613c      	str	r4, [r7, #16]
 800d0e6:	3601      	adds	r6, #1
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	b003      	add	sp, #12
 800d0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f0:	6812      	ldr	r2, [r2, #0]
 800d0f2:	3b04      	subs	r3, #4
 800d0f4:	2a00      	cmp	r2, #0
 800d0f6:	d1cb      	bne.n	800d090 <quorem+0x94>
 800d0f8:	3c01      	subs	r4, #1
 800d0fa:	e7c6      	b.n	800d08a <quorem+0x8e>
 800d0fc:	6812      	ldr	r2, [r2, #0]
 800d0fe:	3b04      	subs	r3, #4
 800d100:	2a00      	cmp	r2, #0
 800d102:	d1ef      	bne.n	800d0e4 <quorem+0xe8>
 800d104:	3c01      	subs	r4, #1
 800d106:	e7ea      	b.n	800d0de <quorem+0xe2>
 800d108:	2000      	movs	r0, #0
 800d10a:	e7ee      	b.n	800d0ea <quorem+0xee>
 800d10c:	0000      	movs	r0, r0
	...

0800d110 <_dtoa_r>:
 800d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d114:	69c7      	ldr	r7, [r0, #28]
 800d116:	b099      	sub	sp, #100	@ 0x64
 800d118:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d11c:	ec55 4b10 	vmov	r4, r5, d0
 800d120:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d122:	9109      	str	r1, [sp, #36]	@ 0x24
 800d124:	4683      	mov	fp, r0
 800d126:	920e      	str	r2, [sp, #56]	@ 0x38
 800d128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d12a:	b97f      	cbnz	r7, 800d14c <_dtoa_r+0x3c>
 800d12c:	2010      	movs	r0, #16
 800d12e:	f001 f937 	bl	800e3a0 <malloc>
 800d132:	4602      	mov	r2, r0
 800d134:	f8cb 001c 	str.w	r0, [fp, #28]
 800d138:	b920      	cbnz	r0, 800d144 <_dtoa_r+0x34>
 800d13a:	4ba7      	ldr	r3, [pc, #668]	@ (800d3d8 <_dtoa_r+0x2c8>)
 800d13c:	21ef      	movs	r1, #239	@ 0xef
 800d13e:	48a7      	ldr	r0, [pc, #668]	@ (800d3dc <_dtoa_r+0x2cc>)
 800d140:	f002 f95e 	bl	800f400 <__assert_func>
 800d144:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d148:	6007      	str	r7, [r0, #0]
 800d14a:	60c7      	str	r7, [r0, #12]
 800d14c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d150:	6819      	ldr	r1, [r3, #0]
 800d152:	b159      	cbz	r1, 800d16c <_dtoa_r+0x5c>
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	604a      	str	r2, [r1, #4]
 800d158:	2301      	movs	r3, #1
 800d15a:	4093      	lsls	r3, r2
 800d15c:	608b      	str	r3, [r1, #8]
 800d15e:	4658      	mov	r0, fp
 800d160:	f001 fa26 	bl	800e5b0 <_Bfree>
 800d164:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]
 800d16c:	1e2b      	subs	r3, r5, #0
 800d16e:	bfb9      	ittee	lt
 800d170:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d174:	9303      	strlt	r3, [sp, #12]
 800d176:	2300      	movge	r3, #0
 800d178:	6033      	strge	r3, [r6, #0]
 800d17a:	9f03      	ldr	r7, [sp, #12]
 800d17c:	4b98      	ldr	r3, [pc, #608]	@ (800d3e0 <_dtoa_r+0x2d0>)
 800d17e:	bfbc      	itt	lt
 800d180:	2201      	movlt	r2, #1
 800d182:	6032      	strlt	r2, [r6, #0]
 800d184:	43bb      	bics	r3, r7
 800d186:	d112      	bne.n	800d1ae <_dtoa_r+0x9e>
 800d188:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d18a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d194:	4323      	orrs	r3, r4
 800d196:	f000 854d 	beq.w	800dc34 <_dtoa_r+0xb24>
 800d19a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d19c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d3f4 <_dtoa_r+0x2e4>
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 854f 	beq.w	800dc44 <_dtoa_r+0xb34>
 800d1a6:	f10a 0303 	add.w	r3, sl, #3
 800d1aa:	f000 bd49 	b.w	800dc40 <_dtoa_r+0xb30>
 800d1ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	ec51 0b17 	vmov	r0, r1, d7
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d1be:	f7f3 fc8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1c2:	4680      	mov	r8, r0
 800d1c4:	b158      	cbz	r0, 800d1de <_dtoa_r+0xce>
 800d1c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	6013      	str	r3, [r2, #0]
 800d1cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1ce:	b113      	cbz	r3, 800d1d6 <_dtoa_r+0xc6>
 800d1d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d1d2:	4b84      	ldr	r3, [pc, #528]	@ (800d3e4 <_dtoa_r+0x2d4>)
 800d1d4:	6013      	str	r3, [r2, #0]
 800d1d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d3f8 <_dtoa_r+0x2e8>
 800d1da:	f000 bd33 	b.w	800dc44 <_dtoa_r+0xb34>
 800d1de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d1e2:	aa16      	add	r2, sp, #88	@ 0x58
 800d1e4:	a917      	add	r1, sp, #92	@ 0x5c
 800d1e6:	4658      	mov	r0, fp
 800d1e8:	f001 fd86 	bl	800ecf8 <__d2b>
 800d1ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d1f0:	4681      	mov	r9, r0
 800d1f2:	2e00      	cmp	r6, #0
 800d1f4:	d077      	beq.n	800d2e6 <_dtoa_r+0x1d6>
 800d1f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d1fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d204:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d208:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d20c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d210:	4619      	mov	r1, r3
 800d212:	2200      	movs	r2, #0
 800d214:	4b74      	ldr	r3, [pc, #464]	@ (800d3e8 <_dtoa_r+0x2d8>)
 800d216:	f7f3 f83f 	bl	8000298 <__aeabi_dsub>
 800d21a:	a369      	add	r3, pc, #420	@ (adr r3, 800d3c0 <_dtoa_r+0x2b0>)
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	f7f3 f9f2 	bl	8000608 <__aeabi_dmul>
 800d224:	a368      	add	r3, pc, #416	@ (adr r3, 800d3c8 <_dtoa_r+0x2b8>)
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	f7f3 f837 	bl	800029c <__adddf3>
 800d22e:	4604      	mov	r4, r0
 800d230:	4630      	mov	r0, r6
 800d232:	460d      	mov	r5, r1
 800d234:	f7f3 f97e 	bl	8000534 <__aeabi_i2d>
 800d238:	a365      	add	r3, pc, #404	@ (adr r3, 800d3d0 <_dtoa_r+0x2c0>)
 800d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23e:	f7f3 f9e3 	bl	8000608 <__aeabi_dmul>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	4620      	mov	r0, r4
 800d248:	4629      	mov	r1, r5
 800d24a:	f7f3 f827 	bl	800029c <__adddf3>
 800d24e:	4604      	mov	r4, r0
 800d250:	460d      	mov	r5, r1
 800d252:	f7f3 fc89 	bl	8000b68 <__aeabi_d2iz>
 800d256:	2200      	movs	r2, #0
 800d258:	4607      	mov	r7, r0
 800d25a:	2300      	movs	r3, #0
 800d25c:	4620      	mov	r0, r4
 800d25e:	4629      	mov	r1, r5
 800d260:	f7f3 fc44 	bl	8000aec <__aeabi_dcmplt>
 800d264:	b140      	cbz	r0, 800d278 <_dtoa_r+0x168>
 800d266:	4638      	mov	r0, r7
 800d268:	f7f3 f964 	bl	8000534 <__aeabi_i2d>
 800d26c:	4622      	mov	r2, r4
 800d26e:	462b      	mov	r3, r5
 800d270:	f7f3 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 800d274:	b900      	cbnz	r0, 800d278 <_dtoa_r+0x168>
 800d276:	3f01      	subs	r7, #1
 800d278:	2f16      	cmp	r7, #22
 800d27a:	d851      	bhi.n	800d320 <_dtoa_r+0x210>
 800d27c:	4b5b      	ldr	r3, [pc, #364]	@ (800d3ec <_dtoa_r+0x2dc>)
 800d27e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d28a:	f7f3 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800d28e:	2800      	cmp	r0, #0
 800d290:	d048      	beq.n	800d324 <_dtoa_r+0x214>
 800d292:	3f01      	subs	r7, #1
 800d294:	2300      	movs	r3, #0
 800d296:	9312      	str	r3, [sp, #72]	@ 0x48
 800d298:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d29a:	1b9b      	subs	r3, r3, r6
 800d29c:	1e5a      	subs	r2, r3, #1
 800d29e:	bf44      	itt	mi
 800d2a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d2a4:	2300      	movmi	r3, #0
 800d2a6:	9208      	str	r2, [sp, #32]
 800d2a8:	bf54      	ite	pl
 800d2aa:	f04f 0800 	movpl.w	r8, #0
 800d2ae:	9308      	strmi	r3, [sp, #32]
 800d2b0:	2f00      	cmp	r7, #0
 800d2b2:	db39      	blt.n	800d328 <_dtoa_r+0x218>
 800d2b4:	9b08      	ldr	r3, [sp, #32]
 800d2b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d2b8:	443b      	add	r3, r7
 800d2ba:	9308      	str	r3, [sp, #32]
 800d2bc:	2300      	movs	r3, #0
 800d2be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2c2:	2b09      	cmp	r3, #9
 800d2c4:	d864      	bhi.n	800d390 <_dtoa_r+0x280>
 800d2c6:	2b05      	cmp	r3, #5
 800d2c8:	bfc4      	itt	gt
 800d2ca:	3b04      	subgt	r3, #4
 800d2cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d0:	f1a3 0302 	sub.w	r3, r3, #2
 800d2d4:	bfcc      	ite	gt
 800d2d6:	2400      	movgt	r4, #0
 800d2d8:	2401      	movle	r4, #1
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d863      	bhi.n	800d3a6 <_dtoa_r+0x296>
 800d2de:	e8df f003 	tbb	[pc, r3]
 800d2e2:	372a      	.short	0x372a
 800d2e4:	5535      	.short	0x5535
 800d2e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d2ea:	441e      	add	r6, r3
 800d2ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d2f0:	2b20      	cmp	r3, #32
 800d2f2:	bfc1      	itttt	gt
 800d2f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d2f8:	409f      	lslgt	r7, r3
 800d2fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d2fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d302:	bfd6      	itet	le
 800d304:	f1c3 0320 	rsble	r3, r3, #32
 800d308:	ea47 0003 	orrgt.w	r0, r7, r3
 800d30c:	fa04 f003 	lslle.w	r0, r4, r3
 800d310:	f7f3 f900 	bl	8000514 <__aeabi_ui2d>
 800d314:	2201      	movs	r2, #1
 800d316:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d31a:	3e01      	subs	r6, #1
 800d31c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d31e:	e777      	b.n	800d210 <_dtoa_r+0x100>
 800d320:	2301      	movs	r3, #1
 800d322:	e7b8      	b.n	800d296 <_dtoa_r+0x186>
 800d324:	9012      	str	r0, [sp, #72]	@ 0x48
 800d326:	e7b7      	b.n	800d298 <_dtoa_r+0x188>
 800d328:	427b      	negs	r3, r7
 800d32a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d32c:	2300      	movs	r3, #0
 800d32e:	eba8 0807 	sub.w	r8, r8, r7
 800d332:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d334:	e7c4      	b.n	800d2c0 <_dtoa_r+0x1b0>
 800d336:	2300      	movs	r3, #0
 800d338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dc35      	bgt.n	800d3ac <_dtoa_r+0x29c>
 800d340:	2301      	movs	r3, #1
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	9307      	str	r3, [sp, #28]
 800d346:	461a      	mov	r2, r3
 800d348:	920e      	str	r2, [sp, #56]	@ 0x38
 800d34a:	e00b      	b.n	800d364 <_dtoa_r+0x254>
 800d34c:	2301      	movs	r3, #1
 800d34e:	e7f3      	b.n	800d338 <_dtoa_r+0x228>
 800d350:	2300      	movs	r3, #0
 800d352:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d356:	18fb      	adds	r3, r7, r3
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	3301      	adds	r3, #1
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	9307      	str	r3, [sp, #28]
 800d360:	bfb8      	it	lt
 800d362:	2301      	movlt	r3, #1
 800d364:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d368:	2100      	movs	r1, #0
 800d36a:	2204      	movs	r2, #4
 800d36c:	f102 0514 	add.w	r5, r2, #20
 800d370:	429d      	cmp	r5, r3
 800d372:	d91f      	bls.n	800d3b4 <_dtoa_r+0x2a4>
 800d374:	6041      	str	r1, [r0, #4]
 800d376:	4658      	mov	r0, fp
 800d378:	f001 f8da 	bl	800e530 <_Balloc>
 800d37c:	4682      	mov	sl, r0
 800d37e:	2800      	cmp	r0, #0
 800d380:	d13c      	bne.n	800d3fc <_dtoa_r+0x2ec>
 800d382:	4b1b      	ldr	r3, [pc, #108]	@ (800d3f0 <_dtoa_r+0x2e0>)
 800d384:	4602      	mov	r2, r0
 800d386:	f240 11af 	movw	r1, #431	@ 0x1af
 800d38a:	e6d8      	b.n	800d13e <_dtoa_r+0x2e>
 800d38c:	2301      	movs	r3, #1
 800d38e:	e7e0      	b.n	800d352 <_dtoa_r+0x242>
 800d390:	2401      	movs	r4, #1
 800d392:	2300      	movs	r3, #0
 800d394:	9309      	str	r3, [sp, #36]	@ 0x24
 800d396:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	9307      	str	r3, [sp, #28]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	2312      	movs	r3, #18
 800d3a4:	e7d0      	b.n	800d348 <_dtoa_r+0x238>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3aa:	e7f5      	b.n	800d398 <_dtoa_r+0x288>
 800d3ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	9307      	str	r3, [sp, #28]
 800d3b2:	e7d7      	b.n	800d364 <_dtoa_r+0x254>
 800d3b4:	3101      	adds	r1, #1
 800d3b6:	0052      	lsls	r2, r2, #1
 800d3b8:	e7d8      	b.n	800d36c <_dtoa_r+0x25c>
 800d3ba:	bf00      	nop
 800d3bc:	f3af 8000 	nop.w
 800d3c0:	636f4361 	.word	0x636f4361
 800d3c4:	3fd287a7 	.word	0x3fd287a7
 800d3c8:	8b60c8b3 	.word	0x8b60c8b3
 800d3cc:	3fc68a28 	.word	0x3fc68a28
 800d3d0:	509f79fb 	.word	0x509f79fb
 800d3d4:	3fd34413 	.word	0x3fd34413
 800d3d8:	0800fb66 	.word	0x0800fb66
 800d3dc:	0800fb7d 	.word	0x0800fb7d
 800d3e0:	7ff00000 	.word	0x7ff00000
 800d3e4:	0800fb29 	.word	0x0800fb29
 800d3e8:	3ff80000 	.word	0x3ff80000
 800d3ec:	0800fcd8 	.word	0x0800fcd8
 800d3f0:	0800fbd5 	.word	0x0800fbd5
 800d3f4:	0800fb62 	.word	0x0800fb62
 800d3f8:	0800fb28 	.word	0x0800fb28
 800d3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d400:	6018      	str	r0, [r3, #0]
 800d402:	9b07      	ldr	r3, [sp, #28]
 800d404:	2b0e      	cmp	r3, #14
 800d406:	f200 80a4 	bhi.w	800d552 <_dtoa_r+0x442>
 800d40a:	2c00      	cmp	r4, #0
 800d40c:	f000 80a1 	beq.w	800d552 <_dtoa_r+0x442>
 800d410:	2f00      	cmp	r7, #0
 800d412:	dd33      	ble.n	800d47c <_dtoa_r+0x36c>
 800d414:	4bad      	ldr	r3, [pc, #692]	@ (800d6cc <_dtoa_r+0x5bc>)
 800d416:	f007 020f 	and.w	r2, r7, #15
 800d41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d41e:	ed93 7b00 	vldr	d7, [r3]
 800d422:	05f8      	lsls	r0, r7, #23
 800d424:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d428:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d42c:	d516      	bpl.n	800d45c <_dtoa_r+0x34c>
 800d42e:	4ba8      	ldr	r3, [pc, #672]	@ (800d6d0 <_dtoa_r+0x5c0>)
 800d430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d438:	f7f3 fa10 	bl	800085c <__aeabi_ddiv>
 800d43c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d440:	f004 040f 	and.w	r4, r4, #15
 800d444:	2603      	movs	r6, #3
 800d446:	4da2      	ldr	r5, [pc, #648]	@ (800d6d0 <_dtoa_r+0x5c0>)
 800d448:	b954      	cbnz	r4, 800d460 <_dtoa_r+0x350>
 800d44a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d452:	f7f3 fa03 	bl	800085c <__aeabi_ddiv>
 800d456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d45a:	e028      	b.n	800d4ae <_dtoa_r+0x39e>
 800d45c:	2602      	movs	r6, #2
 800d45e:	e7f2      	b.n	800d446 <_dtoa_r+0x336>
 800d460:	07e1      	lsls	r1, r4, #31
 800d462:	d508      	bpl.n	800d476 <_dtoa_r+0x366>
 800d464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d468:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d46c:	f7f3 f8cc 	bl	8000608 <__aeabi_dmul>
 800d470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d474:	3601      	adds	r6, #1
 800d476:	1064      	asrs	r4, r4, #1
 800d478:	3508      	adds	r5, #8
 800d47a:	e7e5      	b.n	800d448 <_dtoa_r+0x338>
 800d47c:	f000 80d2 	beq.w	800d624 <_dtoa_r+0x514>
 800d480:	427c      	negs	r4, r7
 800d482:	4b92      	ldr	r3, [pc, #584]	@ (800d6cc <_dtoa_r+0x5bc>)
 800d484:	4d92      	ldr	r5, [pc, #584]	@ (800d6d0 <_dtoa_r+0x5c0>)
 800d486:	f004 020f 	and.w	r2, r4, #15
 800d48a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d496:	f7f3 f8b7 	bl	8000608 <__aeabi_dmul>
 800d49a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d49e:	1124      	asrs	r4, r4, #4
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	2602      	movs	r6, #2
 800d4a4:	2c00      	cmp	r4, #0
 800d4a6:	f040 80b2 	bne.w	800d60e <_dtoa_r+0x4fe>
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1d3      	bne.n	800d456 <_dtoa_r+0x346>
 800d4ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 80b7 	beq.w	800d628 <_dtoa_r+0x518>
 800d4ba:	4b86      	ldr	r3, [pc, #536]	@ (800d6d4 <_dtoa_r+0x5c4>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	4620      	mov	r0, r4
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	f7f3 fb13 	bl	8000aec <__aeabi_dcmplt>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f000 80ae 	beq.w	800d628 <_dtoa_r+0x518>
 800d4cc:	9b07      	ldr	r3, [sp, #28]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 80aa 	beq.w	800d628 <_dtoa_r+0x518>
 800d4d4:	9b00      	ldr	r3, [sp, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	dd37      	ble.n	800d54a <_dtoa_r+0x43a>
 800d4da:	1e7b      	subs	r3, r7, #1
 800d4dc:	9304      	str	r3, [sp, #16]
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4b7d      	ldr	r3, [pc, #500]	@ (800d6d8 <_dtoa_r+0x5c8>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	f7f3 f88f 	bl	8000608 <__aeabi_dmul>
 800d4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4ee:	9c00      	ldr	r4, [sp, #0]
 800d4f0:	3601      	adds	r6, #1
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f7f3 f81e 	bl	8000534 <__aeabi_i2d>
 800d4f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4fc:	f7f3 f884 	bl	8000608 <__aeabi_dmul>
 800d500:	4b76      	ldr	r3, [pc, #472]	@ (800d6dc <_dtoa_r+0x5cc>)
 800d502:	2200      	movs	r2, #0
 800d504:	f7f2 feca 	bl	800029c <__adddf3>
 800d508:	4605      	mov	r5, r0
 800d50a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d50e:	2c00      	cmp	r4, #0
 800d510:	f040 808d 	bne.w	800d62e <_dtoa_r+0x51e>
 800d514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d518:	4b71      	ldr	r3, [pc, #452]	@ (800d6e0 <_dtoa_r+0x5d0>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	f7f2 febc 	bl	8000298 <__aeabi_dsub>
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d528:	462a      	mov	r2, r5
 800d52a:	4633      	mov	r3, r6
 800d52c:	f7f3 fafc 	bl	8000b28 <__aeabi_dcmpgt>
 800d530:	2800      	cmp	r0, #0
 800d532:	f040 828b 	bne.w	800da4c <_dtoa_r+0x93c>
 800d536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d53a:	462a      	mov	r2, r5
 800d53c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d540:	f7f3 fad4 	bl	8000aec <__aeabi_dcmplt>
 800d544:	2800      	cmp	r0, #0
 800d546:	f040 8128 	bne.w	800d79a <_dtoa_r+0x68a>
 800d54a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d54e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d552:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d554:	2b00      	cmp	r3, #0
 800d556:	f2c0 815a 	blt.w	800d80e <_dtoa_r+0x6fe>
 800d55a:	2f0e      	cmp	r7, #14
 800d55c:	f300 8157 	bgt.w	800d80e <_dtoa_r+0x6fe>
 800d560:	4b5a      	ldr	r3, [pc, #360]	@ (800d6cc <_dtoa_r+0x5bc>)
 800d562:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d566:	ed93 7b00 	vldr	d7, [r3]
 800d56a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	ed8d 7b00 	vstr	d7, [sp]
 800d572:	da03      	bge.n	800d57c <_dtoa_r+0x46c>
 800d574:	9b07      	ldr	r3, [sp, #28]
 800d576:	2b00      	cmp	r3, #0
 800d578:	f340 8101 	ble.w	800d77e <_dtoa_r+0x66e>
 800d57c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d580:	4656      	mov	r6, sl
 800d582:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d586:	4620      	mov	r0, r4
 800d588:	4629      	mov	r1, r5
 800d58a:	f7f3 f967 	bl	800085c <__aeabi_ddiv>
 800d58e:	f7f3 faeb 	bl	8000b68 <__aeabi_d2iz>
 800d592:	4680      	mov	r8, r0
 800d594:	f7f2 ffce 	bl	8000534 <__aeabi_i2d>
 800d598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d59c:	f7f3 f834 	bl	8000608 <__aeabi_dmul>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5ac:	f7f2 fe74 	bl	8000298 <__aeabi_dsub>
 800d5b0:	f806 4b01 	strb.w	r4, [r6], #1
 800d5b4:	9d07      	ldr	r5, [sp, #28]
 800d5b6:	eba6 040a 	sub.w	r4, r6, sl
 800d5ba:	42a5      	cmp	r5, r4
 800d5bc:	4602      	mov	r2, r0
 800d5be:	460b      	mov	r3, r1
 800d5c0:	f040 8117 	bne.w	800d7f2 <_dtoa_r+0x6e2>
 800d5c4:	f7f2 fe6a 	bl	800029c <__adddf3>
 800d5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	f7f3 faaa 	bl	8000b28 <__aeabi_dcmpgt>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	f040 80f9 	bne.w	800d7cc <_dtoa_r+0x6bc>
 800d5da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5de:	4620      	mov	r0, r4
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	f7f3 fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5e6:	b118      	cbz	r0, 800d5f0 <_dtoa_r+0x4e0>
 800d5e8:	f018 0f01 	tst.w	r8, #1
 800d5ec:	f040 80ee 	bne.w	800d7cc <_dtoa_r+0x6bc>
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	4658      	mov	r0, fp
 800d5f4:	f000 ffdc 	bl	800e5b0 <_Bfree>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	7033      	strb	r3, [r6, #0]
 800d5fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d5fe:	3701      	adds	r7, #1
 800d600:	601f      	str	r7, [r3, #0]
 800d602:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 831d 	beq.w	800dc44 <_dtoa_r+0xb34>
 800d60a:	601e      	str	r6, [r3, #0]
 800d60c:	e31a      	b.n	800dc44 <_dtoa_r+0xb34>
 800d60e:	07e2      	lsls	r2, r4, #31
 800d610:	d505      	bpl.n	800d61e <_dtoa_r+0x50e>
 800d612:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d616:	f7f2 fff7 	bl	8000608 <__aeabi_dmul>
 800d61a:	3601      	adds	r6, #1
 800d61c:	2301      	movs	r3, #1
 800d61e:	1064      	asrs	r4, r4, #1
 800d620:	3508      	adds	r5, #8
 800d622:	e73f      	b.n	800d4a4 <_dtoa_r+0x394>
 800d624:	2602      	movs	r6, #2
 800d626:	e742      	b.n	800d4ae <_dtoa_r+0x39e>
 800d628:	9c07      	ldr	r4, [sp, #28]
 800d62a:	9704      	str	r7, [sp, #16]
 800d62c:	e761      	b.n	800d4f2 <_dtoa_r+0x3e2>
 800d62e:	4b27      	ldr	r3, [pc, #156]	@ (800d6cc <_dtoa_r+0x5bc>)
 800d630:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d636:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d63a:	4454      	add	r4, sl
 800d63c:	2900      	cmp	r1, #0
 800d63e:	d053      	beq.n	800d6e8 <_dtoa_r+0x5d8>
 800d640:	4928      	ldr	r1, [pc, #160]	@ (800d6e4 <_dtoa_r+0x5d4>)
 800d642:	2000      	movs	r0, #0
 800d644:	f7f3 f90a 	bl	800085c <__aeabi_ddiv>
 800d648:	4633      	mov	r3, r6
 800d64a:	462a      	mov	r2, r5
 800d64c:	f7f2 fe24 	bl	8000298 <__aeabi_dsub>
 800d650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d654:	4656      	mov	r6, sl
 800d656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d65a:	f7f3 fa85 	bl	8000b68 <__aeabi_d2iz>
 800d65e:	4605      	mov	r5, r0
 800d660:	f7f2 ff68 	bl	8000534 <__aeabi_i2d>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d66c:	f7f2 fe14 	bl	8000298 <__aeabi_dsub>
 800d670:	3530      	adds	r5, #48	@ 0x30
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d67a:	f806 5b01 	strb.w	r5, [r6], #1
 800d67e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d682:	f7f3 fa33 	bl	8000aec <__aeabi_dcmplt>
 800d686:	2800      	cmp	r0, #0
 800d688:	d171      	bne.n	800d76e <_dtoa_r+0x65e>
 800d68a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d68e:	4911      	ldr	r1, [pc, #68]	@ (800d6d4 <_dtoa_r+0x5c4>)
 800d690:	2000      	movs	r0, #0
 800d692:	f7f2 fe01 	bl	8000298 <__aeabi_dsub>
 800d696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d69a:	f7f3 fa27 	bl	8000aec <__aeabi_dcmplt>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	f040 8095 	bne.w	800d7ce <_dtoa_r+0x6be>
 800d6a4:	42a6      	cmp	r6, r4
 800d6a6:	f43f af50 	beq.w	800d54a <_dtoa_r+0x43a>
 800d6aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d8 <_dtoa_r+0x5c8>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f7f2 ffa9 	bl	8000608 <__aeabi_dmul>
 800d6b6:	4b08      	ldr	r3, [pc, #32]	@ (800d6d8 <_dtoa_r+0x5c8>)
 800d6b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6bc:	2200      	movs	r2, #0
 800d6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6c2:	f7f2 ffa1 	bl	8000608 <__aeabi_dmul>
 800d6c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6ca:	e7c4      	b.n	800d656 <_dtoa_r+0x546>
 800d6cc:	0800fcd8 	.word	0x0800fcd8
 800d6d0:	0800fcb0 	.word	0x0800fcb0
 800d6d4:	3ff00000 	.word	0x3ff00000
 800d6d8:	40240000 	.word	0x40240000
 800d6dc:	401c0000 	.word	0x401c0000
 800d6e0:	40140000 	.word	0x40140000
 800d6e4:	3fe00000 	.word	0x3fe00000
 800d6e8:	4631      	mov	r1, r6
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f7f2 ff8c 	bl	8000608 <__aeabi_dmul>
 800d6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d6f6:	4656      	mov	r6, sl
 800d6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6fc:	f7f3 fa34 	bl	8000b68 <__aeabi_d2iz>
 800d700:	4605      	mov	r5, r0
 800d702:	f7f2 ff17 	bl	8000534 <__aeabi_i2d>
 800d706:	4602      	mov	r2, r0
 800d708:	460b      	mov	r3, r1
 800d70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d70e:	f7f2 fdc3 	bl	8000298 <__aeabi_dsub>
 800d712:	3530      	adds	r5, #48	@ 0x30
 800d714:	f806 5b01 	strb.w	r5, [r6], #1
 800d718:	4602      	mov	r2, r0
 800d71a:	460b      	mov	r3, r1
 800d71c:	42a6      	cmp	r6, r4
 800d71e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d722:	f04f 0200 	mov.w	r2, #0
 800d726:	d124      	bne.n	800d772 <_dtoa_r+0x662>
 800d728:	4bac      	ldr	r3, [pc, #688]	@ (800d9dc <_dtoa_r+0x8cc>)
 800d72a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d72e:	f7f2 fdb5 	bl	800029c <__adddf3>
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d73a:	f7f3 f9f5 	bl	8000b28 <__aeabi_dcmpgt>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d145      	bne.n	800d7ce <_dtoa_r+0x6be>
 800d742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d746:	49a5      	ldr	r1, [pc, #660]	@ (800d9dc <_dtoa_r+0x8cc>)
 800d748:	2000      	movs	r0, #0
 800d74a:	f7f2 fda5 	bl	8000298 <__aeabi_dsub>
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d756:	f7f3 f9c9 	bl	8000aec <__aeabi_dcmplt>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	f43f aef5 	beq.w	800d54a <_dtoa_r+0x43a>
 800d760:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d762:	1e73      	subs	r3, r6, #1
 800d764:	9315      	str	r3, [sp, #84]	@ 0x54
 800d766:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d76a:	2b30      	cmp	r3, #48	@ 0x30
 800d76c:	d0f8      	beq.n	800d760 <_dtoa_r+0x650>
 800d76e:	9f04      	ldr	r7, [sp, #16]
 800d770:	e73e      	b.n	800d5f0 <_dtoa_r+0x4e0>
 800d772:	4b9b      	ldr	r3, [pc, #620]	@ (800d9e0 <_dtoa_r+0x8d0>)
 800d774:	f7f2 ff48 	bl	8000608 <__aeabi_dmul>
 800d778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d77c:	e7bc      	b.n	800d6f8 <_dtoa_r+0x5e8>
 800d77e:	d10c      	bne.n	800d79a <_dtoa_r+0x68a>
 800d780:	4b98      	ldr	r3, [pc, #608]	@ (800d9e4 <_dtoa_r+0x8d4>)
 800d782:	2200      	movs	r2, #0
 800d784:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d788:	f7f2 ff3e 	bl	8000608 <__aeabi_dmul>
 800d78c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d790:	f7f3 f9c0 	bl	8000b14 <__aeabi_dcmpge>
 800d794:	2800      	cmp	r0, #0
 800d796:	f000 8157 	beq.w	800da48 <_dtoa_r+0x938>
 800d79a:	2400      	movs	r4, #0
 800d79c:	4625      	mov	r5, r4
 800d79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7a0:	43db      	mvns	r3, r3
 800d7a2:	9304      	str	r3, [sp, #16]
 800d7a4:	4656      	mov	r6, sl
 800d7a6:	2700      	movs	r7, #0
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	4658      	mov	r0, fp
 800d7ac:	f000 ff00 	bl	800e5b0 <_Bfree>
 800d7b0:	2d00      	cmp	r5, #0
 800d7b2:	d0dc      	beq.n	800d76e <_dtoa_r+0x65e>
 800d7b4:	b12f      	cbz	r7, 800d7c2 <_dtoa_r+0x6b2>
 800d7b6:	42af      	cmp	r7, r5
 800d7b8:	d003      	beq.n	800d7c2 <_dtoa_r+0x6b2>
 800d7ba:	4639      	mov	r1, r7
 800d7bc:	4658      	mov	r0, fp
 800d7be:	f000 fef7 	bl	800e5b0 <_Bfree>
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	4658      	mov	r0, fp
 800d7c6:	f000 fef3 	bl	800e5b0 <_Bfree>
 800d7ca:	e7d0      	b.n	800d76e <_dtoa_r+0x65e>
 800d7cc:	9704      	str	r7, [sp, #16]
 800d7ce:	4633      	mov	r3, r6
 800d7d0:	461e      	mov	r6, r3
 800d7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7d6:	2a39      	cmp	r2, #57	@ 0x39
 800d7d8:	d107      	bne.n	800d7ea <_dtoa_r+0x6da>
 800d7da:	459a      	cmp	sl, r3
 800d7dc:	d1f8      	bne.n	800d7d0 <_dtoa_r+0x6c0>
 800d7de:	9a04      	ldr	r2, [sp, #16]
 800d7e0:	3201      	adds	r2, #1
 800d7e2:	9204      	str	r2, [sp, #16]
 800d7e4:	2230      	movs	r2, #48	@ 0x30
 800d7e6:	f88a 2000 	strb.w	r2, [sl]
 800d7ea:	781a      	ldrb	r2, [r3, #0]
 800d7ec:	3201      	adds	r2, #1
 800d7ee:	701a      	strb	r2, [r3, #0]
 800d7f0:	e7bd      	b.n	800d76e <_dtoa_r+0x65e>
 800d7f2:	4b7b      	ldr	r3, [pc, #492]	@ (800d9e0 <_dtoa_r+0x8d0>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f7f2 ff07 	bl	8000608 <__aeabi_dmul>
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4604      	mov	r4, r0
 800d800:	460d      	mov	r5, r1
 800d802:	f7f3 f969 	bl	8000ad8 <__aeabi_dcmpeq>
 800d806:	2800      	cmp	r0, #0
 800d808:	f43f aebb 	beq.w	800d582 <_dtoa_r+0x472>
 800d80c:	e6f0      	b.n	800d5f0 <_dtoa_r+0x4e0>
 800d80e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d810:	2a00      	cmp	r2, #0
 800d812:	f000 80db 	beq.w	800d9cc <_dtoa_r+0x8bc>
 800d816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d818:	2a01      	cmp	r2, #1
 800d81a:	f300 80bf 	bgt.w	800d99c <_dtoa_r+0x88c>
 800d81e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d820:	2a00      	cmp	r2, #0
 800d822:	f000 80b7 	beq.w	800d994 <_dtoa_r+0x884>
 800d826:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d82a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d82c:	4646      	mov	r6, r8
 800d82e:	9a08      	ldr	r2, [sp, #32]
 800d830:	2101      	movs	r1, #1
 800d832:	441a      	add	r2, r3
 800d834:	4658      	mov	r0, fp
 800d836:	4498      	add	r8, r3
 800d838:	9208      	str	r2, [sp, #32]
 800d83a:	f000 ffb7 	bl	800e7ac <__i2b>
 800d83e:	4605      	mov	r5, r0
 800d840:	b15e      	cbz	r6, 800d85a <_dtoa_r+0x74a>
 800d842:	9b08      	ldr	r3, [sp, #32]
 800d844:	2b00      	cmp	r3, #0
 800d846:	dd08      	ble.n	800d85a <_dtoa_r+0x74a>
 800d848:	42b3      	cmp	r3, r6
 800d84a:	9a08      	ldr	r2, [sp, #32]
 800d84c:	bfa8      	it	ge
 800d84e:	4633      	movge	r3, r6
 800d850:	eba8 0803 	sub.w	r8, r8, r3
 800d854:	1af6      	subs	r6, r6, r3
 800d856:	1ad3      	subs	r3, r2, r3
 800d858:	9308      	str	r3, [sp, #32]
 800d85a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d85c:	b1f3      	cbz	r3, 800d89c <_dtoa_r+0x78c>
 800d85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 80b7 	beq.w	800d9d4 <_dtoa_r+0x8c4>
 800d866:	b18c      	cbz	r4, 800d88c <_dtoa_r+0x77c>
 800d868:	4629      	mov	r1, r5
 800d86a:	4622      	mov	r2, r4
 800d86c:	4658      	mov	r0, fp
 800d86e:	f001 f85d 	bl	800e92c <__pow5mult>
 800d872:	464a      	mov	r2, r9
 800d874:	4601      	mov	r1, r0
 800d876:	4605      	mov	r5, r0
 800d878:	4658      	mov	r0, fp
 800d87a:	f000 ffad 	bl	800e7d8 <__multiply>
 800d87e:	4649      	mov	r1, r9
 800d880:	9004      	str	r0, [sp, #16]
 800d882:	4658      	mov	r0, fp
 800d884:	f000 fe94 	bl	800e5b0 <_Bfree>
 800d888:	9b04      	ldr	r3, [sp, #16]
 800d88a:	4699      	mov	r9, r3
 800d88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d88e:	1b1a      	subs	r2, r3, r4
 800d890:	d004      	beq.n	800d89c <_dtoa_r+0x78c>
 800d892:	4649      	mov	r1, r9
 800d894:	4658      	mov	r0, fp
 800d896:	f001 f849 	bl	800e92c <__pow5mult>
 800d89a:	4681      	mov	r9, r0
 800d89c:	2101      	movs	r1, #1
 800d89e:	4658      	mov	r0, fp
 800d8a0:	f000 ff84 	bl	800e7ac <__i2b>
 800d8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 81cf 	beq.w	800dc4c <_dtoa_r+0xb3c>
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	4658      	mov	r0, fp
 800d8b4:	f001 f83a 	bl	800e92c <__pow5mult>
 800d8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	4604      	mov	r4, r0
 800d8be:	f300 8095 	bgt.w	800d9ec <_dtoa_r+0x8dc>
 800d8c2:	9b02      	ldr	r3, [sp, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f040 8087 	bne.w	800d9d8 <_dtoa_r+0x8c8>
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f040 8089 	bne.w	800d9e8 <_dtoa_r+0x8d8>
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d8dc:	0d1b      	lsrs	r3, r3, #20
 800d8de:	051b      	lsls	r3, r3, #20
 800d8e0:	b12b      	cbz	r3, 800d8ee <_dtoa_r+0x7de>
 800d8e2:	9b08      	ldr	r3, [sp, #32]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	9308      	str	r3, [sp, #32]
 800d8e8:	f108 0801 	add.w	r8, r8, #1
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f000 81b0 	beq.w	800dc58 <_dtoa_r+0xb48>
 800d8f8:	6923      	ldr	r3, [r4, #16]
 800d8fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d8fe:	6918      	ldr	r0, [r3, #16]
 800d900:	f000 ff08 	bl	800e714 <__hi0bits>
 800d904:	f1c0 0020 	rsb	r0, r0, #32
 800d908:	9b08      	ldr	r3, [sp, #32]
 800d90a:	4418      	add	r0, r3
 800d90c:	f010 001f 	ands.w	r0, r0, #31
 800d910:	d077      	beq.n	800da02 <_dtoa_r+0x8f2>
 800d912:	f1c0 0320 	rsb	r3, r0, #32
 800d916:	2b04      	cmp	r3, #4
 800d918:	dd6b      	ble.n	800d9f2 <_dtoa_r+0x8e2>
 800d91a:	9b08      	ldr	r3, [sp, #32]
 800d91c:	f1c0 001c 	rsb	r0, r0, #28
 800d920:	4403      	add	r3, r0
 800d922:	4480      	add	r8, r0
 800d924:	4406      	add	r6, r0
 800d926:	9308      	str	r3, [sp, #32]
 800d928:	f1b8 0f00 	cmp.w	r8, #0
 800d92c:	dd05      	ble.n	800d93a <_dtoa_r+0x82a>
 800d92e:	4649      	mov	r1, r9
 800d930:	4642      	mov	r2, r8
 800d932:	4658      	mov	r0, fp
 800d934:	f001 f854 	bl	800e9e0 <__lshift>
 800d938:	4681      	mov	r9, r0
 800d93a:	9b08      	ldr	r3, [sp, #32]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	dd05      	ble.n	800d94c <_dtoa_r+0x83c>
 800d940:	4621      	mov	r1, r4
 800d942:	461a      	mov	r2, r3
 800d944:	4658      	mov	r0, fp
 800d946:	f001 f84b 	bl	800e9e0 <__lshift>
 800d94a:	4604      	mov	r4, r0
 800d94c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d059      	beq.n	800da06 <_dtoa_r+0x8f6>
 800d952:	4621      	mov	r1, r4
 800d954:	4648      	mov	r0, r9
 800d956:	f001 f8af 	bl	800eab8 <__mcmp>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	da53      	bge.n	800da06 <_dtoa_r+0x8f6>
 800d95e:	1e7b      	subs	r3, r7, #1
 800d960:	9304      	str	r3, [sp, #16]
 800d962:	4649      	mov	r1, r9
 800d964:	2300      	movs	r3, #0
 800d966:	220a      	movs	r2, #10
 800d968:	4658      	mov	r0, fp
 800d96a:	f000 fe43 	bl	800e5f4 <__multadd>
 800d96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d970:	4681      	mov	r9, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	f000 8172 	beq.w	800dc5c <_dtoa_r+0xb4c>
 800d978:	2300      	movs	r3, #0
 800d97a:	4629      	mov	r1, r5
 800d97c:	220a      	movs	r2, #10
 800d97e:	4658      	mov	r0, fp
 800d980:	f000 fe38 	bl	800e5f4 <__multadd>
 800d984:	9b00      	ldr	r3, [sp, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	4605      	mov	r5, r0
 800d98a:	dc67      	bgt.n	800da5c <_dtoa_r+0x94c>
 800d98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d98e:	2b02      	cmp	r3, #2
 800d990:	dc41      	bgt.n	800da16 <_dtoa_r+0x906>
 800d992:	e063      	b.n	800da5c <_dtoa_r+0x94c>
 800d994:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d996:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d99a:	e746      	b.n	800d82a <_dtoa_r+0x71a>
 800d99c:	9b07      	ldr	r3, [sp, #28]
 800d99e:	1e5c      	subs	r4, r3, #1
 800d9a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9a2:	42a3      	cmp	r3, r4
 800d9a4:	bfbf      	itttt	lt
 800d9a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d9a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d9aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d9ac:	1ae3      	sublt	r3, r4, r3
 800d9ae:	bfb4      	ite	lt
 800d9b0:	18d2      	addlt	r2, r2, r3
 800d9b2:	1b1c      	subge	r4, r3, r4
 800d9b4:	9b07      	ldr	r3, [sp, #28]
 800d9b6:	bfbc      	itt	lt
 800d9b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d9ba:	2400      	movlt	r4, #0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	bfb5      	itete	lt
 800d9c0:	eba8 0603 	sublt.w	r6, r8, r3
 800d9c4:	9b07      	ldrge	r3, [sp, #28]
 800d9c6:	2300      	movlt	r3, #0
 800d9c8:	4646      	movge	r6, r8
 800d9ca:	e730      	b.n	800d82e <_dtoa_r+0x71e>
 800d9cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d9ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d9d0:	4646      	mov	r6, r8
 800d9d2:	e735      	b.n	800d840 <_dtoa_r+0x730>
 800d9d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9d6:	e75c      	b.n	800d892 <_dtoa_r+0x782>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	e788      	b.n	800d8ee <_dtoa_r+0x7de>
 800d9dc:	3fe00000 	.word	0x3fe00000
 800d9e0:	40240000 	.word	0x40240000
 800d9e4:	40140000 	.word	0x40140000
 800d9e8:	9b02      	ldr	r3, [sp, #8]
 800d9ea:	e780      	b.n	800d8ee <_dtoa_r+0x7de>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9f0:	e782      	b.n	800d8f8 <_dtoa_r+0x7e8>
 800d9f2:	d099      	beq.n	800d928 <_dtoa_r+0x818>
 800d9f4:	9a08      	ldr	r2, [sp, #32]
 800d9f6:	331c      	adds	r3, #28
 800d9f8:	441a      	add	r2, r3
 800d9fa:	4498      	add	r8, r3
 800d9fc:	441e      	add	r6, r3
 800d9fe:	9208      	str	r2, [sp, #32]
 800da00:	e792      	b.n	800d928 <_dtoa_r+0x818>
 800da02:	4603      	mov	r3, r0
 800da04:	e7f6      	b.n	800d9f4 <_dtoa_r+0x8e4>
 800da06:	9b07      	ldr	r3, [sp, #28]
 800da08:	9704      	str	r7, [sp, #16]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	dc20      	bgt.n	800da50 <_dtoa_r+0x940>
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da12:	2b02      	cmp	r3, #2
 800da14:	dd1e      	ble.n	800da54 <_dtoa_r+0x944>
 800da16:	9b00      	ldr	r3, [sp, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f47f aec0 	bne.w	800d79e <_dtoa_r+0x68e>
 800da1e:	4621      	mov	r1, r4
 800da20:	2205      	movs	r2, #5
 800da22:	4658      	mov	r0, fp
 800da24:	f000 fde6 	bl	800e5f4 <__multadd>
 800da28:	4601      	mov	r1, r0
 800da2a:	4604      	mov	r4, r0
 800da2c:	4648      	mov	r0, r9
 800da2e:	f001 f843 	bl	800eab8 <__mcmp>
 800da32:	2800      	cmp	r0, #0
 800da34:	f77f aeb3 	ble.w	800d79e <_dtoa_r+0x68e>
 800da38:	4656      	mov	r6, sl
 800da3a:	2331      	movs	r3, #49	@ 0x31
 800da3c:	f806 3b01 	strb.w	r3, [r6], #1
 800da40:	9b04      	ldr	r3, [sp, #16]
 800da42:	3301      	adds	r3, #1
 800da44:	9304      	str	r3, [sp, #16]
 800da46:	e6ae      	b.n	800d7a6 <_dtoa_r+0x696>
 800da48:	9c07      	ldr	r4, [sp, #28]
 800da4a:	9704      	str	r7, [sp, #16]
 800da4c:	4625      	mov	r5, r4
 800da4e:	e7f3      	b.n	800da38 <_dtoa_r+0x928>
 800da50:	9b07      	ldr	r3, [sp, #28]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da56:	2b00      	cmp	r3, #0
 800da58:	f000 8104 	beq.w	800dc64 <_dtoa_r+0xb54>
 800da5c:	2e00      	cmp	r6, #0
 800da5e:	dd05      	ble.n	800da6c <_dtoa_r+0x95c>
 800da60:	4629      	mov	r1, r5
 800da62:	4632      	mov	r2, r6
 800da64:	4658      	mov	r0, fp
 800da66:	f000 ffbb 	bl	800e9e0 <__lshift>
 800da6a:	4605      	mov	r5, r0
 800da6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d05a      	beq.n	800db28 <_dtoa_r+0xa18>
 800da72:	6869      	ldr	r1, [r5, #4]
 800da74:	4658      	mov	r0, fp
 800da76:	f000 fd5b 	bl	800e530 <_Balloc>
 800da7a:	4606      	mov	r6, r0
 800da7c:	b928      	cbnz	r0, 800da8a <_dtoa_r+0x97a>
 800da7e:	4b84      	ldr	r3, [pc, #528]	@ (800dc90 <_dtoa_r+0xb80>)
 800da80:	4602      	mov	r2, r0
 800da82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800da86:	f7ff bb5a 	b.w	800d13e <_dtoa_r+0x2e>
 800da8a:	692a      	ldr	r2, [r5, #16]
 800da8c:	3202      	adds	r2, #2
 800da8e:	0092      	lsls	r2, r2, #2
 800da90:	f105 010c 	add.w	r1, r5, #12
 800da94:	300c      	adds	r0, #12
 800da96:	f7ff fa94 	bl	800cfc2 <memcpy>
 800da9a:	2201      	movs	r2, #1
 800da9c:	4631      	mov	r1, r6
 800da9e:	4658      	mov	r0, fp
 800daa0:	f000 ff9e 	bl	800e9e0 <__lshift>
 800daa4:	f10a 0301 	add.w	r3, sl, #1
 800daa8:	9307      	str	r3, [sp, #28]
 800daaa:	9b00      	ldr	r3, [sp, #0]
 800daac:	4453      	add	r3, sl
 800daae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dab0:	9b02      	ldr	r3, [sp, #8]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	462f      	mov	r7, r5
 800dab8:	930a      	str	r3, [sp, #40]	@ 0x28
 800daba:	4605      	mov	r5, r0
 800dabc:	9b07      	ldr	r3, [sp, #28]
 800dabe:	4621      	mov	r1, r4
 800dac0:	3b01      	subs	r3, #1
 800dac2:	4648      	mov	r0, r9
 800dac4:	9300      	str	r3, [sp, #0]
 800dac6:	f7ff fa99 	bl	800cffc <quorem>
 800daca:	4639      	mov	r1, r7
 800dacc:	9002      	str	r0, [sp, #8]
 800dace:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dad2:	4648      	mov	r0, r9
 800dad4:	f000 fff0 	bl	800eab8 <__mcmp>
 800dad8:	462a      	mov	r2, r5
 800dada:	9008      	str	r0, [sp, #32]
 800dadc:	4621      	mov	r1, r4
 800dade:	4658      	mov	r0, fp
 800dae0:	f001 f806 	bl	800eaf0 <__mdiff>
 800dae4:	68c2      	ldr	r2, [r0, #12]
 800dae6:	4606      	mov	r6, r0
 800dae8:	bb02      	cbnz	r2, 800db2c <_dtoa_r+0xa1c>
 800daea:	4601      	mov	r1, r0
 800daec:	4648      	mov	r0, r9
 800daee:	f000 ffe3 	bl	800eab8 <__mcmp>
 800daf2:	4602      	mov	r2, r0
 800daf4:	4631      	mov	r1, r6
 800daf6:	4658      	mov	r0, fp
 800daf8:	920e      	str	r2, [sp, #56]	@ 0x38
 800dafa:	f000 fd59 	bl	800e5b0 <_Bfree>
 800dafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db02:	9e07      	ldr	r6, [sp, #28]
 800db04:	ea43 0102 	orr.w	r1, r3, r2
 800db08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db0a:	4319      	orrs	r1, r3
 800db0c:	d110      	bne.n	800db30 <_dtoa_r+0xa20>
 800db0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db12:	d029      	beq.n	800db68 <_dtoa_r+0xa58>
 800db14:	9b08      	ldr	r3, [sp, #32]
 800db16:	2b00      	cmp	r3, #0
 800db18:	dd02      	ble.n	800db20 <_dtoa_r+0xa10>
 800db1a:	9b02      	ldr	r3, [sp, #8]
 800db1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800db20:	9b00      	ldr	r3, [sp, #0]
 800db22:	f883 8000 	strb.w	r8, [r3]
 800db26:	e63f      	b.n	800d7a8 <_dtoa_r+0x698>
 800db28:	4628      	mov	r0, r5
 800db2a:	e7bb      	b.n	800daa4 <_dtoa_r+0x994>
 800db2c:	2201      	movs	r2, #1
 800db2e:	e7e1      	b.n	800daf4 <_dtoa_r+0x9e4>
 800db30:	9b08      	ldr	r3, [sp, #32]
 800db32:	2b00      	cmp	r3, #0
 800db34:	db04      	blt.n	800db40 <_dtoa_r+0xa30>
 800db36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db38:	430b      	orrs	r3, r1
 800db3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db3c:	430b      	orrs	r3, r1
 800db3e:	d120      	bne.n	800db82 <_dtoa_r+0xa72>
 800db40:	2a00      	cmp	r2, #0
 800db42:	dded      	ble.n	800db20 <_dtoa_r+0xa10>
 800db44:	4649      	mov	r1, r9
 800db46:	2201      	movs	r2, #1
 800db48:	4658      	mov	r0, fp
 800db4a:	f000 ff49 	bl	800e9e0 <__lshift>
 800db4e:	4621      	mov	r1, r4
 800db50:	4681      	mov	r9, r0
 800db52:	f000 ffb1 	bl	800eab8 <__mcmp>
 800db56:	2800      	cmp	r0, #0
 800db58:	dc03      	bgt.n	800db62 <_dtoa_r+0xa52>
 800db5a:	d1e1      	bne.n	800db20 <_dtoa_r+0xa10>
 800db5c:	f018 0f01 	tst.w	r8, #1
 800db60:	d0de      	beq.n	800db20 <_dtoa_r+0xa10>
 800db62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db66:	d1d8      	bne.n	800db1a <_dtoa_r+0xa0a>
 800db68:	9a00      	ldr	r2, [sp, #0]
 800db6a:	2339      	movs	r3, #57	@ 0x39
 800db6c:	7013      	strb	r3, [r2, #0]
 800db6e:	4633      	mov	r3, r6
 800db70:	461e      	mov	r6, r3
 800db72:	3b01      	subs	r3, #1
 800db74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800db78:	2a39      	cmp	r2, #57	@ 0x39
 800db7a:	d052      	beq.n	800dc22 <_dtoa_r+0xb12>
 800db7c:	3201      	adds	r2, #1
 800db7e:	701a      	strb	r2, [r3, #0]
 800db80:	e612      	b.n	800d7a8 <_dtoa_r+0x698>
 800db82:	2a00      	cmp	r2, #0
 800db84:	dd07      	ble.n	800db96 <_dtoa_r+0xa86>
 800db86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db8a:	d0ed      	beq.n	800db68 <_dtoa_r+0xa58>
 800db8c:	9a00      	ldr	r2, [sp, #0]
 800db8e:	f108 0301 	add.w	r3, r8, #1
 800db92:	7013      	strb	r3, [r2, #0]
 800db94:	e608      	b.n	800d7a8 <_dtoa_r+0x698>
 800db96:	9b07      	ldr	r3, [sp, #28]
 800db98:	9a07      	ldr	r2, [sp, #28]
 800db9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800db9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d028      	beq.n	800dbf6 <_dtoa_r+0xae6>
 800dba4:	4649      	mov	r1, r9
 800dba6:	2300      	movs	r3, #0
 800dba8:	220a      	movs	r2, #10
 800dbaa:	4658      	mov	r0, fp
 800dbac:	f000 fd22 	bl	800e5f4 <__multadd>
 800dbb0:	42af      	cmp	r7, r5
 800dbb2:	4681      	mov	r9, r0
 800dbb4:	f04f 0300 	mov.w	r3, #0
 800dbb8:	f04f 020a 	mov.w	r2, #10
 800dbbc:	4639      	mov	r1, r7
 800dbbe:	4658      	mov	r0, fp
 800dbc0:	d107      	bne.n	800dbd2 <_dtoa_r+0xac2>
 800dbc2:	f000 fd17 	bl	800e5f4 <__multadd>
 800dbc6:	4607      	mov	r7, r0
 800dbc8:	4605      	mov	r5, r0
 800dbca:	9b07      	ldr	r3, [sp, #28]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	9307      	str	r3, [sp, #28]
 800dbd0:	e774      	b.n	800dabc <_dtoa_r+0x9ac>
 800dbd2:	f000 fd0f 	bl	800e5f4 <__multadd>
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	4607      	mov	r7, r0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	220a      	movs	r2, #10
 800dbde:	4658      	mov	r0, fp
 800dbe0:	f000 fd08 	bl	800e5f4 <__multadd>
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	e7f0      	b.n	800dbca <_dtoa_r+0xaba>
 800dbe8:	9b00      	ldr	r3, [sp, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	bfcc      	ite	gt
 800dbee:	461e      	movgt	r6, r3
 800dbf0:	2601      	movle	r6, #1
 800dbf2:	4456      	add	r6, sl
 800dbf4:	2700      	movs	r7, #0
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	4658      	mov	r0, fp
 800dbfc:	f000 fef0 	bl	800e9e0 <__lshift>
 800dc00:	4621      	mov	r1, r4
 800dc02:	4681      	mov	r9, r0
 800dc04:	f000 ff58 	bl	800eab8 <__mcmp>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	dcb0      	bgt.n	800db6e <_dtoa_r+0xa5e>
 800dc0c:	d102      	bne.n	800dc14 <_dtoa_r+0xb04>
 800dc0e:	f018 0f01 	tst.w	r8, #1
 800dc12:	d1ac      	bne.n	800db6e <_dtoa_r+0xa5e>
 800dc14:	4633      	mov	r3, r6
 800dc16:	461e      	mov	r6, r3
 800dc18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc1c:	2a30      	cmp	r2, #48	@ 0x30
 800dc1e:	d0fa      	beq.n	800dc16 <_dtoa_r+0xb06>
 800dc20:	e5c2      	b.n	800d7a8 <_dtoa_r+0x698>
 800dc22:	459a      	cmp	sl, r3
 800dc24:	d1a4      	bne.n	800db70 <_dtoa_r+0xa60>
 800dc26:	9b04      	ldr	r3, [sp, #16]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	9304      	str	r3, [sp, #16]
 800dc2c:	2331      	movs	r3, #49	@ 0x31
 800dc2e:	f88a 3000 	strb.w	r3, [sl]
 800dc32:	e5b9      	b.n	800d7a8 <_dtoa_r+0x698>
 800dc34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dc94 <_dtoa_r+0xb84>
 800dc3a:	b11b      	cbz	r3, 800dc44 <_dtoa_r+0xb34>
 800dc3c:	f10a 0308 	add.w	r3, sl, #8
 800dc40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	4650      	mov	r0, sl
 800dc46:	b019      	add	sp, #100	@ 0x64
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	f77f ae37 	ble.w	800d8c2 <_dtoa_r+0x7b2>
 800dc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc56:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc58:	2001      	movs	r0, #1
 800dc5a:	e655      	b.n	800d908 <_dtoa_r+0x7f8>
 800dc5c:	9b00      	ldr	r3, [sp, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f77f aed6 	ble.w	800da10 <_dtoa_r+0x900>
 800dc64:	4656      	mov	r6, sl
 800dc66:	4621      	mov	r1, r4
 800dc68:	4648      	mov	r0, r9
 800dc6a:	f7ff f9c7 	bl	800cffc <quorem>
 800dc6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc72:	f806 8b01 	strb.w	r8, [r6], #1
 800dc76:	9b00      	ldr	r3, [sp, #0]
 800dc78:	eba6 020a 	sub.w	r2, r6, sl
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	ddb3      	ble.n	800dbe8 <_dtoa_r+0xad8>
 800dc80:	4649      	mov	r1, r9
 800dc82:	2300      	movs	r3, #0
 800dc84:	220a      	movs	r2, #10
 800dc86:	4658      	mov	r0, fp
 800dc88:	f000 fcb4 	bl	800e5f4 <__multadd>
 800dc8c:	4681      	mov	r9, r0
 800dc8e:	e7ea      	b.n	800dc66 <_dtoa_r+0xb56>
 800dc90:	0800fbd5 	.word	0x0800fbd5
 800dc94:	0800fb59 	.word	0x0800fb59

0800dc98 <_free_r>:
 800dc98:	b538      	push	{r3, r4, r5, lr}
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	2900      	cmp	r1, #0
 800dc9e:	d041      	beq.n	800dd24 <_free_r+0x8c>
 800dca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dca4:	1f0c      	subs	r4, r1, #4
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	bfb8      	it	lt
 800dcaa:	18e4      	addlt	r4, r4, r3
 800dcac:	f000 fc34 	bl	800e518 <__malloc_lock>
 800dcb0:	4a1d      	ldr	r2, [pc, #116]	@ (800dd28 <_free_r+0x90>)
 800dcb2:	6813      	ldr	r3, [r2, #0]
 800dcb4:	b933      	cbnz	r3, 800dcc4 <_free_r+0x2c>
 800dcb6:	6063      	str	r3, [r4, #4]
 800dcb8:	6014      	str	r4, [r2, #0]
 800dcba:	4628      	mov	r0, r5
 800dcbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcc0:	f000 bc30 	b.w	800e524 <__malloc_unlock>
 800dcc4:	42a3      	cmp	r3, r4
 800dcc6:	d908      	bls.n	800dcda <_free_r+0x42>
 800dcc8:	6820      	ldr	r0, [r4, #0]
 800dcca:	1821      	adds	r1, r4, r0
 800dccc:	428b      	cmp	r3, r1
 800dcce:	bf01      	itttt	eq
 800dcd0:	6819      	ldreq	r1, [r3, #0]
 800dcd2:	685b      	ldreq	r3, [r3, #4]
 800dcd4:	1809      	addeq	r1, r1, r0
 800dcd6:	6021      	streq	r1, [r4, #0]
 800dcd8:	e7ed      	b.n	800dcb6 <_free_r+0x1e>
 800dcda:	461a      	mov	r2, r3
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	b10b      	cbz	r3, 800dce4 <_free_r+0x4c>
 800dce0:	42a3      	cmp	r3, r4
 800dce2:	d9fa      	bls.n	800dcda <_free_r+0x42>
 800dce4:	6811      	ldr	r1, [r2, #0]
 800dce6:	1850      	adds	r0, r2, r1
 800dce8:	42a0      	cmp	r0, r4
 800dcea:	d10b      	bne.n	800dd04 <_free_r+0x6c>
 800dcec:	6820      	ldr	r0, [r4, #0]
 800dcee:	4401      	add	r1, r0
 800dcf0:	1850      	adds	r0, r2, r1
 800dcf2:	4283      	cmp	r3, r0
 800dcf4:	6011      	str	r1, [r2, #0]
 800dcf6:	d1e0      	bne.n	800dcba <_free_r+0x22>
 800dcf8:	6818      	ldr	r0, [r3, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	6053      	str	r3, [r2, #4]
 800dcfe:	4408      	add	r0, r1
 800dd00:	6010      	str	r0, [r2, #0]
 800dd02:	e7da      	b.n	800dcba <_free_r+0x22>
 800dd04:	d902      	bls.n	800dd0c <_free_r+0x74>
 800dd06:	230c      	movs	r3, #12
 800dd08:	602b      	str	r3, [r5, #0]
 800dd0a:	e7d6      	b.n	800dcba <_free_r+0x22>
 800dd0c:	6820      	ldr	r0, [r4, #0]
 800dd0e:	1821      	adds	r1, r4, r0
 800dd10:	428b      	cmp	r3, r1
 800dd12:	bf04      	itt	eq
 800dd14:	6819      	ldreq	r1, [r3, #0]
 800dd16:	685b      	ldreq	r3, [r3, #4]
 800dd18:	6063      	str	r3, [r4, #4]
 800dd1a:	bf04      	itt	eq
 800dd1c:	1809      	addeq	r1, r1, r0
 800dd1e:	6021      	streq	r1, [r4, #0]
 800dd20:	6054      	str	r4, [r2, #4]
 800dd22:	e7ca      	b.n	800dcba <_free_r+0x22>
 800dd24:	bd38      	pop	{r3, r4, r5, pc}
 800dd26:	bf00      	nop
 800dd28:	20002324 	.word	0x20002324

0800dd2c <rshift>:
 800dd2c:	6903      	ldr	r3, [r0, #16]
 800dd2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd3a:	f100 0414 	add.w	r4, r0, #20
 800dd3e:	dd45      	ble.n	800ddcc <rshift+0xa0>
 800dd40:	f011 011f 	ands.w	r1, r1, #31
 800dd44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd4c:	d10c      	bne.n	800dd68 <rshift+0x3c>
 800dd4e:	f100 0710 	add.w	r7, r0, #16
 800dd52:	4629      	mov	r1, r5
 800dd54:	42b1      	cmp	r1, r6
 800dd56:	d334      	bcc.n	800ddc2 <rshift+0x96>
 800dd58:	1a9b      	subs	r3, r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	1eea      	subs	r2, r5, #3
 800dd5e:	4296      	cmp	r6, r2
 800dd60:	bf38      	it	cc
 800dd62:	2300      	movcc	r3, #0
 800dd64:	4423      	add	r3, r4
 800dd66:	e015      	b.n	800dd94 <rshift+0x68>
 800dd68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd6c:	f1c1 0820 	rsb	r8, r1, #32
 800dd70:	40cf      	lsrs	r7, r1
 800dd72:	f105 0e04 	add.w	lr, r5, #4
 800dd76:	46a1      	mov	r9, r4
 800dd78:	4576      	cmp	r6, lr
 800dd7a:	46f4      	mov	ip, lr
 800dd7c:	d815      	bhi.n	800ddaa <rshift+0x7e>
 800dd7e:	1a9a      	subs	r2, r3, r2
 800dd80:	0092      	lsls	r2, r2, #2
 800dd82:	3a04      	subs	r2, #4
 800dd84:	3501      	adds	r5, #1
 800dd86:	42ae      	cmp	r6, r5
 800dd88:	bf38      	it	cc
 800dd8a:	2200      	movcc	r2, #0
 800dd8c:	18a3      	adds	r3, r4, r2
 800dd8e:	50a7      	str	r7, [r4, r2]
 800dd90:	b107      	cbz	r7, 800dd94 <rshift+0x68>
 800dd92:	3304      	adds	r3, #4
 800dd94:	1b1a      	subs	r2, r3, r4
 800dd96:	42a3      	cmp	r3, r4
 800dd98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd9c:	bf08      	it	eq
 800dd9e:	2300      	moveq	r3, #0
 800dda0:	6102      	str	r2, [r0, #16]
 800dda2:	bf08      	it	eq
 800dda4:	6143      	streq	r3, [r0, #20]
 800dda6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddaa:	f8dc c000 	ldr.w	ip, [ip]
 800ddae:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddb2:	ea4c 0707 	orr.w	r7, ip, r7
 800ddb6:	f849 7b04 	str.w	r7, [r9], #4
 800ddba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddbe:	40cf      	lsrs	r7, r1
 800ddc0:	e7da      	b.n	800dd78 <rshift+0x4c>
 800ddc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddca:	e7c3      	b.n	800dd54 <rshift+0x28>
 800ddcc:	4623      	mov	r3, r4
 800ddce:	e7e1      	b.n	800dd94 <rshift+0x68>

0800ddd0 <__hexdig_fun>:
 800ddd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ddd4:	2b09      	cmp	r3, #9
 800ddd6:	d802      	bhi.n	800ddde <__hexdig_fun+0xe>
 800ddd8:	3820      	subs	r0, #32
 800ddda:	b2c0      	uxtb	r0, r0
 800dddc:	4770      	bx	lr
 800ddde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dde2:	2b05      	cmp	r3, #5
 800dde4:	d801      	bhi.n	800ddea <__hexdig_fun+0x1a>
 800dde6:	3847      	subs	r0, #71	@ 0x47
 800dde8:	e7f7      	b.n	800ddda <__hexdig_fun+0xa>
 800ddea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ddee:	2b05      	cmp	r3, #5
 800ddf0:	d801      	bhi.n	800ddf6 <__hexdig_fun+0x26>
 800ddf2:	3827      	subs	r0, #39	@ 0x27
 800ddf4:	e7f1      	b.n	800ddda <__hexdig_fun+0xa>
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	4770      	bx	lr
	...

0800ddfc <__gethex>:
 800ddfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de00:	b085      	sub	sp, #20
 800de02:	468a      	mov	sl, r1
 800de04:	9302      	str	r3, [sp, #8]
 800de06:	680b      	ldr	r3, [r1, #0]
 800de08:	9001      	str	r0, [sp, #4]
 800de0a:	4690      	mov	r8, r2
 800de0c:	1c9c      	adds	r4, r3, #2
 800de0e:	46a1      	mov	r9, r4
 800de10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800de14:	2830      	cmp	r0, #48	@ 0x30
 800de16:	d0fa      	beq.n	800de0e <__gethex+0x12>
 800de18:	eba9 0303 	sub.w	r3, r9, r3
 800de1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800de20:	f7ff ffd6 	bl	800ddd0 <__hexdig_fun>
 800de24:	4605      	mov	r5, r0
 800de26:	2800      	cmp	r0, #0
 800de28:	d168      	bne.n	800defc <__gethex+0x100>
 800de2a:	49a0      	ldr	r1, [pc, #640]	@ (800e0ac <__gethex+0x2b0>)
 800de2c:	2201      	movs	r2, #1
 800de2e:	4648      	mov	r0, r9
 800de30:	f7ff f83d 	bl	800ceae <strncmp>
 800de34:	4607      	mov	r7, r0
 800de36:	2800      	cmp	r0, #0
 800de38:	d167      	bne.n	800df0a <__gethex+0x10e>
 800de3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de3e:	4626      	mov	r6, r4
 800de40:	f7ff ffc6 	bl	800ddd0 <__hexdig_fun>
 800de44:	2800      	cmp	r0, #0
 800de46:	d062      	beq.n	800df0e <__gethex+0x112>
 800de48:	4623      	mov	r3, r4
 800de4a:	7818      	ldrb	r0, [r3, #0]
 800de4c:	2830      	cmp	r0, #48	@ 0x30
 800de4e:	4699      	mov	r9, r3
 800de50:	f103 0301 	add.w	r3, r3, #1
 800de54:	d0f9      	beq.n	800de4a <__gethex+0x4e>
 800de56:	f7ff ffbb 	bl	800ddd0 <__hexdig_fun>
 800de5a:	fab0 f580 	clz	r5, r0
 800de5e:	096d      	lsrs	r5, r5, #5
 800de60:	f04f 0b01 	mov.w	fp, #1
 800de64:	464a      	mov	r2, r9
 800de66:	4616      	mov	r6, r2
 800de68:	3201      	adds	r2, #1
 800de6a:	7830      	ldrb	r0, [r6, #0]
 800de6c:	f7ff ffb0 	bl	800ddd0 <__hexdig_fun>
 800de70:	2800      	cmp	r0, #0
 800de72:	d1f8      	bne.n	800de66 <__gethex+0x6a>
 800de74:	498d      	ldr	r1, [pc, #564]	@ (800e0ac <__gethex+0x2b0>)
 800de76:	2201      	movs	r2, #1
 800de78:	4630      	mov	r0, r6
 800de7a:	f7ff f818 	bl	800ceae <strncmp>
 800de7e:	2800      	cmp	r0, #0
 800de80:	d13f      	bne.n	800df02 <__gethex+0x106>
 800de82:	b944      	cbnz	r4, 800de96 <__gethex+0x9a>
 800de84:	1c74      	adds	r4, r6, #1
 800de86:	4622      	mov	r2, r4
 800de88:	4616      	mov	r6, r2
 800de8a:	3201      	adds	r2, #1
 800de8c:	7830      	ldrb	r0, [r6, #0]
 800de8e:	f7ff ff9f 	bl	800ddd0 <__hexdig_fun>
 800de92:	2800      	cmp	r0, #0
 800de94:	d1f8      	bne.n	800de88 <__gethex+0x8c>
 800de96:	1ba4      	subs	r4, r4, r6
 800de98:	00a7      	lsls	r7, r4, #2
 800de9a:	7833      	ldrb	r3, [r6, #0]
 800de9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dea0:	2b50      	cmp	r3, #80	@ 0x50
 800dea2:	d13e      	bne.n	800df22 <__gethex+0x126>
 800dea4:	7873      	ldrb	r3, [r6, #1]
 800dea6:	2b2b      	cmp	r3, #43	@ 0x2b
 800dea8:	d033      	beq.n	800df12 <__gethex+0x116>
 800deaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800deac:	d034      	beq.n	800df18 <__gethex+0x11c>
 800deae:	1c71      	adds	r1, r6, #1
 800deb0:	2400      	movs	r4, #0
 800deb2:	7808      	ldrb	r0, [r1, #0]
 800deb4:	f7ff ff8c 	bl	800ddd0 <__hexdig_fun>
 800deb8:	1e43      	subs	r3, r0, #1
 800deba:	b2db      	uxtb	r3, r3
 800debc:	2b18      	cmp	r3, #24
 800debe:	d830      	bhi.n	800df22 <__gethex+0x126>
 800dec0:	f1a0 0210 	sub.w	r2, r0, #16
 800dec4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dec8:	f7ff ff82 	bl	800ddd0 <__hexdig_fun>
 800decc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ded0:	fa5f fc8c 	uxtb.w	ip, ip
 800ded4:	f1bc 0f18 	cmp.w	ip, #24
 800ded8:	f04f 030a 	mov.w	r3, #10
 800dedc:	d91e      	bls.n	800df1c <__gethex+0x120>
 800dede:	b104      	cbz	r4, 800dee2 <__gethex+0xe6>
 800dee0:	4252      	negs	r2, r2
 800dee2:	4417      	add	r7, r2
 800dee4:	f8ca 1000 	str.w	r1, [sl]
 800dee8:	b1ed      	cbz	r5, 800df26 <__gethex+0x12a>
 800deea:	f1bb 0f00 	cmp.w	fp, #0
 800deee:	bf0c      	ite	eq
 800def0:	2506      	moveq	r5, #6
 800def2:	2500      	movne	r5, #0
 800def4:	4628      	mov	r0, r5
 800def6:	b005      	add	sp, #20
 800def8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800defc:	2500      	movs	r5, #0
 800defe:	462c      	mov	r4, r5
 800df00:	e7b0      	b.n	800de64 <__gethex+0x68>
 800df02:	2c00      	cmp	r4, #0
 800df04:	d1c7      	bne.n	800de96 <__gethex+0x9a>
 800df06:	4627      	mov	r7, r4
 800df08:	e7c7      	b.n	800de9a <__gethex+0x9e>
 800df0a:	464e      	mov	r6, r9
 800df0c:	462f      	mov	r7, r5
 800df0e:	2501      	movs	r5, #1
 800df10:	e7c3      	b.n	800de9a <__gethex+0x9e>
 800df12:	2400      	movs	r4, #0
 800df14:	1cb1      	adds	r1, r6, #2
 800df16:	e7cc      	b.n	800deb2 <__gethex+0xb6>
 800df18:	2401      	movs	r4, #1
 800df1a:	e7fb      	b.n	800df14 <__gethex+0x118>
 800df1c:	fb03 0002 	mla	r0, r3, r2, r0
 800df20:	e7ce      	b.n	800dec0 <__gethex+0xc4>
 800df22:	4631      	mov	r1, r6
 800df24:	e7de      	b.n	800dee4 <__gethex+0xe8>
 800df26:	eba6 0309 	sub.w	r3, r6, r9
 800df2a:	3b01      	subs	r3, #1
 800df2c:	4629      	mov	r1, r5
 800df2e:	2b07      	cmp	r3, #7
 800df30:	dc0a      	bgt.n	800df48 <__gethex+0x14c>
 800df32:	9801      	ldr	r0, [sp, #4]
 800df34:	f000 fafc 	bl	800e530 <_Balloc>
 800df38:	4604      	mov	r4, r0
 800df3a:	b940      	cbnz	r0, 800df4e <__gethex+0x152>
 800df3c:	4b5c      	ldr	r3, [pc, #368]	@ (800e0b0 <__gethex+0x2b4>)
 800df3e:	4602      	mov	r2, r0
 800df40:	21e4      	movs	r1, #228	@ 0xe4
 800df42:	485c      	ldr	r0, [pc, #368]	@ (800e0b4 <__gethex+0x2b8>)
 800df44:	f001 fa5c 	bl	800f400 <__assert_func>
 800df48:	3101      	adds	r1, #1
 800df4a:	105b      	asrs	r3, r3, #1
 800df4c:	e7ef      	b.n	800df2e <__gethex+0x132>
 800df4e:	f100 0a14 	add.w	sl, r0, #20
 800df52:	2300      	movs	r3, #0
 800df54:	4655      	mov	r5, sl
 800df56:	469b      	mov	fp, r3
 800df58:	45b1      	cmp	r9, r6
 800df5a:	d337      	bcc.n	800dfcc <__gethex+0x1d0>
 800df5c:	f845 bb04 	str.w	fp, [r5], #4
 800df60:	eba5 050a 	sub.w	r5, r5, sl
 800df64:	10ad      	asrs	r5, r5, #2
 800df66:	6125      	str	r5, [r4, #16]
 800df68:	4658      	mov	r0, fp
 800df6a:	f000 fbd3 	bl	800e714 <__hi0bits>
 800df6e:	016d      	lsls	r5, r5, #5
 800df70:	f8d8 6000 	ldr.w	r6, [r8]
 800df74:	1a2d      	subs	r5, r5, r0
 800df76:	42b5      	cmp	r5, r6
 800df78:	dd54      	ble.n	800e024 <__gethex+0x228>
 800df7a:	1bad      	subs	r5, r5, r6
 800df7c:	4629      	mov	r1, r5
 800df7e:	4620      	mov	r0, r4
 800df80:	f000 ff67 	bl	800ee52 <__any_on>
 800df84:	4681      	mov	r9, r0
 800df86:	b178      	cbz	r0, 800dfa8 <__gethex+0x1ac>
 800df88:	1e6b      	subs	r3, r5, #1
 800df8a:	1159      	asrs	r1, r3, #5
 800df8c:	f003 021f 	and.w	r2, r3, #31
 800df90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800df94:	f04f 0901 	mov.w	r9, #1
 800df98:	fa09 f202 	lsl.w	r2, r9, r2
 800df9c:	420a      	tst	r2, r1
 800df9e:	d003      	beq.n	800dfa8 <__gethex+0x1ac>
 800dfa0:	454b      	cmp	r3, r9
 800dfa2:	dc36      	bgt.n	800e012 <__gethex+0x216>
 800dfa4:	f04f 0902 	mov.w	r9, #2
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f7ff febe 	bl	800dd2c <rshift>
 800dfb0:	442f      	add	r7, r5
 800dfb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfb6:	42bb      	cmp	r3, r7
 800dfb8:	da42      	bge.n	800e040 <__gethex+0x244>
 800dfba:	9801      	ldr	r0, [sp, #4]
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f000 faf7 	bl	800e5b0 <_Bfree>
 800dfc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	6013      	str	r3, [r2, #0]
 800dfc8:	25a3      	movs	r5, #163	@ 0xa3
 800dfca:	e793      	b.n	800def4 <__gethex+0xf8>
 800dfcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dfd0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dfd2:	d012      	beq.n	800dffa <__gethex+0x1fe>
 800dfd4:	2b20      	cmp	r3, #32
 800dfd6:	d104      	bne.n	800dfe2 <__gethex+0x1e6>
 800dfd8:	f845 bb04 	str.w	fp, [r5], #4
 800dfdc:	f04f 0b00 	mov.w	fp, #0
 800dfe0:	465b      	mov	r3, fp
 800dfe2:	7830      	ldrb	r0, [r6, #0]
 800dfe4:	9303      	str	r3, [sp, #12]
 800dfe6:	f7ff fef3 	bl	800ddd0 <__hexdig_fun>
 800dfea:	9b03      	ldr	r3, [sp, #12]
 800dfec:	f000 000f 	and.w	r0, r0, #15
 800dff0:	4098      	lsls	r0, r3
 800dff2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dff6:	3304      	adds	r3, #4
 800dff8:	e7ae      	b.n	800df58 <__gethex+0x15c>
 800dffa:	45b1      	cmp	r9, r6
 800dffc:	d8ea      	bhi.n	800dfd4 <__gethex+0x1d8>
 800dffe:	492b      	ldr	r1, [pc, #172]	@ (800e0ac <__gethex+0x2b0>)
 800e000:	9303      	str	r3, [sp, #12]
 800e002:	2201      	movs	r2, #1
 800e004:	4630      	mov	r0, r6
 800e006:	f7fe ff52 	bl	800ceae <strncmp>
 800e00a:	9b03      	ldr	r3, [sp, #12]
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d1e1      	bne.n	800dfd4 <__gethex+0x1d8>
 800e010:	e7a2      	b.n	800df58 <__gethex+0x15c>
 800e012:	1ea9      	subs	r1, r5, #2
 800e014:	4620      	mov	r0, r4
 800e016:	f000 ff1c 	bl	800ee52 <__any_on>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d0c2      	beq.n	800dfa4 <__gethex+0x1a8>
 800e01e:	f04f 0903 	mov.w	r9, #3
 800e022:	e7c1      	b.n	800dfa8 <__gethex+0x1ac>
 800e024:	da09      	bge.n	800e03a <__gethex+0x23e>
 800e026:	1b75      	subs	r5, r6, r5
 800e028:	4621      	mov	r1, r4
 800e02a:	9801      	ldr	r0, [sp, #4]
 800e02c:	462a      	mov	r2, r5
 800e02e:	f000 fcd7 	bl	800e9e0 <__lshift>
 800e032:	1b7f      	subs	r7, r7, r5
 800e034:	4604      	mov	r4, r0
 800e036:	f100 0a14 	add.w	sl, r0, #20
 800e03a:	f04f 0900 	mov.w	r9, #0
 800e03e:	e7b8      	b.n	800dfb2 <__gethex+0x1b6>
 800e040:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e044:	42bd      	cmp	r5, r7
 800e046:	dd6f      	ble.n	800e128 <__gethex+0x32c>
 800e048:	1bed      	subs	r5, r5, r7
 800e04a:	42ae      	cmp	r6, r5
 800e04c:	dc34      	bgt.n	800e0b8 <__gethex+0x2bc>
 800e04e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e052:	2b02      	cmp	r3, #2
 800e054:	d022      	beq.n	800e09c <__gethex+0x2a0>
 800e056:	2b03      	cmp	r3, #3
 800e058:	d024      	beq.n	800e0a4 <__gethex+0x2a8>
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d115      	bne.n	800e08a <__gethex+0x28e>
 800e05e:	42ae      	cmp	r6, r5
 800e060:	d113      	bne.n	800e08a <__gethex+0x28e>
 800e062:	2e01      	cmp	r6, #1
 800e064:	d10b      	bne.n	800e07e <__gethex+0x282>
 800e066:	9a02      	ldr	r2, [sp, #8]
 800e068:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e06c:	6013      	str	r3, [r2, #0]
 800e06e:	2301      	movs	r3, #1
 800e070:	6123      	str	r3, [r4, #16]
 800e072:	f8ca 3000 	str.w	r3, [sl]
 800e076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e078:	2562      	movs	r5, #98	@ 0x62
 800e07a:	601c      	str	r4, [r3, #0]
 800e07c:	e73a      	b.n	800def4 <__gethex+0xf8>
 800e07e:	1e71      	subs	r1, r6, #1
 800e080:	4620      	mov	r0, r4
 800e082:	f000 fee6 	bl	800ee52 <__any_on>
 800e086:	2800      	cmp	r0, #0
 800e088:	d1ed      	bne.n	800e066 <__gethex+0x26a>
 800e08a:	9801      	ldr	r0, [sp, #4]
 800e08c:	4621      	mov	r1, r4
 800e08e:	f000 fa8f 	bl	800e5b0 <_Bfree>
 800e092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e094:	2300      	movs	r3, #0
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	2550      	movs	r5, #80	@ 0x50
 800e09a:	e72b      	b.n	800def4 <__gethex+0xf8>
 800e09c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d1f3      	bne.n	800e08a <__gethex+0x28e>
 800e0a2:	e7e0      	b.n	800e066 <__gethex+0x26a>
 800e0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1dd      	bne.n	800e066 <__gethex+0x26a>
 800e0aa:	e7ee      	b.n	800e08a <__gethex+0x28e>
 800e0ac:	0800fac0 	.word	0x0800fac0
 800e0b0:	0800fbd5 	.word	0x0800fbd5
 800e0b4:	0800fbe6 	.word	0x0800fbe6
 800e0b8:	1e6f      	subs	r7, r5, #1
 800e0ba:	f1b9 0f00 	cmp.w	r9, #0
 800e0be:	d130      	bne.n	800e122 <__gethex+0x326>
 800e0c0:	b127      	cbz	r7, 800e0cc <__gethex+0x2d0>
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f000 fec4 	bl	800ee52 <__any_on>
 800e0ca:	4681      	mov	r9, r0
 800e0cc:	117a      	asrs	r2, r7, #5
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e0d4:	f007 071f 	and.w	r7, r7, #31
 800e0d8:	40bb      	lsls	r3, r7
 800e0da:	4213      	tst	r3, r2
 800e0dc:	4629      	mov	r1, r5
 800e0de:	4620      	mov	r0, r4
 800e0e0:	bf18      	it	ne
 800e0e2:	f049 0902 	orrne.w	r9, r9, #2
 800e0e6:	f7ff fe21 	bl	800dd2c <rshift>
 800e0ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e0ee:	1b76      	subs	r6, r6, r5
 800e0f0:	2502      	movs	r5, #2
 800e0f2:	f1b9 0f00 	cmp.w	r9, #0
 800e0f6:	d047      	beq.n	800e188 <__gethex+0x38c>
 800e0f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d015      	beq.n	800e12c <__gethex+0x330>
 800e100:	2b03      	cmp	r3, #3
 800e102:	d017      	beq.n	800e134 <__gethex+0x338>
 800e104:	2b01      	cmp	r3, #1
 800e106:	d109      	bne.n	800e11c <__gethex+0x320>
 800e108:	f019 0f02 	tst.w	r9, #2
 800e10c:	d006      	beq.n	800e11c <__gethex+0x320>
 800e10e:	f8da 3000 	ldr.w	r3, [sl]
 800e112:	ea49 0903 	orr.w	r9, r9, r3
 800e116:	f019 0f01 	tst.w	r9, #1
 800e11a:	d10e      	bne.n	800e13a <__gethex+0x33e>
 800e11c:	f045 0510 	orr.w	r5, r5, #16
 800e120:	e032      	b.n	800e188 <__gethex+0x38c>
 800e122:	f04f 0901 	mov.w	r9, #1
 800e126:	e7d1      	b.n	800e0cc <__gethex+0x2d0>
 800e128:	2501      	movs	r5, #1
 800e12a:	e7e2      	b.n	800e0f2 <__gethex+0x2f6>
 800e12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e12e:	f1c3 0301 	rsb	r3, r3, #1
 800e132:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d0f0      	beq.n	800e11c <__gethex+0x320>
 800e13a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e13e:	f104 0314 	add.w	r3, r4, #20
 800e142:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e146:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e14a:	f04f 0c00 	mov.w	ip, #0
 800e14e:	4618      	mov	r0, r3
 800e150:	f853 2b04 	ldr.w	r2, [r3], #4
 800e154:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e158:	d01b      	beq.n	800e192 <__gethex+0x396>
 800e15a:	3201      	adds	r2, #1
 800e15c:	6002      	str	r2, [r0, #0]
 800e15e:	2d02      	cmp	r5, #2
 800e160:	f104 0314 	add.w	r3, r4, #20
 800e164:	d13c      	bne.n	800e1e0 <__gethex+0x3e4>
 800e166:	f8d8 2000 	ldr.w	r2, [r8]
 800e16a:	3a01      	subs	r2, #1
 800e16c:	42b2      	cmp	r2, r6
 800e16e:	d109      	bne.n	800e184 <__gethex+0x388>
 800e170:	1171      	asrs	r1, r6, #5
 800e172:	2201      	movs	r2, #1
 800e174:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e178:	f006 061f 	and.w	r6, r6, #31
 800e17c:	fa02 f606 	lsl.w	r6, r2, r6
 800e180:	421e      	tst	r6, r3
 800e182:	d13a      	bne.n	800e1fa <__gethex+0x3fe>
 800e184:	f045 0520 	orr.w	r5, r5, #32
 800e188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e18a:	601c      	str	r4, [r3, #0]
 800e18c:	9b02      	ldr	r3, [sp, #8]
 800e18e:	601f      	str	r7, [r3, #0]
 800e190:	e6b0      	b.n	800def4 <__gethex+0xf8>
 800e192:	4299      	cmp	r1, r3
 800e194:	f843 cc04 	str.w	ip, [r3, #-4]
 800e198:	d8d9      	bhi.n	800e14e <__gethex+0x352>
 800e19a:	68a3      	ldr	r3, [r4, #8]
 800e19c:	459b      	cmp	fp, r3
 800e19e:	db17      	blt.n	800e1d0 <__gethex+0x3d4>
 800e1a0:	6861      	ldr	r1, [r4, #4]
 800e1a2:	9801      	ldr	r0, [sp, #4]
 800e1a4:	3101      	adds	r1, #1
 800e1a6:	f000 f9c3 	bl	800e530 <_Balloc>
 800e1aa:	4681      	mov	r9, r0
 800e1ac:	b918      	cbnz	r0, 800e1b6 <__gethex+0x3ba>
 800e1ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e218 <__gethex+0x41c>)
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	2184      	movs	r1, #132	@ 0x84
 800e1b4:	e6c5      	b.n	800df42 <__gethex+0x146>
 800e1b6:	6922      	ldr	r2, [r4, #16]
 800e1b8:	3202      	adds	r2, #2
 800e1ba:	f104 010c 	add.w	r1, r4, #12
 800e1be:	0092      	lsls	r2, r2, #2
 800e1c0:	300c      	adds	r0, #12
 800e1c2:	f7fe fefe 	bl	800cfc2 <memcpy>
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	9801      	ldr	r0, [sp, #4]
 800e1ca:	f000 f9f1 	bl	800e5b0 <_Bfree>
 800e1ce:	464c      	mov	r4, r9
 800e1d0:	6923      	ldr	r3, [r4, #16]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e1d8:	6122      	str	r2, [r4, #16]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	615a      	str	r2, [r3, #20]
 800e1de:	e7be      	b.n	800e15e <__gethex+0x362>
 800e1e0:	6922      	ldr	r2, [r4, #16]
 800e1e2:	455a      	cmp	r2, fp
 800e1e4:	dd0b      	ble.n	800e1fe <__gethex+0x402>
 800e1e6:	2101      	movs	r1, #1
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f7ff fd9f 	bl	800dd2c <rshift>
 800e1ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1f2:	3701      	adds	r7, #1
 800e1f4:	42bb      	cmp	r3, r7
 800e1f6:	f6ff aee0 	blt.w	800dfba <__gethex+0x1be>
 800e1fa:	2501      	movs	r5, #1
 800e1fc:	e7c2      	b.n	800e184 <__gethex+0x388>
 800e1fe:	f016 061f 	ands.w	r6, r6, #31
 800e202:	d0fa      	beq.n	800e1fa <__gethex+0x3fe>
 800e204:	4453      	add	r3, sl
 800e206:	f1c6 0620 	rsb	r6, r6, #32
 800e20a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e20e:	f000 fa81 	bl	800e714 <__hi0bits>
 800e212:	42b0      	cmp	r0, r6
 800e214:	dbe7      	blt.n	800e1e6 <__gethex+0x3ea>
 800e216:	e7f0      	b.n	800e1fa <__gethex+0x3fe>
 800e218:	0800fbd5 	.word	0x0800fbd5

0800e21c <L_shift>:
 800e21c:	f1c2 0208 	rsb	r2, r2, #8
 800e220:	0092      	lsls	r2, r2, #2
 800e222:	b570      	push	{r4, r5, r6, lr}
 800e224:	f1c2 0620 	rsb	r6, r2, #32
 800e228:	6843      	ldr	r3, [r0, #4]
 800e22a:	6804      	ldr	r4, [r0, #0]
 800e22c:	fa03 f506 	lsl.w	r5, r3, r6
 800e230:	432c      	orrs	r4, r5
 800e232:	40d3      	lsrs	r3, r2
 800e234:	6004      	str	r4, [r0, #0]
 800e236:	f840 3f04 	str.w	r3, [r0, #4]!
 800e23a:	4288      	cmp	r0, r1
 800e23c:	d3f4      	bcc.n	800e228 <L_shift+0xc>
 800e23e:	bd70      	pop	{r4, r5, r6, pc}

0800e240 <__match>:
 800e240:	b530      	push	{r4, r5, lr}
 800e242:	6803      	ldr	r3, [r0, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e24a:	b914      	cbnz	r4, 800e252 <__match+0x12>
 800e24c:	6003      	str	r3, [r0, #0]
 800e24e:	2001      	movs	r0, #1
 800e250:	bd30      	pop	{r4, r5, pc}
 800e252:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e256:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e25a:	2d19      	cmp	r5, #25
 800e25c:	bf98      	it	ls
 800e25e:	3220      	addls	r2, #32
 800e260:	42a2      	cmp	r2, r4
 800e262:	d0f0      	beq.n	800e246 <__match+0x6>
 800e264:	2000      	movs	r0, #0
 800e266:	e7f3      	b.n	800e250 <__match+0x10>

0800e268 <__hexnan>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	680b      	ldr	r3, [r1, #0]
 800e26e:	6801      	ldr	r1, [r0, #0]
 800e270:	115e      	asrs	r6, r3, #5
 800e272:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e276:	f013 031f 	ands.w	r3, r3, #31
 800e27a:	b087      	sub	sp, #28
 800e27c:	bf18      	it	ne
 800e27e:	3604      	addne	r6, #4
 800e280:	2500      	movs	r5, #0
 800e282:	1f37      	subs	r7, r6, #4
 800e284:	4682      	mov	sl, r0
 800e286:	4690      	mov	r8, r2
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e28e:	46b9      	mov	r9, r7
 800e290:	463c      	mov	r4, r7
 800e292:	9502      	str	r5, [sp, #8]
 800e294:	46ab      	mov	fp, r5
 800e296:	784a      	ldrb	r2, [r1, #1]
 800e298:	1c4b      	adds	r3, r1, #1
 800e29a:	9303      	str	r3, [sp, #12]
 800e29c:	b342      	cbz	r2, 800e2f0 <__hexnan+0x88>
 800e29e:	4610      	mov	r0, r2
 800e2a0:	9105      	str	r1, [sp, #20]
 800e2a2:	9204      	str	r2, [sp, #16]
 800e2a4:	f7ff fd94 	bl	800ddd0 <__hexdig_fun>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d151      	bne.n	800e350 <__hexnan+0xe8>
 800e2ac:	9a04      	ldr	r2, [sp, #16]
 800e2ae:	9905      	ldr	r1, [sp, #20]
 800e2b0:	2a20      	cmp	r2, #32
 800e2b2:	d818      	bhi.n	800e2e6 <__hexnan+0x7e>
 800e2b4:	9b02      	ldr	r3, [sp, #8]
 800e2b6:	459b      	cmp	fp, r3
 800e2b8:	dd13      	ble.n	800e2e2 <__hexnan+0x7a>
 800e2ba:	454c      	cmp	r4, r9
 800e2bc:	d206      	bcs.n	800e2cc <__hexnan+0x64>
 800e2be:	2d07      	cmp	r5, #7
 800e2c0:	dc04      	bgt.n	800e2cc <__hexnan+0x64>
 800e2c2:	462a      	mov	r2, r5
 800e2c4:	4649      	mov	r1, r9
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f7ff ffa8 	bl	800e21c <L_shift>
 800e2cc:	4544      	cmp	r4, r8
 800e2ce:	d952      	bls.n	800e376 <__hexnan+0x10e>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	f1a4 0904 	sub.w	r9, r4, #4
 800e2d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2da:	f8cd b008 	str.w	fp, [sp, #8]
 800e2de:	464c      	mov	r4, r9
 800e2e0:	461d      	mov	r5, r3
 800e2e2:	9903      	ldr	r1, [sp, #12]
 800e2e4:	e7d7      	b.n	800e296 <__hexnan+0x2e>
 800e2e6:	2a29      	cmp	r2, #41	@ 0x29
 800e2e8:	d157      	bne.n	800e39a <__hexnan+0x132>
 800e2ea:	3102      	adds	r1, #2
 800e2ec:	f8ca 1000 	str.w	r1, [sl]
 800e2f0:	f1bb 0f00 	cmp.w	fp, #0
 800e2f4:	d051      	beq.n	800e39a <__hexnan+0x132>
 800e2f6:	454c      	cmp	r4, r9
 800e2f8:	d206      	bcs.n	800e308 <__hexnan+0xa0>
 800e2fa:	2d07      	cmp	r5, #7
 800e2fc:	dc04      	bgt.n	800e308 <__hexnan+0xa0>
 800e2fe:	462a      	mov	r2, r5
 800e300:	4649      	mov	r1, r9
 800e302:	4620      	mov	r0, r4
 800e304:	f7ff ff8a 	bl	800e21c <L_shift>
 800e308:	4544      	cmp	r4, r8
 800e30a:	d936      	bls.n	800e37a <__hexnan+0x112>
 800e30c:	f1a8 0204 	sub.w	r2, r8, #4
 800e310:	4623      	mov	r3, r4
 800e312:	f853 1b04 	ldr.w	r1, [r3], #4
 800e316:	f842 1f04 	str.w	r1, [r2, #4]!
 800e31a:	429f      	cmp	r7, r3
 800e31c:	d2f9      	bcs.n	800e312 <__hexnan+0xaa>
 800e31e:	1b3b      	subs	r3, r7, r4
 800e320:	f023 0303 	bic.w	r3, r3, #3
 800e324:	3304      	adds	r3, #4
 800e326:	3401      	adds	r4, #1
 800e328:	3e03      	subs	r6, #3
 800e32a:	42b4      	cmp	r4, r6
 800e32c:	bf88      	it	hi
 800e32e:	2304      	movhi	r3, #4
 800e330:	4443      	add	r3, r8
 800e332:	2200      	movs	r2, #0
 800e334:	f843 2b04 	str.w	r2, [r3], #4
 800e338:	429f      	cmp	r7, r3
 800e33a:	d2fb      	bcs.n	800e334 <__hexnan+0xcc>
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	b91b      	cbnz	r3, 800e348 <__hexnan+0xe0>
 800e340:	4547      	cmp	r7, r8
 800e342:	d128      	bne.n	800e396 <__hexnan+0x12e>
 800e344:	2301      	movs	r3, #1
 800e346:	603b      	str	r3, [r7, #0]
 800e348:	2005      	movs	r0, #5
 800e34a:	b007      	add	sp, #28
 800e34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e350:	3501      	adds	r5, #1
 800e352:	2d08      	cmp	r5, #8
 800e354:	f10b 0b01 	add.w	fp, fp, #1
 800e358:	dd06      	ble.n	800e368 <__hexnan+0x100>
 800e35a:	4544      	cmp	r4, r8
 800e35c:	d9c1      	bls.n	800e2e2 <__hexnan+0x7a>
 800e35e:	2300      	movs	r3, #0
 800e360:	f844 3c04 	str.w	r3, [r4, #-4]
 800e364:	2501      	movs	r5, #1
 800e366:	3c04      	subs	r4, #4
 800e368:	6822      	ldr	r2, [r4, #0]
 800e36a:	f000 000f 	and.w	r0, r0, #15
 800e36e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e372:	6020      	str	r0, [r4, #0]
 800e374:	e7b5      	b.n	800e2e2 <__hexnan+0x7a>
 800e376:	2508      	movs	r5, #8
 800e378:	e7b3      	b.n	800e2e2 <__hexnan+0x7a>
 800e37a:	9b01      	ldr	r3, [sp, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d0dd      	beq.n	800e33c <__hexnan+0xd4>
 800e380:	f1c3 0320 	rsb	r3, r3, #32
 800e384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e388:	40da      	lsrs	r2, r3
 800e38a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e38e:	4013      	ands	r3, r2
 800e390:	f846 3c04 	str.w	r3, [r6, #-4]
 800e394:	e7d2      	b.n	800e33c <__hexnan+0xd4>
 800e396:	3f04      	subs	r7, #4
 800e398:	e7d0      	b.n	800e33c <__hexnan+0xd4>
 800e39a:	2004      	movs	r0, #4
 800e39c:	e7d5      	b.n	800e34a <__hexnan+0xe2>
	...

0800e3a0 <malloc>:
 800e3a0:	4b02      	ldr	r3, [pc, #8]	@ (800e3ac <malloc+0xc>)
 800e3a2:	4601      	mov	r1, r0
 800e3a4:	6818      	ldr	r0, [r3, #0]
 800e3a6:	f000 b825 	b.w	800e3f4 <_malloc_r>
 800e3aa:	bf00      	nop
 800e3ac:	2000027c 	.word	0x2000027c

0800e3b0 <sbrk_aligned>:
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	4e0f      	ldr	r6, [pc, #60]	@ (800e3f0 <sbrk_aligned+0x40>)
 800e3b4:	460c      	mov	r4, r1
 800e3b6:	6831      	ldr	r1, [r6, #0]
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	b911      	cbnz	r1, 800e3c2 <sbrk_aligned+0x12>
 800e3bc:	f001 f810 	bl	800f3e0 <_sbrk_r>
 800e3c0:	6030      	str	r0, [r6, #0]
 800e3c2:	4621      	mov	r1, r4
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f001 f80b 	bl	800f3e0 <_sbrk_r>
 800e3ca:	1c43      	adds	r3, r0, #1
 800e3cc:	d103      	bne.n	800e3d6 <sbrk_aligned+0x26>
 800e3ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	bd70      	pop	{r4, r5, r6, pc}
 800e3d6:	1cc4      	adds	r4, r0, #3
 800e3d8:	f024 0403 	bic.w	r4, r4, #3
 800e3dc:	42a0      	cmp	r0, r4
 800e3de:	d0f8      	beq.n	800e3d2 <sbrk_aligned+0x22>
 800e3e0:	1a21      	subs	r1, r4, r0
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	f000 fffc 	bl	800f3e0 <_sbrk_r>
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d1f2      	bne.n	800e3d2 <sbrk_aligned+0x22>
 800e3ec:	e7ef      	b.n	800e3ce <sbrk_aligned+0x1e>
 800e3ee:	bf00      	nop
 800e3f0:	20002320 	.word	0x20002320

0800e3f4 <_malloc_r>:
 800e3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3f8:	1ccd      	adds	r5, r1, #3
 800e3fa:	f025 0503 	bic.w	r5, r5, #3
 800e3fe:	3508      	adds	r5, #8
 800e400:	2d0c      	cmp	r5, #12
 800e402:	bf38      	it	cc
 800e404:	250c      	movcc	r5, #12
 800e406:	2d00      	cmp	r5, #0
 800e408:	4606      	mov	r6, r0
 800e40a:	db01      	blt.n	800e410 <_malloc_r+0x1c>
 800e40c:	42a9      	cmp	r1, r5
 800e40e:	d904      	bls.n	800e41a <_malloc_r+0x26>
 800e410:	230c      	movs	r3, #12
 800e412:	6033      	str	r3, [r6, #0]
 800e414:	2000      	movs	r0, #0
 800e416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e41a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4f0 <_malloc_r+0xfc>
 800e41e:	f000 f87b 	bl	800e518 <__malloc_lock>
 800e422:	f8d8 3000 	ldr.w	r3, [r8]
 800e426:	461c      	mov	r4, r3
 800e428:	bb44      	cbnz	r4, 800e47c <_malloc_r+0x88>
 800e42a:	4629      	mov	r1, r5
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7ff ffbf 	bl	800e3b0 <sbrk_aligned>
 800e432:	1c43      	adds	r3, r0, #1
 800e434:	4604      	mov	r4, r0
 800e436:	d158      	bne.n	800e4ea <_malloc_r+0xf6>
 800e438:	f8d8 4000 	ldr.w	r4, [r8]
 800e43c:	4627      	mov	r7, r4
 800e43e:	2f00      	cmp	r7, #0
 800e440:	d143      	bne.n	800e4ca <_malloc_r+0xd6>
 800e442:	2c00      	cmp	r4, #0
 800e444:	d04b      	beq.n	800e4de <_malloc_r+0xea>
 800e446:	6823      	ldr	r3, [r4, #0]
 800e448:	4639      	mov	r1, r7
 800e44a:	4630      	mov	r0, r6
 800e44c:	eb04 0903 	add.w	r9, r4, r3
 800e450:	f000 ffc6 	bl	800f3e0 <_sbrk_r>
 800e454:	4581      	cmp	r9, r0
 800e456:	d142      	bne.n	800e4de <_malloc_r+0xea>
 800e458:	6821      	ldr	r1, [r4, #0]
 800e45a:	1a6d      	subs	r5, r5, r1
 800e45c:	4629      	mov	r1, r5
 800e45e:	4630      	mov	r0, r6
 800e460:	f7ff ffa6 	bl	800e3b0 <sbrk_aligned>
 800e464:	3001      	adds	r0, #1
 800e466:	d03a      	beq.n	800e4de <_malloc_r+0xea>
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	442b      	add	r3, r5
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	f8d8 3000 	ldr.w	r3, [r8]
 800e472:	685a      	ldr	r2, [r3, #4]
 800e474:	bb62      	cbnz	r2, 800e4d0 <_malloc_r+0xdc>
 800e476:	f8c8 7000 	str.w	r7, [r8]
 800e47a:	e00f      	b.n	800e49c <_malloc_r+0xa8>
 800e47c:	6822      	ldr	r2, [r4, #0]
 800e47e:	1b52      	subs	r2, r2, r5
 800e480:	d420      	bmi.n	800e4c4 <_malloc_r+0xd0>
 800e482:	2a0b      	cmp	r2, #11
 800e484:	d917      	bls.n	800e4b6 <_malloc_r+0xc2>
 800e486:	1961      	adds	r1, r4, r5
 800e488:	42a3      	cmp	r3, r4
 800e48a:	6025      	str	r5, [r4, #0]
 800e48c:	bf18      	it	ne
 800e48e:	6059      	strne	r1, [r3, #4]
 800e490:	6863      	ldr	r3, [r4, #4]
 800e492:	bf08      	it	eq
 800e494:	f8c8 1000 	streq.w	r1, [r8]
 800e498:	5162      	str	r2, [r4, r5]
 800e49a:	604b      	str	r3, [r1, #4]
 800e49c:	4630      	mov	r0, r6
 800e49e:	f000 f841 	bl	800e524 <__malloc_unlock>
 800e4a2:	f104 000b 	add.w	r0, r4, #11
 800e4a6:	1d23      	adds	r3, r4, #4
 800e4a8:	f020 0007 	bic.w	r0, r0, #7
 800e4ac:	1ac2      	subs	r2, r0, r3
 800e4ae:	bf1c      	itt	ne
 800e4b0:	1a1b      	subne	r3, r3, r0
 800e4b2:	50a3      	strne	r3, [r4, r2]
 800e4b4:	e7af      	b.n	800e416 <_malloc_r+0x22>
 800e4b6:	6862      	ldr	r2, [r4, #4]
 800e4b8:	42a3      	cmp	r3, r4
 800e4ba:	bf0c      	ite	eq
 800e4bc:	f8c8 2000 	streq.w	r2, [r8]
 800e4c0:	605a      	strne	r2, [r3, #4]
 800e4c2:	e7eb      	b.n	800e49c <_malloc_r+0xa8>
 800e4c4:	4623      	mov	r3, r4
 800e4c6:	6864      	ldr	r4, [r4, #4]
 800e4c8:	e7ae      	b.n	800e428 <_malloc_r+0x34>
 800e4ca:	463c      	mov	r4, r7
 800e4cc:	687f      	ldr	r7, [r7, #4]
 800e4ce:	e7b6      	b.n	800e43e <_malloc_r+0x4a>
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	42a3      	cmp	r3, r4
 800e4d6:	d1fb      	bne.n	800e4d0 <_malloc_r+0xdc>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	6053      	str	r3, [r2, #4]
 800e4dc:	e7de      	b.n	800e49c <_malloc_r+0xa8>
 800e4de:	230c      	movs	r3, #12
 800e4e0:	6033      	str	r3, [r6, #0]
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f000 f81e 	bl	800e524 <__malloc_unlock>
 800e4e8:	e794      	b.n	800e414 <_malloc_r+0x20>
 800e4ea:	6005      	str	r5, [r0, #0]
 800e4ec:	e7d6      	b.n	800e49c <_malloc_r+0xa8>
 800e4ee:	bf00      	nop
 800e4f0:	20002324 	.word	0x20002324

0800e4f4 <__ascii_mbtowc>:
 800e4f4:	b082      	sub	sp, #8
 800e4f6:	b901      	cbnz	r1, 800e4fa <__ascii_mbtowc+0x6>
 800e4f8:	a901      	add	r1, sp, #4
 800e4fa:	b142      	cbz	r2, 800e50e <__ascii_mbtowc+0x1a>
 800e4fc:	b14b      	cbz	r3, 800e512 <__ascii_mbtowc+0x1e>
 800e4fe:	7813      	ldrb	r3, [r2, #0]
 800e500:	600b      	str	r3, [r1, #0]
 800e502:	7812      	ldrb	r2, [r2, #0]
 800e504:	1e10      	subs	r0, r2, #0
 800e506:	bf18      	it	ne
 800e508:	2001      	movne	r0, #1
 800e50a:	b002      	add	sp, #8
 800e50c:	4770      	bx	lr
 800e50e:	4610      	mov	r0, r2
 800e510:	e7fb      	b.n	800e50a <__ascii_mbtowc+0x16>
 800e512:	f06f 0001 	mvn.w	r0, #1
 800e516:	e7f8      	b.n	800e50a <__ascii_mbtowc+0x16>

0800e518 <__malloc_lock>:
 800e518:	4801      	ldr	r0, [pc, #4]	@ (800e520 <__malloc_lock+0x8>)
 800e51a:	f7fe bd50 	b.w	800cfbe <__retarget_lock_acquire_recursive>
 800e51e:	bf00      	nop
 800e520:	2000231c 	.word	0x2000231c

0800e524 <__malloc_unlock>:
 800e524:	4801      	ldr	r0, [pc, #4]	@ (800e52c <__malloc_unlock+0x8>)
 800e526:	f7fe bd4b 	b.w	800cfc0 <__retarget_lock_release_recursive>
 800e52a:	bf00      	nop
 800e52c:	2000231c 	.word	0x2000231c

0800e530 <_Balloc>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	69c6      	ldr	r6, [r0, #28]
 800e534:	4604      	mov	r4, r0
 800e536:	460d      	mov	r5, r1
 800e538:	b976      	cbnz	r6, 800e558 <_Balloc+0x28>
 800e53a:	2010      	movs	r0, #16
 800e53c:	f7ff ff30 	bl	800e3a0 <malloc>
 800e540:	4602      	mov	r2, r0
 800e542:	61e0      	str	r0, [r4, #28]
 800e544:	b920      	cbnz	r0, 800e550 <_Balloc+0x20>
 800e546:	4b18      	ldr	r3, [pc, #96]	@ (800e5a8 <_Balloc+0x78>)
 800e548:	4818      	ldr	r0, [pc, #96]	@ (800e5ac <_Balloc+0x7c>)
 800e54a:	216b      	movs	r1, #107	@ 0x6b
 800e54c:	f000 ff58 	bl	800f400 <__assert_func>
 800e550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e554:	6006      	str	r6, [r0, #0]
 800e556:	60c6      	str	r6, [r0, #12]
 800e558:	69e6      	ldr	r6, [r4, #28]
 800e55a:	68f3      	ldr	r3, [r6, #12]
 800e55c:	b183      	cbz	r3, 800e580 <_Balloc+0x50>
 800e55e:	69e3      	ldr	r3, [r4, #28]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e566:	b9b8      	cbnz	r0, 800e598 <_Balloc+0x68>
 800e568:	2101      	movs	r1, #1
 800e56a:	fa01 f605 	lsl.w	r6, r1, r5
 800e56e:	1d72      	adds	r2, r6, #5
 800e570:	0092      	lsls	r2, r2, #2
 800e572:	4620      	mov	r0, r4
 800e574:	f000 ff62 	bl	800f43c <_calloc_r>
 800e578:	b160      	cbz	r0, 800e594 <_Balloc+0x64>
 800e57a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e57e:	e00e      	b.n	800e59e <_Balloc+0x6e>
 800e580:	2221      	movs	r2, #33	@ 0x21
 800e582:	2104      	movs	r1, #4
 800e584:	4620      	mov	r0, r4
 800e586:	f000 ff59 	bl	800f43c <_calloc_r>
 800e58a:	69e3      	ldr	r3, [r4, #28]
 800e58c:	60f0      	str	r0, [r6, #12]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1e4      	bne.n	800e55e <_Balloc+0x2e>
 800e594:	2000      	movs	r0, #0
 800e596:	bd70      	pop	{r4, r5, r6, pc}
 800e598:	6802      	ldr	r2, [r0, #0]
 800e59a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5a4:	e7f7      	b.n	800e596 <_Balloc+0x66>
 800e5a6:	bf00      	nop
 800e5a8:	0800fb66 	.word	0x0800fb66
 800e5ac:	0800fc46 	.word	0x0800fc46

0800e5b0 <_Bfree>:
 800e5b0:	b570      	push	{r4, r5, r6, lr}
 800e5b2:	69c6      	ldr	r6, [r0, #28]
 800e5b4:	4605      	mov	r5, r0
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	b976      	cbnz	r6, 800e5d8 <_Bfree+0x28>
 800e5ba:	2010      	movs	r0, #16
 800e5bc:	f7ff fef0 	bl	800e3a0 <malloc>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	61e8      	str	r0, [r5, #28]
 800e5c4:	b920      	cbnz	r0, 800e5d0 <_Bfree+0x20>
 800e5c6:	4b09      	ldr	r3, [pc, #36]	@ (800e5ec <_Bfree+0x3c>)
 800e5c8:	4809      	ldr	r0, [pc, #36]	@ (800e5f0 <_Bfree+0x40>)
 800e5ca:	218f      	movs	r1, #143	@ 0x8f
 800e5cc:	f000 ff18 	bl	800f400 <__assert_func>
 800e5d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5d4:	6006      	str	r6, [r0, #0]
 800e5d6:	60c6      	str	r6, [r0, #12]
 800e5d8:	b13c      	cbz	r4, 800e5ea <_Bfree+0x3a>
 800e5da:	69eb      	ldr	r3, [r5, #28]
 800e5dc:	6862      	ldr	r2, [r4, #4]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5e4:	6021      	str	r1, [r4, #0]
 800e5e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5ea:	bd70      	pop	{r4, r5, r6, pc}
 800e5ec:	0800fb66 	.word	0x0800fb66
 800e5f0:	0800fc46 	.word	0x0800fc46

0800e5f4 <__multadd>:
 800e5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f8:	690d      	ldr	r5, [r1, #16]
 800e5fa:	4607      	mov	r7, r0
 800e5fc:	460c      	mov	r4, r1
 800e5fe:	461e      	mov	r6, r3
 800e600:	f101 0c14 	add.w	ip, r1, #20
 800e604:	2000      	movs	r0, #0
 800e606:	f8dc 3000 	ldr.w	r3, [ip]
 800e60a:	b299      	uxth	r1, r3
 800e60c:	fb02 6101 	mla	r1, r2, r1, r6
 800e610:	0c1e      	lsrs	r6, r3, #16
 800e612:	0c0b      	lsrs	r3, r1, #16
 800e614:	fb02 3306 	mla	r3, r2, r6, r3
 800e618:	b289      	uxth	r1, r1
 800e61a:	3001      	adds	r0, #1
 800e61c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e620:	4285      	cmp	r5, r0
 800e622:	f84c 1b04 	str.w	r1, [ip], #4
 800e626:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e62a:	dcec      	bgt.n	800e606 <__multadd+0x12>
 800e62c:	b30e      	cbz	r6, 800e672 <__multadd+0x7e>
 800e62e:	68a3      	ldr	r3, [r4, #8]
 800e630:	42ab      	cmp	r3, r5
 800e632:	dc19      	bgt.n	800e668 <__multadd+0x74>
 800e634:	6861      	ldr	r1, [r4, #4]
 800e636:	4638      	mov	r0, r7
 800e638:	3101      	adds	r1, #1
 800e63a:	f7ff ff79 	bl	800e530 <_Balloc>
 800e63e:	4680      	mov	r8, r0
 800e640:	b928      	cbnz	r0, 800e64e <__multadd+0x5a>
 800e642:	4602      	mov	r2, r0
 800e644:	4b0c      	ldr	r3, [pc, #48]	@ (800e678 <__multadd+0x84>)
 800e646:	480d      	ldr	r0, [pc, #52]	@ (800e67c <__multadd+0x88>)
 800e648:	21ba      	movs	r1, #186	@ 0xba
 800e64a:	f000 fed9 	bl	800f400 <__assert_func>
 800e64e:	6922      	ldr	r2, [r4, #16]
 800e650:	3202      	adds	r2, #2
 800e652:	f104 010c 	add.w	r1, r4, #12
 800e656:	0092      	lsls	r2, r2, #2
 800e658:	300c      	adds	r0, #12
 800e65a:	f7fe fcb2 	bl	800cfc2 <memcpy>
 800e65e:	4621      	mov	r1, r4
 800e660:	4638      	mov	r0, r7
 800e662:	f7ff ffa5 	bl	800e5b0 <_Bfree>
 800e666:	4644      	mov	r4, r8
 800e668:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e66c:	3501      	adds	r5, #1
 800e66e:	615e      	str	r6, [r3, #20]
 800e670:	6125      	str	r5, [r4, #16]
 800e672:	4620      	mov	r0, r4
 800e674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e678:	0800fbd5 	.word	0x0800fbd5
 800e67c:	0800fc46 	.word	0x0800fc46

0800e680 <__s2b>:
 800e680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e684:	460c      	mov	r4, r1
 800e686:	4615      	mov	r5, r2
 800e688:	461f      	mov	r7, r3
 800e68a:	2209      	movs	r2, #9
 800e68c:	3308      	adds	r3, #8
 800e68e:	4606      	mov	r6, r0
 800e690:	fb93 f3f2 	sdiv	r3, r3, r2
 800e694:	2100      	movs	r1, #0
 800e696:	2201      	movs	r2, #1
 800e698:	429a      	cmp	r2, r3
 800e69a:	db09      	blt.n	800e6b0 <__s2b+0x30>
 800e69c:	4630      	mov	r0, r6
 800e69e:	f7ff ff47 	bl	800e530 <_Balloc>
 800e6a2:	b940      	cbnz	r0, 800e6b6 <__s2b+0x36>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	4b19      	ldr	r3, [pc, #100]	@ (800e70c <__s2b+0x8c>)
 800e6a8:	4819      	ldr	r0, [pc, #100]	@ (800e710 <__s2b+0x90>)
 800e6aa:	21d3      	movs	r1, #211	@ 0xd3
 800e6ac:	f000 fea8 	bl	800f400 <__assert_func>
 800e6b0:	0052      	lsls	r2, r2, #1
 800e6b2:	3101      	adds	r1, #1
 800e6b4:	e7f0      	b.n	800e698 <__s2b+0x18>
 800e6b6:	9b08      	ldr	r3, [sp, #32]
 800e6b8:	6143      	str	r3, [r0, #20]
 800e6ba:	2d09      	cmp	r5, #9
 800e6bc:	f04f 0301 	mov.w	r3, #1
 800e6c0:	6103      	str	r3, [r0, #16]
 800e6c2:	dd16      	ble.n	800e6f2 <__s2b+0x72>
 800e6c4:	f104 0909 	add.w	r9, r4, #9
 800e6c8:	46c8      	mov	r8, r9
 800e6ca:	442c      	add	r4, r5
 800e6cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e6d0:	4601      	mov	r1, r0
 800e6d2:	3b30      	subs	r3, #48	@ 0x30
 800e6d4:	220a      	movs	r2, #10
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	f7ff ff8c 	bl	800e5f4 <__multadd>
 800e6dc:	45a0      	cmp	r8, r4
 800e6de:	d1f5      	bne.n	800e6cc <__s2b+0x4c>
 800e6e0:	f1a5 0408 	sub.w	r4, r5, #8
 800e6e4:	444c      	add	r4, r9
 800e6e6:	1b2d      	subs	r5, r5, r4
 800e6e8:	1963      	adds	r3, r4, r5
 800e6ea:	42bb      	cmp	r3, r7
 800e6ec:	db04      	blt.n	800e6f8 <__s2b+0x78>
 800e6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6f2:	340a      	adds	r4, #10
 800e6f4:	2509      	movs	r5, #9
 800e6f6:	e7f6      	b.n	800e6e6 <__s2b+0x66>
 800e6f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e6fc:	4601      	mov	r1, r0
 800e6fe:	3b30      	subs	r3, #48	@ 0x30
 800e700:	220a      	movs	r2, #10
 800e702:	4630      	mov	r0, r6
 800e704:	f7ff ff76 	bl	800e5f4 <__multadd>
 800e708:	e7ee      	b.n	800e6e8 <__s2b+0x68>
 800e70a:	bf00      	nop
 800e70c:	0800fbd5 	.word	0x0800fbd5
 800e710:	0800fc46 	.word	0x0800fc46

0800e714 <__hi0bits>:
 800e714:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e718:	4603      	mov	r3, r0
 800e71a:	bf36      	itet	cc
 800e71c:	0403      	lslcc	r3, r0, #16
 800e71e:	2000      	movcs	r0, #0
 800e720:	2010      	movcc	r0, #16
 800e722:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e726:	bf3c      	itt	cc
 800e728:	021b      	lslcc	r3, r3, #8
 800e72a:	3008      	addcc	r0, #8
 800e72c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e730:	bf3c      	itt	cc
 800e732:	011b      	lslcc	r3, r3, #4
 800e734:	3004      	addcc	r0, #4
 800e736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e73a:	bf3c      	itt	cc
 800e73c:	009b      	lslcc	r3, r3, #2
 800e73e:	3002      	addcc	r0, #2
 800e740:	2b00      	cmp	r3, #0
 800e742:	db05      	blt.n	800e750 <__hi0bits+0x3c>
 800e744:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e748:	f100 0001 	add.w	r0, r0, #1
 800e74c:	bf08      	it	eq
 800e74e:	2020      	moveq	r0, #32
 800e750:	4770      	bx	lr

0800e752 <__lo0bits>:
 800e752:	6803      	ldr	r3, [r0, #0]
 800e754:	4602      	mov	r2, r0
 800e756:	f013 0007 	ands.w	r0, r3, #7
 800e75a:	d00b      	beq.n	800e774 <__lo0bits+0x22>
 800e75c:	07d9      	lsls	r1, r3, #31
 800e75e:	d421      	bmi.n	800e7a4 <__lo0bits+0x52>
 800e760:	0798      	lsls	r0, r3, #30
 800e762:	bf49      	itett	mi
 800e764:	085b      	lsrmi	r3, r3, #1
 800e766:	089b      	lsrpl	r3, r3, #2
 800e768:	2001      	movmi	r0, #1
 800e76a:	6013      	strmi	r3, [r2, #0]
 800e76c:	bf5c      	itt	pl
 800e76e:	6013      	strpl	r3, [r2, #0]
 800e770:	2002      	movpl	r0, #2
 800e772:	4770      	bx	lr
 800e774:	b299      	uxth	r1, r3
 800e776:	b909      	cbnz	r1, 800e77c <__lo0bits+0x2a>
 800e778:	0c1b      	lsrs	r3, r3, #16
 800e77a:	2010      	movs	r0, #16
 800e77c:	b2d9      	uxtb	r1, r3
 800e77e:	b909      	cbnz	r1, 800e784 <__lo0bits+0x32>
 800e780:	3008      	adds	r0, #8
 800e782:	0a1b      	lsrs	r3, r3, #8
 800e784:	0719      	lsls	r1, r3, #28
 800e786:	bf04      	itt	eq
 800e788:	091b      	lsreq	r3, r3, #4
 800e78a:	3004      	addeq	r0, #4
 800e78c:	0799      	lsls	r1, r3, #30
 800e78e:	bf04      	itt	eq
 800e790:	089b      	lsreq	r3, r3, #2
 800e792:	3002      	addeq	r0, #2
 800e794:	07d9      	lsls	r1, r3, #31
 800e796:	d403      	bmi.n	800e7a0 <__lo0bits+0x4e>
 800e798:	085b      	lsrs	r3, r3, #1
 800e79a:	f100 0001 	add.w	r0, r0, #1
 800e79e:	d003      	beq.n	800e7a8 <__lo0bits+0x56>
 800e7a0:	6013      	str	r3, [r2, #0]
 800e7a2:	4770      	bx	lr
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	4770      	bx	lr
 800e7a8:	2020      	movs	r0, #32
 800e7aa:	4770      	bx	lr

0800e7ac <__i2b>:
 800e7ac:	b510      	push	{r4, lr}
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	f7ff febd 	bl	800e530 <_Balloc>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	b928      	cbnz	r0, 800e7c6 <__i2b+0x1a>
 800e7ba:	4b05      	ldr	r3, [pc, #20]	@ (800e7d0 <__i2b+0x24>)
 800e7bc:	4805      	ldr	r0, [pc, #20]	@ (800e7d4 <__i2b+0x28>)
 800e7be:	f240 1145 	movw	r1, #325	@ 0x145
 800e7c2:	f000 fe1d 	bl	800f400 <__assert_func>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	6144      	str	r4, [r0, #20]
 800e7ca:	6103      	str	r3, [r0, #16]
 800e7cc:	bd10      	pop	{r4, pc}
 800e7ce:	bf00      	nop
 800e7d0:	0800fbd5 	.word	0x0800fbd5
 800e7d4:	0800fc46 	.word	0x0800fc46

0800e7d8 <__multiply>:
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	4614      	mov	r4, r2
 800e7de:	690a      	ldr	r2, [r1, #16]
 800e7e0:	6923      	ldr	r3, [r4, #16]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	bfa8      	it	ge
 800e7e6:	4623      	movge	r3, r4
 800e7e8:	460f      	mov	r7, r1
 800e7ea:	bfa4      	itt	ge
 800e7ec:	460c      	movge	r4, r1
 800e7ee:	461f      	movge	r7, r3
 800e7f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e7f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e7f8:	68a3      	ldr	r3, [r4, #8]
 800e7fa:	6861      	ldr	r1, [r4, #4]
 800e7fc:	eb0a 0609 	add.w	r6, sl, r9
 800e800:	42b3      	cmp	r3, r6
 800e802:	b085      	sub	sp, #20
 800e804:	bfb8      	it	lt
 800e806:	3101      	addlt	r1, #1
 800e808:	f7ff fe92 	bl	800e530 <_Balloc>
 800e80c:	b930      	cbnz	r0, 800e81c <__multiply+0x44>
 800e80e:	4602      	mov	r2, r0
 800e810:	4b44      	ldr	r3, [pc, #272]	@ (800e924 <__multiply+0x14c>)
 800e812:	4845      	ldr	r0, [pc, #276]	@ (800e928 <__multiply+0x150>)
 800e814:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e818:	f000 fdf2 	bl	800f400 <__assert_func>
 800e81c:	f100 0514 	add.w	r5, r0, #20
 800e820:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e824:	462b      	mov	r3, r5
 800e826:	2200      	movs	r2, #0
 800e828:	4543      	cmp	r3, r8
 800e82a:	d321      	bcc.n	800e870 <__multiply+0x98>
 800e82c:	f107 0114 	add.w	r1, r7, #20
 800e830:	f104 0214 	add.w	r2, r4, #20
 800e834:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e838:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e83c:	9302      	str	r3, [sp, #8]
 800e83e:	1b13      	subs	r3, r2, r4
 800e840:	3b15      	subs	r3, #21
 800e842:	f023 0303 	bic.w	r3, r3, #3
 800e846:	3304      	adds	r3, #4
 800e848:	f104 0715 	add.w	r7, r4, #21
 800e84c:	42ba      	cmp	r2, r7
 800e84e:	bf38      	it	cc
 800e850:	2304      	movcc	r3, #4
 800e852:	9301      	str	r3, [sp, #4]
 800e854:	9b02      	ldr	r3, [sp, #8]
 800e856:	9103      	str	r1, [sp, #12]
 800e858:	428b      	cmp	r3, r1
 800e85a:	d80c      	bhi.n	800e876 <__multiply+0x9e>
 800e85c:	2e00      	cmp	r6, #0
 800e85e:	dd03      	ble.n	800e868 <__multiply+0x90>
 800e860:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e864:	2b00      	cmp	r3, #0
 800e866:	d05b      	beq.n	800e920 <__multiply+0x148>
 800e868:	6106      	str	r6, [r0, #16]
 800e86a:	b005      	add	sp, #20
 800e86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e870:	f843 2b04 	str.w	r2, [r3], #4
 800e874:	e7d8      	b.n	800e828 <__multiply+0x50>
 800e876:	f8b1 a000 	ldrh.w	sl, [r1]
 800e87a:	f1ba 0f00 	cmp.w	sl, #0
 800e87e:	d024      	beq.n	800e8ca <__multiply+0xf2>
 800e880:	f104 0e14 	add.w	lr, r4, #20
 800e884:	46a9      	mov	r9, r5
 800e886:	f04f 0c00 	mov.w	ip, #0
 800e88a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e88e:	f8d9 3000 	ldr.w	r3, [r9]
 800e892:	fa1f fb87 	uxth.w	fp, r7
 800e896:	b29b      	uxth	r3, r3
 800e898:	fb0a 330b 	mla	r3, sl, fp, r3
 800e89c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e8a0:	f8d9 7000 	ldr.w	r7, [r9]
 800e8a4:	4463      	add	r3, ip
 800e8a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e8aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800e8ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e8b8:	4572      	cmp	r2, lr
 800e8ba:	f849 3b04 	str.w	r3, [r9], #4
 800e8be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e8c2:	d8e2      	bhi.n	800e88a <__multiply+0xb2>
 800e8c4:	9b01      	ldr	r3, [sp, #4]
 800e8c6:	f845 c003 	str.w	ip, [r5, r3]
 800e8ca:	9b03      	ldr	r3, [sp, #12]
 800e8cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e8d0:	3104      	adds	r1, #4
 800e8d2:	f1b9 0f00 	cmp.w	r9, #0
 800e8d6:	d021      	beq.n	800e91c <__multiply+0x144>
 800e8d8:	682b      	ldr	r3, [r5, #0]
 800e8da:	f104 0c14 	add.w	ip, r4, #20
 800e8de:	46ae      	mov	lr, r5
 800e8e0:	f04f 0a00 	mov.w	sl, #0
 800e8e4:	f8bc b000 	ldrh.w	fp, [ip]
 800e8e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e8ec:	fb09 770b 	mla	r7, r9, fp, r7
 800e8f0:	4457      	add	r7, sl
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e8f8:	f84e 3b04 	str.w	r3, [lr], #4
 800e8fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e904:	f8be 3000 	ldrh.w	r3, [lr]
 800e908:	fb09 330a 	mla	r3, r9, sl, r3
 800e90c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e910:	4562      	cmp	r2, ip
 800e912:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e916:	d8e5      	bhi.n	800e8e4 <__multiply+0x10c>
 800e918:	9f01      	ldr	r7, [sp, #4]
 800e91a:	51eb      	str	r3, [r5, r7]
 800e91c:	3504      	adds	r5, #4
 800e91e:	e799      	b.n	800e854 <__multiply+0x7c>
 800e920:	3e01      	subs	r6, #1
 800e922:	e79b      	b.n	800e85c <__multiply+0x84>
 800e924:	0800fbd5 	.word	0x0800fbd5
 800e928:	0800fc46 	.word	0x0800fc46

0800e92c <__pow5mult>:
 800e92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e930:	4615      	mov	r5, r2
 800e932:	f012 0203 	ands.w	r2, r2, #3
 800e936:	4607      	mov	r7, r0
 800e938:	460e      	mov	r6, r1
 800e93a:	d007      	beq.n	800e94c <__pow5mult+0x20>
 800e93c:	4c25      	ldr	r4, [pc, #148]	@ (800e9d4 <__pow5mult+0xa8>)
 800e93e:	3a01      	subs	r2, #1
 800e940:	2300      	movs	r3, #0
 800e942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e946:	f7ff fe55 	bl	800e5f4 <__multadd>
 800e94a:	4606      	mov	r6, r0
 800e94c:	10ad      	asrs	r5, r5, #2
 800e94e:	d03d      	beq.n	800e9cc <__pow5mult+0xa0>
 800e950:	69fc      	ldr	r4, [r7, #28]
 800e952:	b97c      	cbnz	r4, 800e974 <__pow5mult+0x48>
 800e954:	2010      	movs	r0, #16
 800e956:	f7ff fd23 	bl	800e3a0 <malloc>
 800e95a:	4602      	mov	r2, r0
 800e95c:	61f8      	str	r0, [r7, #28]
 800e95e:	b928      	cbnz	r0, 800e96c <__pow5mult+0x40>
 800e960:	4b1d      	ldr	r3, [pc, #116]	@ (800e9d8 <__pow5mult+0xac>)
 800e962:	481e      	ldr	r0, [pc, #120]	@ (800e9dc <__pow5mult+0xb0>)
 800e964:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e968:	f000 fd4a 	bl	800f400 <__assert_func>
 800e96c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e970:	6004      	str	r4, [r0, #0]
 800e972:	60c4      	str	r4, [r0, #12]
 800e974:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e97c:	b94c      	cbnz	r4, 800e992 <__pow5mult+0x66>
 800e97e:	f240 2171 	movw	r1, #625	@ 0x271
 800e982:	4638      	mov	r0, r7
 800e984:	f7ff ff12 	bl	800e7ac <__i2b>
 800e988:	2300      	movs	r3, #0
 800e98a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e98e:	4604      	mov	r4, r0
 800e990:	6003      	str	r3, [r0, #0]
 800e992:	f04f 0900 	mov.w	r9, #0
 800e996:	07eb      	lsls	r3, r5, #31
 800e998:	d50a      	bpl.n	800e9b0 <__pow5mult+0x84>
 800e99a:	4631      	mov	r1, r6
 800e99c:	4622      	mov	r2, r4
 800e99e:	4638      	mov	r0, r7
 800e9a0:	f7ff ff1a 	bl	800e7d8 <__multiply>
 800e9a4:	4631      	mov	r1, r6
 800e9a6:	4680      	mov	r8, r0
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	f7ff fe01 	bl	800e5b0 <_Bfree>
 800e9ae:	4646      	mov	r6, r8
 800e9b0:	106d      	asrs	r5, r5, #1
 800e9b2:	d00b      	beq.n	800e9cc <__pow5mult+0xa0>
 800e9b4:	6820      	ldr	r0, [r4, #0]
 800e9b6:	b938      	cbnz	r0, 800e9c8 <__pow5mult+0x9c>
 800e9b8:	4622      	mov	r2, r4
 800e9ba:	4621      	mov	r1, r4
 800e9bc:	4638      	mov	r0, r7
 800e9be:	f7ff ff0b 	bl	800e7d8 <__multiply>
 800e9c2:	6020      	str	r0, [r4, #0]
 800e9c4:	f8c0 9000 	str.w	r9, [r0]
 800e9c8:	4604      	mov	r4, r0
 800e9ca:	e7e4      	b.n	800e996 <__pow5mult+0x6a>
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9d2:	bf00      	nop
 800e9d4:	0800fca0 	.word	0x0800fca0
 800e9d8:	0800fb66 	.word	0x0800fb66
 800e9dc:	0800fc46 	.word	0x0800fc46

0800e9e0 <__lshift>:
 800e9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e4:	460c      	mov	r4, r1
 800e9e6:	6849      	ldr	r1, [r1, #4]
 800e9e8:	6923      	ldr	r3, [r4, #16]
 800e9ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9ee:	68a3      	ldr	r3, [r4, #8]
 800e9f0:	4607      	mov	r7, r0
 800e9f2:	4691      	mov	r9, r2
 800e9f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9f8:	f108 0601 	add.w	r6, r8, #1
 800e9fc:	42b3      	cmp	r3, r6
 800e9fe:	db0b      	blt.n	800ea18 <__lshift+0x38>
 800ea00:	4638      	mov	r0, r7
 800ea02:	f7ff fd95 	bl	800e530 <_Balloc>
 800ea06:	4605      	mov	r5, r0
 800ea08:	b948      	cbnz	r0, 800ea1e <__lshift+0x3e>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	4b28      	ldr	r3, [pc, #160]	@ (800eab0 <__lshift+0xd0>)
 800ea0e:	4829      	ldr	r0, [pc, #164]	@ (800eab4 <__lshift+0xd4>)
 800ea10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ea14:	f000 fcf4 	bl	800f400 <__assert_func>
 800ea18:	3101      	adds	r1, #1
 800ea1a:	005b      	lsls	r3, r3, #1
 800ea1c:	e7ee      	b.n	800e9fc <__lshift+0x1c>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	f100 0114 	add.w	r1, r0, #20
 800ea24:	f100 0210 	add.w	r2, r0, #16
 800ea28:	4618      	mov	r0, r3
 800ea2a:	4553      	cmp	r3, sl
 800ea2c:	db33      	blt.n	800ea96 <__lshift+0xb6>
 800ea2e:	6920      	ldr	r0, [r4, #16]
 800ea30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea34:	f104 0314 	add.w	r3, r4, #20
 800ea38:	f019 091f 	ands.w	r9, r9, #31
 800ea3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea44:	d02b      	beq.n	800ea9e <__lshift+0xbe>
 800ea46:	f1c9 0e20 	rsb	lr, r9, #32
 800ea4a:	468a      	mov	sl, r1
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	6818      	ldr	r0, [r3, #0]
 800ea50:	fa00 f009 	lsl.w	r0, r0, r9
 800ea54:	4310      	orrs	r0, r2
 800ea56:	f84a 0b04 	str.w	r0, [sl], #4
 800ea5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea5e:	459c      	cmp	ip, r3
 800ea60:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea64:	d8f3      	bhi.n	800ea4e <__lshift+0x6e>
 800ea66:	ebac 0304 	sub.w	r3, ip, r4
 800ea6a:	3b15      	subs	r3, #21
 800ea6c:	f023 0303 	bic.w	r3, r3, #3
 800ea70:	3304      	adds	r3, #4
 800ea72:	f104 0015 	add.w	r0, r4, #21
 800ea76:	4584      	cmp	ip, r0
 800ea78:	bf38      	it	cc
 800ea7a:	2304      	movcc	r3, #4
 800ea7c:	50ca      	str	r2, [r1, r3]
 800ea7e:	b10a      	cbz	r2, 800ea84 <__lshift+0xa4>
 800ea80:	f108 0602 	add.w	r6, r8, #2
 800ea84:	3e01      	subs	r6, #1
 800ea86:	4638      	mov	r0, r7
 800ea88:	612e      	str	r6, [r5, #16]
 800ea8a:	4621      	mov	r1, r4
 800ea8c:	f7ff fd90 	bl	800e5b0 <_Bfree>
 800ea90:	4628      	mov	r0, r5
 800ea92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea96:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	e7c5      	b.n	800ea2a <__lshift+0x4a>
 800ea9e:	3904      	subs	r1, #4
 800eaa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaa4:	f841 2f04 	str.w	r2, [r1, #4]!
 800eaa8:	459c      	cmp	ip, r3
 800eaaa:	d8f9      	bhi.n	800eaa0 <__lshift+0xc0>
 800eaac:	e7ea      	b.n	800ea84 <__lshift+0xa4>
 800eaae:	bf00      	nop
 800eab0:	0800fbd5 	.word	0x0800fbd5
 800eab4:	0800fc46 	.word	0x0800fc46

0800eab8 <__mcmp>:
 800eab8:	690a      	ldr	r2, [r1, #16]
 800eaba:	4603      	mov	r3, r0
 800eabc:	6900      	ldr	r0, [r0, #16]
 800eabe:	1a80      	subs	r0, r0, r2
 800eac0:	b530      	push	{r4, r5, lr}
 800eac2:	d10e      	bne.n	800eae2 <__mcmp+0x2a>
 800eac4:	3314      	adds	r3, #20
 800eac6:	3114      	adds	r1, #20
 800eac8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eacc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ead0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ead4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ead8:	4295      	cmp	r5, r2
 800eada:	d003      	beq.n	800eae4 <__mcmp+0x2c>
 800eadc:	d205      	bcs.n	800eaea <__mcmp+0x32>
 800eade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eae2:	bd30      	pop	{r4, r5, pc}
 800eae4:	42a3      	cmp	r3, r4
 800eae6:	d3f3      	bcc.n	800ead0 <__mcmp+0x18>
 800eae8:	e7fb      	b.n	800eae2 <__mcmp+0x2a>
 800eaea:	2001      	movs	r0, #1
 800eaec:	e7f9      	b.n	800eae2 <__mcmp+0x2a>
	...

0800eaf0 <__mdiff>:
 800eaf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf4:	4689      	mov	r9, r1
 800eaf6:	4606      	mov	r6, r0
 800eaf8:	4611      	mov	r1, r2
 800eafa:	4648      	mov	r0, r9
 800eafc:	4614      	mov	r4, r2
 800eafe:	f7ff ffdb 	bl	800eab8 <__mcmp>
 800eb02:	1e05      	subs	r5, r0, #0
 800eb04:	d112      	bne.n	800eb2c <__mdiff+0x3c>
 800eb06:	4629      	mov	r1, r5
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f7ff fd11 	bl	800e530 <_Balloc>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	b928      	cbnz	r0, 800eb1e <__mdiff+0x2e>
 800eb12:	4b3f      	ldr	r3, [pc, #252]	@ (800ec10 <__mdiff+0x120>)
 800eb14:	f240 2137 	movw	r1, #567	@ 0x237
 800eb18:	483e      	ldr	r0, [pc, #248]	@ (800ec14 <__mdiff+0x124>)
 800eb1a:	f000 fc71 	bl	800f400 <__assert_func>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb24:	4610      	mov	r0, r2
 800eb26:	b003      	add	sp, #12
 800eb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb2c:	bfbc      	itt	lt
 800eb2e:	464b      	movlt	r3, r9
 800eb30:	46a1      	movlt	r9, r4
 800eb32:	4630      	mov	r0, r6
 800eb34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eb38:	bfba      	itte	lt
 800eb3a:	461c      	movlt	r4, r3
 800eb3c:	2501      	movlt	r5, #1
 800eb3e:	2500      	movge	r5, #0
 800eb40:	f7ff fcf6 	bl	800e530 <_Balloc>
 800eb44:	4602      	mov	r2, r0
 800eb46:	b918      	cbnz	r0, 800eb50 <__mdiff+0x60>
 800eb48:	4b31      	ldr	r3, [pc, #196]	@ (800ec10 <__mdiff+0x120>)
 800eb4a:	f240 2145 	movw	r1, #581	@ 0x245
 800eb4e:	e7e3      	b.n	800eb18 <__mdiff+0x28>
 800eb50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eb54:	6926      	ldr	r6, [r4, #16]
 800eb56:	60c5      	str	r5, [r0, #12]
 800eb58:	f109 0310 	add.w	r3, r9, #16
 800eb5c:	f109 0514 	add.w	r5, r9, #20
 800eb60:	f104 0e14 	add.w	lr, r4, #20
 800eb64:	f100 0b14 	add.w	fp, r0, #20
 800eb68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eb6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	46d9      	mov	r9, fp
 800eb74:	f04f 0c00 	mov.w	ip, #0
 800eb78:	9b01      	ldr	r3, [sp, #4]
 800eb7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eb7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eb82:	9301      	str	r3, [sp, #4]
 800eb84:	fa1f f38a 	uxth.w	r3, sl
 800eb88:	4619      	mov	r1, r3
 800eb8a:	b283      	uxth	r3, r0
 800eb8c:	1acb      	subs	r3, r1, r3
 800eb8e:	0c00      	lsrs	r0, r0, #16
 800eb90:	4463      	add	r3, ip
 800eb92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eb96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eba0:	4576      	cmp	r6, lr
 800eba2:	f849 3b04 	str.w	r3, [r9], #4
 800eba6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ebaa:	d8e5      	bhi.n	800eb78 <__mdiff+0x88>
 800ebac:	1b33      	subs	r3, r6, r4
 800ebae:	3b15      	subs	r3, #21
 800ebb0:	f023 0303 	bic.w	r3, r3, #3
 800ebb4:	3415      	adds	r4, #21
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	42a6      	cmp	r6, r4
 800ebba:	bf38      	it	cc
 800ebbc:	2304      	movcc	r3, #4
 800ebbe:	441d      	add	r5, r3
 800ebc0:	445b      	add	r3, fp
 800ebc2:	461e      	mov	r6, r3
 800ebc4:	462c      	mov	r4, r5
 800ebc6:	4544      	cmp	r4, r8
 800ebc8:	d30e      	bcc.n	800ebe8 <__mdiff+0xf8>
 800ebca:	f108 0103 	add.w	r1, r8, #3
 800ebce:	1b49      	subs	r1, r1, r5
 800ebd0:	f021 0103 	bic.w	r1, r1, #3
 800ebd4:	3d03      	subs	r5, #3
 800ebd6:	45a8      	cmp	r8, r5
 800ebd8:	bf38      	it	cc
 800ebda:	2100      	movcc	r1, #0
 800ebdc:	440b      	add	r3, r1
 800ebde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebe2:	b191      	cbz	r1, 800ec0a <__mdiff+0x11a>
 800ebe4:	6117      	str	r7, [r2, #16]
 800ebe6:	e79d      	b.n	800eb24 <__mdiff+0x34>
 800ebe8:	f854 1b04 	ldr.w	r1, [r4], #4
 800ebec:	46e6      	mov	lr, ip
 800ebee:	0c08      	lsrs	r0, r1, #16
 800ebf0:	fa1c fc81 	uxtah	ip, ip, r1
 800ebf4:	4471      	add	r1, lr
 800ebf6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ebfa:	b289      	uxth	r1, r1
 800ebfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ec00:	f846 1b04 	str.w	r1, [r6], #4
 800ec04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec08:	e7dd      	b.n	800ebc6 <__mdiff+0xd6>
 800ec0a:	3f01      	subs	r7, #1
 800ec0c:	e7e7      	b.n	800ebde <__mdiff+0xee>
 800ec0e:	bf00      	nop
 800ec10:	0800fbd5 	.word	0x0800fbd5
 800ec14:	0800fc46 	.word	0x0800fc46

0800ec18 <__ulp>:
 800ec18:	b082      	sub	sp, #8
 800ec1a:	ed8d 0b00 	vstr	d0, [sp]
 800ec1e:	9a01      	ldr	r2, [sp, #4]
 800ec20:	4b0f      	ldr	r3, [pc, #60]	@ (800ec60 <__ulp+0x48>)
 800ec22:	4013      	ands	r3, r2
 800ec24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	dc08      	bgt.n	800ec3e <__ulp+0x26>
 800ec2c:	425b      	negs	r3, r3
 800ec2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ec32:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec36:	da04      	bge.n	800ec42 <__ulp+0x2a>
 800ec38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ec3c:	4113      	asrs	r3, r2
 800ec3e:	2200      	movs	r2, #0
 800ec40:	e008      	b.n	800ec54 <__ulp+0x3c>
 800ec42:	f1a2 0314 	sub.w	r3, r2, #20
 800ec46:	2b1e      	cmp	r3, #30
 800ec48:	bfda      	itte	le
 800ec4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ec4e:	40da      	lsrle	r2, r3
 800ec50:	2201      	movgt	r2, #1
 800ec52:	2300      	movs	r3, #0
 800ec54:	4619      	mov	r1, r3
 800ec56:	4610      	mov	r0, r2
 800ec58:	ec41 0b10 	vmov	d0, r0, r1
 800ec5c:	b002      	add	sp, #8
 800ec5e:	4770      	bx	lr
 800ec60:	7ff00000 	.word	0x7ff00000

0800ec64 <__b2d>:
 800ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec68:	6906      	ldr	r6, [r0, #16]
 800ec6a:	f100 0814 	add.w	r8, r0, #20
 800ec6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ec72:	1f37      	subs	r7, r6, #4
 800ec74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec78:	4610      	mov	r0, r2
 800ec7a:	f7ff fd4b 	bl	800e714 <__hi0bits>
 800ec7e:	f1c0 0320 	rsb	r3, r0, #32
 800ec82:	280a      	cmp	r0, #10
 800ec84:	600b      	str	r3, [r1, #0]
 800ec86:	491b      	ldr	r1, [pc, #108]	@ (800ecf4 <__b2d+0x90>)
 800ec88:	dc15      	bgt.n	800ecb6 <__b2d+0x52>
 800ec8a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ec8e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ec92:	45b8      	cmp	r8, r7
 800ec94:	ea43 0501 	orr.w	r5, r3, r1
 800ec98:	bf34      	ite	cc
 800ec9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec9e:	2300      	movcs	r3, #0
 800eca0:	3015      	adds	r0, #21
 800eca2:	fa02 f000 	lsl.w	r0, r2, r0
 800eca6:	fa23 f30c 	lsr.w	r3, r3, ip
 800ecaa:	4303      	orrs	r3, r0
 800ecac:	461c      	mov	r4, r3
 800ecae:	ec45 4b10 	vmov	d0, r4, r5
 800ecb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb6:	45b8      	cmp	r8, r7
 800ecb8:	bf3a      	itte	cc
 800ecba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ecbe:	f1a6 0708 	subcc.w	r7, r6, #8
 800ecc2:	2300      	movcs	r3, #0
 800ecc4:	380b      	subs	r0, #11
 800ecc6:	d012      	beq.n	800ecee <__b2d+0x8a>
 800ecc8:	f1c0 0120 	rsb	r1, r0, #32
 800eccc:	fa23 f401 	lsr.w	r4, r3, r1
 800ecd0:	4082      	lsls	r2, r0
 800ecd2:	4322      	orrs	r2, r4
 800ecd4:	4547      	cmp	r7, r8
 800ecd6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ecda:	bf8c      	ite	hi
 800ecdc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ece0:	2200      	movls	r2, #0
 800ece2:	4083      	lsls	r3, r0
 800ece4:	40ca      	lsrs	r2, r1
 800ece6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ecea:	4313      	orrs	r3, r2
 800ecec:	e7de      	b.n	800ecac <__b2d+0x48>
 800ecee:	ea42 0501 	orr.w	r5, r2, r1
 800ecf2:	e7db      	b.n	800ecac <__b2d+0x48>
 800ecf4:	3ff00000 	.word	0x3ff00000

0800ecf8 <__d2b>:
 800ecf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecfc:	460f      	mov	r7, r1
 800ecfe:	2101      	movs	r1, #1
 800ed00:	ec59 8b10 	vmov	r8, r9, d0
 800ed04:	4616      	mov	r6, r2
 800ed06:	f7ff fc13 	bl	800e530 <_Balloc>
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	b930      	cbnz	r0, 800ed1c <__d2b+0x24>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	4b23      	ldr	r3, [pc, #140]	@ (800eda0 <__d2b+0xa8>)
 800ed12:	4824      	ldr	r0, [pc, #144]	@ (800eda4 <__d2b+0xac>)
 800ed14:	f240 310f 	movw	r1, #783	@ 0x30f
 800ed18:	f000 fb72 	bl	800f400 <__assert_func>
 800ed1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed24:	b10d      	cbz	r5, 800ed2a <__d2b+0x32>
 800ed26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed2a:	9301      	str	r3, [sp, #4]
 800ed2c:	f1b8 0300 	subs.w	r3, r8, #0
 800ed30:	d023      	beq.n	800ed7a <__d2b+0x82>
 800ed32:	4668      	mov	r0, sp
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	f7ff fd0c 	bl	800e752 <__lo0bits>
 800ed3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed3e:	b1d0      	cbz	r0, 800ed76 <__d2b+0x7e>
 800ed40:	f1c0 0320 	rsb	r3, r0, #32
 800ed44:	fa02 f303 	lsl.w	r3, r2, r3
 800ed48:	430b      	orrs	r3, r1
 800ed4a:	40c2      	lsrs	r2, r0
 800ed4c:	6163      	str	r3, [r4, #20]
 800ed4e:	9201      	str	r2, [sp, #4]
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	61a3      	str	r3, [r4, #24]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	bf0c      	ite	eq
 800ed58:	2201      	moveq	r2, #1
 800ed5a:	2202      	movne	r2, #2
 800ed5c:	6122      	str	r2, [r4, #16]
 800ed5e:	b1a5      	cbz	r5, 800ed8a <__d2b+0x92>
 800ed60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed64:	4405      	add	r5, r0
 800ed66:	603d      	str	r5, [r7, #0]
 800ed68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed6c:	6030      	str	r0, [r6, #0]
 800ed6e:	4620      	mov	r0, r4
 800ed70:	b003      	add	sp, #12
 800ed72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed76:	6161      	str	r1, [r4, #20]
 800ed78:	e7ea      	b.n	800ed50 <__d2b+0x58>
 800ed7a:	a801      	add	r0, sp, #4
 800ed7c:	f7ff fce9 	bl	800e752 <__lo0bits>
 800ed80:	9b01      	ldr	r3, [sp, #4]
 800ed82:	6163      	str	r3, [r4, #20]
 800ed84:	3020      	adds	r0, #32
 800ed86:	2201      	movs	r2, #1
 800ed88:	e7e8      	b.n	800ed5c <__d2b+0x64>
 800ed8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ed92:	6038      	str	r0, [r7, #0]
 800ed94:	6918      	ldr	r0, [r3, #16]
 800ed96:	f7ff fcbd 	bl	800e714 <__hi0bits>
 800ed9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed9e:	e7e5      	b.n	800ed6c <__d2b+0x74>
 800eda0:	0800fbd5 	.word	0x0800fbd5
 800eda4:	0800fc46 	.word	0x0800fc46

0800eda8 <__ratio>:
 800eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	b085      	sub	sp, #20
 800edae:	e9cd 1000 	strd	r1, r0, [sp]
 800edb2:	a902      	add	r1, sp, #8
 800edb4:	f7ff ff56 	bl	800ec64 <__b2d>
 800edb8:	9800      	ldr	r0, [sp, #0]
 800edba:	a903      	add	r1, sp, #12
 800edbc:	ec55 4b10 	vmov	r4, r5, d0
 800edc0:	f7ff ff50 	bl	800ec64 <__b2d>
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	6919      	ldr	r1, [r3, #16]
 800edc8:	9b00      	ldr	r3, [sp, #0]
 800edca:	691b      	ldr	r3, [r3, #16]
 800edcc:	1ac9      	subs	r1, r1, r3
 800edce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800edd2:	1a9b      	subs	r3, r3, r2
 800edd4:	ec5b ab10 	vmov	sl, fp, d0
 800edd8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eddc:	2b00      	cmp	r3, #0
 800edde:	bfce      	itee	gt
 800ede0:	462a      	movgt	r2, r5
 800ede2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ede6:	465a      	movle	r2, fp
 800ede8:	462f      	mov	r7, r5
 800edea:	46d9      	mov	r9, fp
 800edec:	bfcc      	ite	gt
 800edee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800edf2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800edf6:	464b      	mov	r3, r9
 800edf8:	4652      	mov	r2, sl
 800edfa:	4620      	mov	r0, r4
 800edfc:	4639      	mov	r1, r7
 800edfe:	f7f1 fd2d 	bl	800085c <__aeabi_ddiv>
 800ee02:	ec41 0b10 	vmov	d0, r0, r1
 800ee06:	b005      	add	sp, #20
 800ee08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee0c <__copybits>:
 800ee0c:	3901      	subs	r1, #1
 800ee0e:	b570      	push	{r4, r5, r6, lr}
 800ee10:	1149      	asrs	r1, r1, #5
 800ee12:	6914      	ldr	r4, [r2, #16]
 800ee14:	3101      	adds	r1, #1
 800ee16:	f102 0314 	add.w	r3, r2, #20
 800ee1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee22:	1f05      	subs	r5, r0, #4
 800ee24:	42a3      	cmp	r3, r4
 800ee26:	d30c      	bcc.n	800ee42 <__copybits+0x36>
 800ee28:	1aa3      	subs	r3, r4, r2
 800ee2a:	3b11      	subs	r3, #17
 800ee2c:	f023 0303 	bic.w	r3, r3, #3
 800ee30:	3211      	adds	r2, #17
 800ee32:	42a2      	cmp	r2, r4
 800ee34:	bf88      	it	hi
 800ee36:	2300      	movhi	r3, #0
 800ee38:	4418      	add	r0, r3
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	4288      	cmp	r0, r1
 800ee3e:	d305      	bcc.n	800ee4c <__copybits+0x40>
 800ee40:	bd70      	pop	{r4, r5, r6, pc}
 800ee42:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee46:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee4a:	e7eb      	b.n	800ee24 <__copybits+0x18>
 800ee4c:	f840 3b04 	str.w	r3, [r0], #4
 800ee50:	e7f4      	b.n	800ee3c <__copybits+0x30>

0800ee52 <__any_on>:
 800ee52:	f100 0214 	add.w	r2, r0, #20
 800ee56:	6900      	ldr	r0, [r0, #16]
 800ee58:	114b      	asrs	r3, r1, #5
 800ee5a:	4298      	cmp	r0, r3
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	db11      	blt.n	800ee84 <__any_on+0x32>
 800ee60:	dd0a      	ble.n	800ee78 <__any_on+0x26>
 800ee62:	f011 011f 	ands.w	r1, r1, #31
 800ee66:	d007      	beq.n	800ee78 <__any_on+0x26>
 800ee68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee6c:	fa24 f001 	lsr.w	r0, r4, r1
 800ee70:	fa00 f101 	lsl.w	r1, r0, r1
 800ee74:	428c      	cmp	r4, r1
 800ee76:	d10b      	bne.n	800ee90 <__any_on+0x3e>
 800ee78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d803      	bhi.n	800ee88 <__any_on+0x36>
 800ee80:	2000      	movs	r0, #0
 800ee82:	bd10      	pop	{r4, pc}
 800ee84:	4603      	mov	r3, r0
 800ee86:	e7f7      	b.n	800ee78 <__any_on+0x26>
 800ee88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee8c:	2900      	cmp	r1, #0
 800ee8e:	d0f5      	beq.n	800ee7c <__any_on+0x2a>
 800ee90:	2001      	movs	r0, #1
 800ee92:	e7f6      	b.n	800ee82 <__any_on+0x30>

0800ee94 <_strtol_l.constprop.0>:
 800ee94:	2b24      	cmp	r3, #36	@ 0x24
 800ee96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee9a:	4686      	mov	lr, r0
 800ee9c:	4690      	mov	r8, r2
 800ee9e:	d801      	bhi.n	800eea4 <_strtol_l.constprop.0+0x10>
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d106      	bne.n	800eeb2 <_strtol_l.constprop.0+0x1e>
 800eea4:	f7fe f860 	bl	800cf68 <__errno>
 800eea8:	2316      	movs	r3, #22
 800eeaa:	6003      	str	r3, [r0, #0]
 800eeac:	2000      	movs	r0, #0
 800eeae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb2:	4834      	ldr	r0, [pc, #208]	@ (800ef84 <_strtol_l.constprop.0+0xf0>)
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	462a      	mov	r2, r5
 800eeb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eebc:	5d06      	ldrb	r6, [r0, r4]
 800eebe:	f016 0608 	ands.w	r6, r6, #8
 800eec2:	d1f8      	bne.n	800eeb6 <_strtol_l.constprop.0+0x22>
 800eec4:	2c2d      	cmp	r4, #45	@ 0x2d
 800eec6:	d12d      	bne.n	800ef24 <_strtol_l.constprop.0+0x90>
 800eec8:	782c      	ldrb	r4, [r5, #0]
 800eeca:	2601      	movs	r6, #1
 800eecc:	1c95      	adds	r5, r2, #2
 800eece:	f033 0210 	bics.w	r2, r3, #16
 800eed2:	d109      	bne.n	800eee8 <_strtol_l.constprop.0+0x54>
 800eed4:	2c30      	cmp	r4, #48	@ 0x30
 800eed6:	d12a      	bne.n	800ef2e <_strtol_l.constprop.0+0x9a>
 800eed8:	782a      	ldrb	r2, [r5, #0]
 800eeda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eede:	2a58      	cmp	r2, #88	@ 0x58
 800eee0:	d125      	bne.n	800ef2e <_strtol_l.constprop.0+0x9a>
 800eee2:	786c      	ldrb	r4, [r5, #1]
 800eee4:	2310      	movs	r3, #16
 800eee6:	3502      	adds	r5, #2
 800eee8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eeec:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800eef0:	2200      	movs	r2, #0
 800eef2:	fbbc f9f3 	udiv	r9, ip, r3
 800eef6:	4610      	mov	r0, r2
 800eef8:	fb03 ca19 	mls	sl, r3, r9, ip
 800eefc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ef00:	2f09      	cmp	r7, #9
 800ef02:	d81b      	bhi.n	800ef3c <_strtol_l.constprop.0+0xa8>
 800ef04:	463c      	mov	r4, r7
 800ef06:	42a3      	cmp	r3, r4
 800ef08:	dd27      	ble.n	800ef5a <_strtol_l.constprop.0+0xc6>
 800ef0a:	1c57      	adds	r7, r2, #1
 800ef0c:	d007      	beq.n	800ef1e <_strtol_l.constprop.0+0x8a>
 800ef0e:	4581      	cmp	r9, r0
 800ef10:	d320      	bcc.n	800ef54 <_strtol_l.constprop.0+0xc0>
 800ef12:	d101      	bne.n	800ef18 <_strtol_l.constprop.0+0x84>
 800ef14:	45a2      	cmp	sl, r4
 800ef16:	db1d      	blt.n	800ef54 <_strtol_l.constprop.0+0xc0>
 800ef18:	fb00 4003 	mla	r0, r0, r3, r4
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef22:	e7eb      	b.n	800eefc <_strtol_l.constprop.0+0x68>
 800ef24:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef26:	bf04      	itt	eq
 800ef28:	782c      	ldrbeq	r4, [r5, #0]
 800ef2a:	1c95      	addeq	r5, r2, #2
 800ef2c:	e7cf      	b.n	800eece <_strtol_l.constprop.0+0x3a>
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1da      	bne.n	800eee8 <_strtol_l.constprop.0+0x54>
 800ef32:	2c30      	cmp	r4, #48	@ 0x30
 800ef34:	bf0c      	ite	eq
 800ef36:	2308      	moveq	r3, #8
 800ef38:	230a      	movne	r3, #10
 800ef3a:	e7d5      	b.n	800eee8 <_strtol_l.constprop.0+0x54>
 800ef3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ef40:	2f19      	cmp	r7, #25
 800ef42:	d801      	bhi.n	800ef48 <_strtol_l.constprop.0+0xb4>
 800ef44:	3c37      	subs	r4, #55	@ 0x37
 800ef46:	e7de      	b.n	800ef06 <_strtol_l.constprop.0+0x72>
 800ef48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ef4c:	2f19      	cmp	r7, #25
 800ef4e:	d804      	bhi.n	800ef5a <_strtol_l.constprop.0+0xc6>
 800ef50:	3c57      	subs	r4, #87	@ 0x57
 800ef52:	e7d8      	b.n	800ef06 <_strtol_l.constprop.0+0x72>
 800ef54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef58:	e7e1      	b.n	800ef1e <_strtol_l.constprop.0+0x8a>
 800ef5a:	1c53      	adds	r3, r2, #1
 800ef5c:	d108      	bne.n	800ef70 <_strtol_l.constprop.0+0xdc>
 800ef5e:	2322      	movs	r3, #34	@ 0x22
 800ef60:	f8ce 3000 	str.w	r3, [lr]
 800ef64:	4660      	mov	r0, ip
 800ef66:	f1b8 0f00 	cmp.w	r8, #0
 800ef6a:	d0a0      	beq.n	800eeae <_strtol_l.constprop.0+0x1a>
 800ef6c:	1e69      	subs	r1, r5, #1
 800ef6e:	e006      	b.n	800ef7e <_strtol_l.constprop.0+0xea>
 800ef70:	b106      	cbz	r6, 800ef74 <_strtol_l.constprop.0+0xe0>
 800ef72:	4240      	negs	r0, r0
 800ef74:	f1b8 0f00 	cmp.w	r8, #0
 800ef78:	d099      	beq.n	800eeae <_strtol_l.constprop.0+0x1a>
 800ef7a:	2a00      	cmp	r2, #0
 800ef7c:	d1f6      	bne.n	800ef6c <_strtol_l.constprop.0+0xd8>
 800ef7e:	f8c8 1000 	str.w	r1, [r8]
 800ef82:	e794      	b.n	800eeae <_strtol_l.constprop.0+0x1a>
 800ef84:	0800fda1 	.word	0x0800fda1

0800ef88 <_strtol_r>:
 800ef88:	f7ff bf84 	b.w	800ee94 <_strtol_l.constprop.0>

0800ef8c <__ascii_wctomb>:
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	4608      	mov	r0, r1
 800ef90:	b141      	cbz	r1, 800efa4 <__ascii_wctomb+0x18>
 800ef92:	2aff      	cmp	r2, #255	@ 0xff
 800ef94:	d904      	bls.n	800efa0 <__ascii_wctomb+0x14>
 800ef96:	228a      	movs	r2, #138	@ 0x8a
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef9e:	4770      	bx	lr
 800efa0:	700a      	strb	r2, [r1, #0]
 800efa2:	2001      	movs	r0, #1
 800efa4:	4770      	bx	lr

0800efa6 <__ssputs_r>:
 800efa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efaa:	688e      	ldr	r6, [r1, #8]
 800efac:	461f      	mov	r7, r3
 800efae:	42be      	cmp	r6, r7
 800efb0:	680b      	ldr	r3, [r1, #0]
 800efb2:	4682      	mov	sl, r0
 800efb4:	460c      	mov	r4, r1
 800efb6:	4690      	mov	r8, r2
 800efb8:	d82d      	bhi.n	800f016 <__ssputs_r+0x70>
 800efba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800efbe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800efc2:	d026      	beq.n	800f012 <__ssputs_r+0x6c>
 800efc4:	6965      	ldr	r5, [r4, #20]
 800efc6:	6909      	ldr	r1, [r1, #16]
 800efc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800efcc:	eba3 0901 	sub.w	r9, r3, r1
 800efd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800efd4:	1c7b      	adds	r3, r7, #1
 800efd6:	444b      	add	r3, r9
 800efd8:	106d      	asrs	r5, r5, #1
 800efda:	429d      	cmp	r5, r3
 800efdc:	bf38      	it	cc
 800efde:	461d      	movcc	r5, r3
 800efe0:	0553      	lsls	r3, r2, #21
 800efe2:	d527      	bpl.n	800f034 <__ssputs_r+0x8e>
 800efe4:	4629      	mov	r1, r5
 800efe6:	f7ff fa05 	bl	800e3f4 <_malloc_r>
 800efea:	4606      	mov	r6, r0
 800efec:	b360      	cbz	r0, 800f048 <__ssputs_r+0xa2>
 800efee:	6921      	ldr	r1, [r4, #16]
 800eff0:	464a      	mov	r2, r9
 800eff2:	f7fd ffe6 	bl	800cfc2 <memcpy>
 800eff6:	89a3      	ldrh	r3, [r4, #12]
 800eff8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800effc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f000:	81a3      	strh	r3, [r4, #12]
 800f002:	6126      	str	r6, [r4, #16]
 800f004:	6165      	str	r5, [r4, #20]
 800f006:	444e      	add	r6, r9
 800f008:	eba5 0509 	sub.w	r5, r5, r9
 800f00c:	6026      	str	r6, [r4, #0]
 800f00e:	60a5      	str	r5, [r4, #8]
 800f010:	463e      	mov	r6, r7
 800f012:	42be      	cmp	r6, r7
 800f014:	d900      	bls.n	800f018 <__ssputs_r+0x72>
 800f016:	463e      	mov	r6, r7
 800f018:	6820      	ldr	r0, [r4, #0]
 800f01a:	4632      	mov	r2, r6
 800f01c:	4641      	mov	r1, r8
 800f01e:	f000 f9c5 	bl	800f3ac <memmove>
 800f022:	68a3      	ldr	r3, [r4, #8]
 800f024:	1b9b      	subs	r3, r3, r6
 800f026:	60a3      	str	r3, [r4, #8]
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	4433      	add	r3, r6
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	2000      	movs	r0, #0
 800f030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f034:	462a      	mov	r2, r5
 800f036:	f000 fa15 	bl	800f464 <_realloc_r>
 800f03a:	4606      	mov	r6, r0
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d1e0      	bne.n	800f002 <__ssputs_r+0x5c>
 800f040:	6921      	ldr	r1, [r4, #16]
 800f042:	4650      	mov	r0, sl
 800f044:	f7fe fe28 	bl	800dc98 <_free_r>
 800f048:	230c      	movs	r3, #12
 800f04a:	f8ca 3000 	str.w	r3, [sl]
 800f04e:	89a3      	ldrh	r3, [r4, #12]
 800f050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f054:	81a3      	strh	r3, [r4, #12]
 800f056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f05a:	e7e9      	b.n	800f030 <__ssputs_r+0x8a>

0800f05c <_svfiprintf_r>:
 800f05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f060:	4698      	mov	r8, r3
 800f062:	898b      	ldrh	r3, [r1, #12]
 800f064:	061b      	lsls	r3, r3, #24
 800f066:	b09d      	sub	sp, #116	@ 0x74
 800f068:	4607      	mov	r7, r0
 800f06a:	460d      	mov	r5, r1
 800f06c:	4614      	mov	r4, r2
 800f06e:	d510      	bpl.n	800f092 <_svfiprintf_r+0x36>
 800f070:	690b      	ldr	r3, [r1, #16]
 800f072:	b973      	cbnz	r3, 800f092 <_svfiprintf_r+0x36>
 800f074:	2140      	movs	r1, #64	@ 0x40
 800f076:	f7ff f9bd 	bl	800e3f4 <_malloc_r>
 800f07a:	6028      	str	r0, [r5, #0]
 800f07c:	6128      	str	r0, [r5, #16]
 800f07e:	b930      	cbnz	r0, 800f08e <_svfiprintf_r+0x32>
 800f080:	230c      	movs	r3, #12
 800f082:	603b      	str	r3, [r7, #0]
 800f084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f088:	b01d      	add	sp, #116	@ 0x74
 800f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	2340      	movs	r3, #64	@ 0x40
 800f090:	616b      	str	r3, [r5, #20]
 800f092:	2300      	movs	r3, #0
 800f094:	9309      	str	r3, [sp, #36]	@ 0x24
 800f096:	2320      	movs	r3, #32
 800f098:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0a0:	2330      	movs	r3, #48	@ 0x30
 800f0a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f240 <_svfiprintf_r+0x1e4>
 800f0a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0aa:	f04f 0901 	mov.w	r9, #1
 800f0ae:	4623      	mov	r3, r4
 800f0b0:	469a      	mov	sl, r3
 800f0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0b6:	b10a      	cbz	r2, 800f0bc <_svfiprintf_r+0x60>
 800f0b8:	2a25      	cmp	r2, #37	@ 0x25
 800f0ba:	d1f9      	bne.n	800f0b0 <_svfiprintf_r+0x54>
 800f0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800f0c0:	d00b      	beq.n	800f0da <_svfiprintf_r+0x7e>
 800f0c2:	465b      	mov	r3, fp
 800f0c4:	4622      	mov	r2, r4
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	f7ff ff6c 	bl	800efa6 <__ssputs_r>
 800f0ce:	3001      	adds	r0, #1
 800f0d0:	f000 80a7 	beq.w	800f222 <_svfiprintf_r+0x1c6>
 800f0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0d6:	445a      	add	r2, fp
 800f0d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0da:	f89a 3000 	ldrb.w	r3, [sl]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f000 809f 	beq.w	800f222 <_svfiprintf_r+0x1c6>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0ee:	f10a 0a01 	add.w	sl, sl, #1
 800f0f2:	9304      	str	r3, [sp, #16]
 800f0f4:	9307      	str	r3, [sp, #28]
 800f0f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0fc:	4654      	mov	r4, sl
 800f0fe:	2205      	movs	r2, #5
 800f100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f104:	484e      	ldr	r0, [pc, #312]	@ (800f240 <_svfiprintf_r+0x1e4>)
 800f106:	f7f1 f86b 	bl	80001e0 <memchr>
 800f10a:	9a04      	ldr	r2, [sp, #16]
 800f10c:	b9d8      	cbnz	r0, 800f146 <_svfiprintf_r+0xea>
 800f10e:	06d0      	lsls	r0, r2, #27
 800f110:	bf44      	itt	mi
 800f112:	2320      	movmi	r3, #32
 800f114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f118:	0711      	lsls	r1, r2, #28
 800f11a:	bf44      	itt	mi
 800f11c:	232b      	movmi	r3, #43	@ 0x2b
 800f11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f122:	f89a 3000 	ldrb.w	r3, [sl]
 800f126:	2b2a      	cmp	r3, #42	@ 0x2a
 800f128:	d015      	beq.n	800f156 <_svfiprintf_r+0xfa>
 800f12a:	9a07      	ldr	r2, [sp, #28]
 800f12c:	4654      	mov	r4, sl
 800f12e:	2000      	movs	r0, #0
 800f130:	f04f 0c0a 	mov.w	ip, #10
 800f134:	4621      	mov	r1, r4
 800f136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f13a:	3b30      	subs	r3, #48	@ 0x30
 800f13c:	2b09      	cmp	r3, #9
 800f13e:	d94b      	bls.n	800f1d8 <_svfiprintf_r+0x17c>
 800f140:	b1b0      	cbz	r0, 800f170 <_svfiprintf_r+0x114>
 800f142:	9207      	str	r2, [sp, #28]
 800f144:	e014      	b.n	800f170 <_svfiprintf_r+0x114>
 800f146:	eba0 0308 	sub.w	r3, r0, r8
 800f14a:	fa09 f303 	lsl.w	r3, r9, r3
 800f14e:	4313      	orrs	r3, r2
 800f150:	9304      	str	r3, [sp, #16]
 800f152:	46a2      	mov	sl, r4
 800f154:	e7d2      	b.n	800f0fc <_svfiprintf_r+0xa0>
 800f156:	9b03      	ldr	r3, [sp, #12]
 800f158:	1d19      	adds	r1, r3, #4
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	9103      	str	r1, [sp, #12]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	bfbb      	ittet	lt
 800f162:	425b      	neglt	r3, r3
 800f164:	f042 0202 	orrlt.w	r2, r2, #2
 800f168:	9307      	strge	r3, [sp, #28]
 800f16a:	9307      	strlt	r3, [sp, #28]
 800f16c:	bfb8      	it	lt
 800f16e:	9204      	strlt	r2, [sp, #16]
 800f170:	7823      	ldrb	r3, [r4, #0]
 800f172:	2b2e      	cmp	r3, #46	@ 0x2e
 800f174:	d10a      	bne.n	800f18c <_svfiprintf_r+0x130>
 800f176:	7863      	ldrb	r3, [r4, #1]
 800f178:	2b2a      	cmp	r3, #42	@ 0x2a
 800f17a:	d132      	bne.n	800f1e2 <_svfiprintf_r+0x186>
 800f17c:	9b03      	ldr	r3, [sp, #12]
 800f17e:	1d1a      	adds	r2, r3, #4
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	9203      	str	r2, [sp, #12]
 800f184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f188:	3402      	adds	r4, #2
 800f18a:	9305      	str	r3, [sp, #20]
 800f18c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f250 <_svfiprintf_r+0x1f4>
 800f190:	7821      	ldrb	r1, [r4, #0]
 800f192:	2203      	movs	r2, #3
 800f194:	4650      	mov	r0, sl
 800f196:	f7f1 f823 	bl	80001e0 <memchr>
 800f19a:	b138      	cbz	r0, 800f1ac <_svfiprintf_r+0x150>
 800f19c:	9b04      	ldr	r3, [sp, #16]
 800f19e:	eba0 000a 	sub.w	r0, r0, sl
 800f1a2:	2240      	movs	r2, #64	@ 0x40
 800f1a4:	4082      	lsls	r2, r0
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	3401      	adds	r4, #1
 800f1aa:	9304      	str	r3, [sp, #16]
 800f1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1b0:	4824      	ldr	r0, [pc, #144]	@ (800f244 <_svfiprintf_r+0x1e8>)
 800f1b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1b6:	2206      	movs	r2, #6
 800f1b8:	f7f1 f812 	bl	80001e0 <memchr>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d036      	beq.n	800f22e <_svfiprintf_r+0x1d2>
 800f1c0:	4b21      	ldr	r3, [pc, #132]	@ (800f248 <_svfiprintf_r+0x1ec>)
 800f1c2:	bb1b      	cbnz	r3, 800f20c <_svfiprintf_r+0x1b0>
 800f1c4:	9b03      	ldr	r3, [sp, #12]
 800f1c6:	3307      	adds	r3, #7
 800f1c8:	f023 0307 	bic.w	r3, r3, #7
 800f1cc:	3308      	adds	r3, #8
 800f1ce:	9303      	str	r3, [sp, #12]
 800f1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d2:	4433      	add	r3, r6
 800f1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1d6:	e76a      	b.n	800f0ae <_svfiprintf_r+0x52>
 800f1d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1dc:	460c      	mov	r4, r1
 800f1de:	2001      	movs	r0, #1
 800f1e0:	e7a8      	b.n	800f134 <_svfiprintf_r+0xd8>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	3401      	adds	r4, #1
 800f1e6:	9305      	str	r3, [sp, #20]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	f04f 0c0a 	mov.w	ip, #10
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1f4:	3a30      	subs	r2, #48	@ 0x30
 800f1f6:	2a09      	cmp	r2, #9
 800f1f8:	d903      	bls.n	800f202 <_svfiprintf_r+0x1a6>
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d0c6      	beq.n	800f18c <_svfiprintf_r+0x130>
 800f1fe:	9105      	str	r1, [sp, #20]
 800f200:	e7c4      	b.n	800f18c <_svfiprintf_r+0x130>
 800f202:	fb0c 2101 	mla	r1, ip, r1, r2
 800f206:	4604      	mov	r4, r0
 800f208:	2301      	movs	r3, #1
 800f20a:	e7f0      	b.n	800f1ee <_svfiprintf_r+0x192>
 800f20c:	ab03      	add	r3, sp, #12
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	462a      	mov	r2, r5
 800f212:	4b0e      	ldr	r3, [pc, #56]	@ (800f24c <_svfiprintf_r+0x1f0>)
 800f214:	a904      	add	r1, sp, #16
 800f216:	4638      	mov	r0, r7
 800f218:	f7fc ff50 	bl	800c0bc <_printf_float>
 800f21c:	1c42      	adds	r2, r0, #1
 800f21e:	4606      	mov	r6, r0
 800f220:	d1d6      	bne.n	800f1d0 <_svfiprintf_r+0x174>
 800f222:	89ab      	ldrh	r3, [r5, #12]
 800f224:	065b      	lsls	r3, r3, #25
 800f226:	f53f af2d 	bmi.w	800f084 <_svfiprintf_r+0x28>
 800f22a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f22c:	e72c      	b.n	800f088 <_svfiprintf_r+0x2c>
 800f22e:	ab03      	add	r3, sp, #12
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	462a      	mov	r2, r5
 800f234:	4b05      	ldr	r3, [pc, #20]	@ (800f24c <_svfiprintf_r+0x1f0>)
 800f236:	a904      	add	r1, sp, #16
 800f238:	4638      	mov	r0, r7
 800f23a:	f7fd f9d7 	bl	800c5ec <_printf_i>
 800f23e:	e7ed      	b.n	800f21c <_svfiprintf_r+0x1c0>
 800f240:	0800fea1 	.word	0x0800fea1
 800f244:	0800feab 	.word	0x0800feab
 800f248:	0800c0bd 	.word	0x0800c0bd
 800f24c:	0800efa7 	.word	0x0800efa7
 800f250:	0800fea7 	.word	0x0800fea7

0800f254 <__sflush_r>:
 800f254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f25c:	0716      	lsls	r6, r2, #28
 800f25e:	4605      	mov	r5, r0
 800f260:	460c      	mov	r4, r1
 800f262:	d454      	bmi.n	800f30e <__sflush_r+0xba>
 800f264:	684b      	ldr	r3, [r1, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	dc02      	bgt.n	800f270 <__sflush_r+0x1c>
 800f26a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dd48      	ble.n	800f302 <__sflush_r+0xae>
 800f270:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f272:	2e00      	cmp	r6, #0
 800f274:	d045      	beq.n	800f302 <__sflush_r+0xae>
 800f276:	2300      	movs	r3, #0
 800f278:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f27c:	682f      	ldr	r7, [r5, #0]
 800f27e:	6a21      	ldr	r1, [r4, #32]
 800f280:	602b      	str	r3, [r5, #0]
 800f282:	d030      	beq.n	800f2e6 <__sflush_r+0x92>
 800f284:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	0759      	lsls	r1, r3, #29
 800f28a:	d505      	bpl.n	800f298 <__sflush_r+0x44>
 800f28c:	6863      	ldr	r3, [r4, #4]
 800f28e:	1ad2      	subs	r2, r2, r3
 800f290:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f292:	b10b      	cbz	r3, 800f298 <__sflush_r+0x44>
 800f294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f296:	1ad2      	subs	r2, r2, r3
 800f298:	2300      	movs	r3, #0
 800f29a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f29c:	6a21      	ldr	r1, [r4, #32]
 800f29e:	4628      	mov	r0, r5
 800f2a0:	47b0      	blx	r6
 800f2a2:	1c43      	adds	r3, r0, #1
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	d106      	bne.n	800f2b6 <__sflush_r+0x62>
 800f2a8:	6829      	ldr	r1, [r5, #0]
 800f2aa:	291d      	cmp	r1, #29
 800f2ac:	d82b      	bhi.n	800f306 <__sflush_r+0xb2>
 800f2ae:	4a2a      	ldr	r2, [pc, #168]	@ (800f358 <__sflush_r+0x104>)
 800f2b0:	410a      	asrs	r2, r1
 800f2b2:	07d6      	lsls	r6, r2, #31
 800f2b4:	d427      	bmi.n	800f306 <__sflush_r+0xb2>
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	6062      	str	r2, [r4, #4]
 800f2ba:	04d9      	lsls	r1, r3, #19
 800f2bc:	6922      	ldr	r2, [r4, #16]
 800f2be:	6022      	str	r2, [r4, #0]
 800f2c0:	d504      	bpl.n	800f2cc <__sflush_r+0x78>
 800f2c2:	1c42      	adds	r2, r0, #1
 800f2c4:	d101      	bne.n	800f2ca <__sflush_r+0x76>
 800f2c6:	682b      	ldr	r3, [r5, #0]
 800f2c8:	b903      	cbnz	r3, 800f2cc <__sflush_r+0x78>
 800f2ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2ce:	602f      	str	r7, [r5, #0]
 800f2d0:	b1b9      	cbz	r1, 800f302 <__sflush_r+0xae>
 800f2d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2d6:	4299      	cmp	r1, r3
 800f2d8:	d002      	beq.n	800f2e0 <__sflush_r+0x8c>
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f7fe fcdc 	bl	800dc98 <_free_r>
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2e4:	e00d      	b.n	800f302 <__sflush_r+0xae>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	47b0      	blx	r6
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	1c50      	adds	r0, r2, #1
 800f2f0:	d1c9      	bne.n	800f286 <__sflush_r+0x32>
 800f2f2:	682b      	ldr	r3, [r5, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d0c6      	beq.n	800f286 <__sflush_r+0x32>
 800f2f8:	2b1d      	cmp	r3, #29
 800f2fa:	d001      	beq.n	800f300 <__sflush_r+0xac>
 800f2fc:	2b16      	cmp	r3, #22
 800f2fe:	d11e      	bne.n	800f33e <__sflush_r+0xea>
 800f300:	602f      	str	r7, [r5, #0]
 800f302:	2000      	movs	r0, #0
 800f304:	e022      	b.n	800f34c <__sflush_r+0xf8>
 800f306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f30a:	b21b      	sxth	r3, r3
 800f30c:	e01b      	b.n	800f346 <__sflush_r+0xf2>
 800f30e:	690f      	ldr	r7, [r1, #16]
 800f310:	2f00      	cmp	r7, #0
 800f312:	d0f6      	beq.n	800f302 <__sflush_r+0xae>
 800f314:	0793      	lsls	r3, r2, #30
 800f316:	680e      	ldr	r6, [r1, #0]
 800f318:	bf08      	it	eq
 800f31a:	694b      	ldreq	r3, [r1, #20]
 800f31c:	600f      	str	r7, [r1, #0]
 800f31e:	bf18      	it	ne
 800f320:	2300      	movne	r3, #0
 800f322:	eba6 0807 	sub.w	r8, r6, r7
 800f326:	608b      	str	r3, [r1, #8]
 800f328:	f1b8 0f00 	cmp.w	r8, #0
 800f32c:	dde9      	ble.n	800f302 <__sflush_r+0xae>
 800f32e:	6a21      	ldr	r1, [r4, #32]
 800f330:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f332:	4643      	mov	r3, r8
 800f334:	463a      	mov	r2, r7
 800f336:	4628      	mov	r0, r5
 800f338:	47b0      	blx	r6
 800f33a:	2800      	cmp	r0, #0
 800f33c:	dc08      	bgt.n	800f350 <__sflush_r+0xfc>
 800f33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f346:	81a3      	strh	r3, [r4, #12]
 800f348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f350:	4407      	add	r7, r0
 800f352:	eba8 0800 	sub.w	r8, r8, r0
 800f356:	e7e7      	b.n	800f328 <__sflush_r+0xd4>
 800f358:	dfbffffe 	.word	0xdfbffffe

0800f35c <_fflush_r>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	690b      	ldr	r3, [r1, #16]
 800f360:	4605      	mov	r5, r0
 800f362:	460c      	mov	r4, r1
 800f364:	b913      	cbnz	r3, 800f36c <_fflush_r+0x10>
 800f366:	2500      	movs	r5, #0
 800f368:	4628      	mov	r0, r5
 800f36a:	bd38      	pop	{r3, r4, r5, pc}
 800f36c:	b118      	cbz	r0, 800f376 <_fflush_r+0x1a>
 800f36e:	6a03      	ldr	r3, [r0, #32]
 800f370:	b90b      	cbnz	r3, 800f376 <_fflush_r+0x1a>
 800f372:	f7fd fcfb 	bl	800cd6c <__sinit>
 800f376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d0f3      	beq.n	800f366 <_fflush_r+0xa>
 800f37e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f380:	07d0      	lsls	r0, r2, #31
 800f382:	d404      	bmi.n	800f38e <_fflush_r+0x32>
 800f384:	0599      	lsls	r1, r3, #22
 800f386:	d402      	bmi.n	800f38e <_fflush_r+0x32>
 800f388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f38a:	f7fd fe18 	bl	800cfbe <__retarget_lock_acquire_recursive>
 800f38e:	4628      	mov	r0, r5
 800f390:	4621      	mov	r1, r4
 800f392:	f7ff ff5f 	bl	800f254 <__sflush_r>
 800f396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f398:	07da      	lsls	r2, r3, #31
 800f39a:	4605      	mov	r5, r0
 800f39c:	d4e4      	bmi.n	800f368 <_fflush_r+0xc>
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	059b      	lsls	r3, r3, #22
 800f3a2:	d4e1      	bmi.n	800f368 <_fflush_r+0xc>
 800f3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3a6:	f7fd fe0b 	bl	800cfc0 <__retarget_lock_release_recursive>
 800f3aa:	e7dd      	b.n	800f368 <_fflush_r+0xc>

0800f3ac <memmove>:
 800f3ac:	4288      	cmp	r0, r1
 800f3ae:	b510      	push	{r4, lr}
 800f3b0:	eb01 0402 	add.w	r4, r1, r2
 800f3b4:	d902      	bls.n	800f3bc <memmove+0x10>
 800f3b6:	4284      	cmp	r4, r0
 800f3b8:	4623      	mov	r3, r4
 800f3ba:	d807      	bhi.n	800f3cc <memmove+0x20>
 800f3bc:	1e43      	subs	r3, r0, #1
 800f3be:	42a1      	cmp	r1, r4
 800f3c0:	d008      	beq.n	800f3d4 <memmove+0x28>
 800f3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3ca:	e7f8      	b.n	800f3be <memmove+0x12>
 800f3cc:	4402      	add	r2, r0
 800f3ce:	4601      	mov	r1, r0
 800f3d0:	428a      	cmp	r2, r1
 800f3d2:	d100      	bne.n	800f3d6 <memmove+0x2a>
 800f3d4:	bd10      	pop	{r4, pc}
 800f3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3de:	e7f7      	b.n	800f3d0 <memmove+0x24>

0800f3e0 <_sbrk_r>:
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	4d06      	ldr	r5, [pc, #24]	@ (800f3fc <_sbrk_r+0x1c>)
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	4608      	mov	r0, r1
 800f3ea:	602b      	str	r3, [r5, #0]
 800f3ec:	f7f2 fec6 	bl	800217c <_sbrk>
 800f3f0:	1c43      	adds	r3, r0, #1
 800f3f2:	d102      	bne.n	800f3fa <_sbrk_r+0x1a>
 800f3f4:	682b      	ldr	r3, [r5, #0]
 800f3f6:	b103      	cbz	r3, 800f3fa <_sbrk_r+0x1a>
 800f3f8:	6023      	str	r3, [r4, #0]
 800f3fa:	bd38      	pop	{r3, r4, r5, pc}
 800f3fc:	20002318 	.word	0x20002318

0800f400 <__assert_func>:
 800f400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f402:	4614      	mov	r4, r2
 800f404:	461a      	mov	r2, r3
 800f406:	4b09      	ldr	r3, [pc, #36]	@ (800f42c <__assert_func+0x2c>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4605      	mov	r5, r0
 800f40c:	68d8      	ldr	r0, [r3, #12]
 800f40e:	b954      	cbnz	r4, 800f426 <__assert_func+0x26>
 800f410:	4b07      	ldr	r3, [pc, #28]	@ (800f430 <__assert_func+0x30>)
 800f412:	461c      	mov	r4, r3
 800f414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f418:	9100      	str	r1, [sp, #0]
 800f41a:	462b      	mov	r3, r5
 800f41c:	4905      	ldr	r1, [pc, #20]	@ (800f434 <__assert_func+0x34>)
 800f41e:	f000 f84f 	bl	800f4c0 <fiprintf>
 800f422:	f000 f85f 	bl	800f4e4 <abort>
 800f426:	4b04      	ldr	r3, [pc, #16]	@ (800f438 <__assert_func+0x38>)
 800f428:	e7f4      	b.n	800f414 <__assert_func+0x14>
 800f42a:	bf00      	nop
 800f42c:	2000027c 	.word	0x2000027c
 800f430:	0800feed 	.word	0x0800feed
 800f434:	0800febf 	.word	0x0800febf
 800f438:	0800feb2 	.word	0x0800feb2

0800f43c <_calloc_r>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	fba1 5402 	umull	r5, r4, r1, r2
 800f442:	b93c      	cbnz	r4, 800f454 <_calloc_r+0x18>
 800f444:	4629      	mov	r1, r5
 800f446:	f7fe ffd5 	bl	800e3f4 <_malloc_r>
 800f44a:	4606      	mov	r6, r0
 800f44c:	b928      	cbnz	r0, 800f45a <_calloc_r+0x1e>
 800f44e:	2600      	movs	r6, #0
 800f450:	4630      	mov	r0, r6
 800f452:	bd70      	pop	{r4, r5, r6, pc}
 800f454:	220c      	movs	r2, #12
 800f456:	6002      	str	r2, [r0, #0]
 800f458:	e7f9      	b.n	800f44e <_calloc_r+0x12>
 800f45a:	462a      	mov	r2, r5
 800f45c:	4621      	mov	r1, r4
 800f45e:	f7fd fd1e 	bl	800ce9e <memset>
 800f462:	e7f5      	b.n	800f450 <_calloc_r+0x14>

0800f464 <_realloc_r>:
 800f464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f468:	4680      	mov	r8, r0
 800f46a:	4615      	mov	r5, r2
 800f46c:	460c      	mov	r4, r1
 800f46e:	b921      	cbnz	r1, 800f47a <_realloc_r+0x16>
 800f470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f474:	4611      	mov	r1, r2
 800f476:	f7fe bfbd 	b.w	800e3f4 <_malloc_r>
 800f47a:	b92a      	cbnz	r2, 800f488 <_realloc_r+0x24>
 800f47c:	f7fe fc0c 	bl	800dc98 <_free_r>
 800f480:	2400      	movs	r4, #0
 800f482:	4620      	mov	r0, r4
 800f484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f488:	f000 f833 	bl	800f4f2 <_malloc_usable_size_r>
 800f48c:	4285      	cmp	r5, r0
 800f48e:	4606      	mov	r6, r0
 800f490:	d802      	bhi.n	800f498 <_realloc_r+0x34>
 800f492:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f496:	d8f4      	bhi.n	800f482 <_realloc_r+0x1e>
 800f498:	4629      	mov	r1, r5
 800f49a:	4640      	mov	r0, r8
 800f49c:	f7fe ffaa 	bl	800e3f4 <_malloc_r>
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d0ec      	beq.n	800f480 <_realloc_r+0x1c>
 800f4a6:	42b5      	cmp	r5, r6
 800f4a8:	462a      	mov	r2, r5
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	bf28      	it	cs
 800f4ae:	4632      	movcs	r2, r6
 800f4b0:	f7fd fd87 	bl	800cfc2 <memcpy>
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	f7fe fbee 	bl	800dc98 <_free_r>
 800f4bc:	463c      	mov	r4, r7
 800f4be:	e7e0      	b.n	800f482 <_realloc_r+0x1e>

0800f4c0 <fiprintf>:
 800f4c0:	b40e      	push	{r1, r2, r3}
 800f4c2:	b503      	push	{r0, r1, lr}
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	ab03      	add	r3, sp, #12
 800f4c8:	4805      	ldr	r0, [pc, #20]	@ (800f4e0 <fiprintf+0x20>)
 800f4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ce:	6800      	ldr	r0, [r0, #0]
 800f4d0:	9301      	str	r3, [sp, #4]
 800f4d2:	f000 f83f 	bl	800f554 <_vfiprintf_r>
 800f4d6:	b002      	add	sp, #8
 800f4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4dc:	b003      	add	sp, #12
 800f4de:	4770      	bx	lr
 800f4e0:	2000027c 	.word	0x2000027c

0800f4e4 <abort>:
 800f4e4:	b508      	push	{r3, lr}
 800f4e6:	2006      	movs	r0, #6
 800f4e8:	f000 fa08 	bl	800f8fc <raise>
 800f4ec:	2001      	movs	r0, #1
 800f4ee:	f7f2 fdcd 	bl	800208c <_exit>

0800f4f2 <_malloc_usable_size_r>:
 800f4f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4f6:	1f18      	subs	r0, r3, #4
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	bfbc      	itt	lt
 800f4fc:	580b      	ldrlt	r3, [r1, r0]
 800f4fe:	18c0      	addlt	r0, r0, r3
 800f500:	4770      	bx	lr

0800f502 <__sfputc_r>:
 800f502:	6893      	ldr	r3, [r2, #8]
 800f504:	3b01      	subs	r3, #1
 800f506:	2b00      	cmp	r3, #0
 800f508:	b410      	push	{r4}
 800f50a:	6093      	str	r3, [r2, #8]
 800f50c:	da08      	bge.n	800f520 <__sfputc_r+0x1e>
 800f50e:	6994      	ldr	r4, [r2, #24]
 800f510:	42a3      	cmp	r3, r4
 800f512:	db01      	blt.n	800f518 <__sfputc_r+0x16>
 800f514:	290a      	cmp	r1, #10
 800f516:	d103      	bne.n	800f520 <__sfputc_r+0x1e>
 800f518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f51c:	f000 b932 	b.w	800f784 <__swbuf_r>
 800f520:	6813      	ldr	r3, [r2, #0]
 800f522:	1c58      	adds	r0, r3, #1
 800f524:	6010      	str	r0, [r2, #0]
 800f526:	7019      	strb	r1, [r3, #0]
 800f528:	4608      	mov	r0, r1
 800f52a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <__sfputs_r>:
 800f530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f532:	4606      	mov	r6, r0
 800f534:	460f      	mov	r7, r1
 800f536:	4614      	mov	r4, r2
 800f538:	18d5      	adds	r5, r2, r3
 800f53a:	42ac      	cmp	r4, r5
 800f53c:	d101      	bne.n	800f542 <__sfputs_r+0x12>
 800f53e:	2000      	movs	r0, #0
 800f540:	e007      	b.n	800f552 <__sfputs_r+0x22>
 800f542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f546:	463a      	mov	r2, r7
 800f548:	4630      	mov	r0, r6
 800f54a:	f7ff ffda 	bl	800f502 <__sfputc_r>
 800f54e:	1c43      	adds	r3, r0, #1
 800f550:	d1f3      	bne.n	800f53a <__sfputs_r+0xa>
 800f552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f554 <_vfiprintf_r>:
 800f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f558:	460d      	mov	r5, r1
 800f55a:	b09d      	sub	sp, #116	@ 0x74
 800f55c:	4614      	mov	r4, r2
 800f55e:	4698      	mov	r8, r3
 800f560:	4606      	mov	r6, r0
 800f562:	b118      	cbz	r0, 800f56c <_vfiprintf_r+0x18>
 800f564:	6a03      	ldr	r3, [r0, #32]
 800f566:	b90b      	cbnz	r3, 800f56c <_vfiprintf_r+0x18>
 800f568:	f7fd fc00 	bl	800cd6c <__sinit>
 800f56c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f56e:	07d9      	lsls	r1, r3, #31
 800f570:	d405      	bmi.n	800f57e <_vfiprintf_r+0x2a>
 800f572:	89ab      	ldrh	r3, [r5, #12]
 800f574:	059a      	lsls	r2, r3, #22
 800f576:	d402      	bmi.n	800f57e <_vfiprintf_r+0x2a>
 800f578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f57a:	f7fd fd20 	bl	800cfbe <__retarget_lock_acquire_recursive>
 800f57e:	89ab      	ldrh	r3, [r5, #12]
 800f580:	071b      	lsls	r3, r3, #28
 800f582:	d501      	bpl.n	800f588 <_vfiprintf_r+0x34>
 800f584:	692b      	ldr	r3, [r5, #16]
 800f586:	b99b      	cbnz	r3, 800f5b0 <_vfiprintf_r+0x5c>
 800f588:	4629      	mov	r1, r5
 800f58a:	4630      	mov	r0, r6
 800f58c:	f000 f938 	bl	800f800 <__swsetup_r>
 800f590:	b170      	cbz	r0, 800f5b0 <_vfiprintf_r+0x5c>
 800f592:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f594:	07dc      	lsls	r4, r3, #31
 800f596:	d504      	bpl.n	800f5a2 <_vfiprintf_r+0x4e>
 800f598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f59c:	b01d      	add	sp, #116	@ 0x74
 800f59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a2:	89ab      	ldrh	r3, [r5, #12]
 800f5a4:	0598      	lsls	r0, r3, #22
 800f5a6:	d4f7      	bmi.n	800f598 <_vfiprintf_r+0x44>
 800f5a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5aa:	f7fd fd09 	bl	800cfc0 <__retarget_lock_release_recursive>
 800f5ae:	e7f3      	b.n	800f598 <_vfiprintf_r+0x44>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5b4:	2320      	movs	r3, #32
 800f5b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5be:	2330      	movs	r3, #48	@ 0x30
 800f5c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f770 <_vfiprintf_r+0x21c>
 800f5c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5c8:	f04f 0901 	mov.w	r9, #1
 800f5cc:	4623      	mov	r3, r4
 800f5ce:	469a      	mov	sl, r3
 800f5d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5d4:	b10a      	cbz	r2, 800f5da <_vfiprintf_r+0x86>
 800f5d6:	2a25      	cmp	r2, #37	@ 0x25
 800f5d8:	d1f9      	bne.n	800f5ce <_vfiprintf_r+0x7a>
 800f5da:	ebba 0b04 	subs.w	fp, sl, r4
 800f5de:	d00b      	beq.n	800f5f8 <_vfiprintf_r+0xa4>
 800f5e0:	465b      	mov	r3, fp
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f7ff ffa2 	bl	800f530 <__sfputs_r>
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	f000 80a7 	beq.w	800f740 <_vfiprintf_r+0x1ec>
 800f5f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5f4:	445a      	add	r2, fp
 800f5f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	f000 809f 	beq.w	800f740 <_vfiprintf_r+0x1ec>
 800f602:	2300      	movs	r3, #0
 800f604:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f60c:	f10a 0a01 	add.w	sl, sl, #1
 800f610:	9304      	str	r3, [sp, #16]
 800f612:	9307      	str	r3, [sp, #28]
 800f614:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f618:	931a      	str	r3, [sp, #104]	@ 0x68
 800f61a:	4654      	mov	r4, sl
 800f61c:	2205      	movs	r2, #5
 800f61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f622:	4853      	ldr	r0, [pc, #332]	@ (800f770 <_vfiprintf_r+0x21c>)
 800f624:	f7f0 fddc 	bl	80001e0 <memchr>
 800f628:	9a04      	ldr	r2, [sp, #16]
 800f62a:	b9d8      	cbnz	r0, 800f664 <_vfiprintf_r+0x110>
 800f62c:	06d1      	lsls	r1, r2, #27
 800f62e:	bf44      	itt	mi
 800f630:	2320      	movmi	r3, #32
 800f632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f636:	0713      	lsls	r3, r2, #28
 800f638:	bf44      	itt	mi
 800f63a:	232b      	movmi	r3, #43	@ 0x2b
 800f63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f640:	f89a 3000 	ldrb.w	r3, [sl]
 800f644:	2b2a      	cmp	r3, #42	@ 0x2a
 800f646:	d015      	beq.n	800f674 <_vfiprintf_r+0x120>
 800f648:	9a07      	ldr	r2, [sp, #28]
 800f64a:	4654      	mov	r4, sl
 800f64c:	2000      	movs	r0, #0
 800f64e:	f04f 0c0a 	mov.w	ip, #10
 800f652:	4621      	mov	r1, r4
 800f654:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f658:	3b30      	subs	r3, #48	@ 0x30
 800f65a:	2b09      	cmp	r3, #9
 800f65c:	d94b      	bls.n	800f6f6 <_vfiprintf_r+0x1a2>
 800f65e:	b1b0      	cbz	r0, 800f68e <_vfiprintf_r+0x13a>
 800f660:	9207      	str	r2, [sp, #28]
 800f662:	e014      	b.n	800f68e <_vfiprintf_r+0x13a>
 800f664:	eba0 0308 	sub.w	r3, r0, r8
 800f668:	fa09 f303 	lsl.w	r3, r9, r3
 800f66c:	4313      	orrs	r3, r2
 800f66e:	9304      	str	r3, [sp, #16]
 800f670:	46a2      	mov	sl, r4
 800f672:	e7d2      	b.n	800f61a <_vfiprintf_r+0xc6>
 800f674:	9b03      	ldr	r3, [sp, #12]
 800f676:	1d19      	adds	r1, r3, #4
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	9103      	str	r1, [sp, #12]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	bfbb      	ittet	lt
 800f680:	425b      	neglt	r3, r3
 800f682:	f042 0202 	orrlt.w	r2, r2, #2
 800f686:	9307      	strge	r3, [sp, #28]
 800f688:	9307      	strlt	r3, [sp, #28]
 800f68a:	bfb8      	it	lt
 800f68c:	9204      	strlt	r2, [sp, #16]
 800f68e:	7823      	ldrb	r3, [r4, #0]
 800f690:	2b2e      	cmp	r3, #46	@ 0x2e
 800f692:	d10a      	bne.n	800f6aa <_vfiprintf_r+0x156>
 800f694:	7863      	ldrb	r3, [r4, #1]
 800f696:	2b2a      	cmp	r3, #42	@ 0x2a
 800f698:	d132      	bne.n	800f700 <_vfiprintf_r+0x1ac>
 800f69a:	9b03      	ldr	r3, [sp, #12]
 800f69c:	1d1a      	adds	r2, r3, #4
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	9203      	str	r2, [sp, #12]
 800f6a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6a6:	3402      	adds	r4, #2
 800f6a8:	9305      	str	r3, [sp, #20]
 800f6aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f780 <_vfiprintf_r+0x22c>
 800f6ae:	7821      	ldrb	r1, [r4, #0]
 800f6b0:	2203      	movs	r2, #3
 800f6b2:	4650      	mov	r0, sl
 800f6b4:	f7f0 fd94 	bl	80001e0 <memchr>
 800f6b8:	b138      	cbz	r0, 800f6ca <_vfiprintf_r+0x176>
 800f6ba:	9b04      	ldr	r3, [sp, #16]
 800f6bc:	eba0 000a 	sub.w	r0, r0, sl
 800f6c0:	2240      	movs	r2, #64	@ 0x40
 800f6c2:	4082      	lsls	r2, r0
 800f6c4:	4313      	orrs	r3, r2
 800f6c6:	3401      	adds	r4, #1
 800f6c8:	9304      	str	r3, [sp, #16]
 800f6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6ce:	4829      	ldr	r0, [pc, #164]	@ (800f774 <_vfiprintf_r+0x220>)
 800f6d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6d4:	2206      	movs	r2, #6
 800f6d6:	f7f0 fd83 	bl	80001e0 <memchr>
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	d03f      	beq.n	800f75e <_vfiprintf_r+0x20a>
 800f6de:	4b26      	ldr	r3, [pc, #152]	@ (800f778 <_vfiprintf_r+0x224>)
 800f6e0:	bb1b      	cbnz	r3, 800f72a <_vfiprintf_r+0x1d6>
 800f6e2:	9b03      	ldr	r3, [sp, #12]
 800f6e4:	3307      	adds	r3, #7
 800f6e6:	f023 0307 	bic.w	r3, r3, #7
 800f6ea:	3308      	adds	r3, #8
 800f6ec:	9303      	str	r3, [sp, #12]
 800f6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f0:	443b      	add	r3, r7
 800f6f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6f4:	e76a      	b.n	800f5cc <_vfiprintf_r+0x78>
 800f6f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6fa:	460c      	mov	r4, r1
 800f6fc:	2001      	movs	r0, #1
 800f6fe:	e7a8      	b.n	800f652 <_vfiprintf_r+0xfe>
 800f700:	2300      	movs	r3, #0
 800f702:	3401      	adds	r4, #1
 800f704:	9305      	str	r3, [sp, #20]
 800f706:	4619      	mov	r1, r3
 800f708:	f04f 0c0a 	mov.w	ip, #10
 800f70c:	4620      	mov	r0, r4
 800f70e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f712:	3a30      	subs	r2, #48	@ 0x30
 800f714:	2a09      	cmp	r2, #9
 800f716:	d903      	bls.n	800f720 <_vfiprintf_r+0x1cc>
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d0c6      	beq.n	800f6aa <_vfiprintf_r+0x156>
 800f71c:	9105      	str	r1, [sp, #20]
 800f71e:	e7c4      	b.n	800f6aa <_vfiprintf_r+0x156>
 800f720:	fb0c 2101 	mla	r1, ip, r1, r2
 800f724:	4604      	mov	r4, r0
 800f726:	2301      	movs	r3, #1
 800f728:	e7f0      	b.n	800f70c <_vfiprintf_r+0x1b8>
 800f72a:	ab03      	add	r3, sp, #12
 800f72c:	9300      	str	r3, [sp, #0]
 800f72e:	462a      	mov	r2, r5
 800f730:	4b12      	ldr	r3, [pc, #72]	@ (800f77c <_vfiprintf_r+0x228>)
 800f732:	a904      	add	r1, sp, #16
 800f734:	4630      	mov	r0, r6
 800f736:	f7fc fcc1 	bl	800c0bc <_printf_float>
 800f73a:	4607      	mov	r7, r0
 800f73c:	1c78      	adds	r0, r7, #1
 800f73e:	d1d6      	bne.n	800f6ee <_vfiprintf_r+0x19a>
 800f740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f742:	07d9      	lsls	r1, r3, #31
 800f744:	d405      	bmi.n	800f752 <_vfiprintf_r+0x1fe>
 800f746:	89ab      	ldrh	r3, [r5, #12]
 800f748:	059a      	lsls	r2, r3, #22
 800f74a:	d402      	bmi.n	800f752 <_vfiprintf_r+0x1fe>
 800f74c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f74e:	f7fd fc37 	bl	800cfc0 <__retarget_lock_release_recursive>
 800f752:	89ab      	ldrh	r3, [r5, #12]
 800f754:	065b      	lsls	r3, r3, #25
 800f756:	f53f af1f 	bmi.w	800f598 <_vfiprintf_r+0x44>
 800f75a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f75c:	e71e      	b.n	800f59c <_vfiprintf_r+0x48>
 800f75e:	ab03      	add	r3, sp, #12
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	462a      	mov	r2, r5
 800f764:	4b05      	ldr	r3, [pc, #20]	@ (800f77c <_vfiprintf_r+0x228>)
 800f766:	a904      	add	r1, sp, #16
 800f768:	4630      	mov	r0, r6
 800f76a:	f7fc ff3f 	bl	800c5ec <_printf_i>
 800f76e:	e7e4      	b.n	800f73a <_vfiprintf_r+0x1e6>
 800f770:	0800fea1 	.word	0x0800fea1
 800f774:	0800feab 	.word	0x0800feab
 800f778:	0800c0bd 	.word	0x0800c0bd
 800f77c:	0800f531 	.word	0x0800f531
 800f780:	0800fea7 	.word	0x0800fea7

0800f784 <__swbuf_r>:
 800f784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f786:	460e      	mov	r6, r1
 800f788:	4614      	mov	r4, r2
 800f78a:	4605      	mov	r5, r0
 800f78c:	b118      	cbz	r0, 800f796 <__swbuf_r+0x12>
 800f78e:	6a03      	ldr	r3, [r0, #32]
 800f790:	b90b      	cbnz	r3, 800f796 <__swbuf_r+0x12>
 800f792:	f7fd faeb 	bl	800cd6c <__sinit>
 800f796:	69a3      	ldr	r3, [r4, #24]
 800f798:	60a3      	str	r3, [r4, #8]
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	071a      	lsls	r2, r3, #28
 800f79e:	d501      	bpl.n	800f7a4 <__swbuf_r+0x20>
 800f7a0:	6923      	ldr	r3, [r4, #16]
 800f7a2:	b943      	cbnz	r3, 800f7b6 <__swbuf_r+0x32>
 800f7a4:	4621      	mov	r1, r4
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f000 f82a 	bl	800f800 <__swsetup_r>
 800f7ac:	b118      	cbz	r0, 800f7b6 <__swbuf_r+0x32>
 800f7ae:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f7b2:	4638      	mov	r0, r7
 800f7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	6922      	ldr	r2, [r4, #16]
 800f7ba:	1a98      	subs	r0, r3, r2
 800f7bc:	6963      	ldr	r3, [r4, #20]
 800f7be:	b2f6      	uxtb	r6, r6
 800f7c0:	4283      	cmp	r3, r0
 800f7c2:	4637      	mov	r7, r6
 800f7c4:	dc05      	bgt.n	800f7d2 <__swbuf_r+0x4e>
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	f7ff fdc7 	bl	800f35c <_fflush_r>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	d1ed      	bne.n	800f7ae <__swbuf_r+0x2a>
 800f7d2:	68a3      	ldr	r3, [r4, #8]
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	60a3      	str	r3, [r4, #8]
 800f7d8:	6823      	ldr	r3, [r4, #0]
 800f7da:	1c5a      	adds	r2, r3, #1
 800f7dc:	6022      	str	r2, [r4, #0]
 800f7de:	701e      	strb	r6, [r3, #0]
 800f7e0:	6962      	ldr	r2, [r4, #20]
 800f7e2:	1c43      	adds	r3, r0, #1
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d004      	beq.n	800f7f2 <__swbuf_r+0x6e>
 800f7e8:	89a3      	ldrh	r3, [r4, #12]
 800f7ea:	07db      	lsls	r3, r3, #31
 800f7ec:	d5e1      	bpl.n	800f7b2 <__swbuf_r+0x2e>
 800f7ee:	2e0a      	cmp	r6, #10
 800f7f0:	d1df      	bne.n	800f7b2 <__swbuf_r+0x2e>
 800f7f2:	4621      	mov	r1, r4
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	f7ff fdb1 	bl	800f35c <_fflush_r>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d0d9      	beq.n	800f7b2 <__swbuf_r+0x2e>
 800f7fe:	e7d6      	b.n	800f7ae <__swbuf_r+0x2a>

0800f800 <__swsetup_r>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	4b29      	ldr	r3, [pc, #164]	@ (800f8a8 <__swsetup_r+0xa8>)
 800f804:	4605      	mov	r5, r0
 800f806:	6818      	ldr	r0, [r3, #0]
 800f808:	460c      	mov	r4, r1
 800f80a:	b118      	cbz	r0, 800f814 <__swsetup_r+0x14>
 800f80c:	6a03      	ldr	r3, [r0, #32]
 800f80e:	b90b      	cbnz	r3, 800f814 <__swsetup_r+0x14>
 800f810:	f7fd faac 	bl	800cd6c <__sinit>
 800f814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f818:	0719      	lsls	r1, r3, #28
 800f81a:	d422      	bmi.n	800f862 <__swsetup_r+0x62>
 800f81c:	06da      	lsls	r2, r3, #27
 800f81e:	d407      	bmi.n	800f830 <__swsetup_r+0x30>
 800f820:	2209      	movs	r2, #9
 800f822:	602a      	str	r2, [r5, #0]
 800f824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f828:	81a3      	strh	r3, [r4, #12]
 800f82a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f82e:	e033      	b.n	800f898 <__swsetup_r+0x98>
 800f830:	0758      	lsls	r0, r3, #29
 800f832:	d512      	bpl.n	800f85a <__swsetup_r+0x5a>
 800f834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f836:	b141      	cbz	r1, 800f84a <__swsetup_r+0x4a>
 800f838:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f83c:	4299      	cmp	r1, r3
 800f83e:	d002      	beq.n	800f846 <__swsetup_r+0x46>
 800f840:	4628      	mov	r0, r5
 800f842:	f7fe fa29 	bl	800dc98 <_free_r>
 800f846:	2300      	movs	r3, #0
 800f848:	6363      	str	r3, [r4, #52]	@ 0x34
 800f84a:	89a3      	ldrh	r3, [r4, #12]
 800f84c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f850:	81a3      	strh	r3, [r4, #12]
 800f852:	2300      	movs	r3, #0
 800f854:	6063      	str	r3, [r4, #4]
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	f043 0308 	orr.w	r3, r3, #8
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	6923      	ldr	r3, [r4, #16]
 800f864:	b94b      	cbnz	r3, 800f87a <__swsetup_r+0x7a>
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f86c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f870:	d003      	beq.n	800f87a <__swsetup_r+0x7a>
 800f872:	4621      	mov	r1, r4
 800f874:	4628      	mov	r0, r5
 800f876:	f000 f883 	bl	800f980 <__smakebuf_r>
 800f87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f87e:	f013 0201 	ands.w	r2, r3, #1
 800f882:	d00a      	beq.n	800f89a <__swsetup_r+0x9a>
 800f884:	2200      	movs	r2, #0
 800f886:	60a2      	str	r2, [r4, #8]
 800f888:	6962      	ldr	r2, [r4, #20]
 800f88a:	4252      	negs	r2, r2
 800f88c:	61a2      	str	r2, [r4, #24]
 800f88e:	6922      	ldr	r2, [r4, #16]
 800f890:	b942      	cbnz	r2, 800f8a4 <__swsetup_r+0xa4>
 800f892:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f896:	d1c5      	bne.n	800f824 <__swsetup_r+0x24>
 800f898:	bd38      	pop	{r3, r4, r5, pc}
 800f89a:	0799      	lsls	r1, r3, #30
 800f89c:	bf58      	it	pl
 800f89e:	6962      	ldrpl	r2, [r4, #20]
 800f8a0:	60a2      	str	r2, [r4, #8]
 800f8a2:	e7f4      	b.n	800f88e <__swsetup_r+0x8e>
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	e7f7      	b.n	800f898 <__swsetup_r+0x98>
 800f8a8:	2000027c 	.word	0x2000027c

0800f8ac <_raise_r>:
 800f8ac:	291f      	cmp	r1, #31
 800f8ae:	b538      	push	{r3, r4, r5, lr}
 800f8b0:	4605      	mov	r5, r0
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	d904      	bls.n	800f8c0 <_raise_r+0x14>
 800f8b6:	2316      	movs	r3, #22
 800f8b8:	6003      	str	r3, [r0, #0]
 800f8ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8be:	bd38      	pop	{r3, r4, r5, pc}
 800f8c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f8c2:	b112      	cbz	r2, 800f8ca <_raise_r+0x1e>
 800f8c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8c8:	b94b      	cbnz	r3, 800f8de <_raise_r+0x32>
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f000 f830 	bl	800f930 <_getpid_r>
 800f8d0:	4622      	mov	r2, r4
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8da:	f000 b817 	b.w	800f90c <_kill_r>
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d00a      	beq.n	800f8f8 <_raise_r+0x4c>
 800f8e2:	1c59      	adds	r1, r3, #1
 800f8e4:	d103      	bne.n	800f8ee <_raise_r+0x42>
 800f8e6:	2316      	movs	r3, #22
 800f8e8:	6003      	str	r3, [r0, #0]
 800f8ea:	2001      	movs	r0, #1
 800f8ec:	e7e7      	b.n	800f8be <_raise_r+0x12>
 800f8ee:	2100      	movs	r1, #0
 800f8f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	4798      	blx	r3
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	e7e0      	b.n	800f8be <_raise_r+0x12>

0800f8fc <raise>:
 800f8fc:	4b02      	ldr	r3, [pc, #8]	@ (800f908 <raise+0xc>)
 800f8fe:	4601      	mov	r1, r0
 800f900:	6818      	ldr	r0, [r3, #0]
 800f902:	f7ff bfd3 	b.w	800f8ac <_raise_r>
 800f906:	bf00      	nop
 800f908:	2000027c 	.word	0x2000027c

0800f90c <_kill_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d07      	ldr	r5, [pc, #28]	@ (800f92c <_kill_r+0x20>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	4611      	mov	r1, r2
 800f918:	602b      	str	r3, [r5, #0]
 800f91a:	f7f2 fba7 	bl	800206c <_kill>
 800f91e:	1c43      	adds	r3, r0, #1
 800f920:	d102      	bne.n	800f928 <_kill_r+0x1c>
 800f922:	682b      	ldr	r3, [r5, #0]
 800f924:	b103      	cbz	r3, 800f928 <_kill_r+0x1c>
 800f926:	6023      	str	r3, [r4, #0]
 800f928:	bd38      	pop	{r3, r4, r5, pc}
 800f92a:	bf00      	nop
 800f92c:	20002318 	.word	0x20002318

0800f930 <_getpid_r>:
 800f930:	f7f2 bb94 	b.w	800205c <_getpid>

0800f934 <__swhatbuf_r>:
 800f934:	b570      	push	{r4, r5, r6, lr}
 800f936:	460c      	mov	r4, r1
 800f938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f93c:	2900      	cmp	r1, #0
 800f93e:	b096      	sub	sp, #88	@ 0x58
 800f940:	4615      	mov	r5, r2
 800f942:	461e      	mov	r6, r3
 800f944:	da0d      	bge.n	800f962 <__swhatbuf_r+0x2e>
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f94c:	f04f 0100 	mov.w	r1, #0
 800f950:	bf14      	ite	ne
 800f952:	2340      	movne	r3, #64	@ 0x40
 800f954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f958:	2000      	movs	r0, #0
 800f95a:	6031      	str	r1, [r6, #0]
 800f95c:	602b      	str	r3, [r5, #0]
 800f95e:	b016      	add	sp, #88	@ 0x58
 800f960:	bd70      	pop	{r4, r5, r6, pc}
 800f962:	466a      	mov	r2, sp
 800f964:	f000 f848 	bl	800f9f8 <_fstat_r>
 800f968:	2800      	cmp	r0, #0
 800f96a:	dbec      	blt.n	800f946 <__swhatbuf_r+0x12>
 800f96c:	9901      	ldr	r1, [sp, #4]
 800f96e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f976:	4259      	negs	r1, r3
 800f978:	4159      	adcs	r1, r3
 800f97a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f97e:	e7eb      	b.n	800f958 <__swhatbuf_r+0x24>

0800f980 <__smakebuf_r>:
 800f980:	898b      	ldrh	r3, [r1, #12]
 800f982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f984:	079d      	lsls	r5, r3, #30
 800f986:	4606      	mov	r6, r0
 800f988:	460c      	mov	r4, r1
 800f98a:	d507      	bpl.n	800f99c <__smakebuf_r+0x1c>
 800f98c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f990:	6023      	str	r3, [r4, #0]
 800f992:	6123      	str	r3, [r4, #16]
 800f994:	2301      	movs	r3, #1
 800f996:	6163      	str	r3, [r4, #20]
 800f998:	b003      	add	sp, #12
 800f99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f99c:	ab01      	add	r3, sp, #4
 800f99e:	466a      	mov	r2, sp
 800f9a0:	f7ff ffc8 	bl	800f934 <__swhatbuf_r>
 800f9a4:	9f00      	ldr	r7, [sp, #0]
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	4639      	mov	r1, r7
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	f7fe fd22 	bl	800e3f4 <_malloc_r>
 800f9b0:	b948      	cbnz	r0, 800f9c6 <__smakebuf_r+0x46>
 800f9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b6:	059a      	lsls	r2, r3, #22
 800f9b8:	d4ee      	bmi.n	800f998 <__smakebuf_r+0x18>
 800f9ba:	f023 0303 	bic.w	r3, r3, #3
 800f9be:	f043 0302 	orr.w	r3, r3, #2
 800f9c2:	81a3      	strh	r3, [r4, #12]
 800f9c4:	e7e2      	b.n	800f98c <__smakebuf_r+0xc>
 800f9c6:	89a3      	ldrh	r3, [r4, #12]
 800f9c8:	6020      	str	r0, [r4, #0]
 800f9ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9ce:	81a3      	strh	r3, [r4, #12]
 800f9d0:	9b01      	ldr	r3, [sp, #4]
 800f9d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f9d6:	b15b      	cbz	r3, 800f9f0 <__smakebuf_r+0x70>
 800f9d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9dc:	4630      	mov	r0, r6
 800f9de:	f000 f81d 	bl	800fa1c <_isatty_r>
 800f9e2:	b128      	cbz	r0, 800f9f0 <__smakebuf_r+0x70>
 800f9e4:	89a3      	ldrh	r3, [r4, #12]
 800f9e6:	f023 0303 	bic.w	r3, r3, #3
 800f9ea:	f043 0301 	orr.w	r3, r3, #1
 800f9ee:	81a3      	strh	r3, [r4, #12]
 800f9f0:	89a3      	ldrh	r3, [r4, #12]
 800f9f2:	431d      	orrs	r5, r3
 800f9f4:	81a5      	strh	r5, [r4, #12]
 800f9f6:	e7cf      	b.n	800f998 <__smakebuf_r+0x18>

0800f9f8 <_fstat_r>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	4d07      	ldr	r5, [pc, #28]	@ (800fa18 <_fstat_r+0x20>)
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	4604      	mov	r4, r0
 800fa00:	4608      	mov	r0, r1
 800fa02:	4611      	mov	r1, r2
 800fa04:	602b      	str	r3, [r5, #0]
 800fa06:	f7f2 fb91 	bl	800212c <_fstat>
 800fa0a:	1c43      	adds	r3, r0, #1
 800fa0c:	d102      	bne.n	800fa14 <_fstat_r+0x1c>
 800fa0e:	682b      	ldr	r3, [r5, #0]
 800fa10:	b103      	cbz	r3, 800fa14 <_fstat_r+0x1c>
 800fa12:	6023      	str	r3, [r4, #0]
 800fa14:	bd38      	pop	{r3, r4, r5, pc}
 800fa16:	bf00      	nop
 800fa18:	20002318 	.word	0x20002318

0800fa1c <_isatty_r>:
 800fa1c:	b538      	push	{r3, r4, r5, lr}
 800fa1e:	4d06      	ldr	r5, [pc, #24]	@ (800fa38 <_isatty_r+0x1c>)
 800fa20:	2300      	movs	r3, #0
 800fa22:	4604      	mov	r4, r0
 800fa24:	4608      	mov	r0, r1
 800fa26:	602b      	str	r3, [r5, #0]
 800fa28:	f7f2 fb90 	bl	800214c <_isatty>
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	d102      	bne.n	800fa36 <_isatty_r+0x1a>
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	b103      	cbz	r3, 800fa36 <_isatty_r+0x1a>
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	bd38      	pop	{r3, r4, r5, pc}
 800fa38:	20002318 	.word	0x20002318

0800fa3c <_init>:
 800fa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3e:	bf00      	nop
 800fa40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa42:	bc08      	pop	{r3}
 800fa44:	469e      	mov	lr, r3
 800fa46:	4770      	bx	lr

0800fa48 <_fini>:
 800fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4a:	bf00      	nop
 800fa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa4e:	bc08      	pop	{r3}
 800fa50:	469e      	mov	lr, r3
 800fa52:	4770      	bx	lr
