
filter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08006578  08006578  00007578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006948  08006948  00007948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006950  08006950  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006950  08006950  00007950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006954  08006954  00007954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006958  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001d8  08006b2c  000081d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08006b2c  0000852c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000974e  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a36  00000000  00000000  00011952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00013388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069d  00000000  00000000  00013c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174b1  00000000  00000000  000142d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adec  00000000  00000000  0002b786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000929c8  00000000  00000000  00036572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8f3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  000c8f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cc35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800655c 	.word	0x0800655c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800655c 	.word	0x0800655c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b9a0 	b.w	8000ec4 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 fd0a 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f80e 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 f952 	bl	800117c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ed8:	f000 f86a 	bl	8000fb0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000edc:	f000 f8d0 	bl	8001080 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ee0:	f000 f8f8 	bl	80010d4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000ee4:	f000 f920 	bl	8001128 <MX_USART6_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_All_IMU_Data();
 8000ee8:	f000 fa6a 	bl	80013c0 <Read_All_IMU_Data>
 8000eec:	e7fc      	b.n	8000ee8 <main+0x20>
	...

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	@ 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2230      	movs	r2, #48	@ 0x30
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fc47 	bl	8004792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <SystemClock_Config+0xb8>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <SystemClock_Config+0xb8>)
 8000f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f24:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <SystemClock_Config+0xb8>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <SystemClock_Config+0xbc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <SystemClock_Config+0xbc>)
 8000f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <SystemClock_Config+0xbc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 fa81 	bl	800246c <HAL_RCC_OscConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f70:	f000 fa62 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f74:	230f      	movs	r3, #15
 8000f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fce4 	bl	800295c <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f9a:	f000 fa4d 	bl	8001438 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	@ 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001078 <MX_ADC1_Init+0xc8>)
 8000fc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fce:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fda:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe8:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000ff0:	4a22      	ldr	r2, [pc, #136]	@ (800107c <MX_ADC1_Init+0xcc>)
 8000ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = NUM_SENSORS;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001000:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_ADC1_Init+0xc4>)
 800100a:	2201      	movs	r2, #1
 800100c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800100e:	4819      	ldr	r0, [pc, #100]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8001010:	f000 fcda 	bl	80019c8 <HAL_ADC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800101a:	f000 fa0d 	bl	8001438 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001026:	2306      	movs	r3, #6
 8001028:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4811      	ldr	r0, [pc, #68]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8001030:	f000 fd0e 	bl	8001a50 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800103a:	f000 f9fd 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  for(int i=0;i < NUM_SENSORS; i++){
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e00e      	b.n	8001062 <MX_ADC1_Init+0xb2>
	  sConfig.Channel = ADC_CHANNEL_0 + i;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = i + 1;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800104e:	2301      	movs	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4807      	ldr	r0, [pc, #28]	@ (8001074 <MX_ADC1_Init+0xc4>)
 8001058:	f000 fcfa 	bl	8001a50 <HAL_ADC_ConfigChannel>
  for(int i=0;i < NUM_SENSORS; i++){
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b03      	cmp	r3, #3
 8001066:	dded      	ble.n	8001044 <MX_ADC1_Init+0x94>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001f4 	.word	0x200001f4
 8001078:	40012000 	.word	0x40012000
 800107c:	0f000001 	.word	0x0f000001

08001080 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <MX_USART1_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_USART1_UART_Init+0x4c>)
 80010b8:	f001 fe30 	bl	8002d1c <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f000 f9b9 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000023c 	.word	0x2000023c
 80010d0:	40011000 	.word	0x40011000

080010d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <MX_USART2_UART_Init+0x50>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_USART2_UART_Init+0x4c>)
 800110c:	f001 fe06 	bl	8002d1c <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001116:	f000 f98f 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000284 	.word	0x20000284
 8001124:	40004400 	.word	0x40004400

08001128 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <MX_USART6_UART_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_USART6_UART_Init+0x4c>)
 8001160:	f001 fddc 	bl	8002d1c <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800116a:	f000 f965 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200002cc 	.word	0x200002cc
 8001178:	40011400 	.word	0x40011400

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <MX_GPIO_Init+0x4c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a0f      	ldr	r2, [pc, #60]	@ (80011c8 <MX_GPIO_Init+0x4c>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <MX_GPIO_Init+0x4c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_GPIO_Init+0x4c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <MX_GPIO_Init+0x4c>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_GPIO_Init+0x4c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <Parse_IMU_Data>:
		sensorValues[i] = HAL_ADC_GetValue(&hadc1);
		HAL_ADC_Stop(&hadc1);
	}
}

void Parse_IMU_Data(char* IMUarray, double* roll, double* pitch, double* yaw){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08e      	sub	sp, #56	@ 0x38
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
    int cnt0 = 0, cnt1 = 0, cnt2 = 0, cnt3 = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    char* pos;

    for (int i = 1; i < IMU_DATA_SIZE; i++) {
 80011ea:	2301      	movs	r3, #1
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ee:	e04d      	b.n	800128c <Parse_IMU_Data+0xc0>
        if (IMUarray[i] == ',') {
 80011f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b2c      	cmp	r3, #44	@ 0x2c
 80011fa:	d110      	bne.n	800121e <Parse_IMU_Data+0x52>
            if (cnt0 == 0) cnt1 = i + 1;
 80011fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <Parse_IMU_Data+0x3e>
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	633b      	str	r3, [r7, #48]	@ 0x30
 8001208:	e005      	b.n	8001216 <Parse_IMU_Data+0x4a>
            else if (cnt0 == 1) cnt2 = i + 1;
 800120a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120c:	2b01      	cmp	r3, #1
 800120e:	d102      	bne.n	8001216 <Parse_IMU_Data+0x4a>
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	3301      	adds	r3, #1
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
            cnt0++;
 8001216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001218:	3301      	adds	r3, #1
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34
 800121c:	e029      	b.n	8001272 <Parse_IMU_Data+0xa6>
        } else {
            switch (cnt0) {
 800121e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001220:	2b02      	cmp	r3, #2
 8001222:	d01c      	beq.n	800125e <Parse_IMU_Data+0x92>
 8001224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001226:	2b02      	cmp	r3, #2
 8001228:	dc23      	bgt.n	8001272 <Parse_IMU_Data+0xa6>
 800122a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <Parse_IMU_Data+0x6c>
 8001230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001232:	2b01      	cmp	r3, #1
 8001234:	d009      	beq.n	800124a <Parse_IMU_Data+0x7e>
 8001236:	e01c      	b.n	8001272 <Parse_IMU_Data+0xa6>
                case 0: alpha[i - 1] = IMUarray[i]; break;  // 첫 번째 값
 8001238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	441a      	add	r2, r3
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	3b01      	subs	r3, #1
 8001242:	7811      	ldrb	r1, [r2, #0]
 8001244:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <Parse_IMU_Data+0x188>)
 8001246:	54d1      	strb	r1, [r2, r3]
 8001248:	e013      	b.n	8001272 <Parse_IMU_Data+0xa6>
                case 1: beta[i - cnt1] = IMUarray[i]; break;  // 두 번째 값
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	441a      	add	r2, r3
 8001250:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001254:	1acb      	subs	r3, r1, r3
 8001256:	7811      	ldrb	r1, [r2, #0]
 8001258:	4a3f      	ldr	r2, [pc, #252]	@ (8001358 <Parse_IMU_Data+0x18c>)
 800125a:	54d1      	strb	r1, [r2, r3]
 800125c:	e009      	b.n	8001272 <Parse_IMU_Data+0xa6>
                case 2: gamm[i - cnt2] = IMUarray[i]; break;  // 세 번째 값
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	441a      	add	r2, r3
 8001264:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001268:	1acb      	subs	r3, r1, r3
 800126a:	7811      	ldrb	r1, [r2, #0]
 800126c:	4a3b      	ldr	r2, [pc, #236]	@ (800135c <Parse_IMU_Data+0x190>)
 800126e:	54d1      	strb	r1, [r2, r3]
 8001270:	bf00      	nop
            }
        }
        if (IMUarray[i] == '\r') {
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b0d      	cmp	r3, #13
 800127c:	d103      	bne.n	8001286 <Parse_IMU_Data+0xba>
            cnt3 = i + 1;
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
            break;
 8001284:	e005      	b.n	8001292 <Parse_IMU_Data+0xc6>
    for (int i = 1; i < IMU_DATA_SIZE; i++) {
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	3301      	adds	r3, #1
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	2b1e      	cmp	r3, #30
 8001290:	ddae      	ble.n	80011f0 <Parse_IMU_Data+0x24>
        }
    }

    // 문자열이 짧은 경우 0으로 채움
    for (int j = cnt1 - 2; j < 7; j++) alpha[j] = '0';
 8001292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001294:	3b02      	subs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	e007      	b.n	80012aa <Parse_IMU_Data+0xde>
 800129a:	4a2e      	ldr	r2, [pc, #184]	@ (8001354 <Parse_IMU_Data+0x188>)
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	4413      	add	r3, r2
 80012a0:	2230      	movs	r2, #48	@ 0x30
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	3301      	adds	r3, #1
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	2b06      	cmp	r3, #6
 80012ae:	ddf4      	ble.n	800129a <Parse_IMU_Data+0xce>
    for (int k = cnt2 - (cnt1); k < 8; k++) beta[k - 1] = '0';
 80012b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e007      	b.n	80012ca <Parse_IMU_Data+0xfe>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b01      	subs	r3, #1
 80012be:	4a26      	ldr	r2, [pc, #152]	@ (8001358 <Parse_IMU_Data+0x18c>)
 80012c0:	2130      	movs	r1, #48	@ 0x30
 80012c2:	54d1      	strb	r1, [r2, r3]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	ddf4      	ble.n	80012ba <Parse_IMU_Data+0xee>
    for (int l = cnt3 - (cnt2); l < 8; l++) gamm[l - 1] = '0';
 80012d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	e007      	b.n	80012ea <Parse_IMU_Data+0x11e>
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a1f      	ldr	r2, [pc, #124]	@ (800135c <Parse_IMU_Data+0x190>)
 80012e0:	2130      	movs	r1, #48	@ 0x30
 80012e2:	54d1      	strb	r1, [r2, r3]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	3301      	adds	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b07      	cmp	r3, #7
 80012ee:	ddf4      	ble.n	80012da <Parse_IMU_Data+0x10e>

    // 문자열을 double로 변환
    *roll = strtod(alpha, &pos);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4817      	ldr	r0, [pc, #92]	@ (8001354 <Parse_IMU_Data+0x188>)
 80012f8:	f003 f93a 	bl	8004570 <strtod>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f910 	bl	8000524 <__aeabi_i2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	e9c1 2300 	strd	r2, r3, [r1]
    *pitch = strtod(beta, &pos);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4810      	ldr	r0, [pc, #64]	@ (8001358 <Parse_IMU_Data+0x18c>)
 8001316:	f003 f92b 	bl	8004570 <strtod>
 800131a:	4603      	mov	r3, r0
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_i2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	e9c1 2300 	strd	r2, r3, [r1]
    *yaw = strtod(gamm, &pos);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480a      	ldr	r0, [pc, #40]	@ (800135c <Parse_IMU_Data+0x190>)
 8001334:	f003 f91c 	bl	8004570 <strtod>
 8001338:	4603      	mov	r3, r0
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8f2 	bl	8000524 <__aeabi_i2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	6839      	ldr	r1, [r7, #0]
 8001346:	e9c1 2300 	strd	r2, r3, [r1]
}
 800134a:	bf00      	nop
 800134c:	3738      	adds	r7, #56	@ 0x38
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000374 	.word	0x20000374
 8001358:	2000037c 	.word	0x2000037c
 800135c:	20000384 	.word	0x20000384

08001360 <Get_IMU_Data>:

int Get_IMU_Data(UART_HandleTypeDef* huart, char* IMUarray, double* roll, double* pitch, double* yaw) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
    unsigned char star = '*';
 800136e:	232a      	movs	r3, #42	@ 0x2a
 8001370:	77fb      	strb	r3, [r7, #31]
    unsigned char receivedChar;
    int isStarReceived = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]

    // UART에서 한 글자씩 받아서 '*'인지 확인
    while (1) {
        HAL_UART_Receive(huart, &receivedChar, 1, HAL_MAX_DELAY);  // 1 바이트씩 수신
 8001376:	f107 0117 	add.w	r1, r7, #23
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	2201      	movs	r2, #1
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f001 fd1b 	bl	8002dbc <HAL_UART_Receive>
        if (receivedChar == star) {
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	7ffa      	ldrb	r2, [r7, #31]
 800138a:	429a      	cmp	r2, r3
 800138c:	d1f3      	bne.n	8001376 <Get_IMU_Data+0x16>
            isStarReceived = 1;  // '*' 문자를 받았다는 플래그 설정
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
            break;
 8001392:	bf00      	nop
        }
    }

    // '*' 문자를 받았을 때만 데이터를 받아옴
    if (isStarReceived) {
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00c      	beq.n	80013b4 <Get_IMU_Data+0x54>
        HAL_UART_Receive_DMA(huart, IMUarray, IMU_DATA_SIZE);  // 31 바이트 IMU 데이터 수신
 800139a:	221f      	movs	r2, #31
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f001 fda3 	bl	8002eea <HAL_UART_Receive_DMA>
        Parse_IMU_Data(IMUarray, roll, pitch, yaw);  // 수신된 데이터를 파싱
 80013a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	68b8      	ldr	r0, [r7, #8]
 80013ac:	f7ff ff0e 	bl	80011cc <Parse_IMU_Data>
        return 1;  // 성공적으로 데이터를 받았음을 반환
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <Get_IMU_Data+0x56>
    }
    return 0;  // 실패 시 0 반환
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <Read_All_IMU_Data>:

void Read_All_IMU_Data(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af02      	add	r7, sp, #8
    // IMU 1 (UART1)
    if (Get_IMU_Data(&huart1, IMU1array, &roll1, &pitch1, &yaw1)) {
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <Read_All_IMU_Data+0x3c>)
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <Read_All_IMU_Data+0x40>)
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <Read_All_IMU_Data+0x44>)
 80013ce:	490e      	ldr	r1, [pc, #56]	@ (8001408 <Read_All_IMU_Data+0x48>)
 80013d0:	480e      	ldr	r0, [pc, #56]	@ (800140c <Read_All_IMU_Data+0x4c>)
 80013d2:	f7ff ffc5 	bl	8001360 <Get_IMU_Data>
        // IMU1 데이터 처리
    }

    // IMU 2 (UART2)
    if (Get_IMU_Data(&huart2, IMU2array, &roll2, &pitch2, &yaw2)) {
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <Read_All_IMU_Data+0x50>)
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <Read_All_IMU_Data+0x54>)
 80013dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <Read_All_IMU_Data+0x58>)
 80013de:	490f      	ldr	r1, [pc, #60]	@ (800141c <Read_All_IMU_Data+0x5c>)
 80013e0:	480f      	ldr	r0, [pc, #60]	@ (8001420 <Read_All_IMU_Data+0x60>)
 80013e2:	f7ff ffbd 	bl	8001360 <Get_IMU_Data>
        // IMU2 데이터 처리
    }

    // IMU 3 (UART6)
    if (Get_IMU_Data(&huart6, IMU3array, &roll3, &pitch3, &yaw3)) {
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <Read_All_IMU_Data+0x64>)
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <Read_All_IMU_Data+0x68>)
 80013ec:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <Read_All_IMU_Data+0x6c>)
 80013ee:	4910      	ldr	r1, [pc, #64]	@ (8001430 <Read_All_IMU_Data+0x70>)
 80013f0:	4810      	ldr	r0, [pc, #64]	@ (8001434 <Read_All_IMU_Data+0x74>)
 80013f2:	f7ff ffb5 	bl	8001360 <Get_IMU_Data>
        // IMU3 데이터 처리
    }
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200003a0 	.word	0x200003a0
 8001400:	20000398 	.word	0x20000398
 8001404:	20000390 	.word	0x20000390
 8001408:	20000314 	.word	0x20000314
 800140c:	2000023c 	.word	0x2000023c
 8001410:	200003b8 	.word	0x200003b8
 8001414:	200003b0 	.word	0x200003b0
 8001418:	200003a8 	.word	0x200003a8
 800141c:	20000334 	.word	0x20000334
 8001420:	20000284 	.word	0x20000284
 8001424:	200003d0 	.word	0x200003d0
 8001428:	200003c8 	.word	0x200003c8
 800142c:	200003c0 	.word	0x200003c0
 8001430:	20000354 	.word	0x20000354
 8001434:	200002cc 	.word	0x200002cc

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <Error_Handler+0x8>

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_MspInit+0x4c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001458:	6453      	str	r3, [r2, #68]	@ 0x44
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <HAL_MspInit+0x4c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_ADC_MspInit+0x7c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d127      	bne.n	8001506 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_ADC_MspInit+0x80>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	4a15      	ldr	r2, [pc, #84]	@ (8001514 <HAL_ADC_MspInit+0x80>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <HAL_ADC_MspInit+0x80>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_ADC_MspInit+0x80>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a0e      	ldr	r2, [pc, #56]	@ (8001514 <HAL_ADC_MspInit+0x80>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <HAL_ADC_MspInit+0x80>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014ee:	2333      	movs	r3, #51	@ 0x33
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f2:	2303      	movs	r3, #3
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	@ (8001518 <HAL_ADC_MspInit+0x84>)
 8001502:	f000 fe2f 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	@ 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40012000 	.word	0x40012000
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	@ 0x38
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a4b      	ldr	r2, [pc, #300]	@ (8001668 <HAL_UART_MspInit+0x14c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12d      	bne.n	800159a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <HAL_UART_MspInit+0x150>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a49      	ldr	r2, [pc, #292]	@ (800166c <HAL_UART_MspInit+0x150>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b47      	ldr	r3, [pc, #284]	@ (800166c <HAL_UART_MspInit+0x150>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	4b43      	ldr	r3, [pc, #268]	@ (800166c <HAL_UART_MspInit+0x150>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a42      	ldr	r2, [pc, #264]	@ (800166c <HAL_UART_MspInit+0x150>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b40      	ldr	r3, [pc, #256]	@ (800166c <HAL_UART_MspInit+0x150>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001576:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001588:	2307      	movs	r3, #7
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4837      	ldr	r0, [pc, #220]	@ (8001670 <HAL_UART_MspInit+0x154>)
 8001594:	f000 fde6 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001598:	e062      	b.n	8001660 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a35      	ldr	r2, [pc, #212]	@ (8001674 <HAL_UART_MspInit+0x158>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d12c      	bne.n	80015fe <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	4b30      	ldr	r3, [pc, #192]	@ (800166c <HAL_UART_MspInit+0x150>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	4a2f      	ldr	r2, [pc, #188]	@ (800166c <HAL_UART_MspInit+0x150>)
 80015ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b4:	4b2d      	ldr	r3, [pc, #180]	@ (800166c <HAL_UART_MspInit+0x150>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	4b29      	ldr	r3, [pc, #164]	@ (800166c <HAL_UART_MspInit+0x150>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c8:	4a28      	ldr	r2, [pc, #160]	@ (800166c <HAL_UART_MspInit+0x150>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d0:	4b26      	ldr	r3, [pc, #152]	@ (800166c <HAL_UART_MspInit+0x150>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015dc:	230c      	movs	r3, #12
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ec:	2307      	movs	r3, #7
 80015ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	481e      	ldr	r0, [pc, #120]	@ (8001670 <HAL_UART_MspInit+0x154>)
 80015f8:	f000 fdb4 	bl	8002164 <HAL_GPIO_Init>
}
 80015fc:	e030      	b.n	8001660 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1d      	ldr	r2, [pc, #116]	@ (8001678 <HAL_UART_MspInit+0x15c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d12b      	bne.n	8001660 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_UART_MspInit+0x150>)
 800160e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001610:	4a16      	ldr	r2, [pc, #88]	@ (800166c <HAL_UART_MspInit+0x150>)
 8001612:	f043 0320 	orr.w	r3, r3, #32
 8001616:	6453      	str	r3, [r2, #68]	@ 0x44
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <HAL_UART_MspInit+0x150>)
 800161a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <HAL_UART_MspInit+0x150>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162c:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <HAL_UART_MspInit+0x150>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6313      	str	r3, [r2, #48]	@ 0x30
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <HAL_UART_MspInit+0x150>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001640:	23c0      	movs	r3, #192	@ 0xc0
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001650:	2308      	movs	r3, #8
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	4808      	ldr	r0, [pc, #32]	@ (800167c <HAL_UART_MspInit+0x160>)
 800165c:	f000 fd82 	bl	8002164 <HAL_GPIO_Init>
}
 8001660:	bf00      	nop
 8001662:	3738      	adds	r7, #56	@ 0x38
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40011000 	.word	0x40011000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40004400 	.word	0x40004400
 8001678:	40011400 	.word	0x40011400
 800167c:	40020800 	.word	0x40020800

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f000 f957 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}

080016de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_kill>:

int _kill(int pid, int sig)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f8:	f003 f8ac 	bl	8004854 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2216      	movs	r2, #22
 8001700:	601a      	str	r2, [r3, #0]
  return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_exit>:

void _exit (int status)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001716:	f04f 31ff 	mov.w	r1, #4294967295
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffe7 	bl	80016ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <_exit+0x12>

08001724 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e00a      	b.n	800174c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001736:	f3af 8000 	nop.w
 800173a:	4601      	mov	r1, r0
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	b2ca      	uxtb	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	dbf0      	blt.n	8001736 <_read+0x12>
  }

  return len;
 8001754:	687b      	ldr	r3, [r7, #4]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e009      	b.n	8001784 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	60ba      	str	r2, [r7, #8]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf1      	blt.n	8001770 <_write+0x12>
  }
  return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_close>:

int _close(int file)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017be:	605a      	str	r2, [r3, #4]
  return 0;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_isatty>:

int _isatty(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	@ (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f003 f810 	bl	8004854 <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20018000 	.word	0x20018000
 8001860:	00000400 	.word	0x00000400
 8001864:	200003d8 	.word	0x200003d8
 8001868:	20000530 	.word	0x20000530

0800186c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <SystemInit+0x20>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001876:	4a05      	ldr	r2, [pc, #20]	@ (800188c <SystemInit+0x20>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001894:	f7ff ffea 	bl	800186c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001898:	480c      	ldr	r0, [pc, #48]	@ (80018cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189a:	490d      	ldr	r1, [pc, #52]	@ (80018d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800189c:	4a0d      	ldr	r2, [pc, #52]	@ (80018d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b0:	4c0a      	ldr	r4, [pc, #40]	@ (80018dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80018be:	f002 ffcf 	bl	8004860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff fb01 	bl	8000ec8 <main>
  bx  lr    
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018d4:	08006958 	.word	0x08006958
  ldr r2, =_sbss
 80018d8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80018dc:	2000052c 	.word	0x2000052c

080018e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <HAL_Init+0x40>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_Init+0x40>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_Init+0x40>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 fb6f 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	200f      	movs	r0, #15
 8001914:	f000 f808 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fd94 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fb79 	bl	800203e <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f000 fb4f 	bl	8002006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	@ (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	200003dc 	.word	0x200003dc

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200003dc 	.word	0x200003dc

080019c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e033      	b.n	8001a46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fd54 	bl	8001494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d118      	bne.n	8001a38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a0e:	f023 0302 	bic.w	r3, r3, #2
 8001a12:	f043 0202 	orr.w	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f93a 	bl	8001c94 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a36:	e001      	b.n	8001a3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1c>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e105      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x228>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d925      	bls.n	8001ac8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68d9      	ldr	r1, [r3, #12]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b1e      	subs	r3, #30
 8001a92:	2207      	movs	r2, #7
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68d9      	ldr	r1, [r3, #12]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4403      	add	r3, r0
 8001aba:	3b1e      	subs	r3, #30
 8001abc:	409a      	lsls	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	e022      	b.n	8001b0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6919      	ldr	r1, [r3, #16]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	2207      	movs	r2, #7
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	400a      	ands	r2, r1
 8001aea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6919      	ldr	r1, [r3, #16]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4403      	add	r3, r0
 8001b04:	409a      	lsls	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d824      	bhi.n	8001b60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	3b05      	subs	r3, #5
 8001b28:	221f      	movs	r2, #31
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	400a      	ands	r2, r1
 8001b36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b05      	subs	r3, #5
 8001b52:	fa00 f203 	lsl.w	r2, r0, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b5e:	e04c      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d824      	bhi.n	8001bb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	3b23      	subs	r3, #35	@ 0x23
 8001b7a:	221f      	movs	r2, #31
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43da      	mvns	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	400a      	ands	r2, r1
 8001b88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b23      	subs	r3, #35	@ 0x23
 8001ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bb0:	e023      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3b41      	subs	r3, #65	@ 0x41
 8001bc4:	221f      	movs	r2, #31
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3b41      	subs	r3, #65	@ 0x41
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bfa:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <HAL_ADC_ConfigChannel+0x234>)
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <HAL_ADC_ConfigChannel+0x238>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d109      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x1cc>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b12      	cmp	r3, #18
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	@ (8001c88 <HAL_ADC_ConfigChannel+0x238>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d123      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x21e>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d003      	beq.n	8001c36 <HAL_ADC_ConfigChannel+0x1e6>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b11      	cmp	r3, #17
 8001c34:	d11b      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b10      	cmp	r3, #16
 8001c48:	d111      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <HAL_ADC_ConfigChannel+0x23c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <HAL_ADC_ConfigChannel+0x240>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	0c9a      	lsrs	r2, r3, #18
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c60:	e002      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f9      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	40012300 	.word	0x40012300
 8001c88:	40012000 	.word	0x40012000
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	431bde83 	.word	0x431bde83

08001c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c9c:	4b79      	ldr	r3, [pc, #484]	@ (8001e84 <ADC_Init+0x1f0>)
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	021a      	lsls	r2, r3, #8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d26:	4a58      	ldr	r2, [pc, #352]	@ (8001e88 <ADC_Init+0x1f4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6899      	ldr	r1, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	e00f      	b.n	8001d92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d90:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0202 	bic.w	r2, r2, #2
 8001da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e1b      	ldrb	r3, [r3, #24]
 8001dac:	005a      	lsls	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	3b01      	subs	r3, #1
 8001dec:	035a      	lsls	r2, r3, #13
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e007      	b.n	8001e08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e06:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	051a      	lsls	r2, r3, #20
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e4a:	025a      	lsls	r2, r3, #9
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6899      	ldr	r1, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	029a      	lsls	r2, r3, #10
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40012300 	.word	0x40012300
 8001e88:	0f000001 	.word	0x0f000001

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	@ (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	@ (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	@ 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	@ 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f7ff ff8e 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff47 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff5c 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff8e 	bl	8001f44 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffb0 	bl	8001fac <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_DMA_Start_IT+0x26>
 8002078:	2302      	movs	r3, #2
 800207a:	e040      	b.n	80020fe <HAL_DMA_Start_IT+0xa8>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d12f      	bne.n	80020f0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f82e 	bl	8002106 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	223f      	movs	r2, #63	@ 0x3f
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0216 	orr.w	r2, r2, #22
 80020c4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0208 	orr.w	r2, r2, #8
 80020dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e005      	b.n	80020fc <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002122:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b40      	cmp	r3, #64	@ 0x40
 8002132:	d108      	bne.n	8002146 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002144:	e007      	b.n	8002156 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	60da      	str	r2, [r3, #12]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e159      	b.n	8002434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8148 	bne.w	800242e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a2 	beq.w	800242e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b57      	ldr	r3, [pc, #348]	@ (800244c <HAL_GPIO_Init+0x2e8>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4a56      	ldr	r2, [pc, #344]	@ (800244c <HAL_GPIO_Init+0x2e8>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fa:	4b54      	ldr	r3, [pc, #336]	@ (800244c <HAL_GPIO_Init+0x2e8>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_GPIO_Init+0x2ec>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a49      	ldr	r2, [pc, #292]	@ (8002454 <HAL_GPIO_Init+0x2f0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d019      	beq.n	8002366 <HAL_GPIO_Init+0x202>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a48      	ldr	r2, [pc, #288]	@ (8002458 <HAL_GPIO_Init+0x2f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_GPIO_Init+0x1fe>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a47      	ldr	r2, [pc, #284]	@ (800245c <HAL_GPIO_Init+0x2f8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00d      	beq.n	800235e <HAL_GPIO_Init+0x1fa>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a46      	ldr	r2, [pc, #280]	@ (8002460 <HAL_GPIO_Init+0x2fc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x1f6>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a45      	ldr	r2, [pc, #276]	@ (8002464 <HAL_GPIO_Init+0x300>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_GPIO_Init+0x1f2>
 8002352:	2304      	movs	r3, #4
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002356:	2307      	movs	r3, #7
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x204>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x204>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002366:	2300      	movs	r3, #0
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002378:	4935      	ldr	r1, [pc, #212]	@ (8002450 <HAL_GPIO_Init+0x2ec>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <HAL_GPIO_Init+0x304>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002468 <HAL_GPIO_Init+0x304>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <HAL_GPIO_Init+0x304>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d4:	4a24      	ldr	r2, [pc, #144]	@ (8002468 <HAL_GPIO_Init+0x304>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023da:	4b23      	ldr	r3, [pc, #140]	@ (8002468 <HAL_GPIO_Init+0x304>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002468 <HAL_GPIO_Init+0x304>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002404:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <HAL_GPIO_Init+0x304>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002428:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <HAL_GPIO_Init+0x304>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	f67f aea2 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3724      	adds	r7, #36	@ 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	40013800 	.word	0x40013800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020400 	.word	0x40020400
 800245c:	40020800 	.word	0x40020800
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40021000 	.word	0x40021000
 8002468:	40013c00 	.word	0x40013c00

0800246c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e267      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d075      	beq.n	8002576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800248a:	4b88      	ldr	r3, [pc, #544]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b04      	cmp	r3, #4
 8002494:	d00c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002496:	4b85      	ldr	r3, [pc, #532]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d112      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a2:	4b82      	ldr	r3, [pc, #520]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ae:	d10b      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4b7e      	ldr	r3, [pc, #504]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d05b      	beq.n	8002574 <HAL_RCC_OscConfig+0x108>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d157      	bne.n	8002574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e242      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d0:	d106      	bne.n	80024e0 <HAL_RCC_OscConfig+0x74>
 80024d2:	4b76      	ldr	r3, [pc, #472]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a75      	ldr	r2, [pc, #468]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e01d      	b.n	800251c <HAL_RCC_OscConfig+0xb0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x98>
 80024ea:	4b70      	ldr	r3, [pc, #448]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6f      	ldr	r2, [pc, #444]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b6d      	ldr	r3, [pc, #436]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6c      	ldr	r2, [pc, #432]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0xb0>
 8002504:	4b69      	ldr	r3, [pc, #420]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a68      	ldr	r2, [pc, #416]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 800250a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b66      	ldr	r3, [pc, #408]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a65      	ldr	r2, [pc, #404]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800251a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fa44 	bl	80019b0 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff fa40 	bl	80019b0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	@ 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e207      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b5b      	ldr	r3, [pc, #364]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0xc0>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fa30 	bl	80019b0 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff fa2c 	bl	80019b0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	@ 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1f3      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	4b51      	ldr	r3, [pc, #324]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0xe8>
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d063      	beq.n	800264a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002582:	4b4a      	ldr	r3, [pc, #296]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258e:	4b47      	ldr	r3, [pc, #284]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002596:	2b08      	cmp	r3, #8
 8002598:	d11c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259a:	4b44      	ldr	r3, [pc, #272]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d116      	bne.n	80025d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	4b41      	ldr	r3, [pc, #260]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x152>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e1c7      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025be:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4937      	ldr	r1, [pc, #220]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	e03a      	b.n	800264a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025dc:	4b34      	ldr	r3, [pc, #208]	@ (80026b0 <HAL_RCC_OscConfig+0x244>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff f9e5 	bl	80019b0 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff f9e1 	bl	80019b0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1a8      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b28      	ldr	r3, [pc, #160]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4925      	ldr	r1, [pc, #148]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <HAL_RCC_OscConfig+0x244>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff f9c4 	bl	80019b0 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7ff f9c0 	bl	80019b0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e187      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d036      	beq.n	80026c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_RCC_OscConfig+0x248>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7ff f9a4 	bl	80019b0 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266c:	f7ff f9a0 	bl	80019b0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e167      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_RCC_OscConfig+0x240>)
 8002680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x200>
 800268a:	e01b      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <HAL_RCC_OscConfig+0x248>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7ff f98d 	bl	80019b0 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	e00e      	b.n	80026b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269a:	f7ff f989 	bl	80019b0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d907      	bls.n	80026b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e150      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
 80026ac:	40023800 	.word	0x40023800
 80026b0:	42470000 	.word	0x42470000
 80026b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b88      	ldr	r3, [pc, #544]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ea      	bne.n	800269a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8097 	beq.w	8002800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b81      	ldr	r3, [pc, #516]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b7d      	ldr	r3, [pc, #500]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	4a7c      	ldr	r2, [pc, #496]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f2:	4b7a      	ldr	r3, [pc, #488]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b77      	ldr	r3, [pc, #476]	@ (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d118      	bne.n	8002740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270e:	4b74      	ldr	r3, [pc, #464]	@ (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a73      	ldr	r2, [pc, #460]	@ (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7ff f949 	bl	80019b0 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7ff f945 	bl	80019b0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e10c      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	4b6a      	ldr	r3, [pc, #424]	@ (80028e0 <HAL_RCC_OscConfig+0x474>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x2ea>
 8002748:	4b64      	ldr	r3, [pc, #400]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274c:	4a63      	ldr	r2, [pc, #396]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	@ 0x70
 8002754:	e01c      	b.n	8002790 <HAL_RCC_OscConfig+0x324>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x30c>
 800275e:	4b5f      	ldr	r3, [pc, #380]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002762:	4a5e      	ldr	r2, [pc, #376]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	6713      	str	r3, [r2, #112]	@ 0x70
 800276a:	4b5c      	ldr	r3, [pc, #368]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	4a5b      	ldr	r2, [pc, #364]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6713      	str	r3, [r2, #112]	@ 0x70
 8002776:	e00b      	b.n	8002790 <HAL_RCC_OscConfig+0x324>
 8002778:	4b58      	ldr	r3, [pc, #352]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	4a57      	ldr	r2, [pc, #348]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70
 8002784:	4b55      	ldr	r3, [pc, #340]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	4a54      	ldr	r2, [pc, #336]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff f90a 	bl	80019b0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7ff f906 	bl	80019b0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0cb      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	4b49      	ldr	r3, [pc, #292]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0ee      	beq.n	80027a0 <HAL_RCC_OscConfig+0x334>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7ff f8f4 	bl	80019b0 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7ff f8f0 	bl	80019b0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0b5      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	4b3e      	ldr	r3, [pc, #248]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ee      	bne.n	80027cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4b39      	ldr	r3, [pc, #228]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	4a38      	ldr	r2, [pc, #224]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80027fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a1 	beq.w	800294c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280a:	4b34      	ldr	r3, [pc, #208]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b08      	cmp	r3, #8
 8002814:	d05c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d141      	bne.n	80028a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <HAL_RCC_OscConfig+0x478>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff f8c4 	bl	80019b0 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7ff f8c0 	bl	80019b0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e087      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	4b27      	ldr	r3, [pc, #156]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	491b      	ldr	r1, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002874:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <HAL_RCC_OscConfig+0x478>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7ff f899 	bl	80019b0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002882:	f7ff f895 	bl	80019b0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e05c      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002894:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x416>
 80028a0:	e054      	b.n	800294c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <HAL_RCC_OscConfig+0x478>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff f882 	bl	80019b0 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff f87e 	bl	80019b0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e045      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_RCC_OscConfig+0x470>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x444>
 80028ce:	e03d      	b.n	800294c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e038      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40007000 	.word	0x40007000
 80028e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_RCC_OscConfig+0x4ec>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d028      	beq.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d121      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d11a      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800291e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002920:	4293      	cmp	r3, r2
 8002922:	d111      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	3b01      	subs	r3, #1
 8002932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0cc      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b68      	ldr	r3, [pc, #416]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d90c      	bls.n	8002998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b65      	ldr	r3, [pc, #404]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d044      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e067      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4934      	ldr	r1, [pc, #208]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe ffb0 	bl	80019b0 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7fe ffac 	bl	80019b0 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b25      	ldr	r3, [pc, #148]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d20c      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f821 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	@ (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	@ (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe ff10 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08006578 	.word	0x08006578
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b090      	sub	sp, #64	@ 0x40
 8002b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b40:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d00d      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x40>
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	f200 80a1 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x34>
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b5a:	e09b      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b53      	ldr	r3, [pc, #332]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x184>)
 8002b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b60:	e09b      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b62:	4b53      	ldr	r3, [pc, #332]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b66:	e098      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d028      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	2200      	movs	r2, #0
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b90:	2100      	movs	r1, #0
 8002b92:	4b47      	ldr	r3, [pc, #284]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b94:	fb03 f201 	mul.w	r2, r3, r1
 8002b98:	2300      	movs	r3, #0
 8002b9a:	fb00 f303 	mul.w	r3, r0, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a43      	ldr	r2, [pc, #268]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba8:	460a      	mov	r2, r1
 8002baa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bae:	4413      	add	r3, r2
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	61fa      	str	r2, [r7, #28]
 8002bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bc2:	f7fd ffd3 	bl	8000b6c <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bce:	e053      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd0:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	617a      	str	r2, [r7, #20]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002be2:	f04f 0b00 	mov.w	fp, #0
 8002be6:	4652      	mov	r2, sl
 8002be8:	465b      	mov	r3, fp
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	0159      	lsls	r1, r3, #5
 8002bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf8:	0150      	lsls	r0, r2, #5
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	ebb2 080a 	subs.w	r8, r2, sl
 8002c02:	eb63 090b 	sbc.w	r9, r3, fp
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	00eb      	lsls	r3, r5, #3
 8002c2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c30:	00e2      	lsls	r2, r4, #3
 8002c32:	4614      	mov	r4, r2
 8002c34:	461d      	mov	r5, r3
 8002c36:	eb14 030a 	adds.w	r3, r4, sl
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	eb45 030b 	adc.w	r3, r5, fp
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	028b      	lsls	r3, r1, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c58:	4621      	mov	r1, r4
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c62:	2200      	movs	r2, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	60fa      	str	r2, [r7, #12]
 8002c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c6c:	f7fd ff7e 	bl	8000b6c <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x184>)
 8002c96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3740      	adds	r7, #64	@ 0x40
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	017d7840 	.word	0x017d7840

08002cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08006588 	.word	0x08006588

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffdc 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	@ (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08006588 	.word	0x08006588

08002d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e042      	b.n	8002db4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe fbea 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2224      	movs	r2, #36	@ 0x24
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fb8f 	bl	8003484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	@ 0x28
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	f040 8081 	bne.w	8002ee0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_UART_Receive+0x2e>
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e079      	b.n	8002ee2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2222      	movs	r2, #34	@ 0x22
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e02:	f7fe fdd5 	bl	80019b0 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	88fa      	ldrh	r2, [r7, #6]
 8002e0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e1c:	d108      	bne.n	8002e30 <HAL_UART_Receive+0x74>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e003      	b.n	8002e38 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e38:	e047      	b.n	8002eca <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2120      	movs	r1, #32
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f99d 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e042      	b.n	8002ee2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10c      	bne.n	8002e7c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	3302      	adds	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e01f      	b.n	8002ebc <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e84:	d007      	beq.n	8002e96 <HAL_UART_Receive+0xda>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_UART_Receive+0xe8>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e008      	b.n	8002eb6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1b2      	bne.n	8002e3a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d112      	bne.n	8002f2a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_UART_Receive_DMA+0x26>
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e00b      	b.n	8002f2c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f989 	bl	8003238 <UART_Start_Receive_DMA>
 8002f26:	4603      	mov	r3, r0
 8002f28:	e000      	b.n	8002f2c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b09c      	sub	sp, #112	@ 0x70
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f94:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d172      	bne.n	800308a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002fca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fcc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e5      	bne.n	8002faa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ffe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003000:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800300c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e5      	bne.n	8002fde <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3314      	adds	r3, #20
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	623b      	str	r3, [r7, #32]
   return(result);
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003028:	663b      	str	r3, [r7, #96]	@ 0x60
 800302a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3314      	adds	r3, #20
 8003030:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003032:	633a      	str	r2, [r7, #48]	@ 0x30
 8003034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e5      	bne.n	8003012 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003048:	2220      	movs	r2, #32
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800304e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	2b01      	cmp	r3, #1
 8003054:	d119      	bne.n	800308a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	60fb      	str	r3, [r7, #12]
   return(result);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f023 0310 	bic.w	r3, r3, #16
 800306c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800306e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003076:	61fa      	str	r2, [r7, #28]
 8003078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	617b      	str	r3, [r7, #20]
   return(result);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e5      	bne.n	8003056 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800308a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800308c:	2200      	movs	r2, #0
 800308e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	2b01      	cmp	r3, #1
 8003096:	d106      	bne.n	80030a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800309a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800309c:	4619      	mov	r1, r3
 800309e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80030a0:	f7ff ff66 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030a4:	e002      	b.n	80030ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80030a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80030a8:	f7ff ff44 	bl	8002f34 <HAL_UART_RxCpltCallback>
}
 80030ac:	bf00      	nop
 80030ae:	3770      	adds	r7, #112	@ 0x70
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d108      	bne.n	80030e2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff ff48 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030e0:	e002      	b.n	80030e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff ff30 	bl	8002f48 <HAL_UART_RxHalfCpltCallback>
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310c:	2b80      	cmp	r3, #128	@ 0x80
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b21      	cmp	r3, #33	@ 0x21
 8003122:	d108      	bne.n	8003136 <UART_DMAError+0x46>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2200      	movs	r2, #0
 800312e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003130:	68b8      	ldr	r0, [r7, #8]
 8003132:	f000 f91b 	bl	800336c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b22      	cmp	r3, #34	@ 0x22
 8003156:	d108      	bne.n	800316a <UART_DMAError+0x7a>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003164:	68b8      	ldr	r0, [r7, #8]
 8003166:	f000 f929 	bl	80033bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	f043 0210 	orr.w	r2, r3, #16
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003176:	68b8      	ldr	r0, [r7, #8]
 8003178:	f7ff fef0 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003194:	e03b      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d037      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe fc07 	bl	80019b0 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e03a      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d023      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b80      	cmp	r3, #128	@ 0x80
 80031ca:	d020      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b40      	cmp	r3, #64	@ 0x40
 80031d0:	d01d      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d116      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f8e0 	bl	80033bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2208      	movs	r2, #8
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e00f      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	429a      	cmp	r2, r3
 800322a:	d0b4      	beq.n	8003196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b098      	sub	sp, #96	@ 0x60
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	4613      	mov	r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2222      	movs	r2, #34	@ 0x22
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	4a3e      	ldr	r2, [pc, #248]	@ (8003360 <UART_Start_Receive_DMA+0x128>)
 8003266:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	4a3d      	ldr	r2, [pc, #244]	@ (8003364 <UART_Start_Receive_DMA+0x12c>)
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003274:	4a3c      	ldr	r2, [pc, #240]	@ (8003368 <UART_Start_Receive_DMA+0x130>)
 8003276:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	2200      	movs	r2, #0
 800327e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	f7fe fedd 	bl	8002056 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d019      	beq.n	80032ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80032e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80032e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	657b      	str	r3, [r7, #84]	@ 0x54
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800330e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3314      	adds	r3, #20
 8003328:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	617b      	str	r3, [r7, #20]
   return(result);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003338:	653b      	str	r3, [r7, #80]	@ 0x50
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003342:	627a      	str	r2, [r7, #36]	@ 0x24
 8003344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	6a39      	ldr	r1, [r7, #32]
 8003348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e5      	bne.n	8003322 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3760      	adds	r7, #96	@ 0x60
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	08002f89 	.word	0x08002f89
 8003364:	080030b5 	.word	0x080030b5
 8003368:	080030f1 	.word	0x080030f1

0800336c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	@ 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	60bb      	str	r3, [r7, #8]
   return(result);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	61ba      	str	r2, [r7, #24]
 8003396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6979      	ldr	r1, [r7, #20]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	613b      	str	r3, [r7, #16]
   return(result);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e5      	bne.n	8003374 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80033b0:	bf00      	nop
 80033b2:	3724      	adds	r7, #36	@ 0x24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b095      	sub	sp, #84	@ 0x54
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e5      	bne.n	80033c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3314      	adds	r3, #20
 80033fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	61fb      	str	r3, [r7, #28]
   return(result);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003418:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800341e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e5      	bne.n	80033f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	2b01      	cmp	r3, #1
 8003432:	d119      	bne.n	8003468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	60bb      	str	r3, [r7, #8]
   return(result);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f023 0310 	bic.w	r3, r3, #16
 800344a:	647b      	str	r3, [r7, #68]	@ 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003454:	61ba      	str	r2, [r7, #24]
 8003456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6979      	ldr	r1, [r7, #20]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	613b      	str	r3, [r7, #16]
   return(result);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003476:	bf00      	nop
 8003478:	3754      	adds	r7, #84	@ 0x54
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b0c0      	sub	sp, #256	@ 0x100
 800348a:	af00      	add	r7, sp, #0
 800348c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a0:	68d9      	ldr	r1, [r3, #12]
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	ea40 0301 	orr.w	r3, r0, r1
 80034ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034dc:	f021 010c 	bic.w	r1, r1, #12
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034ea:	430b      	orrs	r3, r1
 80034ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fe:	6999      	ldr	r1, [r3, #24]
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	ea40 0301 	orr.w	r3, r0, r1
 800350a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4b8f      	ldr	r3, [pc, #572]	@ (8003750 <UART_SetConfig+0x2cc>)
 8003514:	429a      	cmp	r2, r3
 8003516:	d005      	beq.n	8003524 <UART_SetConfig+0xa0>
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b8d      	ldr	r3, [pc, #564]	@ (8003754 <UART_SetConfig+0x2d0>)
 8003520:	429a      	cmp	r2, r3
 8003522:	d104      	bne.n	800352e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7ff fbe6 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8003528:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800352c:	e003      	b.n	8003536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800352e:	f7ff fbcd 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003532:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003540:	f040 810c 	bne.w	800375c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800354e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003556:	4622      	mov	r2, r4
 8003558:	462b      	mov	r3, r5
 800355a:	1891      	adds	r1, r2, r2
 800355c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800355e:	415b      	adcs	r3, r3
 8003560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003566:	4621      	mov	r1, r4
 8003568:	eb12 0801 	adds.w	r8, r2, r1
 800356c:	4629      	mov	r1, r5
 800356e:	eb43 0901 	adc.w	r9, r3, r1
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800357e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003586:	4690      	mov	r8, r2
 8003588:	4699      	mov	r9, r3
 800358a:	4623      	mov	r3, r4
 800358c:	eb18 0303 	adds.w	r3, r8, r3
 8003590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003594:	462b      	mov	r3, r5
 8003596:	eb49 0303 	adc.w	r3, r9, r3
 800359a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035b2:	460b      	mov	r3, r1
 80035b4:	18db      	adds	r3, r3, r3
 80035b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80035b8:	4613      	mov	r3, r2
 80035ba:	eb42 0303 	adc.w	r3, r2, r3
 80035be:	657b      	str	r3, [r7, #84]	@ 0x54
 80035c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035c8:	f7fd fad0 	bl	8000b6c <__aeabi_uldivmod>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4b61      	ldr	r3, [pc, #388]	@ (8003758 <UART_SetConfig+0x2d4>)
 80035d2:	fba3 2302 	umull	r2, r3, r3, r2
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	011c      	lsls	r4, r3, #4
 80035da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035ec:	4642      	mov	r2, r8
 80035ee:	464b      	mov	r3, r9
 80035f0:	1891      	adds	r1, r2, r2
 80035f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035f4:	415b      	adcs	r3, r3
 80035f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035fc:	4641      	mov	r1, r8
 80035fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003602:	4649      	mov	r1, r9
 8003604:	eb43 0b01 	adc.w	fp, r3, r1
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361c:	4692      	mov	sl, r2
 800361e:	469b      	mov	fp, r3
 8003620:	4643      	mov	r3, r8
 8003622:	eb1a 0303 	adds.w	r3, sl, r3
 8003626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800362a:	464b      	mov	r3, r9
 800362c:	eb4b 0303 	adc.w	r3, fp, r3
 8003630:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003640:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003648:	460b      	mov	r3, r1
 800364a:	18db      	adds	r3, r3, r3
 800364c:	643b      	str	r3, [r7, #64]	@ 0x40
 800364e:	4613      	mov	r3, r2
 8003650:	eb42 0303 	adc.w	r3, r2, r3
 8003654:	647b      	str	r3, [r7, #68]	@ 0x44
 8003656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800365a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800365e:	f7fd fa85 	bl	8000b6c <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4611      	mov	r1, r2
 8003668:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <UART_SetConfig+0x2d4>)
 800366a:	fba3 2301 	umull	r2, r3, r3, r1
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	2264      	movs	r2, #100	@ 0x64
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	1acb      	subs	r3, r1, r3
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800367e:	4b36      	ldr	r3, [pc, #216]	@ (8003758 <UART_SetConfig+0x2d4>)
 8003680:	fba3 2302 	umull	r2, r3, r3, r2
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800368c:	441c      	add	r4, r3
 800368e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003692:	2200      	movs	r2, #0
 8003694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003698:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800369c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036a0:	4642      	mov	r2, r8
 80036a2:	464b      	mov	r3, r9
 80036a4:	1891      	adds	r1, r2, r2
 80036a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036a8:	415b      	adcs	r3, r3
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036b0:	4641      	mov	r1, r8
 80036b2:	1851      	adds	r1, r2, r1
 80036b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80036b6:	4649      	mov	r1, r9
 80036b8:	414b      	adcs	r3, r1
 80036ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036c8:	4659      	mov	r1, fp
 80036ca:	00cb      	lsls	r3, r1, #3
 80036cc:	4651      	mov	r1, sl
 80036ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d2:	4651      	mov	r1, sl
 80036d4:	00ca      	lsls	r2, r1, #3
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	4642      	mov	r2, r8
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036e4:	464b      	mov	r3, r9
 80036e6:	460a      	mov	r2, r1
 80036e8:	eb42 0303 	adc.w	r3, r2, r3
 80036ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003704:	460b      	mov	r3, r1
 8003706:	18db      	adds	r3, r3, r3
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370a:	4613      	mov	r3, r2
 800370c:	eb42 0303 	adc.w	r3, r2, r3
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800371a:	f7fd fa27 	bl	8000b6c <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <UART_SetConfig+0x2d4>)
 8003724:	fba3 1302 	umull	r1, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2164      	movs	r1, #100	@ 0x64
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	3332      	adds	r3, #50	@ 0x32
 8003736:	4a08      	ldr	r2, [pc, #32]	@ (8003758 <UART_SetConfig+0x2d4>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 0207 	and.w	r2, r3, #7
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4422      	add	r2, r4
 800374a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800374c:	e106      	b.n	800395c <UART_SetConfig+0x4d8>
 800374e:	bf00      	nop
 8003750:	40011000 	.word	0x40011000
 8003754:	40011400 	.word	0x40011400
 8003758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800375c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003760:	2200      	movs	r2, #0
 8003762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003766:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800376a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800376e:	4642      	mov	r2, r8
 8003770:	464b      	mov	r3, r9
 8003772:	1891      	adds	r1, r2, r2
 8003774:	6239      	str	r1, [r7, #32]
 8003776:	415b      	adcs	r3, r3
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
 800377a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800377e:	4641      	mov	r1, r8
 8003780:	1854      	adds	r4, r2, r1
 8003782:	4649      	mov	r1, r9
 8003784:	eb43 0501 	adc.w	r5, r3, r1
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	00eb      	lsls	r3, r5, #3
 8003792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003796:	00e2      	lsls	r2, r4, #3
 8003798:	4614      	mov	r4, r2
 800379a:	461d      	mov	r5, r3
 800379c:	4643      	mov	r3, r8
 800379e:	18e3      	adds	r3, r4, r3
 80037a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037a4:	464b      	mov	r3, r9
 80037a6:	eb45 0303 	adc.w	r3, r5, r3
 80037aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037ca:	4629      	mov	r1, r5
 80037cc:	008b      	lsls	r3, r1, #2
 80037ce:	4621      	mov	r1, r4
 80037d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d4:	4621      	mov	r1, r4
 80037d6:	008a      	lsls	r2, r1, #2
 80037d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037dc:	f7fd f9c6 	bl	8000b6c <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4b60      	ldr	r3, [pc, #384]	@ (8003968 <UART_SetConfig+0x4e4>)
 80037e6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	011c      	lsls	r4, r3, #4
 80037ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003800:	4642      	mov	r2, r8
 8003802:	464b      	mov	r3, r9
 8003804:	1891      	adds	r1, r2, r2
 8003806:	61b9      	str	r1, [r7, #24]
 8003808:	415b      	adcs	r3, r3
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003810:	4641      	mov	r1, r8
 8003812:	1851      	adds	r1, r2, r1
 8003814:	6139      	str	r1, [r7, #16]
 8003816:	4649      	mov	r1, r9
 8003818:	414b      	adcs	r3, r1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003828:	4659      	mov	r1, fp
 800382a:	00cb      	lsls	r3, r1, #3
 800382c:	4651      	mov	r1, sl
 800382e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003832:	4651      	mov	r1, sl
 8003834:	00ca      	lsls	r2, r1, #3
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	4603      	mov	r3, r0
 800383c:	4642      	mov	r2, r8
 800383e:	189b      	adds	r3, r3, r2
 8003840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003844:	464b      	mov	r3, r9
 8003846:	460a      	mov	r2, r1
 8003848:	eb42 0303 	adc.w	r3, r2, r3
 800384c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	67bb      	str	r3, [r7, #120]	@ 0x78
 800385a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003868:	4649      	mov	r1, r9
 800386a:	008b      	lsls	r3, r1, #2
 800386c:	4641      	mov	r1, r8
 800386e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003872:	4641      	mov	r1, r8
 8003874:	008a      	lsls	r2, r1, #2
 8003876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800387a:	f7fd f977 	bl	8000b6c <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4611      	mov	r1, r2
 8003884:	4b38      	ldr	r3, [pc, #224]	@ (8003968 <UART_SetConfig+0x4e4>)
 8003886:	fba3 2301 	umull	r2, r3, r3, r1
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2264      	movs	r2, #100	@ 0x64
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	1acb      	subs	r3, r1, r3
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	3332      	adds	r3, #50	@ 0x32
 8003898:	4a33      	ldr	r2, [pc, #204]	@ (8003968 <UART_SetConfig+0x4e4>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a4:	441c      	add	r4, r3
 80038a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038aa:	2200      	movs	r2, #0
 80038ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80038ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80038b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038b4:	4642      	mov	r2, r8
 80038b6:	464b      	mov	r3, r9
 80038b8:	1891      	adds	r1, r2, r2
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	415b      	adcs	r3, r3
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c4:	4641      	mov	r1, r8
 80038c6:	1851      	adds	r1, r2, r1
 80038c8:	6039      	str	r1, [r7, #0]
 80038ca:	4649      	mov	r1, r9
 80038cc:	414b      	adcs	r3, r1
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038dc:	4659      	mov	r1, fp
 80038de:	00cb      	lsls	r3, r1, #3
 80038e0:	4651      	mov	r1, sl
 80038e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038e6:	4651      	mov	r1, sl
 80038e8:	00ca      	lsls	r2, r1, #3
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	4642      	mov	r2, r8
 80038f2:	189b      	adds	r3, r3, r2
 80038f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038f6:	464b      	mov	r3, r9
 80038f8:	460a      	mov	r2, r1
 80038fa:	eb42 0303 	adc.w	r3, r2, r3
 80038fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	663b      	str	r3, [r7, #96]	@ 0x60
 800390a:	667a      	str	r2, [r7, #100]	@ 0x64
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003918:	4649      	mov	r1, r9
 800391a:	008b      	lsls	r3, r1, #2
 800391c:	4641      	mov	r1, r8
 800391e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003922:	4641      	mov	r1, r8
 8003924:	008a      	lsls	r2, r1, #2
 8003926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800392a:	f7fd f91f 	bl	8000b6c <__aeabi_uldivmod>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4b0d      	ldr	r3, [pc, #52]	@ (8003968 <UART_SetConfig+0x4e4>)
 8003934:	fba3 1302 	umull	r1, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2164      	movs	r1, #100	@ 0x64
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	3332      	adds	r3, #50	@ 0x32
 8003946:	4a08      	ldr	r2, [pc, #32]	@ (8003968 <UART_SetConfig+0x4e4>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4422      	add	r2, r4
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003962:	46bd      	mov	sp, r7
 8003964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003968:	51eb851f 	.word	0x51eb851f

0800396c <sulp>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4604      	mov	r4, r0
 8003970:	460d      	mov	r5, r1
 8003972:	ec45 4b10 	vmov	d0, r4, r5
 8003976:	4616      	mov	r6, r2
 8003978:	f001 ff6a 	bl	8005850 <__ulp>
 800397c:	ec51 0b10 	vmov	r0, r1, d0
 8003980:	b17e      	cbz	r6, 80039a2 <sulp+0x36>
 8003982:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003986:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800398a:	2b00      	cmp	r3, #0
 800398c:	dd09      	ble.n	80039a2 <sulp+0x36>
 800398e:	051b      	lsls	r3, r3, #20
 8003990:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8003994:	2400      	movs	r4, #0
 8003996:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800399a:	4622      	mov	r2, r4
 800399c:	462b      	mov	r3, r5
 800399e:	f7fc fe2b 	bl	80005f8 <__aeabi_dmul>
 80039a2:	ec41 0b10 	vmov	d0, r0, r1
 80039a6:	bd70      	pop	{r4, r5, r6, pc}

080039a8 <_strtod_l>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	b09f      	sub	sp, #124	@ 0x7c
 80039ae:	460c      	mov	r4, r1
 80039b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80039b2:	2200      	movs	r2, #0
 80039b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80039b6:	9005      	str	r0, [sp, #20]
 80039b8:	f04f 0a00 	mov.w	sl, #0
 80039bc:	f04f 0b00 	mov.w	fp, #0
 80039c0:	460a      	mov	r2, r1
 80039c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80039c4:	7811      	ldrb	r1, [r2, #0]
 80039c6:	292b      	cmp	r1, #43	@ 0x2b
 80039c8:	d04a      	beq.n	8003a60 <_strtod_l+0xb8>
 80039ca:	d838      	bhi.n	8003a3e <_strtod_l+0x96>
 80039cc:	290d      	cmp	r1, #13
 80039ce:	d832      	bhi.n	8003a36 <_strtod_l+0x8e>
 80039d0:	2908      	cmp	r1, #8
 80039d2:	d832      	bhi.n	8003a3a <_strtod_l+0x92>
 80039d4:	2900      	cmp	r1, #0
 80039d6:	d03b      	beq.n	8003a50 <_strtod_l+0xa8>
 80039d8:	2200      	movs	r2, #0
 80039da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80039dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80039de:	782a      	ldrb	r2, [r5, #0]
 80039e0:	2a30      	cmp	r2, #48	@ 0x30
 80039e2:	f040 80b3 	bne.w	8003b4c <_strtod_l+0x1a4>
 80039e6:	786a      	ldrb	r2, [r5, #1]
 80039e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80039ec:	2a58      	cmp	r2, #88	@ 0x58
 80039ee:	d16e      	bne.n	8003ace <_strtod_l+0x126>
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	4a8e      	ldr	r2, [pc, #568]	@ (8003c34 <_strtod_l+0x28c>)
 80039fc:	9805      	ldr	r0, [sp, #20]
 80039fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003a00:	a919      	add	r1, sp, #100	@ 0x64
 8003a02:	f001 f81f 	bl	8004a44 <__gethex>
 8003a06:	f010 060f 	ands.w	r6, r0, #15
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	d005      	beq.n	8003a1a <_strtod_l+0x72>
 8003a0e:	2e06      	cmp	r6, #6
 8003a10:	d128      	bne.n	8003a64 <_strtod_l+0xbc>
 8003a12:	3501      	adds	r5, #1
 8003a14:	2300      	movs	r3, #0
 8003a16:	9519      	str	r5, [sp, #100]	@ 0x64
 8003a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f040 858e 	bne.w	800453e <_strtod_l+0xb96>
 8003a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003a24:	b1cb      	cbz	r3, 8003a5a <_strtod_l+0xb2>
 8003a26:	4652      	mov	r2, sl
 8003a28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8003a2c:	ec43 2b10 	vmov	d0, r2, r3
 8003a30:	b01f      	add	sp, #124	@ 0x7c
 8003a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a36:	2920      	cmp	r1, #32
 8003a38:	d1ce      	bne.n	80039d8 <_strtod_l+0x30>
 8003a3a:	3201      	adds	r2, #1
 8003a3c:	e7c1      	b.n	80039c2 <_strtod_l+0x1a>
 8003a3e:	292d      	cmp	r1, #45	@ 0x2d
 8003a40:	d1ca      	bne.n	80039d8 <_strtod_l+0x30>
 8003a42:	2101      	movs	r1, #1
 8003a44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003a46:	1c51      	adds	r1, r2, #1
 8003a48:	9119      	str	r1, [sp, #100]	@ 0x64
 8003a4a:	7852      	ldrb	r2, [r2, #1]
 8003a4c:	2a00      	cmp	r2, #0
 8003a4e:	d1c5      	bne.n	80039dc <_strtod_l+0x34>
 8003a50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003a52:	9419      	str	r4, [sp, #100]	@ 0x64
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 8570 	bne.w	800453a <_strtod_l+0xb92>
 8003a5a:	4652      	mov	r2, sl
 8003a5c:	465b      	mov	r3, fp
 8003a5e:	e7e5      	b.n	8003a2c <_strtod_l+0x84>
 8003a60:	2100      	movs	r1, #0
 8003a62:	e7ef      	b.n	8003a44 <_strtod_l+0x9c>
 8003a64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003a66:	b13a      	cbz	r2, 8003a78 <_strtod_l+0xd0>
 8003a68:	2135      	movs	r1, #53	@ 0x35
 8003a6a:	a81c      	add	r0, sp, #112	@ 0x70
 8003a6c:	f001 ffea 	bl	8005a44 <__copybits>
 8003a70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003a72:	9805      	ldr	r0, [sp, #20]
 8003a74:	f001 fbb8 	bl	80051e8 <_Bfree>
 8003a78:	3e01      	subs	r6, #1
 8003a7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003a7c:	2e04      	cmp	r6, #4
 8003a7e:	d806      	bhi.n	8003a8e <_strtod_l+0xe6>
 8003a80:	e8df f006 	tbb	[pc, r6]
 8003a84:	201d0314 	.word	0x201d0314
 8003a88:	14          	.byte	0x14
 8003a89:	00          	.byte	0x00
 8003a8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8003a8e:	05e1      	lsls	r1, r4, #23
 8003a90:	bf48      	it	mi
 8003a92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8003a96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003a9a:	0d1b      	lsrs	r3, r3, #20
 8003a9c:	051b      	lsls	r3, r3, #20
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1bb      	bne.n	8003a1a <_strtod_l+0x72>
 8003aa2:	f000 fed7 	bl	8004854 <__errno>
 8003aa6:	2322      	movs	r3, #34	@ 0x22
 8003aa8:	6003      	str	r3, [r0, #0]
 8003aaa:	e7b6      	b.n	8003a1a <_strtod_l+0x72>
 8003aac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8003ab0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8003ab4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ab8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003abc:	e7e7      	b.n	8003a8e <_strtod_l+0xe6>
 8003abe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8003c3c <_strtod_l+0x294>
 8003ac2:	e7e4      	b.n	8003a8e <_strtod_l+0xe6>
 8003ac4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8003ac8:	f04f 3aff 	mov.w	sl, #4294967295
 8003acc:	e7df      	b.n	8003a8e <_strtod_l+0xe6>
 8003ace:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	9219      	str	r2, [sp, #100]	@ 0x64
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	2b30      	cmp	r3, #48	@ 0x30
 8003ad8:	d0f9      	beq.n	8003ace <_strtod_l+0x126>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d09d      	beq.n	8003a1a <_strtod_l+0x72>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003ae4:	930c      	str	r3, [sp, #48]	@ 0x30
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9308      	str	r3, [sp, #32]
 8003aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8003aec:	461f      	mov	r7, r3
 8003aee:	220a      	movs	r2, #10
 8003af0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8003af2:	7805      	ldrb	r5, [r0, #0]
 8003af4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8003af8:	b2d9      	uxtb	r1, r3
 8003afa:	2909      	cmp	r1, #9
 8003afc:	d928      	bls.n	8003b50 <_strtod_l+0x1a8>
 8003afe:	494e      	ldr	r1, [pc, #312]	@ (8003c38 <_strtod_l+0x290>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	f000 fe4e 	bl	80047a2 <strncmp>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d032      	beq.n	8003b70 <_strtod_l+0x1c8>
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	4681      	mov	r9, r0
 8003b10:	463d      	mov	r5, r7
 8003b12:	4603      	mov	r3, r0
 8003b14:	2a65      	cmp	r2, #101	@ 0x65
 8003b16:	d001      	beq.n	8003b1c <_strtod_l+0x174>
 8003b18:	2a45      	cmp	r2, #69	@ 0x45
 8003b1a:	d114      	bne.n	8003b46 <_strtod_l+0x19e>
 8003b1c:	b91d      	cbnz	r5, 8003b26 <_strtod_l+0x17e>
 8003b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b20:	4302      	orrs	r2, r0
 8003b22:	d095      	beq.n	8003a50 <_strtod_l+0xa8>
 8003b24:	2500      	movs	r5, #0
 8003b26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8003b28:	1c62      	adds	r2, r4, #1
 8003b2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8003b2c:	7862      	ldrb	r2, [r4, #1]
 8003b2e:	2a2b      	cmp	r2, #43	@ 0x2b
 8003b30:	d077      	beq.n	8003c22 <_strtod_l+0x27a>
 8003b32:	2a2d      	cmp	r2, #45	@ 0x2d
 8003b34:	d07b      	beq.n	8003c2e <_strtod_l+0x286>
 8003b36:	f04f 0c00 	mov.w	ip, #0
 8003b3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8003b3e:	2909      	cmp	r1, #9
 8003b40:	f240 8082 	bls.w	8003c48 <_strtod_l+0x2a0>
 8003b44:	9419      	str	r4, [sp, #100]	@ 0x64
 8003b46:	f04f 0800 	mov.w	r8, #0
 8003b4a:	e0a2      	b.n	8003c92 <_strtod_l+0x2ea>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e7c7      	b.n	8003ae0 <_strtod_l+0x138>
 8003b50:	2f08      	cmp	r7, #8
 8003b52:	bfd5      	itete	le
 8003b54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8003b56:	9908      	ldrgt	r1, [sp, #32]
 8003b58:	fb02 3301 	mlale	r3, r2, r1, r3
 8003b5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003b60:	f100 0001 	add.w	r0, r0, #1
 8003b64:	bfd4      	ite	le
 8003b66:	930a      	strle	r3, [sp, #40]	@ 0x28
 8003b68:	9308      	strgt	r3, [sp, #32]
 8003b6a:	3701      	adds	r7, #1
 8003b6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8003b6e:	e7bf      	b.n	8003af0 <_strtod_l+0x148>
 8003b70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	9219      	str	r2, [sp, #100]	@ 0x64
 8003b76:	785a      	ldrb	r2, [r3, #1]
 8003b78:	b37f      	cbz	r7, 8003bda <_strtod_l+0x232>
 8003b7a:	4681      	mov	r9, r0
 8003b7c:	463d      	mov	r5, r7
 8003b7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	d912      	bls.n	8003bac <_strtod_l+0x204>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e7c4      	b.n	8003b14 <_strtod_l+0x16c>
 8003b8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8003b90:	785a      	ldrb	r2, [r3, #1]
 8003b92:	3001      	adds	r0, #1
 8003b94:	2a30      	cmp	r2, #48	@ 0x30
 8003b96:	d0f8      	beq.n	8003b8a <_strtod_l+0x1e2>
 8003b98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	f200 84d3 	bhi.w	8004548 <_strtod_l+0xba0>
 8003ba2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003ba4:	930c      	str	r3, [sp, #48]	@ 0x30
 8003ba6:	4681      	mov	r9, r0
 8003ba8:	2000      	movs	r0, #0
 8003baa:	4605      	mov	r5, r0
 8003bac:	3a30      	subs	r2, #48	@ 0x30
 8003bae:	f100 0301 	add.w	r3, r0, #1
 8003bb2:	d02a      	beq.n	8003c0a <_strtod_l+0x262>
 8003bb4:	4499      	add	r9, r3
 8003bb6:	eb00 0c05 	add.w	ip, r0, r5
 8003bba:	462b      	mov	r3, r5
 8003bbc:	210a      	movs	r1, #10
 8003bbe:	4563      	cmp	r3, ip
 8003bc0:	d10d      	bne.n	8003bde <_strtod_l+0x236>
 8003bc2:	1c69      	adds	r1, r5, #1
 8003bc4:	4401      	add	r1, r0
 8003bc6:	4428      	add	r0, r5
 8003bc8:	2808      	cmp	r0, #8
 8003bca:	dc16      	bgt.n	8003bfa <_strtod_l+0x252>
 8003bcc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003bce:	230a      	movs	r3, #10
 8003bd0:	fb03 2300 	mla	r3, r3, r0, r2
 8003bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e018      	b.n	8003c0c <_strtod_l+0x264>
 8003bda:	4638      	mov	r0, r7
 8003bdc:	e7da      	b.n	8003b94 <_strtod_l+0x1ec>
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	f103 0301 	add.w	r3, r3, #1
 8003be4:	dc03      	bgt.n	8003bee <_strtod_l+0x246>
 8003be6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8003be8:	434e      	muls	r6, r1
 8003bea:	960a      	str	r6, [sp, #40]	@ 0x28
 8003bec:	e7e7      	b.n	8003bbe <_strtod_l+0x216>
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	bfde      	ittt	le
 8003bf2:	9e08      	ldrle	r6, [sp, #32]
 8003bf4:	434e      	mulle	r6, r1
 8003bf6:	9608      	strle	r6, [sp, #32]
 8003bf8:	e7e1      	b.n	8003bbe <_strtod_l+0x216>
 8003bfa:	280f      	cmp	r0, #15
 8003bfc:	dceb      	bgt.n	8003bd6 <_strtod_l+0x22e>
 8003bfe:	9808      	ldr	r0, [sp, #32]
 8003c00:	230a      	movs	r3, #10
 8003c02:	fb03 2300 	mla	r3, r3, r0, r2
 8003c06:	9308      	str	r3, [sp, #32]
 8003c08:	e7e5      	b.n	8003bd6 <_strtod_l+0x22e>
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003c0e:	1c50      	adds	r0, r2, #1
 8003c10:	9019      	str	r0, [sp, #100]	@ 0x64
 8003c12:	7852      	ldrb	r2, [r2, #1]
 8003c14:	4618      	mov	r0, r3
 8003c16:	460d      	mov	r5, r1
 8003c18:	e7b1      	b.n	8003b7e <_strtod_l+0x1d6>
 8003c1a:	f04f 0900 	mov.w	r9, #0
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e77d      	b.n	8003b1e <_strtod_l+0x176>
 8003c22:	f04f 0c00 	mov.w	ip, #0
 8003c26:	1ca2      	adds	r2, r4, #2
 8003c28:	9219      	str	r2, [sp, #100]	@ 0x64
 8003c2a:	78a2      	ldrb	r2, [r4, #2]
 8003c2c:	e785      	b.n	8003b3a <_strtod_l+0x192>
 8003c2e:	f04f 0c01 	mov.w	ip, #1
 8003c32:	e7f8      	b.n	8003c26 <_strtod_l+0x27e>
 8003c34:	080065b4 	.word	0x080065b4
 8003c38:	08006590 	.word	0x08006590
 8003c3c:	7ff00000 	.word	0x7ff00000
 8003c40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003c42:	1c51      	adds	r1, r2, #1
 8003c44:	9119      	str	r1, [sp, #100]	@ 0x64
 8003c46:	7852      	ldrb	r2, [r2, #1]
 8003c48:	2a30      	cmp	r2, #48	@ 0x30
 8003c4a:	d0f9      	beq.n	8003c40 <_strtod_l+0x298>
 8003c4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8003c50:	2908      	cmp	r1, #8
 8003c52:	f63f af78 	bhi.w	8003b46 <_strtod_l+0x19e>
 8003c56:	3a30      	subs	r2, #48	@ 0x30
 8003c58:	920e      	str	r2, [sp, #56]	@ 0x38
 8003c5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003c5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8003c5e:	f04f 080a 	mov.w	r8, #10
 8003c62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003c64:	1c56      	adds	r6, r2, #1
 8003c66:	9619      	str	r6, [sp, #100]	@ 0x64
 8003c68:	7852      	ldrb	r2, [r2, #1]
 8003c6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8003c6e:	f1be 0f09 	cmp.w	lr, #9
 8003c72:	d939      	bls.n	8003ce8 <_strtod_l+0x340>
 8003c74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003c76:	1a76      	subs	r6, r6, r1
 8003c78:	2e08      	cmp	r6, #8
 8003c7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8003c7e:	dc03      	bgt.n	8003c88 <_strtod_l+0x2e0>
 8003c80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003c82:	4588      	cmp	r8, r1
 8003c84:	bfa8      	it	ge
 8003c86:	4688      	movge	r8, r1
 8003c88:	f1bc 0f00 	cmp.w	ip, #0
 8003c8c:	d001      	beq.n	8003c92 <_strtod_l+0x2ea>
 8003c8e:	f1c8 0800 	rsb	r8, r8, #0
 8003c92:	2d00      	cmp	r5, #0
 8003c94:	d14e      	bne.n	8003d34 <_strtod_l+0x38c>
 8003c96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003c98:	4308      	orrs	r0, r1
 8003c9a:	f47f aebe 	bne.w	8003a1a <_strtod_l+0x72>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f47f aed6 	bne.w	8003a50 <_strtod_l+0xa8>
 8003ca4:	2a69      	cmp	r2, #105	@ 0x69
 8003ca6:	d028      	beq.n	8003cfa <_strtod_l+0x352>
 8003ca8:	dc25      	bgt.n	8003cf6 <_strtod_l+0x34e>
 8003caa:	2a49      	cmp	r2, #73	@ 0x49
 8003cac:	d025      	beq.n	8003cfa <_strtod_l+0x352>
 8003cae:	2a4e      	cmp	r2, #78	@ 0x4e
 8003cb0:	f47f aece 	bne.w	8003a50 <_strtod_l+0xa8>
 8003cb4:	499b      	ldr	r1, [pc, #620]	@ (8003f24 <_strtod_l+0x57c>)
 8003cb6:	a819      	add	r0, sp, #100	@ 0x64
 8003cb8:	f001 f8e6 	bl	8004e88 <__match>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	f43f aec7 	beq.w	8003a50 <_strtod_l+0xa8>
 8003cc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b28      	cmp	r3, #40	@ 0x28
 8003cc8:	d12e      	bne.n	8003d28 <_strtod_l+0x380>
 8003cca:	4997      	ldr	r1, [pc, #604]	@ (8003f28 <_strtod_l+0x580>)
 8003ccc:	aa1c      	add	r2, sp, #112	@ 0x70
 8003cce:	a819      	add	r0, sp, #100	@ 0x64
 8003cd0:	f001 f8ee 	bl	8004eb0 <__hexnan>
 8003cd4:	2805      	cmp	r0, #5
 8003cd6:	d127      	bne.n	8003d28 <_strtod_l+0x380>
 8003cd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003cda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8003cde:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8003ce2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8003ce6:	e698      	b.n	8003a1a <_strtod_l+0x72>
 8003ce8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003cea:	fb08 2101 	mla	r1, r8, r1, r2
 8003cee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8003cf2:	920e      	str	r2, [sp, #56]	@ 0x38
 8003cf4:	e7b5      	b.n	8003c62 <_strtod_l+0x2ba>
 8003cf6:	2a6e      	cmp	r2, #110	@ 0x6e
 8003cf8:	e7da      	b.n	8003cb0 <_strtod_l+0x308>
 8003cfa:	498c      	ldr	r1, [pc, #560]	@ (8003f2c <_strtod_l+0x584>)
 8003cfc:	a819      	add	r0, sp, #100	@ 0x64
 8003cfe:	f001 f8c3 	bl	8004e88 <__match>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	f43f aea4 	beq.w	8003a50 <_strtod_l+0xa8>
 8003d08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003d0a:	4989      	ldr	r1, [pc, #548]	@ (8003f30 <_strtod_l+0x588>)
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	a819      	add	r0, sp, #100	@ 0x64
 8003d10:	9319      	str	r3, [sp, #100]	@ 0x64
 8003d12:	f001 f8b9 	bl	8004e88 <__match>
 8003d16:	b910      	cbnz	r0, 8003d1e <_strtod_l+0x376>
 8003d18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8003d1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8003f40 <_strtod_l+0x598>
 8003d22:	f04f 0a00 	mov.w	sl, #0
 8003d26:	e678      	b.n	8003a1a <_strtod_l+0x72>
 8003d28:	4882      	ldr	r0, [pc, #520]	@ (8003f34 <_strtod_l+0x58c>)
 8003d2a:	f000 fdd1 	bl	80048d0 <nan>
 8003d2e:	ec5b ab10 	vmov	sl, fp, d0
 8003d32:	e672      	b.n	8003a1a <_strtod_l+0x72>
 8003d34:	eba8 0309 	sub.w	r3, r8, r9
 8003d38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d3c:	2f00      	cmp	r7, #0
 8003d3e:	bf08      	it	eq
 8003d40:	462f      	moveq	r7, r5
 8003d42:	2d10      	cmp	r5, #16
 8003d44:	462c      	mov	r4, r5
 8003d46:	bfa8      	it	ge
 8003d48:	2410      	movge	r4, #16
 8003d4a:	f7fc fbdb 	bl	8000504 <__aeabi_ui2d>
 8003d4e:	2d09      	cmp	r5, #9
 8003d50:	4682      	mov	sl, r0
 8003d52:	468b      	mov	fp, r1
 8003d54:	dc13      	bgt.n	8003d7e <_strtod_l+0x3d6>
 8003d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f43f ae5e 	beq.w	8003a1a <_strtod_l+0x72>
 8003d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d60:	dd78      	ble.n	8003e54 <_strtod_l+0x4ac>
 8003d62:	2b16      	cmp	r3, #22
 8003d64:	dc5f      	bgt.n	8003e26 <_strtod_l+0x47e>
 8003d66:	4974      	ldr	r1, [pc, #464]	@ (8003f38 <_strtod_l+0x590>)
 8003d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d70:	4652      	mov	r2, sl
 8003d72:	465b      	mov	r3, fp
 8003d74:	f7fc fc40 	bl	80005f8 <__aeabi_dmul>
 8003d78:	4682      	mov	sl, r0
 8003d7a:	468b      	mov	fp, r1
 8003d7c:	e64d      	b.n	8003a1a <_strtod_l+0x72>
 8003d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f38 <_strtod_l+0x590>)
 8003d80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8003d88:	f7fc fc36 	bl	80005f8 <__aeabi_dmul>
 8003d8c:	4682      	mov	sl, r0
 8003d8e:	9808      	ldr	r0, [sp, #32]
 8003d90:	468b      	mov	fp, r1
 8003d92:	f7fc fbb7 	bl	8000504 <__aeabi_ui2d>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	f7fc fa75 	bl	800028c <__adddf3>
 8003da2:	2d0f      	cmp	r5, #15
 8003da4:	4682      	mov	sl, r0
 8003da6:	468b      	mov	fp, r1
 8003da8:	ddd5      	ble.n	8003d56 <_strtod_l+0x3ae>
 8003daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dac:	1b2c      	subs	r4, r5, r4
 8003dae:	441c      	add	r4, r3
 8003db0:	2c00      	cmp	r4, #0
 8003db2:	f340 8096 	ble.w	8003ee2 <_strtod_l+0x53a>
 8003db6:	f014 030f 	ands.w	r3, r4, #15
 8003dba:	d00a      	beq.n	8003dd2 <_strtod_l+0x42a>
 8003dbc:	495e      	ldr	r1, [pc, #376]	@ (8003f38 <_strtod_l+0x590>)
 8003dbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003dc2:	4652      	mov	r2, sl
 8003dc4:	465b      	mov	r3, fp
 8003dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dca:	f7fc fc15 	bl	80005f8 <__aeabi_dmul>
 8003dce:	4682      	mov	sl, r0
 8003dd0:	468b      	mov	fp, r1
 8003dd2:	f034 040f 	bics.w	r4, r4, #15
 8003dd6:	d073      	beq.n	8003ec0 <_strtod_l+0x518>
 8003dd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8003ddc:	dd48      	ble.n	8003e70 <_strtod_l+0x4c8>
 8003dde:	2400      	movs	r4, #0
 8003de0:	46a0      	mov	r8, r4
 8003de2:	940a      	str	r4, [sp, #40]	@ 0x28
 8003de4:	46a1      	mov	r9, r4
 8003de6:	9a05      	ldr	r2, [sp, #20]
 8003de8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8003f40 <_strtod_l+0x598>
 8003dec:	2322      	movs	r3, #34	@ 0x22
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	f04f 0a00 	mov.w	sl, #0
 8003df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f43f ae0f 	beq.w	8003a1a <_strtod_l+0x72>
 8003dfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003dfe:	9805      	ldr	r0, [sp, #20]
 8003e00:	f001 f9f2 	bl	80051e8 <_Bfree>
 8003e04:	9805      	ldr	r0, [sp, #20]
 8003e06:	4649      	mov	r1, r9
 8003e08:	f001 f9ee 	bl	80051e8 <_Bfree>
 8003e0c:	9805      	ldr	r0, [sp, #20]
 8003e0e:	4641      	mov	r1, r8
 8003e10:	f001 f9ea 	bl	80051e8 <_Bfree>
 8003e14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003e16:	9805      	ldr	r0, [sp, #20]
 8003e18:	f001 f9e6 	bl	80051e8 <_Bfree>
 8003e1c:	9805      	ldr	r0, [sp, #20]
 8003e1e:	4621      	mov	r1, r4
 8003e20:	f001 f9e2 	bl	80051e8 <_Bfree>
 8003e24:	e5f9      	b.n	8003a1a <_strtod_l+0x72>
 8003e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	dbbc      	blt.n	8003daa <_strtod_l+0x402>
 8003e30:	4c41      	ldr	r4, [pc, #260]	@ (8003f38 <_strtod_l+0x590>)
 8003e32:	f1c5 050f 	rsb	r5, r5, #15
 8003e36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003e3a:	4652      	mov	r2, sl
 8003e3c:	465b      	mov	r3, fp
 8003e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e42:	f7fc fbd9 	bl	80005f8 <__aeabi_dmul>
 8003e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e48:	1b5d      	subs	r5, r3, r5
 8003e4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003e4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003e52:	e78f      	b.n	8003d74 <_strtod_l+0x3cc>
 8003e54:	3316      	adds	r3, #22
 8003e56:	dba8      	blt.n	8003daa <_strtod_l+0x402>
 8003e58:	4b37      	ldr	r3, [pc, #220]	@ (8003f38 <_strtod_l+0x590>)
 8003e5a:	eba9 0808 	sub.w	r8, r9, r8
 8003e5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8003e62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003e66:	4650      	mov	r0, sl
 8003e68:	4659      	mov	r1, fp
 8003e6a:	f7fc fcef 	bl	800084c <__aeabi_ddiv>
 8003e6e:	e783      	b.n	8003d78 <_strtod_l+0x3d0>
 8003e70:	4b32      	ldr	r3, [pc, #200]	@ (8003f3c <_strtod_l+0x594>)
 8003e72:	9308      	str	r3, [sp, #32]
 8003e74:	2300      	movs	r3, #0
 8003e76:	1124      	asrs	r4, r4, #4
 8003e78:	4650      	mov	r0, sl
 8003e7a:	4659      	mov	r1, fp
 8003e7c:	461e      	mov	r6, r3
 8003e7e:	2c01      	cmp	r4, #1
 8003e80:	dc21      	bgt.n	8003ec6 <_strtod_l+0x51e>
 8003e82:	b10b      	cbz	r3, 8003e88 <_strtod_l+0x4e0>
 8003e84:	4682      	mov	sl, r0
 8003e86:	468b      	mov	fp, r1
 8003e88:	492c      	ldr	r1, [pc, #176]	@ (8003f3c <_strtod_l+0x594>)
 8003e8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8003e8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003e92:	4652      	mov	r2, sl
 8003e94:	465b      	mov	r3, fp
 8003e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e9a:	f7fc fbad 	bl	80005f8 <__aeabi_dmul>
 8003e9e:	4b28      	ldr	r3, [pc, #160]	@ (8003f40 <_strtod_l+0x598>)
 8003ea0:	460a      	mov	r2, r1
 8003ea2:	400b      	ands	r3, r1
 8003ea4:	4927      	ldr	r1, [pc, #156]	@ (8003f44 <_strtod_l+0x59c>)
 8003ea6:	428b      	cmp	r3, r1
 8003ea8:	4682      	mov	sl, r0
 8003eaa:	d898      	bhi.n	8003dde <_strtod_l+0x436>
 8003eac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	bf86      	itte	hi
 8003eb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8003f48 <_strtod_l+0x5a0>
 8003eb8:	f04f 3aff 	movhi.w	sl, #4294967295
 8003ebc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9308      	str	r3, [sp, #32]
 8003ec4:	e07a      	b.n	8003fbc <_strtod_l+0x614>
 8003ec6:	07e2      	lsls	r2, r4, #31
 8003ec8:	d505      	bpl.n	8003ed6 <_strtod_l+0x52e>
 8003eca:	9b08      	ldr	r3, [sp, #32]
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f7fc fb92 	bl	80005f8 <__aeabi_dmul>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	9a08      	ldr	r2, [sp, #32]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	3601      	adds	r6, #1
 8003edc:	1064      	asrs	r4, r4, #1
 8003ede:	9208      	str	r2, [sp, #32]
 8003ee0:	e7cd      	b.n	8003e7e <_strtod_l+0x4d6>
 8003ee2:	d0ed      	beq.n	8003ec0 <_strtod_l+0x518>
 8003ee4:	4264      	negs	r4, r4
 8003ee6:	f014 020f 	ands.w	r2, r4, #15
 8003eea:	d00a      	beq.n	8003f02 <_strtod_l+0x55a>
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <_strtod_l+0x590>)
 8003eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ef2:	4650      	mov	r0, sl
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f7fc fca7 	bl	800084c <__aeabi_ddiv>
 8003efe:	4682      	mov	sl, r0
 8003f00:	468b      	mov	fp, r1
 8003f02:	1124      	asrs	r4, r4, #4
 8003f04:	d0dc      	beq.n	8003ec0 <_strtod_l+0x518>
 8003f06:	2c1f      	cmp	r4, #31
 8003f08:	dd20      	ble.n	8003f4c <_strtod_l+0x5a4>
 8003f0a:	2400      	movs	r4, #0
 8003f0c:	46a0      	mov	r8, r4
 8003f0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003f10:	46a1      	mov	r9, r4
 8003f12:	9a05      	ldr	r2, [sp, #20]
 8003f14:	2322      	movs	r3, #34	@ 0x22
 8003f16:	f04f 0a00 	mov.w	sl, #0
 8003f1a:	f04f 0b00 	mov.w	fp, #0
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	e768      	b.n	8003df4 <_strtod_l+0x44c>
 8003f22:	bf00      	nop
 8003f24:	0800659b 	.word	0x0800659b
 8003f28:	080065a0 	.word	0x080065a0
 8003f2c:	08006592 	.word	0x08006592
 8003f30:	08006595 	.word	0x08006595
 8003f34:	08006914 	.word	0x08006914
 8003f38:	08006710 	.word	0x08006710
 8003f3c:	080066e8 	.word	0x080066e8
 8003f40:	7ff00000 	.word	0x7ff00000
 8003f44:	7ca00000 	.word	0x7ca00000
 8003f48:	7fefffff 	.word	0x7fefffff
 8003f4c:	f014 0310 	ands.w	r3, r4, #16
 8003f50:	bf18      	it	ne
 8003f52:	236a      	movne	r3, #106	@ 0x6a
 8003f54:	4ea9      	ldr	r6, [pc, #676]	@ (80041fc <_strtod_l+0x854>)
 8003f56:	9308      	str	r3, [sp, #32]
 8003f58:	4650      	mov	r0, sl
 8003f5a:	4659      	mov	r1, fp
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	07e2      	lsls	r2, r4, #31
 8003f60:	d504      	bpl.n	8003f6c <_strtod_l+0x5c4>
 8003f62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f66:	f7fc fb47 	bl	80005f8 <__aeabi_dmul>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	1064      	asrs	r4, r4, #1
 8003f6e:	f106 0608 	add.w	r6, r6, #8
 8003f72:	d1f4      	bne.n	8003f5e <_strtod_l+0x5b6>
 8003f74:	b10b      	cbz	r3, 8003f7a <_strtod_l+0x5d2>
 8003f76:	4682      	mov	sl, r0
 8003f78:	468b      	mov	fp, r1
 8003f7a:	9b08      	ldr	r3, [sp, #32]
 8003f7c:	b1b3      	cbz	r3, 8003fac <_strtod_l+0x604>
 8003f7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003f82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	4659      	mov	r1, fp
 8003f8a:	dd0f      	ble.n	8003fac <_strtod_l+0x604>
 8003f8c:	2b1f      	cmp	r3, #31
 8003f8e:	dd55      	ble.n	800403c <_strtod_l+0x694>
 8003f90:	2b34      	cmp	r3, #52	@ 0x34
 8003f92:	bfde      	ittt	le
 8003f94:	f04f 33ff 	movle.w	r3, #4294967295
 8003f98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8003f9c:	4093      	lslle	r3, r2
 8003f9e:	f04f 0a00 	mov.w	sl, #0
 8003fa2:	bfcc      	ite	gt
 8003fa4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8003fa8:	ea03 0b01 	andle.w	fp, r3, r1
 8003fac:	2200      	movs	r2, #0
 8003fae:	2300      	movs	r3, #0
 8003fb0:	4650      	mov	r0, sl
 8003fb2:	4659      	mov	r1, fp
 8003fb4:	f7fc fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d1a6      	bne.n	8003f0a <_strtod_l+0x562>
 8003fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003fc2:	9805      	ldr	r0, [sp, #20]
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	463a      	mov	r2, r7
 8003fc8:	f001 f976 	bl	80052b8 <__s2b>
 8003fcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	f43f af05 	beq.w	8003dde <_strtod_l+0x436>
 8003fd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fd6:	2a00      	cmp	r2, #0
 8003fd8:	eba9 0308 	sub.w	r3, r9, r8
 8003fdc:	bfa8      	it	ge
 8003fde:	2300      	movge	r3, #0
 8003fe0:	9312      	str	r3, [sp, #72]	@ 0x48
 8003fe2:	2400      	movs	r4, #0
 8003fe4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003fe8:	9316      	str	r3, [sp, #88]	@ 0x58
 8003fea:	46a0      	mov	r8, r4
 8003fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fee:	9805      	ldr	r0, [sp, #20]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	f001 f8b9 	bl	8005168 <_Balloc>
 8003ff6:	4681      	mov	r9, r0
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	f43f aef4 	beq.w	8003de6 <_strtod_l+0x43e>
 8003ffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	3202      	adds	r2, #2
 8004004:	f103 010c 	add.w	r1, r3, #12
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	300c      	adds	r0, #12
 800400c:	f000 fc4f 	bl	80048ae <memcpy>
 8004010:	ec4b ab10 	vmov	d0, sl, fp
 8004014:	9805      	ldr	r0, [sp, #20]
 8004016:	aa1c      	add	r2, sp, #112	@ 0x70
 8004018:	a91b      	add	r1, sp, #108	@ 0x6c
 800401a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800401e:	f001 fc87 	bl	8005930 <__d2b>
 8004022:	901a      	str	r0, [sp, #104]	@ 0x68
 8004024:	2800      	cmp	r0, #0
 8004026:	f43f aede 	beq.w	8003de6 <_strtod_l+0x43e>
 800402a:	9805      	ldr	r0, [sp, #20]
 800402c:	2101      	movs	r1, #1
 800402e:	f001 f9d9 	bl	80053e4 <__i2b>
 8004032:	4680      	mov	r8, r0
 8004034:	b948      	cbnz	r0, 800404a <_strtod_l+0x6a2>
 8004036:	f04f 0800 	mov.w	r8, #0
 800403a:	e6d4      	b.n	8003de6 <_strtod_l+0x43e>
 800403c:	f04f 32ff 	mov.w	r2, #4294967295
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	ea03 0a0a 	and.w	sl, r3, sl
 8004048:	e7b0      	b.n	8003fac <_strtod_l+0x604>
 800404a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800404c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800404e:	2d00      	cmp	r5, #0
 8004050:	bfab      	itete	ge
 8004052:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004054:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004056:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004058:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800405a:	bfac      	ite	ge
 800405c:	18ef      	addge	r7, r5, r3
 800405e:	1b5e      	sublt	r6, r3, r5
 8004060:	9b08      	ldr	r3, [sp, #32]
 8004062:	1aed      	subs	r5, r5, r3
 8004064:	4415      	add	r5, r2
 8004066:	4b66      	ldr	r3, [pc, #408]	@ (8004200 <_strtod_l+0x858>)
 8004068:	3d01      	subs	r5, #1
 800406a:	429d      	cmp	r5, r3
 800406c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004070:	da50      	bge.n	8004114 <_strtod_l+0x76c>
 8004072:	1b5b      	subs	r3, r3, r5
 8004074:	2b1f      	cmp	r3, #31
 8004076:	eba2 0203 	sub.w	r2, r2, r3
 800407a:	f04f 0101 	mov.w	r1, #1
 800407e:	dc3d      	bgt.n	80040fc <_strtod_l+0x754>
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004086:	2300      	movs	r3, #0
 8004088:	9310      	str	r3, [sp, #64]	@ 0x40
 800408a:	18bd      	adds	r5, r7, r2
 800408c:	9b08      	ldr	r3, [sp, #32]
 800408e:	42af      	cmp	r7, r5
 8004090:	4416      	add	r6, r2
 8004092:	441e      	add	r6, r3
 8004094:	463b      	mov	r3, r7
 8004096:	bfa8      	it	ge
 8004098:	462b      	movge	r3, r5
 800409a:	42b3      	cmp	r3, r6
 800409c:	bfa8      	it	ge
 800409e:	4633      	movge	r3, r6
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bfc2      	ittt	gt
 80040a4:	1aed      	subgt	r5, r5, r3
 80040a6:	1af6      	subgt	r6, r6, r3
 80040a8:	1aff      	subgt	r7, r7, r3
 80040aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	dd16      	ble.n	80040de <_strtod_l+0x736>
 80040b0:	4641      	mov	r1, r8
 80040b2:	9805      	ldr	r0, [sp, #20]
 80040b4:	461a      	mov	r2, r3
 80040b6:	f001 fa55 	bl	8005564 <__pow5mult>
 80040ba:	4680      	mov	r8, r0
 80040bc:	2800      	cmp	r0, #0
 80040be:	d0ba      	beq.n	8004036 <_strtod_l+0x68e>
 80040c0:	4601      	mov	r1, r0
 80040c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80040c4:	9805      	ldr	r0, [sp, #20]
 80040c6:	f001 f9a3 	bl	8005410 <__multiply>
 80040ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80040cc:	2800      	cmp	r0, #0
 80040ce:	f43f ae8a 	beq.w	8003de6 <_strtod_l+0x43e>
 80040d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80040d4:	9805      	ldr	r0, [sp, #20]
 80040d6:	f001 f887 	bl	80051e8 <_Bfree>
 80040da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80040de:	2d00      	cmp	r5, #0
 80040e0:	dc1d      	bgt.n	800411e <_strtod_l+0x776>
 80040e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	dd23      	ble.n	8004130 <_strtod_l+0x788>
 80040e8:	4649      	mov	r1, r9
 80040ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80040ec:	9805      	ldr	r0, [sp, #20]
 80040ee:	f001 fa39 	bl	8005564 <__pow5mult>
 80040f2:	4681      	mov	r9, r0
 80040f4:	b9e0      	cbnz	r0, 8004130 <_strtod_l+0x788>
 80040f6:	f04f 0900 	mov.w	r9, #0
 80040fa:	e674      	b.n	8003de6 <_strtod_l+0x43e>
 80040fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004100:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004104:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004108:	35e2      	adds	r5, #226	@ 0xe2
 800410a:	fa01 f305 	lsl.w	r3, r1, r5
 800410e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004110:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004112:	e7ba      	b.n	800408a <_strtod_l+0x6e2>
 8004114:	2300      	movs	r3, #0
 8004116:	9310      	str	r3, [sp, #64]	@ 0x40
 8004118:	2301      	movs	r3, #1
 800411a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800411c:	e7b5      	b.n	800408a <_strtod_l+0x6e2>
 800411e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004120:	9805      	ldr	r0, [sp, #20]
 8004122:	462a      	mov	r2, r5
 8004124:	f001 fa78 	bl	8005618 <__lshift>
 8004128:	901a      	str	r0, [sp, #104]	@ 0x68
 800412a:	2800      	cmp	r0, #0
 800412c:	d1d9      	bne.n	80040e2 <_strtod_l+0x73a>
 800412e:	e65a      	b.n	8003de6 <_strtod_l+0x43e>
 8004130:	2e00      	cmp	r6, #0
 8004132:	dd07      	ble.n	8004144 <_strtod_l+0x79c>
 8004134:	4649      	mov	r1, r9
 8004136:	9805      	ldr	r0, [sp, #20]
 8004138:	4632      	mov	r2, r6
 800413a:	f001 fa6d 	bl	8005618 <__lshift>
 800413e:	4681      	mov	r9, r0
 8004140:	2800      	cmp	r0, #0
 8004142:	d0d8      	beq.n	80040f6 <_strtod_l+0x74e>
 8004144:	2f00      	cmp	r7, #0
 8004146:	dd08      	ble.n	800415a <_strtod_l+0x7b2>
 8004148:	4641      	mov	r1, r8
 800414a:	9805      	ldr	r0, [sp, #20]
 800414c:	463a      	mov	r2, r7
 800414e:	f001 fa63 	bl	8005618 <__lshift>
 8004152:	4680      	mov	r8, r0
 8004154:	2800      	cmp	r0, #0
 8004156:	f43f ae46 	beq.w	8003de6 <_strtod_l+0x43e>
 800415a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800415c:	9805      	ldr	r0, [sp, #20]
 800415e:	464a      	mov	r2, r9
 8004160:	f001 fae2 	bl	8005728 <__mdiff>
 8004164:	4604      	mov	r4, r0
 8004166:	2800      	cmp	r0, #0
 8004168:	f43f ae3d 	beq.w	8003de6 <_strtod_l+0x43e>
 800416c:	68c3      	ldr	r3, [r0, #12]
 800416e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004170:	2300      	movs	r3, #0
 8004172:	60c3      	str	r3, [r0, #12]
 8004174:	4641      	mov	r1, r8
 8004176:	f001 fabb 	bl	80056f0 <__mcmp>
 800417a:	2800      	cmp	r0, #0
 800417c:	da46      	bge.n	800420c <_strtod_l+0x864>
 800417e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004180:	ea53 030a 	orrs.w	r3, r3, sl
 8004184:	d16c      	bne.n	8004260 <_strtod_l+0x8b8>
 8004186:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800418a:	2b00      	cmp	r3, #0
 800418c:	d168      	bne.n	8004260 <_strtod_l+0x8b8>
 800418e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004192:	0d1b      	lsrs	r3, r3, #20
 8004194:	051b      	lsls	r3, r3, #20
 8004196:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800419a:	d961      	bls.n	8004260 <_strtod_l+0x8b8>
 800419c:	6963      	ldr	r3, [r4, #20]
 800419e:	b913      	cbnz	r3, 80041a6 <_strtod_l+0x7fe>
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	dd5c      	ble.n	8004260 <_strtod_l+0x8b8>
 80041a6:	4621      	mov	r1, r4
 80041a8:	2201      	movs	r2, #1
 80041aa:	9805      	ldr	r0, [sp, #20]
 80041ac:	f001 fa34 	bl	8005618 <__lshift>
 80041b0:	4641      	mov	r1, r8
 80041b2:	4604      	mov	r4, r0
 80041b4:	f001 fa9c 	bl	80056f0 <__mcmp>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	dd51      	ble.n	8004260 <_strtod_l+0x8b8>
 80041bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80041c0:	9a08      	ldr	r2, [sp, #32]
 80041c2:	0d1b      	lsrs	r3, r3, #20
 80041c4:	051b      	lsls	r3, r3, #20
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	d06b      	beq.n	80042a2 <_strtod_l+0x8fa>
 80041ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80041ce:	d868      	bhi.n	80042a2 <_strtod_l+0x8fa>
 80041d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80041d4:	f67f ae9d 	bls.w	8003f12 <_strtod_l+0x56a>
 80041d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <_strtod_l+0x85c>)
 80041da:	4650      	mov	r0, sl
 80041dc:	4659      	mov	r1, fp
 80041de:	2200      	movs	r2, #0
 80041e0:	f7fc fa0a 	bl	80005f8 <__aeabi_dmul>
 80041e4:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <_strtod_l+0x860>)
 80041e6:	400b      	ands	r3, r1
 80041e8:	4682      	mov	sl, r0
 80041ea:	468b      	mov	fp, r1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f47f ae05 	bne.w	8003dfc <_strtod_l+0x454>
 80041f2:	9a05      	ldr	r2, [sp, #20]
 80041f4:	2322      	movs	r3, #34	@ 0x22
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	e600      	b.n	8003dfc <_strtod_l+0x454>
 80041fa:	bf00      	nop
 80041fc:	080065c8 	.word	0x080065c8
 8004200:	fffffc02 	.word	0xfffffc02
 8004204:	39500000 	.word	0x39500000
 8004208:	7ff00000 	.word	0x7ff00000
 800420c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004210:	d165      	bne.n	80042de <_strtod_l+0x936>
 8004212:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004218:	b35a      	cbz	r2, 8004272 <_strtod_l+0x8ca>
 800421a:	4a9f      	ldr	r2, [pc, #636]	@ (8004498 <_strtod_l+0xaf0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d12b      	bne.n	8004278 <_strtod_l+0x8d0>
 8004220:	9b08      	ldr	r3, [sp, #32]
 8004222:	4651      	mov	r1, sl
 8004224:	b303      	cbz	r3, 8004268 <_strtod_l+0x8c0>
 8004226:	4b9d      	ldr	r3, [pc, #628]	@ (800449c <_strtod_l+0xaf4>)
 8004228:	465a      	mov	r2, fp
 800422a:	4013      	ands	r3, r2
 800422c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004230:	f04f 32ff 	mov.w	r2, #4294967295
 8004234:	d81b      	bhi.n	800426e <_strtod_l+0x8c6>
 8004236:	0d1b      	lsrs	r3, r3, #20
 8004238:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	4299      	cmp	r1, r3
 8004242:	d119      	bne.n	8004278 <_strtod_l+0x8d0>
 8004244:	4b96      	ldr	r3, [pc, #600]	@ (80044a0 <_strtod_l+0xaf8>)
 8004246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004248:	429a      	cmp	r2, r3
 800424a:	d102      	bne.n	8004252 <_strtod_l+0x8aa>
 800424c:	3101      	adds	r1, #1
 800424e:	f43f adca 	beq.w	8003de6 <_strtod_l+0x43e>
 8004252:	4b92      	ldr	r3, [pc, #584]	@ (800449c <_strtod_l+0xaf4>)
 8004254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004256:	401a      	ands	r2, r3
 8004258:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800425c:	f04f 0a00 	mov.w	sl, #0
 8004260:	9b08      	ldr	r3, [sp, #32]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1b8      	bne.n	80041d8 <_strtod_l+0x830>
 8004266:	e5c9      	b.n	8003dfc <_strtod_l+0x454>
 8004268:	f04f 33ff 	mov.w	r3, #4294967295
 800426c:	e7e8      	b.n	8004240 <_strtod_l+0x898>
 800426e:	4613      	mov	r3, r2
 8004270:	e7e6      	b.n	8004240 <_strtod_l+0x898>
 8004272:	ea53 030a 	orrs.w	r3, r3, sl
 8004276:	d0a1      	beq.n	80041bc <_strtod_l+0x814>
 8004278:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800427a:	b1db      	cbz	r3, 80042b4 <_strtod_l+0x90c>
 800427c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800427e:	4213      	tst	r3, r2
 8004280:	d0ee      	beq.n	8004260 <_strtod_l+0x8b8>
 8004282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004284:	9a08      	ldr	r2, [sp, #32]
 8004286:	4650      	mov	r0, sl
 8004288:	4659      	mov	r1, fp
 800428a:	b1bb      	cbz	r3, 80042bc <_strtod_l+0x914>
 800428c:	f7ff fb6e 	bl	800396c <sulp>
 8004290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004294:	ec53 2b10 	vmov	r2, r3, d0
 8004298:	f7fb fff8 	bl	800028c <__adddf3>
 800429c:	4682      	mov	sl, r0
 800429e:	468b      	mov	fp, r1
 80042a0:	e7de      	b.n	8004260 <_strtod_l+0x8b8>
 80042a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80042a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80042aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80042ae:	f04f 3aff 	mov.w	sl, #4294967295
 80042b2:	e7d5      	b.n	8004260 <_strtod_l+0x8b8>
 80042b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80042b6:	ea13 0f0a 	tst.w	r3, sl
 80042ba:	e7e1      	b.n	8004280 <_strtod_l+0x8d8>
 80042bc:	f7ff fb56 	bl	800396c <sulp>
 80042c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042c4:	ec53 2b10 	vmov	r2, r3, d0
 80042c8:	f7fb ffde 	bl	8000288 <__aeabi_dsub>
 80042cc:	2200      	movs	r2, #0
 80042ce:	2300      	movs	r3, #0
 80042d0:	4682      	mov	sl, r0
 80042d2:	468b      	mov	fp, r1
 80042d4:	f7fc fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d0c1      	beq.n	8004260 <_strtod_l+0x8b8>
 80042dc:	e619      	b.n	8003f12 <_strtod_l+0x56a>
 80042de:	4641      	mov	r1, r8
 80042e0:	4620      	mov	r0, r4
 80042e2:	f001 fb7d 	bl	80059e0 <__ratio>
 80042e6:	ec57 6b10 	vmov	r6, r7, d0
 80042ea:	2200      	movs	r2, #0
 80042ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80042f0:	4630      	mov	r0, r6
 80042f2:	4639      	mov	r1, r7
 80042f4:	f7fc fbfc 	bl	8000af0 <__aeabi_dcmple>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d06f      	beq.n	80043dc <_strtod_l+0xa34>
 80042fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d17a      	bne.n	80043f8 <_strtod_l+0xa50>
 8004302:	f1ba 0f00 	cmp.w	sl, #0
 8004306:	d158      	bne.n	80043ba <_strtod_l+0xa12>
 8004308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800430a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800430e:	2b00      	cmp	r3, #0
 8004310:	d15a      	bne.n	80043c8 <_strtod_l+0xa20>
 8004312:	4b64      	ldr	r3, [pc, #400]	@ (80044a4 <_strtod_l+0xafc>)
 8004314:	2200      	movs	r2, #0
 8004316:	4630      	mov	r0, r6
 8004318:	4639      	mov	r1, r7
 800431a:	f7fc fbdf 	bl	8000adc <__aeabi_dcmplt>
 800431e:	2800      	cmp	r0, #0
 8004320:	d159      	bne.n	80043d6 <_strtod_l+0xa2e>
 8004322:	4630      	mov	r0, r6
 8004324:	4639      	mov	r1, r7
 8004326:	4b60      	ldr	r3, [pc, #384]	@ (80044a8 <_strtod_l+0xb00>)
 8004328:	2200      	movs	r2, #0
 800432a:	f7fc f965 	bl	80005f8 <__aeabi_dmul>
 800432e:	4606      	mov	r6, r0
 8004330:	460f      	mov	r7, r1
 8004332:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8004336:	9606      	str	r6, [sp, #24]
 8004338:	9307      	str	r3, [sp, #28]
 800433a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800433e:	4d57      	ldr	r5, [pc, #348]	@ (800449c <_strtod_l+0xaf4>)
 8004340:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004346:	401d      	ands	r5, r3
 8004348:	4b58      	ldr	r3, [pc, #352]	@ (80044ac <_strtod_l+0xb04>)
 800434a:	429d      	cmp	r5, r3
 800434c:	f040 80b2 	bne.w	80044b4 <_strtod_l+0xb0c>
 8004350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004352:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8004356:	ec4b ab10 	vmov	d0, sl, fp
 800435a:	f001 fa79 	bl	8005850 <__ulp>
 800435e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004362:	ec51 0b10 	vmov	r0, r1, d0
 8004366:	f7fc f947 	bl	80005f8 <__aeabi_dmul>
 800436a:	4652      	mov	r2, sl
 800436c:	465b      	mov	r3, fp
 800436e:	f7fb ff8d 	bl	800028c <__adddf3>
 8004372:	460b      	mov	r3, r1
 8004374:	4949      	ldr	r1, [pc, #292]	@ (800449c <_strtod_l+0xaf4>)
 8004376:	4a4e      	ldr	r2, [pc, #312]	@ (80044b0 <_strtod_l+0xb08>)
 8004378:	4019      	ands	r1, r3
 800437a:	4291      	cmp	r1, r2
 800437c:	4682      	mov	sl, r0
 800437e:	d942      	bls.n	8004406 <_strtod_l+0xa5e>
 8004380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004382:	4b47      	ldr	r3, [pc, #284]	@ (80044a0 <_strtod_l+0xaf8>)
 8004384:	429a      	cmp	r2, r3
 8004386:	d103      	bne.n	8004390 <_strtod_l+0x9e8>
 8004388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800438a:	3301      	adds	r3, #1
 800438c:	f43f ad2b 	beq.w	8003de6 <_strtod_l+0x43e>
 8004390:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80044a0 <_strtod_l+0xaf8>
 8004394:	f04f 3aff 	mov.w	sl, #4294967295
 8004398:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800439a:	9805      	ldr	r0, [sp, #20]
 800439c:	f000 ff24 	bl	80051e8 <_Bfree>
 80043a0:	9805      	ldr	r0, [sp, #20]
 80043a2:	4649      	mov	r1, r9
 80043a4:	f000 ff20 	bl	80051e8 <_Bfree>
 80043a8:	9805      	ldr	r0, [sp, #20]
 80043aa:	4641      	mov	r1, r8
 80043ac:	f000 ff1c 	bl	80051e8 <_Bfree>
 80043b0:	9805      	ldr	r0, [sp, #20]
 80043b2:	4621      	mov	r1, r4
 80043b4:	f000 ff18 	bl	80051e8 <_Bfree>
 80043b8:	e618      	b.n	8003fec <_strtod_l+0x644>
 80043ba:	f1ba 0f01 	cmp.w	sl, #1
 80043be:	d103      	bne.n	80043c8 <_strtod_l+0xa20>
 80043c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f43f ada5 	beq.w	8003f12 <_strtod_l+0x56a>
 80043c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8004478 <_strtod_l+0xad0>
 80043cc:	4f35      	ldr	r7, [pc, #212]	@ (80044a4 <_strtod_l+0xafc>)
 80043ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80043d2:	2600      	movs	r6, #0
 80043d4:	e7b1      	b.n	800433a <_strtod_l+0x992>
 80043d6:	4f34      	ldr	r7, [pc, #208]	@ (80044a8 <_strtod_l+0xb00>)
 80043d8:	2600      	movs	r6, #0
 80043da:	e7aa      	b.n	8004332 <_strtod_l+0x98a>
 80043dc:	4b32      	ldr	r3, [pc, #200]	@ (80044a8 <_strtod_l+0xb00>)
 80043de:	4630      	mov	r0, r6
 80043e0:	4639      	mov	r1, r7
 80043e2:	2200      	movs	r2, #0
 80043e4:	f7fc f908 	bl	80005f8 <__aeabi_dmul>
 80043e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043ea:	4606      	mov	r6, r0
 80043ec:	460f      	mov	r7, r1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d09f      	beq.n	8004332 <_strtod_l+0x98a>
 80043f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80043f6:	e7a0      	b.n	800433a <_strtod_l+0x992>
 80043f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8004480 <_strtod_l+0xad8>
 80043fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004400:	ec57 6b17 	vmov	r6, r7, d7
 8004404:	e799      	b.n	800433a <_strtod_l+0x992>
 8004406:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800440a:	9b08      	ldr	r3, [sp, #32]
 800440c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1c1      	bne.n	8004398 <_strtod_l+0x9f0>
 8004414:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004418:	0d1b      	lsrs	r3, r3, #20
 800441a:	051b      	lsls	r3, r3, #20
 800441c:	429d      	cmp	r5, r3
 800441e:	d1bb      	bne.n	8004398 <_strtod_l+0x9f0>
 8004420:	4630      	mov	r0, r6
 8004422:	4639      	mov	r1, r7
 8004424:	f7fc fbba 	bl	8000b9c <__aeabi_d2lz>
 8004428:	f7fc f8b8 	bl	800059c <__aeabi_l2d>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4630      	mov	r0, r6
 8004432:	4639      	mov	r1, r7
 8004434:	f7fb ff28 	bl	8000288 <__aeabi_dsub>
 8004438:	460b      	mov	r3, r1
 800443a:	4602      	mov	r2, r0
 800443c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004440:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004446:	ea46 060a 	orr.w	r6, r6, sl
 800444a:	431e      	orrs	r6, r3
 800444c:	d06f      	beq.n	800452e <_strtod_l+0xb86>
 800444e:	a30e      	add	r3, pc, #56	@ (adr r3, 8004488 <_strtod_l+0xae0>)
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f7fc fb42 	bl	8000adc <__aeabi_dcmplt>
 8004458:	2800      	cmp	r0, #0
 800445a:	f47f accf 	bne.w	8003dfc <_strtod_l+0x454>
 800445e:	a30c      	add	r3, pc, #48	@ (adr r3, 8004490 <_strtod_l+0xae8>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004468:	f7fc fb56 	bl	8000b18 <__aeabi_dcmpgt>
 800446c:	2800      	cmp	r0, #0
 800446e:	d093      	beq.n	8004398 <_strtod_l+0x9f0>
 8004470:	e4c4      	b.n	8003dfc <_strtod_l+0x454>
 8004472:	bf00      	nop
 8004474:	f3af 8000 	nop.w
 8004478:	00000000 	.word	0x00000000
 800447c:	bff00000 	.word	0xbff00000
 8004480:	00000000 	.word	0x00000000
 8004484:	3ff00000 	.word	0x3ff00000
 8004488:	94a03595 	.word	0x94a03595
 800448c:	3fdfffff 	.word	0x3fdfffff
 8004490:	35afe535 	.word	0x35afe535
 8004494:	3fe00000 	.word	0x3fe00000
 8004498:	000fffff 	.word	0x000fffff
 800449c:	7ff00000 	.word	0x7ff00000
 80044a0:	7fefffff 	.word	0x7fefffff
 80044a4:	3ff00000 	.word	0x3ff00000
 80044a8:	3fe00000 	.word	0x3fe00000
 80044ac:	7fe00000 	.word	0x7fe00000
 80044b0:	7c9fffff 	.word	0x7c9fffff
 80044b4:	9b08      	ldr	r3, [sp, #32]
 80044b6:	b323      	cbz	r3, 8004502 <_strtod_l+0xb5a>
 80044b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80044bc:	d821      	bhi.n	8004502 <_strtod_l+0xb5a>
 80044be:	a328      	add	r3, pc, #160	@ (adr r3, 8004560 <_strtod_l+0xbb8>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	4630      	mov	r0, r6
 80044c6:	4639      	mov	r1, r7
 80044c8:	f7fc fb12 	bl	8000af0 <__aeabi_dcmple>
 80044cc:	b1a0      	cbz	r0, 80044f8 <_strtod_l+0xb50>
 80044ce:	4639      	mov	r1, r7
 80044d0:	4630      	mov	r0, r6
 80044d2:	f7fc fb2b 	bl	8000b2c <__aeabi_d2uiz>
 80044d6:	2801      	cmp	r0, #1
 80044d8:	bf38      	it	cc
 80044da:	2001      	movcc	r0, #1
 80044dc:	f7fc f812 	bl	8000504 <__aeabi_ui2d>
 80044e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044e2:	4606      	mov	r6, r0
 80044e4:	460f      	mov	r7, r1
 80044e6:	b9fb      	cbnz	r3, 8004528 <_strtod_l+0xb80>
 80044e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80044ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80044ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80044f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80044f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80044f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80044fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80044fe:	1b5b      	subs	r3, r3, r5
 8004500:	9311      	str	r3, [sp, #68]	@ 0x44
 8004502:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004506:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800450a:	f001 f9a1 	bl	8005850 <__ulp>
 800450e:	4650      	mov	r0, sl
 8004510:	ec53 2b10 	vmov	r2, r3, d0
 8004514:	4659      	mov	r1, fp
 8004516:	f7fc f86f 	bl	80005f8 <__aeabi_dmul>
 800451a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800451e:	f7fb feb5 	bl	800028c <__adddf3>
 8004522:	4682      	mov	sl, r0
 8004524:	468b      	mov	fp, r1
 8004526:	e770      	b.n	800440a <_strtod_l+0xa62>
 8004528:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800452c:	e7e0      	b.n	80044f0 <_strtod_l+0xb48>
 800452e:	a30e      	add	r3, pc, #56	@ (adr r3, 8004568 <_strtod_l+0xbc0>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fc fad2 	bl	8000adc <__aeabi_dcmplt>
 8004538:	e798      	b.n	800446c <_strtod_l+0xac4>
 800453a:	2300      	movs	r3, #0
 800453c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800453e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8004540:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	f7ff ba6d 	b.w	8003a22 <_strtod_l+0x7a>
 8004548:	2a65      	cmp	r2, #101	@ 0x65
 800454a:	f43f ab66 	beq.w	8003c1a <_strtod_l+0x272>
 800454e:	2a45      	cmp	r2, #69	@ 0x45
 8004550:	f43f ab63 	beq.w	8003c1a <_strtod_l+0x272>
 8004554:	2301      	movs	r3, #1
 8004556:	f7ff bb9e 	b.w	8003c96 <_strtod_l+0x2ee>
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w
 8004560:	ffc00000 	.word	0xffc00000
 8004564:	41dfffff 	.word	0x41dfffff
 8004568:	94a03595 	.word	0x94a03595
 800456c:	3fcfffff 	.word	0x3fcfffff

08004570 <strtod>:
 8004570:	460a      	mov	r2, r1
 8004572:	4601      	mov	r1, r0
 8004574:	4802      	ldr	r0, [pc, #8]	@ (8004580 <strtod+0x10>)
 8004576:	4b03      	ldr	r3, [pc, #12]	@ (8004584 <strtod+0x14>)
 8004578:	6800      	ldr	r0, [r0, #0]
 800457a:	f7ff ba15 	b.w	80039a8 <_strtod_l>
 800457e:	bf00      	nop
 8004580:	20000184 	.word	0x20000184
 8004584:	20000018 	.word	0x20000018

08004588 <std>:
 8004588:	2300      	movs	r3, #0
 800458a:	b510      	push	{r4, lr}
 800458c:	4604      	mov	r4, r0
 800458e:	e9c0 3300 	strd	r3, r3, [r0]
 8004592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004596:	6083      	str	r3, [r0, #8]
 8004598:	8181      	strh	r1, [r0, #12]
 800459a:	6643      	str	r3, [r0, #100]	@ 0x64
 800459c:	81c2      	strh	r2, [r0, #14]
 800459e:	6183      	str	r3, [r0, #24]
 80045a0:	4619      	mov	r1, r3
 80045a2:	2208      	movs	r2, #8
 80045a4:	305c      	adds	r0, #92	@ 0x5c
 80045a6:	f000 f8f4 	bl	8004792 <memset>
 80045aa:	4b0d      	ldr	r3, [pc, #52]	@ (80045e0 <std+0x58>)
 80045ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80045ae:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <std+0x5c>)
 80045b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045b2:	4b0d      	ldr	r3, [pc, #52]	@ (80045e8 <std+0x60>)
 80045b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045b6:	4b0d      	ldr	r3, [pc, #52]	@ (80045ec <std+0x64>)
 80045b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80045ba:	4b0d      	ldr	r3, [pc, #52]	@ (80045f0 <std+0x68>)
 80045bc:	6224      	str	r4, [r4, #32]
 80045be:	429c      	cmp	r4, r3
 80045c0:	d006      	beq.n	80045d0 <std+0x48>
 80045c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045c6:	4294      	cmp	r4, r2
 80045c8:	d002      	beq.n	80045d0 <std+0x48>
 80045ca:	33d0      	adds	r3, #208	@ 0xd0
 80045cc:	429c      	cmp	r4, r3
 80045ce:	d105      	bne.n	80045dc <std+0x54>
 80045d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f000 b966 	b.w	80048a8 <__retarget_lock_init_recursive>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	bf00      	nop
 80045e0:	0800470d 	.word	0x0800470d
 80045e4:	0800472f 	.word	0x0800472f
 80045e8:	08004767 	.word	0x08004767
 80045ec:	0800478b 	.word	0x0800478b
 80045f0:	200003e0 	.word	0x200003e0

080045f4 <stdio_exit_handler>:
 80045f4:	4a02      	ldr	r2, [pc, #8]	@ (8004600 <stdio_exit_handler+0xc>)
 80045f6:	4903      	ldr	r1, [pc, #12]	@ (8004604 <stdio_exit_handler+0x10>)
 80045f8:	4803      	ldr	r0, [pc, #12]	@ (8004608 <stdio_exit_handler+0x14>)
 80045fa:	f000 b869 	b.w	80046d0 <_fwalk_sglue>
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c
 8004604:	08005bf1 	.word	0x08005bf1
 8004608:	20000188 	.word	0x20000188

0800460c <cleanup_stdio>:
 800460c:	6841      	ldr	r1, [r0, #4]
 800460e:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <cleanup_stdio+0x34>)
 8004610:	4299      	cmp	r1, r3
 8004612:	b510      	push	{r4, lr}
 8004614:	4604      	mov	r4, r0
 8004616:	d001      	beq.n	800461c <cleanup_stdio+0x10>
 8004618:	f001 faea 	bl	8005bf0 <_fflush_r>
 800461c:	68a1      	ldr	r1, [r4, #8]
 800461e:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <cleanup_stdio+0x38>)
 8004620:	4299      	cmp	r1, r3
 8004622:	d002      	beq.n	800462a <cleanup_stdio+0x1e>
 8004624:	4620      	mov	r0, r4
 8004626:	f001 fae3 	bl	8005bf0 <_fflush_r>
 800462a:	68e1      	ldr	r1, [r4, #12]
 800462c:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <cleanup_stdio+0x3c>)
 800462e:	4299      	cmp	r1, r3
 8004630:	d004      	beq.n	800463c <cleanup_stdio+0x30>
 8004632:	4620      	mov	r0, r4
 8004634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004638:	f001 bada 	b.w	8005bf0 <_fflush_r>
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	200003e0 	.word	0x200003e0
 8004644:	20000448 	.word	0x20000448
 8004648:	200004b0 	.word	0x200004b0

0800464c <global_stdio_init.part.0>:
 800464c:	b510      	push	{r4, lr}
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <global_stdio_init.part.0+0x30>)
 8004650:	4c0b      	ldr	r4, [pc, #44]	@ (8004680 <global_stdio_init.part.0+0x34>)
 8004652:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <global_stdio_init.part.0+0x38>)
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	4620      	mov	r0, r4
 8004658:	2200      	movs	r2, #0
 800465a:	2104      	movs	r1, #4
 800465c:	f7ff ff94 	bl	8004588 <std>
 8004660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004664:	2201      	movs	r2, #1
 8004666:	2109      	movs	r1, #9
 8004668:	f7ff ff8e 	bl	8004588 <std>
 800466c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004670:	2202      	movs	r2, #2
 8004672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004676:	2112      	movs	r1, #18
 8004678:	f7ff bf86 	b.w	8004588 <std>
 800467c:	20000518 	.word	0x20000518
 8004680:	200003e0 	.word	0x200003e0
 8004684:	080045f5 	.word	0x080045f5

08004688 <__sfp_lock_acquire>:
 8004688:	4801      	ldr	r0, [pc, #4]	@ (8004690 <__sfp_lock_acquire+0x8>)
 800468a:	f000 b90e 	b.w	80048aa <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	20000521 	.word	0x20000521

08004694 <__sfp_lock_release>:
 8004694:	4801      	ldr	r0, [pc, #4]	@ (800469c <__sfp_lock_release+0x8>)
 8004696:	f000 b909 	b.w	80048ac <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	20000521 	.word	0x20000521

080046a0 <__sinit>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	4604      	mov	r4, r0
 80046a4:	f7ff fff0 	bl	8004688 <__sfp_lock_acquire>
 80046a8:	6a23      	ldr	r3, [r4, #32]
 80046aa:	b11b      	cbz	r3, 80046b4 <__sinit+0x14>
 80046ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b0:	f7ff bff0 	b.w	8004694 <__sfp_lock_release>
 80046b4:	4b04      	ldr	r3, [pc, #16]	@ (80046c8 <__sinit+0x28>)
 80046b6:	6223      	str	r3, [r4, #32]
 80046b8:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <__sinit+0x2c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f5      	bne.n	80046ac <__sinit+0xc>
 80046c0:	f7ff ffc4 	bl	800464c <global_stdio_init.part.0>
 80046c4:	e7f2      	b.n	80046ac <__sinit+0xc>
 80046c6:	bf00      	nop
 80046c8:	0800460d 	.word	0x0800460d
 80046cc:	20000518 	.word	0x20000518

080046d0 <_fwalk_sglue>:
 80046d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d4:	4607      	mov	r7, r0
 80046d6:	4688      	mov	r8, r1
 80046d8:	4614      	mov	r4, r2
 80046da:	2600      	movs	r6, #0
 80046dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046e0:	f1b9 0901 	subs.w	r9, r9, #1
 80046e4:	d505      	bpl.n	80046f2 <_fwalk_sglue+0x22>
 80046e6:	6824      	ldr	r4, [r4, #0]
 80046e8:	2c00      	cmp	r4, #0
 80046ea:	d1f7      	bne.n	80046dc <_fwalk_sglue+0xc>
 80046ec:	4630      	mov	r0, r6
 80046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f2:	89ab      	ldrh	r3, [r5, #12]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d907      	bls.n	8004708 <_fwalk_sglue+0x38>
 80046f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046fc:	3301      	adds	r3, #1
 80046fe:	d003      	beq.n	8004708 <_fwalk_sglue+0x38>
 8004700:	4629      	mov	r1, r5
 8004702:	4638      	mov	r0, r7
 8004704:	47c0      	blx	r8
 8004706:	4306      	orrs	r6, r0
 8004708:	3568      	adds	r5, #104	@ 0x68
 800470a:	e7e9      	b.n	80046e0 <_fwalk_sglue+0x10>

0800470c <__sread>:
 800470c:	b510      	push	{r4, lr}
 800470e:	460c      	mov	r4, r1
 8004710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004714:	f000 f87a 	bl	800480c <_read_r>
 8004718:	2800      	cmp	r0, #0
 800471a:	bfab      	itete	ge
 800471c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800471e:	89a3      	ldrhlt	r3, [r4, #12]
 8004720:	181b      	addge	r3, r3, r0
 8004722:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004726:	bfac      	ite	ge
 8004728:	6563      	strge	r3, [r4, #84]	@ 0x54
 800472a:	81a3      	strhlt	r3, [r4, #12]
 800472c:	bd10      	pop	{r4, pc}

0800472e <__swrite>:
 800472e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004732:	461f      	mov	r7, r3
 8004734:	898b      	ldrh	r3, [r1, #12]
 8004736:	05db      	lsls	r3, r3, #23
 8004738:	4605      	mov	r5, r0
 800473a:	460c      	mov	r4, r1
 800473c:	4616      	mov	r6, r2
 800473e:	d505      	bpl.n	800474c <__swrite+0x1e>
 8004740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004744:	2302      	movs	r3, #2
 8004746:	2200      	movs	r2, #0
 8004748:	f000 f84e 	bl	80047e8 <_lseek_r>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004752:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	4632      	mov	r2, r6
 800475a:	463b      	mov	r3, r7
 800475c:	4628      	mov	r0, r5
 800475e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004762:	f000 b865 	b.w	8004830 <_write_r>

08004766 <__sseek>:
 8004766:	b510      	push	{r4, lr}
 8004768:	460c      	mov	r4, r1
 800476a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476e:	f000 f83b 	bl	80047e8 <_lseek_r>
 8004772:	1c43      	adds	r3, r0, #1
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	bf15      	itete	ne
 8004778:	6560      	strne	r0, [r4, #84]	@ 0x54
 800477a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800477e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004782:	81a3      	strheq	r3, [r4, #12]
 8004784:	bf18      	it	ne
 8004786:	81a3      	strhne	r3, [r4, #12]
 8004788:	bd10      	pop	{r4, pc}

0800478a <__sclose>:
 800478a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478e:	f000 b81b 	b.w	80047c8 <_close_r>

08004792 <memset>:
 8004792:	4402      	add	r2, r0
 8004794:	4603      	mov	r3, r0
 8004796:	4293      	cmp	r3, r2
 8004798:	d100      	bne.n	800479c <memset+0xa>
 800479a:	4770      	bx	lr
 800479c:	f803 1b01 	strb.w	r1, [r3], #1
 80047a0:	e7f9      	b.n	8004796 <memset+0x4>

080047a2 <strncmp>:
 80047a2:	b510      	push	{r4, lr}
 80047a4:	b16a      	cbz	r2, 80047c2 <strncmp+0x20>
 80047a6:	3901      	subs	r1, #1
 80047a8:	1884      	adds	r4, r0, r2
 80047aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d103      	bne.n	80047be <strncmp+0x1c>
 80047b6:	42a0      	cmp	r0, r4
 80047b8:	d001      	beq.n	80047be <strncmp+0x1c>
 80047ba:	2a00      	cmp	r2, #0
 80047bc:	d1f5      	bne.n	80047aa <strncmp+0x8>
 80047be:	1ad0      	subs	r0, r2, r3
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	4610      	mov	r0, r2
 80047c4:	e7fc      	b.n	80047c0 <strncmp+0x1e>
	...

080047c8 <_close_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d06      	ldr	r5, [pc, #24]	@ (80047e4 <_close_r+0x1c>)
 80047cc:	2300      	movs	r3, #0
 80047ce:	4604      	mov	r4, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	f7fc ffdf 	bl	8001796 <_close>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_close_r+0x1a>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_close_r+0x1a>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	2000051c 	.word	0x2000051c

080047e8 <_lseek_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d07      	ldr	r5, [pc, #28]	@ (8004808 <_lseek_r+0x20>)
 80047ec:	4604      	mov	r4, r0
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	602a      	str	r2, [r5, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fc fff4 	bl	80017e4 <_lseek>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_lseek_r+0x1e>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	b103      	cbz	r3, 8004806 <_lseek_r+0x1e>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	2000051c 	.word	0x2000051c

0800480c <_read_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d07      	ldr	r5, [pc, #28]	@ (800482c <_read_r+0x20>)
 8004810:	4604      	mov	r4, r0
 8004812:	4608      	mov	r0, r1
 8004814:	4611      	mov	r1, r2
 8004816:	2200      	movs	r2, #0
 8004818:	602a      	str	r2, [r5, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	f7fc ff82 	bl	8001724 <_read>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d102      	bne.n	800482a <_read_r+0x1e>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	b103      	cbz	r3, 800482a <_read_r+0x1e>
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	2000051c 	.word	0x2000051c

08004830 <_write_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4d07      	ldr	r5, [pc, #28]	@ (8004850 <_write_r+0x20>)
 8004834:	4604      	mov	r4, r0
 8004836:	4608      	mov	r0, r1
 8004838:	4611      	mov	r1, r2
 800483a:	2200      	movs	r2, #0
 800483c:	602a      	str	r2, [r5, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	f7fc ff8d 	bl	800175e <_write>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_write_r+0x1e>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_write_r+0x1e>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	2000051c 	.word	0x2000051c

08004854 <__errno>:
 8004854:	4b01      	ldr	r3, [pc, #4]	@ (800485c <__errno+0x8>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000184 	.word	0x20000184

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	4d0d      	ldr	r5, [pc, #52]	@ (8004898 <__libc_init_array+0x38>)
 8004864:	4c0d      	ldr	r4, [pc, #52]	@ (800489c <__libc_init_array+0x3c>)
 8004866:	1b64      	subs	r4, r4, r5
 8004868:	10a4      	asrs	r4, r4, #2
 800486a:	2600      	movs	r6, #0
 800486c:	42a6      	cmp	r6, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	4d0b      	ldr	r5, [pc, #44]	@ (80048a0 <__libc_init_array+0x40>)
 8004872:	4c0c      	ldr	r4, [pc, #48]	@ (80048a4 <__libc_init_array+0x44>)
 8004874:	f001 fe72 	bl	800655c <_init>
 8004878:	1b64      	subs	r4, r4, r5
 800487a:	10a4      	asrs	r4, r4, #2
 800487c:	2600      	movs	r6, #0
 800487e:	42a6      	cmp	r6, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	f855 3b04 	ldr.w	r3, [r5], #4
 8004888:	4798      	blx	r3
 800488a:	3601      	adds	r6, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004892:	4798      	blx	r3
 8004894:	3601      	adds	r6, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	08006950 	.word	0x08006950
 800489c:	08006950 	.word	0x08006950
 80048a0:	08006950 	.word	0x08006950
 80048a4:	08006954 	.word	0x08006954

080048a8 <__retarget_lock_init_recursive>:
 80048a8:	4770      	bx	lr

080048aa <__retarget_lock_acquire_recursive>:
 80048aa:	4770      	bx	lr

080048ac <__retarget_lock_release_recursive>:
 80048ac:	4770      	bx	lr

080048ae <memcpy>:
 80048ae:	440a      	add	r2, r1
 80048b0:	4291      	cmp	r1, r2
 80048b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b6:	d100      	bne.n	80048ba <memcpy+0xc>
 80048b8:	4770      	bx	lr
 80048ba:	b510      	push	{r4, lr}
 80048bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c4:	4291      	cmp	r1, r2
 80048c6:	d1f9      	bne.n	80048bc <memcpy+0xe>
 80048c8:	bd10      	pop	{r4, pc}
 80048ca:	0000      	movs	r0, r0
 80048cc:	0000      	movs	r0, r0
	...

080048d0 <nan>:
 80048d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80048d8 <nan+0x8>
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	00000000 	.word	0x00000000
 80048dc:	7ff80000 	.word	0x7ff80000

080048e0 <_free_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4605      	mov	r5, r0
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d041      	beq.n	800496c <_free_r+0x8c>
 80048e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ec:	1f0c      	subs	r4, r1, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bfb8      	it	lt
 80048f2:	18e4      	addlt	r4, r4, r3
 80048f4:	f000 fc2c 	bl	8005150 <__malloc_lock>
 80048f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <_free_r+0x90>)
 80048fa:	6813      	ldr	r3, [r2, #0]
 80048fc:	b933      	cbnz	r3, 800490c <_free_r+0x2c>
 80048fe:	6063      	str	r3, [r4, #4]
 8004900:	6014      	str	r4, [r2, #0]
 8004902:	4628      	mov	r0, r5
 8004904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004908:	f000 bc28 	b.w	800515c <__malloc_unlock>
 800490c:	42a3      	cmp	r3, r4
 800490e:	d908      	bls.n	8004922 <_free_r+0x42>
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	1821      	adds	r1, r4, r0
 8004914:	428b      	cmp	r3, r1
 8004916:	bf01      	itttt	eq
 8004918:	6819      	ldreq	r1, [r3, #0]
 800491a:	685b      	ldreq	r3, [r3, #4]
 800491c:	1809      	addeq	r1, r1, r0
 800491e:	6021      	streq	r1, [r4, #0]
 8004920:	e7ed      	b.n	80048fe <_free_r+0x1e>
 8004922:	461a      	mov	r2, r3
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	b10b      	cbz	r3, 800492c <_free_r+0x4c>
 8004928:	42a3      	cmp	r3, r4
 800492a:	d9fa      	bls.n	8004922 <_free_r+0x42>
 800492c:	6811      	ldr	r1, [r2, #0]
 800492e:	1850      	adds	r0, r2, r1
 8004930:	42a0      	cmp	r0, r4
 8004932:	d10b      	bne.n	800494c <_free_r+0x6c>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	4401      	add	r1, r0
 8004938:	1850      	adds	r0, r2, r1
 800493a:	4283      	cmp	r3, r0
 800493c:	6011      	str	r1, [r2, #0]
 800493e:	d1e0      	bne.n	8004902 <_free_r+0x22>
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	6053      	str	r3, [r2, #4]
 8004946:	4408      	add	r0, r1
 8004948:	6010      	str	r0, [r2, #0]
 800494a:	e7da      	b.n	8004902 <_free_r+0x22>
 800494c:	d902      	bls.n	8004954 <_free_r+0x74>
 800494e:	230c      	movs	r3, #12
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	e7d6      	b.n	8004902 <_free_r+0x22>
 8004954:	6820      	ldr	r0, [r4, #0]
 8004956:	1821      	adds	r1, r4, r0
 8004958:	428b      	cmp	r3, r1
 800495a:	bf04      	itt	eq
 800495c:	6819      	ldreq	r1, [r3, #0]
 800495e:	685b      	ldreq	r3, [r3, #4]
 8004960:	6063      	str	r3, [r4, #4]
 8004962:	bf04      	itt	eq
 8004964:	1809      	addeq	r1, r1, r0
 8004966:	6021      	streq	r1, [r4, #0]
 8004968:	6054      	str	r4, [r2, #4]
 800496a:	e7ca      	b.n	8004902 <_free_r+0x22>
 800496c:	bd38      	pop	{r3, r4, r5, pc}
 800496e:	bf00      	nop
 8004970:	20000528 	.word	0x20000528

08004974 <rshift>:
 8004974:	6903      	ldr	r3, [r0, #16]
 8004976:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800497a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800497e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004982:	f100 0414 	add.w	r4, r0, #20
 8004986:	dd45      	ble.n	8004a14 <rshift+0xa0>
 8004988:	f011 011f 	ands.w	r1, r1, #31
 800498c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004990:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004994:	d10c      	bne.n	80049b0 <rshift+0x3c>
 8004996:	f100 0710 	add.w	r7, r0, #16
 800499a:	4629      	mov	r1, r5
 800499c:	42b1      	cmp	r1, r6
 800499e:	d334      	bcc.n	8004a0a <rshift+0x96>
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	1eea      	subs	r2, r5, #3
 80049a6:	4296      	cmp	r6, r2
 80049a8:	bf38      	it	cc
 80049aa:	2300      	movcc	r3, #0
 80049ac:	4423      	add	r3, r4
 80049ae:	e015      	b.n	80049dc <rshift+0x68>
 80049b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80049b4:	f1c1 0820 	rsb	r8, r1, #32
 80049b8:	40cf      	lsrs	r7, r1
 80049ba:	f105 0e04 	add.w	lr, r5, #4
 80049be:	46a1      	mov	r9, r4
 80049c0:	4576      	cmp	r6, lr
 80049c2:	46f4      	mov	ip, lr
 80049c4:	d815      	bhi.n	80049f2 <rshift+0x7e>
 80049c6:	1a9a      	subs	r2, r3, r2
 80049c8:	0092      	lsls	r2, r2, #2
 80049ca:	3a04      	subs	r2, #4
 80049cc:	3501      	adds	r5, #1
 80049ce:	42ae      	cmp	r6, r5
 80049d0:	bf38      	it	cc
 80049d2:	2200      	movcc	r2, #0
 80049d4:	18a3      	adds	r3, r4, r2
 80049d6:	50a7      	str	r7, [r4, r2]
 80049d8:	b107      	cbz	r7, 80049dc <rshift+0x68>
 80049da:	3304      	adds	r3, #4
 80049dc:	1b1a      	subs	r2, r3, r4
 80049de:	42a3      	cmp	r3, r4
 80049e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80049e4:	bf08      	it	eq
 80049e6:	2300      	moveq	r3, #0
 80049e8:	6102      	str	r2, [r0, #16]
 80049ea:	bf08      	it	eq
 80049ec:	6143      	streq	r3, [r0, #20]
 80049ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049f2:	f8dc c000 	ldr.w	ip, [ip]
 80049f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80049fa:	ea4c 0707 	orr.w	r7, ip, r7
 80049fe:	f849 7b04 	str.w	r7, [r9], #4
 8004a02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004a06:	40cf      	lsrs	r7, r1
 8004a08:	e7da      	b.n	80049c0 <rshift+0x4c>
 8004a0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8004a0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8004a12:	e7c3      	b.n	800499c <rshift+0x28>
 8004a14:	4623      	mov	r3, r4
 8004a16:	e7e1      	b.n	80049dc <rshift+0x68>

08004a18 <__hexdig_fun>:
 8004a18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d802      	bhi.n	8004a26 <__hexdig_fun+0xe>
 8004a20:	3820      	subs	r0, #32
 8004a22:	b2c0      	uxtb	r0, r0
 8004a24:	4770      	bx	lr
 8004a26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d801      	bhi.n	8004a32 <__hexdig_fun+0x1a>
 8004a2e:	3847      	subs	r0, #71	@ 0x47
 8004a30:	e7f7      	b.n	8004a22 <__hexdig_fun+0xa>
 8004a32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d801      	bhi.n	8004a3e <__hexdig_fun+0x26>
 8004a3a:	3827      	subs	r0, #39	@ 0x27
 8004a3c:	e7f1      	b.n	8004a22 <__hexdig_fun+0xa>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	4770      	bx	lr
	...

08004a44 <__gethex>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	468a      	mov	sl, r1
 8004a4c:	9302      	str	r3, [sp, #8]
 8004a4e:	680b      	ldr	r3, [r1, #0]
 8004a50:	9001      	str	r0, [sp, #4]
 8004a52:	4690      	mov	r8, r2
 8004a54:	1c9c      	adds	r4, r3, #2
 8004a56:	46a1      	mov	r9, r4
 8004a58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004a5c:	2830      	cmp	r0, #48	@ 0x30
 8004a5e:	d0fa      	beq.n	8004a56 <__gethex+0x12>
 8004a60:	eba9 0303 	sub.w	r3, r9, r3
 8004a64:	f1a3 0b02 	sub.w	fp, r3, #2
 8004a68:	f7ff ffd6 	bl	8004a18 <__hexdig_fun>
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d168      	bne.n	8004b44 <__gethex+0x100>
 8004a72:	49a0      	ldr	r1, [pc, #640]	@ (8004cf4 <__gethex+0x2b0>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	4648      	mov	r0, r9
 8004a78:	f7ff fe93 	bl	80047a2 <strncmp>
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d167      	bne.n	8004b52 <__gethex+0x10e>
 8004a82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004a86:	4626      	mov	r6, r4
 8004a88:	f7ff ffc6 	bl	8004a18 <__hexdig_fun>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d062      	beq.n	8004b56 <__gethex+0x112>
 8004a90:	4623      	mov	r3, r4
 8004a92:	7818      	ldrb	r0, [r3, #0]
 8004a94:	2830      	cmp	r0, #48	@ 0x30
 8004a96:	4699      	mov	r9, r3
 8004a98:	f103 0301 	add.w	r3, r3, #1
 8004a9c:	d0f9      	beq.n	8004a92 <__gethex+0x4e>
 8004a9e:	f7ff ffbb 	bl	8004a18 <__hexdig_fun>
 8004aa2:	fab0 f580 	clz	r5, r0
 8004aa6:	096d      	lsrs	r5, r5, #5
 8004aa8:	f04f 0b01 	mov.w	fp, #1
 8004aac:	464a      	mov	r2, r9
 8004aae:	4616      	mov	r6, r2
 8004ab0:	3201      	adds	r2, #1
 8004ab2:	7830      	ldrb	r0, [r6, #0]
 8004ab4:	f7ff ffb0 	bl	8004a18 <__hexdig_fun>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d1f8      	bne.n	8004aae <__gethex+0x6a>
 8004abc:	498d      	ldr	r1, [pc, #564]	@ (8004cf4 <__gethex+0x2b0>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7ff fe6e 	bl	80047a2 <strncmp>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d13f      	bne.n	8004b4a <__gethex+0x106>
 8004aca:	b944      	cbnz	r4, 8004ade <__gethex+0x9a>
 8004acc:	1c74      	adds	r4, r6, #1
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4616      	mov	r6, r2
 8004ad2:	3201      	adds	r2, #1
 8004ad4:	7830      	ldrb	r0, [r6, #0]
 8004ad6:	f7ff ff9f 	bl	8004a18 <__hexdig_fun>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d1f8      	bne.n	8004ad0 <__gethex+0x8c>
 8004ade:	1ba4      	subs	r4, r4, r6
 8004ae0:	00a7      	lsls	r7, r4, #2
 8004ae2:	7833      	ldrb	r3, [r6, #0]
 8004ae4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8004ae8:	2b50      	cmp	r3, #80	@ 0x50
 8004aea:	d13e      	bne.n	8004b6a <__gethex+0x126>
 8004aec:	7873      	ldrb	r3, [r6, #1]
 8004aee:	2b2b      	cmp	r3, #43	@ 0x2b
 8004af0:	d033      	beq.n	8004b5a <__gethex+0x116>
 8004af2:	2b2d      	cmp	r3, #45	@ 0x2d
 8004af4:	d034      	beq.n	8004b60 <__gethex+0x11c>
 8004af6:	1c71      	adds	r1, r6, #1
 8004af8:	2400      	movs	r4, #0
 8004afa:	7808      	ldrb	r0, [r1, #0]
 8004afc:	f7ff ff8c 	bl	8004a18 <__hexdig_fun>
 8004b00:	1e43      	subs	r3, r0, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b18      	cmp	r3, #24
 8004b06:	d830      	bhi.n	8004b6a <__gethex+0x126>
 8004b08:	f1a0 0210 	sub.w	r2, r0, #16
 8004b0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004b10:	f7ff ff82 	bl	8004a18 <__hexdig_fun>
 8004b14:	f100 3cff 	add.w	ip, r0, #4294967295
 8004b18:	fa5f fc8c 	uxtb.w	ip, ip
 8004b1c:	f1bc 0f18 	cmp.w	ip, #24
 8004b20:	f04f 030a 	mov.w	r3, #10
 8004b24:	d91e      	bls.n	8004b64 <__gethex+0x120>
 8004b26:	b104      	cbz	r4, 8004b2a <__gethex+0xe6>
 8004b28:	4252      	negs	r2, r2
 8004b2a:	4417      	add	r7, r2
 8004b2c:	f8ca 1000 	str.w	r1, [sl]
 8004b30:	b1ed      	cbz	r5, 8004b6e <__gethex+0x12a>
 8004b32:	f1bb 0f00 	cmp.w	fp, #0
 8004b36:	bf0c      	ite	eq
 8004b38:	2506      	moveq	r5, #6
 8004b3a:	2500      	movne	r5, #0
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	b005      	add	sp, #20
 8004b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b44:	2500      	movs	r5, #0
 8004b46:	462c      	mov	r4, r5
 8004b48:	e7b0      	b.n	8004aac <__gethex+0x68>
 8004b4a:	2c00      	cmp	r4, #0
 8004b4c:	d1c7      	bne.n	8004ade <__gethex+0x9a>
 8004b4e:	4627      	mov	r7, r4
 8004b50:	e7c7      	b.n	8004ae2 <__gethex+0x9e>
 8004b52:	464e      	mov	r6, r9
 8004b54:	462f      	mov	r7, r5
 8004b56:	2501      	movs	r5, #1
 8004b58:	e7c3      	b.n	8004ae2 <__gethex+0x9e>
 8004b5a:	2400      	movs	r4, #0
 8004b5c:	1cb1      	adds	r1, r6, #2
 8004b5e:	e7cc      	b.n	8004afa <__gethex+0xb6>
 8004b60:	2401      	movs	r4, #1
 8004b62:	e7fb      	b.n	8004b5c <__gethex+0x118>
 8004b64:	fb03 0002 	mla	r0, r3, r2, r0
 8004b68:	e7ce      	b.n	8004b08 <__gethex+0xc4>
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	e7de      	b.n	8004b2c <__gethex+0xe8>
 8004b6e:	eba6 0309 	sub.w	r3, r6, r9
 8004b72:	3b01      	subs	r3, #1
 8004b74:	4629      	mov	r1, r5
 8004b76:	2b07      	cmp	r3, #7
 8004b78:	dc0a      	bgt.n	8004b90 <__gethex+0x14c>
 8004b7a:	9801      	ldr	r0, [sp, #4]
 8004b7c:	f000 faf4 	bl	8005168 <_Balloc>
 8004b80:	4604      	mov	r4, r0
 8004b82:	b940      	cbnz	r0, 8004b96 <__gethex+0x152>
 8004b84:	4b5c      	ldr	r3, [pc, #368]	@ (8004cf8 <__gethex+0x2b4>)
 8004b86:	4602      	mov	r2, r0
 8004b88:	21e4      	movs	r1, #228	@ 0xe4
 8004b8a:	485c      	ldr	r0, [pc, #368]	@ (8004cfc <__gethex+0x2b8>)
 8004b8c:	f001 f868 	bl	8005c60 <__assert_func>
 8004b90:	3101      	adds	r1, #1
 8004b92:	105b      	asrs	r3, r3, #1
 8004b94:	e7ef      	b.n	8004b76 <__gethex+0x132>
 8004b96:	f100 0a14 	add.w	sl, r0, #20
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	4655      	mov	r5, sl
 8004b9e:	469b      	mov	fp, r3
 8004ba0:	45b1      	cmp	r9, r6
 8004ba2:	d337      	bcc.n	8004c14 <__gethex+0x1d0>
 8004ba4:	f845 bb04 	str.w	fp, [r5], #4
 8004ba8:	eba5 050a 	sub.w	r5, r5, sl
 8004bac:	10ad      	asrs	r5, r5, #2
 8004bae:	6125      	str	r5, [r4, #16]
 8004bb0:	4658      	mov	r0, fp
 8004bb2:	f000 fbcb 	bl	800534c <__hi0bits>
 8004bb6:	016d      	lsls	r5, r5, #5
 8004bb8:	f8d8 6000 	ldr.w	r6, [r8]
 8004bbc:	1a2d      	subs	r5, r5, r0
 8004bbe:	42b5      	cmp	r5, r6
 8004bc0:	dd54      	ble.n	8004c6c <__gethex+0x228>
 8004bc2:	1bad      	subs	r5, r5, r6
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 ff5f 	bl	8005a8a <__any_on>
 8004bcc:	4681      	mov	r9, r0
 8004bce:	b178      	cbz	r0, 8004bf0 <__gethex+0x1ac>
 8004bd0:	1e6b      	subs	r3, r5, #1
 8004bd2:	1159      	asrs	r1, r3, #5
 8004bd4:	f003 021f 	and.w	r2, r3, #31
 8004bd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8004bdc:	f04f 0901 	mov.w	r9, #1
 8004be0:	fa09 f202 	lsl.w	r2, r9, r2
 8004be4:	420a      	tst	r2, r1
 8004be6:	d003      	beq.n	8004bf0 <__gethex+0x1ac>
 8004be8:	454b      	cmp	r3, r9
 8004bea:	dc36      	bgt.n	8004c5a <__gethex+0x216>
 8004bec:	f04f 0902 	mov.w	r9, #2
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff febe 	bl	8004974 <rshift>
 8004bf8:	442f      	add	r7, r5
 8004bfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004bfe:	42bb      	cmp	r3, r7
 8004c00:	da42      	bge.n	8004c88 <__gethex+0x244>
 8004c02:	9801      	ldr	r0, [sp, #4]
 8004c04:	4621      	mov	r1, r4
 8004c06:	f000 faef 	bl	80051e8 <_Bfree>
 8004c0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	25a3      	movs	r5, #163	@ 0xa3
 8004c12:	e793      	b.n	8004b3c <__gethex+0xf8>
 8004c14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8004c18:	2a2e      	cmp	r2, #46	@ 0x2e
 8004c1a:	d012      	beq.n	8004c42 <__gethex+0x1fe>
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d104      	bne.n	8004c2a <__gethex+0x1e6>
 8004c20:	f845 bb04 	str.w	fp, [r5], #4
 8004c24:	f04f 0b00 	mov.w	fp, #0
 8004c28:	465b      	mov	r3, fp
 8004c2a:	7830      	ldrb	r0, [r6, #0]
 8004c2c:	9303      	str	r3, [sp, #12]
 8004c2e:	f7ff fef3 	bl	8004a18 <__hexdig_fun>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	f000 000f 	and.w	r0, r0, #15
 8004c38:	4098      	lsls	r0, r3
 8004c3a:	ea4b 0b00 	orr.w	fp, fp, r0
 8004c3e:	3304      	adds	r3, #4
 8004c40:	e7ae      	b.n	8004ba0 <__gethex+0x15c>
 8004c42:	45b1      	cmp	r9, r6
 8004c44:	d8ea      	bhi.n	8004c1c <__gethex+0x1d8>
 8004c46:	492b      	ldr	r1, [pc, #172]	@ (8004cf4 <__gethex+0x2b0>)
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f7ff fda8 	bl	80047a2 <strncmp>
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d1e1      	bne.n	8004c1c <__gethex+0x1d8>
 8004c58:	e7a2      	b.n	8004ba0 <__gethex+0x15c>
 8004c5a:	1ea9      	subs	r1, r5, #2
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 ff14 	bl	8005a8a <__any_on>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0c2      	beq.n	8004bec <__gethex+0x1a8>
 8004c66:	f04f 0903 	mov.w	r9, #3
 8004c6a:	e7c1      	b.n	8004bf0 <__gethex+0x1ac>
 8004c6c:	da09      	bge.n	8004c82 <__gethex+0x23e>
 8004c6e:	1b75      	subs	r5, r6, r5
 8004c70:	4621      	mov	r1, r4
 8004c72:	9801      	ldr	r0, [sp, #4]
 8004c74:	462a      	mov	r2, r5
 8004c76:	f000 fccf 	bl	8005618 <__lshift>
 8004c7a:	1b7f      	subs	r7, r7, r5
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	f100 0a14 	add.w	sl, r0, #20
 8004c82:	f04f 0900 	mov.w	r9, #0
 8004c86:	e7b8      	b.n	8004bfa <__gethex+0x1b6>
 8004c88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004c8c:	42bd      	cmp	r5, r7
 8004c8e:	dd6f      	ble.n	8004d70 <__gethex+0x32c>
 8004c90:	1bed      	subs	r5, r5, r7
 8004c92:	42ae      	cmp	r6, r5
 8004c94:	dc34      	bgt.n	8004d00 <__gethex+0x2bc>
 8004c96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d022      	beq.n	8004ce4 <__gethex+0x2a0>
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d024      	beq.n	8004cec <__gethex+0x2a8>
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d115      	bne.n	8004cd2 <__gethex+0x28e>
 8004ca6:	42ae      	cmp	r6, r5
 8004ca8:	d113      	bne.n	8004cd2 <__gethex+0x28e>
 8004caa:	2e01      	cmp	r6, #1
 8004cac:	d10b      	bne.n	8004cc6 <__gethex+0x282>
 8004cae:	9a02      	ldr	r2, [sp, #8]
 8004cb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	6123      	str	r3, [r4, #16]
 8004cba:	f8ca 3000 	str.w	r3, [sl]
 8004cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cc0:	2562      	movs	r5, #98	@ 0x62
 8004cc2:	601c      	str	r4, [r3, #0]
 8004cc4:	e73a      	b.n	8004b3c <__gethex+0xf8>
 8004cc6:	1e71      	subs	r1, r6, #1
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 fede 	bl	8005a8a <__any_on>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d1ed      	bne.n	8004cae <__gethex+0x26a>
 8004cd2:	9801      	ldr	r0, [sp, #4]
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	f000 fa87 	bl	80051e8 <_Bfree>
 8004cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	2550      	movs	r5, #80	@ 0x50
 8004ce2:	e72b      	b.n	8004b3c <__gethex+0xf8>
 8004ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f3      	bne.n	8004cd2 <__gethex+0x28e>
 8004cea:	e7e0      	b.n	8004cae <__gethex+0x26a>
 8004cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1dd      	bne.n	8004cae <__gethex+0x26a>
 8004cf2:	e7ee      	b.n	8004cd2 <__gethex+0x28e>
 8004cf4:	08006590 	.word	0x08006590
 8004cf8:	080065f8 	.word	0x080065f8
 8004cfc:	08006609 	.word	0x08006609
 8004d00:	1e6f      	subs	r7, r5, #1
 8004d02:	f1b9 0f00 	cmp.w	r9, #0
 8004d06:	d130      	bne.n	8004d6a <__gethex+0x326>
 8004d08:	b127      	cbz	r7, 8004d14 <__gethex+0x2d0>
 8004d0a:	4639      	mov	r1, r7
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f000 febc 	bl	8005a8a <__any_on>
 8004d12:	4681      	mov	r9, r0
 8004d14:	117a      	asrs	r2, r7, #5
 8004d16:	2301      	movs	r3, #1
 8004d18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8004d1c:	f007 071f 	and.w	r7, r7, #31
 8004d20:	40bb      	lsls	r3, r7
 8004d22:	4213      	tst	r3, r2
 8004d24:	4629      	mov	r1, r5
 8004d26:	4620      	mov	r0, r4
 8004d28:	bf18      	it	ne
 8004d2a:	f049 0902 	orrne.w	r9, r9, #2
 8004d2e:	f7ff fe21 	bl	8004974 <rshift>
 8004d32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8004d36:	1b76      	subs	r6, r6, r5
 8004d38:	2502      	movs	r5, #2
 8004d3a:	f1b9 0f00 	cmp.w	r9, #0
 8004d3e:	d047      	beq.n	8004dd0 <__gethex+0x38c>
 8004d40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d015      	beq.n	8004d74 <__gethex+0x330>
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d017      	beq.n	8004d7c <__gethex+0x338>
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d109      	bne.n	8004d64 <__gethex+0x320>
 8004d50:	f019 0f02 	tst.w	r9, #2
 8004d54:	d006      	beq.n	8004d64 <__gethex+0x320>
 8004d56:	f8da 3000 	ldr.w	r3, [sl]
 8004d5a:	ea49 0903 	orr.w	r9, r9, r3
 8004d5e:	f019 0f01 	tst.w	r9, #1
 8004d62:	d10e      	bne.n	8004d82 <__gethex+0x33e>
 8004d64:	f045 0510 	orr.w	r5, r5, #16
 8004d68:	e032      	b.n	8004dd0 <__gethex+0x38c>
 8004d6a:	f04f 0901 	mov.w	r9, #1
 8004d6e:	e7d1      	b.n	8004d14 <__gethex+0x2d0>
 8004d70:	2501      	movs	r5, #1
 8004d72:	e7e2      	b.n	8004d3a <__gethex+0x2f6>
 8004d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d76:	f1c3 0301 	rsb	r3, r3, #1
 8004d7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <__gethex+0x320>
 8004d82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004d86:	f104 0314 	add.w	r3, r4, #20
 8004d8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004d8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004d92:	f04f 0c00 	mov.w	ip, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004da0:	d01b      	beq.n	8004dda <__gethex+0x396>
 8004da2:	3201      	adds	r2, #1
 8004da4:	6002      	str	r2, [r0, #0]
 8004da6:	2d02      	cmp	r5, #2
 8004da8:	f104 0314 	add.w	r3, r4, #20
 8004dac:	d13c      	bne.n	8004e28 <__gethex+0x3e4>
 8004dae:	f8d8 2000 	ldr.w	r2, [r8]
 8004db2:	3a01      	subs	r2, #1
 8004db4:	42b2      	cmp	r2, r6
 8004db6:	d109      	bne.n	8004dcc <__gethex+0x388>
 8004db8:	1171      	asrs	r1, r6, #5
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004dc0:	f006 061f 	and.w	r6, r6, #31
 8004dc4:	fa02 f606 	lsl.w	r6, r2, r6
 8004dc8:	421e      	tst	r6, r3
 8004dca:	d13a      	bne.n	8004e42 <__gethex+0x3fe>
 8004dcc:	f045 0520 	orr.w	r5, r5, #32
 8004dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004dd2:	601c      	str	r4, [r3, #0]
 8004dd4:	9b02      	ldr	r3, [sp, #8]
 8004dd6:	601f      	str	r7, [r3, #0]
 8004dd8:	e6b0      	b.n	8004b3c <__gethex+0xf8>
 8004dda:	4299      	cmp	r1, r3
 8004ddc:	f843 cc04 	str.w	ip, [r3, #-4]
 8004de0:	d8d9      	bhi.n	8004d96 <__gethex+0x352>
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	459b      	cmp	fp, r3
 8004de6:	db17      	blt.n	8004e18 <__gethex+0x3d4>
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	9801      	ldr	r0, [sp, #4]
 8004dec:	3101      	adds	r1, #1
 8004dee:	f000 f9bb 	bl	8005168 <_Balloc>
 8004df2:	4681      	mov	r9, r0
 8004df4:	b918      	cbnz	r0, 8004dfe <__gethex+0x3ba>
 8004df6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e60 <__gethex+0x41c>)
 8004df8:	4602      	mov	r2, r0
 8004dfa:	2184      	movs	r1, #132	@ 0x84
 8004dfc:	e6c5      	b.n	8004b8a <__gethex+0x146>
 8004dfe:	6922      	ldr	r2, [r4, #16]
 8004e00:	3202      	adds	r2, #2
 8004e02:	f104 010c 	add.w	r1, r4, #12
 8004e06:	0092      	lsls	r2, r2, #2
 8004e08:	300c      	adds	r0, #12
 8004e0a:	f7ff fd50 	bl	80048ae <memcpy>
 8004e0e:	4621      	mov	r1, r4
 8004e10:	9801      	ldr	r0, [sp, #4]
 8004e12:	f000 f9e9 	bl	80051e8 <_Bfree>
 8004e16:	464c      	mov	r4, r9
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e20:	6122      	str	r2, [r4, #16]
 8004e22:	2201      	movs	r2, #1
 8004e24:	615a      	str	r2, [r3, #20]
 8004e26:	e7be      	b.n	8004da6 <__gethex+0x362>
 8004e28:	6922      	ldr	r2, [r4, #16]
 8004e2a:	455a      	cmp	r2, fp
 8004e2c:	dd0b      	ble.n	8004e46 <__gethex+0x402>
 8004e2e:	2101      	movs	r1, #1
 8004e30:	4620      	mov	r0, r4
 8004e32:	f7ff fd9f 	bl	8004974 <rshift>
 8004e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004e3a:	3701      	adds	r7, #1
 8004e3c:	42bb      	cmp	r3, r7
 8004e3e:	f6ff aee0 	blt.w	8004c02 <__gethex+0x1be>
 8004e42:	2501      	movs	r5, #1
 8004e44:	e7c2      	b.n	8004dcc <__gethex+0x388>
 8004e46:	f016 061f 	ands.w	r6, r6, #31
 8004e4a:	d0fa      	beq.n	8004e42 <__gethex+0x3fe>
 8004e4c:	4453      	add	r3, sl
 8004e4e:	f1c6 0620 	rsb	r6, r6, #32
 8004e52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8004e56:	f000 fa79 	bl	800534c <__hi0bits>
 8004e5a:	42b0      	cmp	r0, r6
 8004e5c:	dbe7      	blt.n	8004e2e <__gethex+0x3ea>
 8004e5e:	e7f0      	b.n	8004e42 <__gethex+0x3fe>
 8004e60:	080065f8 	.word	0x080065f8

08004e64 <L_shift>:
 8004e64:	f1c2 0208 	rsb	r2, r2, #8
 8004e68:	0092      	lsls	r2, r2, #2
 8004e6a:	b570      	push	{r4, r5, r6, lr}
 8004e6c:	f1c2 0620 	rsb	r6, r2, #32
 8004e70:	6843      	ldr	r3, [r0, #4]
 8004e72:	6804      	ldr	r4, [r0, #0]
 8004e74:	fa03 f506 	lsl.w	r5, r3, r6
 8004e78:	432c      	orrs	r4, r5
 8004e7a:	40d3      	lsrs	r3, r2
 8004e7c:	6004      	str	r4, [r0, #0]
 8004e7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8004e82:	4288      	cmp	r0, r1
 8004e84:	d3f4      	bcc.n	8004e70 <L_shift+0xc>
 8004e86:	bd70      	pop	{r4, r5, r6, pc}

08004e88 <__match>:
 8004e88:	b530      	push	{r4, r5, lr}
 8004e8a:	6803      	ldr	r3, [r0, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e92:	b914      	cbnz	r4, 8004e9a <__match+0x12>
 8004e94:	6003      	str	r3, [r0, #0]
 8004e96:	2001      	movs	r0, #1
 8004e98:	bd30      	pop	{r4, r5, pc}
 8004e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8004ea2:	2d19      	cmp	r5, #25
 8004ea4:	bf98      	it	ls
 8004ea6:	3220      	addls	r2, #32
 8004ea8:	42a2      	cmp	r2, r4
 8004eaa:	d0f0      	beq.n	8004e8e <__match+0x6>
 8004eac:	2000      	movs	r0, #0
 8004eae:	e7f3      	b.n	8004e98 <__match+0x10>

08004eb0 <__hexnan>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	680b      	ldr	r3, [r1, #0]
 8004eb6:	6801      	ldr	r1, [r0, #0]
 8004eb8:	115e      	asrs	r6, r3, #5
 8004eba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004ebe:	f013 031f 	ands.w	r3, r3, #31
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	bf18      	it	ne
 8004ec6:	3604      	addne	r6, #4
 8004ec8:	2500      	movs	r5, #0
 8004eca:	1f37      	subs	r7, r6, #4
 8004ecc:	4682      	mov	sl, r0
 8004ece:	4690      	mov	r8, r2
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	f846 5c04 	str.w	r5, [r6, #-4]
 8004ed6:	46b9      	mov	r9, r7
 8004ed8:	463c      	mov	r4, r7
 8004eda:	9502      	str	r5, [sp, #8]
 8004edc:	46ab      	mov	fp, r5
 8004ede:	784a      	ldrb	r2, [r1, #1]
 8004ee0:	1c4b      	adds	r3, r1, #1
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	b342      	cbz	r2, 8004f38 <__hexnan+0x88>
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	9105      	str	r1, [sp, #20]
 8004eea:	9204      	str	r2, [sp, #16]
 8004eec:	f7ff fd94 	bl	8004a18 <__hexdig_fun>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d151      	bne.n	8004f98 <__hexnan+0xe8>
 8004ef4:	9a04      	ldr	r2, [sp, #16]
 8004ef6:	9905      	ldr	r1, [sp, #20]
 8004ef8:	2a20      	cmp	r2, #32
 8004efa:	d818      	bhi.n	8004f2e <__hexnan+0x7e>
 8004efc:	9b02      	ldr	r3, [sp, #8]
 8004efe:	459b      	cmp	fp, r3
 8004f00:	dd13      	ble.n	8004f2a <__hexnan+0x7a>
 8004f02:	454c      	cmp	r4, r9
 8004f04:	d206      	bcs.n	8004f14 <__hexnan+0x64>
 8004f06:	2d07      	cmp	r5, #7
 8004f08:	dc04      	bgt.n	8004f14 <__hexnan+0x64>
 8004f0a:	462a      	mov	r2, r5
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff ffa8 	bl	8004e64 <L_shift>
 8004f14:	4544      	cmp	r4, r8
 8004f16:	d952      	bls.n	8004fbe <__hexnan+0x10e>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f1a4 0904 	sub.w	r9, r4, #4
 8004f1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004f22:	f8cd b008 	str.w	fp, [sp, #8]
 8004f26:	464c      	mov	r4, r9
 8004f28:	461d      	mov	r5, r3
 8004f2a:	9903      	ldr	r1, [sp, #12]
 8004f2c:	e7d7      	b.n	8004ede <__hexnan+0x2e>
 8004f2e:	2a29      	cmp	r2, #41	@ 0x29
 8004f30:	d157      	bne.n	8004fe2 <__hexnan+0x132>
 8004f32:	3102      	adds	r1, #2
 8004f34:	f8ca 1000 	str.w	r1, [sl]
 8004f38:	f1bb 0f00 	cmp.w	fp, #0
 8004f3c:	d051      	beq.n	8004fe2 <__hexnan+0x132>
 8004f3e:	454c      	cmp	r4, r9
 8004f40:	d206      	bcs.n	8004f50 <__hexnan+0xa0>
 8004f42:	2d07      	cmp	r5, #7
 8004f44:	dc04      	bgt.n	8004f50 <__hexnan+0xa0>
 8004f46:	462a      	mov	r2, r5
 8004f48:	4649      	mov	r1, r9
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f7ff ff8a 	bl	8004e64 <L_shift>
 8004f50:	4544      	cmp	r4, r8
 8004f52:	d936      	bls.n	8004fc2 <__hexnan+0x112>
 8004f54:	f1a8 0204 	sub.w	r2, r8, #4
 8004f58:	4623      	mov	r3, r4
 8004f5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8004f5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8004f62:	429f      	cmp	r7, r3
 8004f64:	d2f9      	bcs.n	8004f5a <__hexnan+0xaa>
 8004f66:	1b3b      	subs	r3, r7, r4
 8004f68:	f023 0303 	bic.w	r3, r3, #3
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	3401      	adds	r4, #1
 8004f70:	3e03      	subs	r6, #3
 8004f72:	42b4      	cmp	r4, r6
 8004f74:	bf88      	it	hi
 8004f76:	2304      	movhi	r3, #4
 8004f78:	4443      	add	r3, r8
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f843 2b04 	str.w	r2, [r3], #4
 8004f80:	429f      	cmp	r7, r3
 8004f82:	d2fb      	bcs.n	8004f7c <__hexnan+0xcc>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	b91b      	cbnz	r3, 8004f90 <__hexnan+0xe0>
 8004f88:	4547      	cmp	r7, r8
 8004f8a:	d128      	bne.n	8004fde <__hexnan+0x12e>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	2005      	movs	r0, #5
 8004f92:	b007      	add	sp, #28
 8004f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f98:	3501      	adds	r5, #1
 8004f9a:	2d08      	cmp	r5, #8
 8004f9c:	f10b 0b01 	add.w	fp, fp, #1
 8004fa0:	dd06      	ble.n	8004fb0 <__hexnan+0x100>
 8004fa2:	4544      	cmp	r4, r8
 8004fa4:	d9c1      	bls.n	8004f2a <__hexnan+0x7a>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8004fac:	2501      	movs	r5, #1
 8004fae:	3c04      	subs	r4, #4
 8004fb0:	6822      	ldr	r2, [r4, #0]
 8004fb2:	f000 000f 	and.w	r0, r0, #15
 8004fb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004fba:	6020      	str	r0, [r4, #0]
 8004fbc:	e7b5      	b.n	8004f2a <__hexnan+0x7a>
 8004fbe:	2508      	movs	r5, #8
 8004fc0:	e7b3      	b.n	8004f2a <__hexnan+0x7a>
 8004fc2:	9b01      	ldr	r3, [sp, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0dd      	beq.n	8004f84 <__hexnan+0xd4>
 8004fc8:	f1c3 0320 	rsb	r3, r3, #32
 8004fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd0:	40da      	lsrs	r2, r3
 8004fd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	f846 3c04 	str.w	r3, [r6, #-4]
 8004fdc:	e7d2      	b.n	8004f84 <__hexnan+0xd4>
 8004fde:	3f04      	subs	r7, #4
 8004fe0:	e7d0      	b.n	8004f84 <__hexnan+0xd4>
 8004fe2:	2004      	movs	r0, #4
 8004fe4:	e7d5      	b.n	8004f92 <__hexnan+0xe2>
	...

08004fe8 <sbrk_aligned>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	4e0f      	ldr	r6, [pc, #60]	@ (8005028 <sbrk_aligned+0x40>)
 8004fec:	460c      	mov	r4, r1
 8004fee:	6831      	ldr	r1, [r6, #0]
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	b911      	cbnz	r1, 8004ffa <sbrk_aligned+0x12>
 8004ff4:	f000 fe24 	bl	8005c40 <_sbrk_r>
 8004ff8:	6030      	str	r0, [r6, #0]
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 fe1f 	bl	8005c40 <_sbrk_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d103      	bne.n	800500e <sbrk_aligned+0x26>
 8005006:	f04f 34ff 	mov.w	r4, #4294967295
 800500a:	4620      	mov	r0, r4
 800500c:	bd70      	pop	{r4, r5, r6, pc}
 800500e:	1cc4      	adds	r4, r0, #3
 8005010:	f024 0403 	bic.w	r4, r4, #3
 8005014:	42a0      	cmp	r0, r4
 8005016:	d0f8      	beq.n	800500a <sbrk_aligned+0x22>
 8005018:	1a21      	subs	r1, r4, r0
 800501a:	4628      	mov	r0, r5
 800501c:	f000 fe10 	bl	8005c40 <_sbrk_r>
 8005020:	3001      	adds	r0, #1
 8005022:	d1f2      	bne.n	800500a <sbrk_aligned+0x22>
 8005024:	e7ef      	b.n	8005006 <sbrk_aligned+0x1e>
 8005026:	bf00      	nop
 8005028:	20000524 	.word	0x20000524

0800502c <_malloc_r>:
 800502c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005030:	1ccd      	adds	r5, r1, #3
 8005032:	f025 0503 	bic.w	r5, r5, #3
 8005036:	3508      	adds	r5, #8
 8005038:	2d0c      	cmp	r5, #12
 800503a:	bf38      	it	cc
 800503c:	250c      	movcc	r5, #12
 800503e:	2d00      	cmp	r5, #0
 8005040:	4606      	mov	r6, r0
 8005042:	db01      	blt.n	8005048 <_malloc_r+0x1c>
 8005044:	42a9      	cmp	r1, r5
 8005046:	d904      	bls.n	8005052 <_malloc_r+0x26>
 8005048:	230c      	movs	r3, #12
 800504a:	6033      	str	r3, [r6, #0]
 800504c:	2000      	movs	r0, #0
 800504e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005128 <_malloc_r+0xfc>
 8005056:	f000 f87b 	bl	8005150 <__malloc_lock>
 800505a:	f8d8 3000 	ldr.w	r3, [r8]
 800505e:	461c      	mov	r4, r3
 8005060:	bb44      	cbnz	r4, 80050b4 <_malloc_r+0x88>
 8005062:	4629      	mov	r1, r5
 8005064:	4630      	mov	r0, r6
 8005066:	f7ff ffbf 	bl	8004fe8 <sbrk_aligned>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	4604      	mov	r4, r0
 800506e:	d158      	bne.n	8005122 <_malloc_r+0xf6>
 8005070:	f8d8 4000 	ldr.w	r4, [r8]
 8005074:	4627      	mov	r7, r4
 8005076:	2f00      	cmp	r7, #0
 8005078:	d143      	bne.n	8005102 <_malloc_r+0xd6>
 800507a:	2c00      	cmp	r4, #0
 800507c:	d04b      	beq.n	8005116 <_malloc_r+0xea>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	4639      	mov	r1, r7
 8005082:	4630      	mov	r0, r6
 8005084:	eb04 0903 	add.w	r9, r4, r3
 8005088:	f000 fdda 	bl	8005c40 <_sbrk_r>
 800508c:	4581      	cmp	r9, r0
 800508e:	d142      	bne.n	8005116 <_malloc_r+0xea>
 8005090:	6821      	ldr	r1, [r4, #0]
 8005092:	1a6d      	subs	r5, r5, r1
 8005094:	4629      	mov	r1, r5
 8005096:	4630      	mov	r0, r6
 8005098:	f7ff ffa6 	bl	8004fe8 <sbrk_aligned>
 800509c:	3001      	adds	r0, #1
 800509e:	d03a      	beq.n	8005116 <_malloc_r+0xea>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	442b      	add	r3, r5
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	f8d8 3000 	ldr.w	r3, [r8]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	bb62      	cbnz	r2, 8005108 <_malloc_r+0xdc>
 80050ae:	f8c8 7000 	str.w	r7, [r8]
 80050b2:	e00f      	b.n	80050d4 <_malloc_r+0xa8>
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	1b52      	subs	r2, r2, r5
 80050b8:	d420      	bmi.n	80050fc <_malloc_r+0xd0>
 80050ba:	2a0b      	cmp	r2, #11
 80050bc:	d917      	bls.n	80050ee <_malloc_r+0xc2>
 80050be:	1961      	adds	r1, r4, r5
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	6025      	str	r5, [r4, #0]
 80050c4:	bf18      	it	ne
 80050c6:	6059      	strne	r1, [r3, #4]
 80050c8:	6863      	ldr	r3, [r4, #4]
 80050ca:	bf08      	it	eq
 80050cc:	f8c8 1000 	streq.w	r1, [r8]
 80050d0:	5162      	str	r2, [r4, r5]
 80050d2:	604b      	str	r3, [r1, #4]
 80050d4:	4630      	mov	r0, r6
 80050d6:	f000 f841 	bl	800515c <__malloc_unlock>
 80050da:	f104 000b 	add.w	r0, r4, #11
 80050de:	1d23      	adds	r3, r4, #4
 80050e0:	f020 0007 	bic.w	r0, r0, #7
 80050e4:	1ac2      	subs	r2, r0, r3
 80050e6:	bf1c      	itt	ne
 80050e8:	1a1b      	subne	r3, r3, r0
 80050ea:	50a3      	strne	r3, [r4, r2]
 80050ec:	e7af      	b.n	800504e <_malloc_r+0x22>
 80050ee:	6862      	ldr	r2, [r4, #4]
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	bf0c      	ite	eq
 80050f4:	f8c8 2000 	streq.w	r2, [r8]
 80050f8:	605a      	strne	r2, [r3, #4]
 80050fa:	e7eb      	b.n	80050d4 <_malloc_r+0xa8>
 80050fc:	4623      	mov	r3, r4
 80050fe:	6864      	ldr	r4, [r4, #4]
 8005100:	e7ae      	b.n	8005060 <_malloc_r+0x34>
 8005102:	463c      	mov	r4, r7
 8005104:	687f      	ldr	r7, [r7, #4]
 8005106:	e7b6      	b.n	8005076 <_malloc_r+0x4a>
 8005108:	461a      	mov	r2, r3
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	42a3      	cmp	r3, r4
 800510e:	d1fb      	bne.n	8005108 <_malloc_r+0xdc>
 8005110:	2300      	movs	r3, #0
 8005112:	6053      	str	r3, [r2, #4]
 8005114:	e7de      	b.n	80050d4 <_malloc_r+0xa8>
 8005116:	230c      	movs	r3, #12
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	4630      	mov	r0, r6
 800511c:	f000 f81e 	bl	800515c <__malloc_unlock>
 8005120:	e794      	b.n	800504c <_malloc_r+0x20>
 8005122:	6005      	str	r5, [r0, #0]
 8005124:	e7d6      	b.n	80050d4 <_malloc_r+0xa8>
 8005126:	bf00      	nop
 8005128:	20000528 	.word	0x20000528

0800512c <__ascii_mbtowc>:
 800512c:	b082      	sub	sp, #8
 800512e:	b901      	cbnz	r1, 8005132 <__ascii_mbtowc+0x6>
 8005130:	a901      	add	r1, sp, #4
 8005132:	b142      	cbz	r2, 8005146 <__ascii_mbtowc+0x1a>
 8005134:	b14b      	cbz	r3, 800514a <__ascii_mbtowc+0x1e>
 8005136:	7813      	ldrb	r3, [r2, #0]
 8005138:	600b      	str	r3, [r1, #0]
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	1e10      	subs	r0, r2, #0
 800513e:	bf18      	it	ne
 8005140:	2001      	movne	r0, #1
 8005142:	b002      	add	sp, #8
 8005144:	4770      	bx	lr
 8005146:	4610      	mov	r0, r2
 8005148:	e7fb      	b.n	8005142 <__ascii_mbtowc+0x16>
 800514a:	f06f 0001 	mvn.w	r0, #1
 800514e:	e7f8      	b.n	8005142 <__ascii_mbtowc+0x16>

08005150 <__malloc_lock>:
 8005150:	4801      	ldr	r0, [pc, #4]	@ (8005158 <__malloc_lock+0x8>)
 8005152:	f7ff bbaa 	b.w	80048aa <__retarget_lock_acquire_recursive>
 8005156:	bf00      	nop
 8005158:	20000520 	.word	0x20000520

0800515c <__malloc_unlock>:
 800515c:	4801      	ldr	r0, [pc, #4]	@ (8005164 <__malloc_unlock+0x8>)
 800515e:	f7ff bba5 	b.w	80048ac <__retarget_lock_release_recursive>
 8005162:	bf00      	nop
 8005164:	20000520 	.word	0x20000520

08005168 <_Balloc>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	69c6      	ldr	r6, [r0, #28]
 800516c:	4604      	mov	r4, r0
 800516e:	460d      	mov	r5, r1
 8005170:	b976      	cbnz	r6, 8005190 <_Balloc+0x28>
 8005172:	2010      	movs	r0, #16
 8005174:	f000 fda6 	bl	8005cc4 <malloc>
 8005178:	4602      	mov	r2, r0
 800517a:	61e0      	str	r0, [r4, #28]
 800517c:	b920      	cbnz	r0, 8005188 <_Balloc+0x20>
 800517e:	4b18      	ldr	r3, [pc, #96]	@ (80051e0 <_Balloc+0x78>)
 8005180:	4818      	ldr	r0, [pc, #96]	@ (80051e4 <_Balloc+0x7c>)
 8005182:	216b      	movs	r1, #107	@ 0x6b
 8005184:	f000 fd6c 	bl	8005c60 <__assert_func>
 8005188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800518c:	6006      	str	r6, [r0, #0]
 800518e:	60c6      	str	r6, [r0, #12]
 8005190:	69e6      	ldr	r6, [r4, #28]
 8005192:	68f3      	ldr	r3, [r6, #12]
 8005194:	b183      	cbz	r3, 80051b8 <_Balloc+0x50>
 8005196:	69e3      	ldr	r3, [r4, #28]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800519e:	b9b8      	cbnz	r0, 80051d0 <_Balloc+0x68>
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f605 	lsl.w	r6, r1, r5
 80051a6:	1d72      	adds	r2, r6, #5
 80051a8:	0092      	lsls	r2, r2, #2
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 fd76 	bl	8005c9c <_calloc_r>
 80051b0:	b160      	cbz	r0, 80051cc <_Balloc+0x64>
 80051b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051b6:	e00e      	b.n	80051d6 <_Balloc+0x6e>
 80051b8:	2221      	movs	r2, #33	@ 0x21
 80051ba:	2104      	movs	r1, #4
 80051bc:	4620      	mov	r0, r4
 80051be:	f000 fd6d 	bl	8005c9c <_calloc_r>
 80051c2:	69e3      	ldr	r3, [r4, #28]
 80051c4:	60f0      	str	r0, [r6, #12]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e4      	bne.n	8005196 <_Balloc+0x2e>
 80051cc:	2000      	movs	r0, #0
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	6802      	ldr	r2, [r0, #0]
 80051d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80051d6:	2300      	movs	r3, #0
 80051d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051dc:	e7f7      	b.n	80051ce <_Balloc+0x66>
 80051de:	bf00      	nop
 80051e0:	08006669 	.word	0x08006669
 80051e4:	08006680 	.word	0x08006680

080051e8 <_Bfree>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	69c6      	ldr	r6, [r0, #28]
 80051ec:	4605      	mov	r5, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	b976      	cbnz	r6, 8005210 <_Bfree+0x28>
 80051f2:	2010      	movs	r0, #16
 80051f4:	f000 fd66 	bl	8005cc4 <malloc>
 80051f8:	4602      	mov	r2, r0
 80051fa:	61e8      	str	r0, [r5, #28]
 80051fc:	b920      	cbnz	r0, 8005208 <_Bfree+0x20>
 80051fe:	4b09      	ldr	r3, [pc, #36]	@ (8005224 <_Bfree+0x3c>)
 8005200:	4809      	ldr	r0, [pc, #36]	@ (8005228 <_Bfree+0x40>)
 8005202:	218f      	movs	r1, #143	@ 0x8f
 8005204:	f000 fd2c 	bl	8005c60 <__assert_func>
 8005208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800520c:	6006      	str	r6, [r0, #0]
 800520e:	60c6      	str	r6, [r0, #12]
 8005210:	b13c      	cbz	r4, 8005222 <_Bfree+0x3a>
 8005212:	69eb      	ldr	r3, [r5, #28]
 8005214:	6862      	ldr	r2, [r4, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800521c:	6021      	str	r1, [r4, #0]
 800521e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	08006669 	.word	0x08006669
 8005228:	08006680 	.word	0x08006680

0800522c <__multadd>:
 800522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005230:	690d      	ldr	r5, [r1, #16]
 8005232:	4607      	mov	r7, r0
 8005234:	460c      	mov	r4, r1
 8005236:	461e      	mov	r6, r3
 8005238:	f101 0c14 	add.w	ip, r1, #20
 800523c:	2000      	movs	r0, #0
 800523e:	f8dc 3000 	ldr.w	r3, [ip]
 8005242:	b299      	uxth	r1, r3
 8005244:	fb02 6101 	mla	r1, r2, r1, r6
 8005248:	0c1e      	lsrs	r6, r3, #16
 800524a:	0c0b      	lsrs	r3, r1, #16
 800524c:	fb02 3306 	mla	r3, r2, r6, r3
 8005250:	b289      	uxth	r1, r1
 8005252:	3001      	adds	r0, #1
 8005254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005258:	4285      	cmp	r5, r0
 800525a:	f84c 1b04 	str.w	r1, [ip], #4
 800525e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005262:	dcec      	bgt.n	800523e <__multadd+0x12>
 8005264:	b30e      	cbz	r6, 80052aa <__multadd+0x7e>
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	42ab      	cmp	r3, r5
 800526a:	dc19      	bgt.n	80052a0 <__multadd+0x74>
 800526c:	6861      	ldr	r1, [r4, #4]
 800526e:	4638      	mov	r0, r7
 8005270:	3101      	adds	r1, #1
 8005272:	f7ff ff79 	bl	8005168 <_Balloc>
 8005276:	4680      	mov	r8, r0
 8005278:	b928      	cbnz	r0, 8005286 <__multadd+0x5a>
 800527a:	4602      	mov	r2, r0
 800527c:	4b0c      	ldr	r3, [pc, #48]	@ (80052b0 <__multadd+0x84>)
 800527e:	480d      	ldr	r0, [pc, #52]	@ (80052b4 <__multadd+0x88>)
 8005280:	21ba      	movs	r1, #186	@ 0xba
 8005282:	f000 fced 	bl	8005c60 <__assert_func>
 8005286:	6922      	ldr	r2, [r4, #16]
 8005288:	3202      	adds	r2, #2
 800528a:	f104 010c 	add.w	r1, r4, #12
 800528e:	0092      	lsls	r2, r2, #2
 8005290:	300c      	adds	r0, #12
 8005292:	f7ff fb0c 	bl	80048ae <memcpy>
 8005296:	4621      	mov	r1, r4
 8005298:	4638      	mov	r0, r7
 800529a:	f7ff ffa5 	bl	80051e8 <_Bfree>
 800529e:	4644      	mov	r4, r8
 80052a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052a4:	3501      	adds	r5, #1
 80052a6:	615e      	str	r6, [r3, #20]
 80052a8:	6125      	str	r5, [r4, #16]
 80052aa:	4620      	mov	r0, r4
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	080065f8 	.word	0x080065f8
 80052b4:	08006680 	.word	0x08006680

080052b8 <__s2b>:
 80052b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052bc:	460c      	mov	r4, r1
 80052be:	4615      	mov	r5, r2
 80052c0:	461f      	mov	r7, r3
 80052c2:	2209      	movs	r2, #9
 80052c4:	3308      	adds	r3, #8
 80052c6:	4606      	mov	r6, r0
 80052c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80052cc:	2100      	movs	r1, #0
 80052ce:	2201      	movs	r2, #1
 80052d0:	429a      	cmp	r2, r3
 80052d2:	db09      	blt.n	80052e8 <__s2b+0x30>
 80052d4:	4630      	mov	r0, r6
 80052d6:	f7ff ff47 	bl	8005168 <_Balloc>
 80052da:	b940      	cbnz	r0, 80052ee <__s2b+0x36>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b19      	ldr	r3, [pc, #100]	@ (8005344 <__s2b+0x8c>)
 80052e0:	4819      	ldr	r0, [pc, #100]	@ (8005348 <__s2b+0x90>)
 80052e2:	21d3      	movs	r1, #211	@ 0xd3
 80052e4:	f000 fcbc 	bl	8005c60 <__assert_func>
 80052e8:	0052      	lsls	r2, r2, #1
 80052ea:	3101      	adds	r1, #1
 80052ec:	e7f0      	b.n	80052d0 <__s2b+0x18>
 80052ee:	9b08      	ldr	r3, [sp, #32]
 80052f0:	6143      	str	r3, [r0, #20]
 80052f2:	2d09      	cmp	r5, #9
 80052f4:	f04f 0301 	mov.w	r3, #1
 80052f8:	6103      	str	r3, [r0, #16]
 80052fa:	dd16      	ble.n	800532a <__s2b+0x72>
 80052fc:	f104 0909 	add.w	r9, r4, #9
 8005300:	46c8      	mov	r8, r9
 8005302:	442c      	add	r4, r5
 8005304:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005308:	4601      	mov	r1, r0
 800530a:	3b30      	subs	r3, #48	@ 0x30
 800530c:	220a      	movs	r2, #10
 800530e:	4630      	mov	r0, r6
 8005310:	f7ff ff8c 	bl	800522c <__multadd>
 8005314:	45a0      	cmp	r8, r4
 8005316:	d1f5      	bne.n	8005304 <__s2b+0x4c>
 8005318:	f1a5 0408 	sub.w	r4, r5, #8
 800531c:	444c      	add	r4, r9
 800531e:	1b2d      	subs	r5, r5, r4
 8005320:	1963      	adds	r3, r4, r5
 8005322:	42bb      	cmp	r3, r7
 8005324:	db04      	blt.n	8005330 <__s2b+0x78>
 8005326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800532a:	340a      	adds	r4, #10
 800532c:	2509      	movs	r5, #9
 800532e:	e7f6      	b.n	800531e <__s2b+0x66>
 8005330:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005334:	4601      	mov	r1, r0
 8005336:	3b30      	subs	r3, #48	@ 0x30
 8005338:	220a      	movs	r2, #10
 800533a:	4630      	mov	r0, r6
 800533c:	f7ff ff76 	bl	800522c <__multadd>
 8005340:	e7ee      	b.n	8005320 <__s2b+0x68>
 8005342:	bf00      	nop
 8005344:	080065f8 	.word	0x080065f8
 8005348:	08006680 	.word	0x08006680

0800534c <__hi0bits>:
 800534c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005350:	4603      	mov	r3, r0
 8005352:	bf36      	itet	cc
 8005354:	0403      	lslcc	r3, r0, #16
 8005356:	2000      	movcs	r0, #0
 8005358:	2010      	movcc	r0, #16
 800535a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800535e:	bf3c      	itt	cc
 8005360:	021b      	lslcc	r3, r3, #8
 8005362:	3008      	addcc	r0, #8
 8005364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005368:	bf3c      	itt	cc
 800536a:	011b      	lslcc	r3, r3, #4
 800536c:	3004      	addcc	r0, #4
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005372:	bf3c      	itt	cc
 8005374:	009b      	lslcc	r3, r3, #2
 8005376:	3002      	addcc	r0, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	db05      	blt.n	8005388 <__hi0bits+0x3c>
 800537c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005380:	f100 0001 	add.w	r0, r0, #1
 8005384:	bf08      	it	eq
 8005386:	2020      	moveq	r0, #32
 8005388:	4770      	bx	lr

0800538a <__lo0bits>:
 800538a:	6803      	ldr	r3, [r0, #0]
 800538c:	4602      	mov	r2, r0
 800538e:	f013 0007 	ands.w	r0, r3, #7
 8005392:	d00b      	beq.n	80053ac <__lo0bits+0x22>
 8005394:	07d9      	lsls	r1, r3, #31
 8005396:	d421      	bmi.n	80053dc <__lo0bits+0x52>
 8005398:	0798      	lsls	r0, r3, #30
 800539a:	bf49      	itett	mi
 800539c:	085b      	lsrmi	r3, r3, #1
 800539e:	089b      	lsrpl	r3, r3, #2
 80053a0:	2001      	movmi	r0, #1
 80053a2:	6013      	strmi	r3, [r2, #0]
 80053a4:	bf5c      	itt	pl
 80053a6:	6013      	strpl	r3, [r2, #0]
 80053a8:	2002      	movpl	r0, #2
 80053aa:	4770      	bx	lr
 80053ac:	b299      	uxth	r1, r3
 80053ae:	b909      	cbnz	r1, 80053b4 <__lo0bits+0x2a>
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	2010      	movs	r0, #16
 80053b4:	b2d9      	uxtb	r1, r3
 80053b6:	b909      	cbnz	r1, 80053bc <__lo0bits+0x32>
 80053b8:	3008      	adds	r0, #8
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	0719      	lsls	r1, r3, #28
 80053be:	bf04      	itt	eq
 80053c0:	091b      	lsreq	r3, r3, #4
 80053c2:	3004      	addeq	r0, #4
 80053c4:	0799      	lsls	r1, r3, #30
 80053c6:	bf04      	itt	eq
 80053c8:	089b      	lsreq	r3, r3, #2
 80053ca:	3002      	addeq	r0, #2
 80053cc:	07d9      	lsls	r1, r3, #31
 80053ce:	d403      	bmi.n	80053d8 <__lo0bits+0x4e>
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	f100 0001 	add.w	r0, r0, #1
 80053d6:	d003      	beq.n	80053e0 <__lo0bits+0x56>
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4770      	bx	lr
 80053dc:	2000      	movs	r0, #0
 80053de:	4770      	bx	lr
 80053e0:	2020      	movs	r0, #32
 80053e2:	4770      	bx	lr

080053e4 <__i2b>:
 80053e4:	b510      	push	{r4, lr}
 80053e6:	460c      	mov	r4, r1
 80053e8:	2101      	movs	r1, #1
 80053ea:	f7ff febd 	bl	8005168 <_Balloc>
 80053ee:	4602      	mov	r2, r0
 80053f0:	b928      	cbnz	r0, 80053fe <__i2b+0x1a>
 80053f2:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <__i2b+0x24>)
 80053f4:	4805      	ldr	r0, [pc, #20]	@ (800540c <__i2b+0x28>)
 80053f6:	f240 1145 	movw	r1, #325	@ 0x145
 80053fa:	f000 fc31 	bl	8005c60 <__assert_func>
 80053fe:	2301      	movs	r3, #1
 8005400:	6144      	str	r4, [r0, #20]
 8005402:	6103      	str	r3, [r0, #16]
 8005404:	bd10      	pop	{r4, pc}
 8005406:	bf00      	nop
 8005408:	080065f8 	.word	0x080065f8
 800540c:	08006680 	.word	0x08006680

08005410 <__multiply>:
 8005410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	4614      	mov	r4, r2
 8005416:	690a      	ldr	r2, [r1, #16]
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	bfa8      	it	ge
 800541e:	4623      	movge	r3, r4
 8005420:	460f      	mov	r7, r1
 8005422:	bfa4      	itt	ge
 8005424:	460c      	movge	r4, r1
 8005426:	461f      	movge	r7, r3
 8005428:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800542c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005430:	68a3      	ldr	r3, [r4, #8]
 8005432:	6861      	ldr	r1, [r4, #4]
 8005434:	eb0a 0609 	add.w	r6, sl, r9
 8005438:	42b3      	cmp	r3, r6
 800543a:	b085      	sub	sp, #20
 800543c:	bfb8      	it	lt
 800543e:	3101      	addlt	r1, #1
 8005440:	f7ff fe92 	bl	8005168 <_Balloc>
 8005444:	b930      	cbnz	r0, 8005454 <__multiply+0x44>
 8005446:	4602      	mov	r2, r0
 8005448:	4b44      	ldr	r3, [pc, #272]	@ (800555c <__multiply+0x14c>)
 800544a:	4845      	ldr	r0, [pc, #276]	@ (8005560 <__multiply+0x150>)
 800544c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005450:	f000 fc06 	bl	8005c60 <__assert_func>
 8005454:	f100 0514 	add.w	r5, r0, #20
 8005458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800545c:	462b      	mov	r3, r5
 800545e:	2200      	movs	r2, #0
 8005460:	4543      	cmp	r3, r8
 8005462:	d321      	bcc.n	80054a8 <__multiply+0x98>
 8005464:	f107 0114 	add.w	r1, r7, #20
 8005468:	f104 0214 	add.w	r2, r4, #20
 800546c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005470:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005474:	9302      	str	r3, [sp, #8]
 8005476:	1b13      	subs	r3, r2, r4
 8005478:	3b15      	subs	r3, #21
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	3304      	adds	r3, #4
 8005480:	f104 0715 	add.w	r7, r4, #21
 8005484:	42ba      	cmp	r2, r7
 8005486:	bf38      	it	cc
 8005488:	2304      	movcc	r3, #4
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	9103      	str	r1, [sp, #12]
 8005490:	428b      	cmp	r3, r1
 8005492:	d80c      	bhi.n	80054ae <__multiply+0x9e>
 8005494:	2e00      	cmp	r6, #0
 8005496:	dd03      	ble.n	80054a0 <__multiply+0x90>
 8005498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800549c:	2b00      	cmp	r3, #0
 800549e:	d05b      	beq.n	8005558 <__multiply+0x148>
 80054a0:	6106      	str	r6, [r0, #16]
 80054a2:	b005      	add	sp, #20
 80054a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a8:	f843 2b04 	str.w	r2, [r3], #4
 80054ac:	e7d8      	b.n	8005460 <__multiply+0x50>
 80054ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80054b2:	f1ba 0f00 	cmp.w	sl, #0
 80054b6:	d024      	beq.n	8005502 <__multiply+0xf2>
 80054b8:	f104 0e14 	add.w	lr, r4, #20
 80054bc:	46a9      	mov	r9, r5
 80054be:	f04f 0c00 	mov.w	ip, #0
 80054c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80054c6:	f8d9 3000 	ldr.w	r3, [r9]
 80054ca:	fa1f fb87 	uxth.w	fp, r7
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80054d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80054d8:	f8d9 7000 	ldr.w	r7, [r9]
 80054dc:	4463      	add	r3, ip
 80054de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80054e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80054e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80054f0:	4572      	cmp	r2, lr
 80054f2:	f849 3b04 	str.w	r3, [r9], #4
 80054f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80054fa:	d8e2      	bhi.n	80054c2 <__multiply+0xb2>
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	f845 c003 	str.w	ip, [r5, r3]
 8005502:	9b03      	ldr	r3, [sp, #12]
 8005504:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005508:	3104      	adds	r1, #4
 800550a:	f1b9 0f00 	cmp.w	r9, #0
 800550e:	d021      	beq.n	8005554 <__multiply+0x144>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	f104 0c14 	add.w	ip, r4, #20
 8005516:	46ae      	mov	lr, r5
 8005518:	f04f 0a00 	mov.w	sl, #0
 800551c:	f8bc b000 	ldrh.w	fp, [ip]
 8005520:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005524:	fb09 770b 	mla	r7, r9, fp, r7
 8005528:	4457      	add	r7, sl
 800552a:	b29b      	uxth	r3, r3
 800552c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005530:	f84e 3b04 	str.w	r3, [lr], #4
 8005534:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800553c:	f8be 3000 	ldrh.w	r3, [lr]
 8005540:	fb09 330a 	mla	r3, r9, sl, r3
 8005544:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005548:	4562      	cmp	r2, ip
 800554a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800554e:	d8e5      	bhi.n	800551c <__multiply+0x10c>
 8005550:	9f01      	ldr	r7, [sp, #4]
 8005552:	51eb      	str	r3, [r5, r7]
 8005554:	3504      	adds	r5, #4
 8005556:	e799      	b.n	800548c <__multiply+0x7c>
 8005558:	3e01      	subs	r6, #1
 800555a:	e79b      	b.n	8005494 <__multiply+0x84>
 800555c:	080065f8 	.word	0x080065f8
 8005560:	08006680 	.word	0x08006680

08005564 <__pow5mult>:
 8005564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005568:	4615      	mov	r5, r2
 800556a:	f012 0203 	ands.w	r2, r2, #3
 800556e:	4607      	mov	r7, r0
 8005570:	460e      	mov	r6, r1
 8005572:	d007      	beq.n	8005584 <__pow5mult+0x20>
 8005574:	4c25      	ldr	r4, [pc, #148]	@ (800560c <__pow5mult+0xa8>)
 8005576:	3a01      	subs	r2, #1
 8005578:	2300      	movs	r3, #0
 800557a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800557e:	f7ff fe55 	bl	800522c <__multadd>
 8005582:	4606      	mov	r6, r0
 8005584:	10ad      	asrs	r5, r5, #2
 8005586:	d03d      	beq.n	8005604 <__pow5mult+0xa0>
 8005588:	69fc      	ldr	r4, [r7, #28]
 800558a:	b97c      	cbnz	r4, 80055ac <__pow5mult+0x48>
 800558c:	2010      	movs	r0, #16
 800558e:	f000 fb99 	bl	8005cc4 <malloc>
 8005592:	4602      	mov	r2, r0
 8005594:	61f8      	str	r0, [r7, #28]
 8005596:	b928      	cbnz	r0, 80055a4 <__pow5mult+0x40>
 8005598:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <__pow5mult+0xac>)
 800559a:	481e      	ldr	r0, [pc, #120]	@ (8005614 <__pow5mult+0xb0>)
 800559c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80055a0:	f000 fb5e 	bl	8005c60 <__assert_func>
 80055a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055a8:	6004      	str	r4, [r0, #0]
 80055aa:	60c4      	str	r4, [r0, #12]
 80055ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80055b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055b4:	b94c      	cbnz	r4, 80055ca <__pow5mult+0x66>
 80055b6:	f240 2171 	movw	r1, #625	@ 0x271
 80055ba:	4638      	mov	r0, r7
 80055bc:	f7ff ff12 	bl	80053e4 <__i2b>
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80055c6:	4604      	mov	r4, r0
 80055c8:	6003      	str	r3, [r0, #0]
 80055ca:	f04f 0900 	mov.w	r9, #0
 80055ce:	07eb      	lsls	r3, r5, #31
 80055d0:	d50a      	bpl.n	80055e8 <__pow5mult+0x84>
 80055d2:	4631      	mov	r1, r6
 80055d4:	4622      	mov	r2, r4
 80055d6:	4638      	mov	r0, r7
 80055d8:	f7ff ff1a 	bl	8005410 <__multiply>
 80055dc:	4631      	mov	r1, r6
 80055de:	4680      	mov	r8, r0
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff fe01 	bl	80051e8 <_Bfree>
 80055e6:	4646      	mov	r6, r8
 80055e8:	106d      	asrs	r5, r5, #1
 80055ea:	d00b      	beq.n	8005604 <__pow5mult+0xa0>
 80055ec:	6820      	ldr	r0, [r4, #0]
 80055ee:	b938      	cbnz	r0, 8005600 <__pow5mult+0x9c>
 80055f0:	4622      	mov	r2, r4
 80055f2:	4621      	mov	r1, r4
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff ff0b 	bl	8005410 <__multiply>
 80055fa:	6020      	str	r0, [r4, #0]
 80055fc:	f8c0 9000 	str.w	r9, [r0]
 8005600:	4604      	mov	r4, r0
 8005602:	e7e4      	b.n	80055ce <__pow5mult+0x6a>
 8005604:	4630      	mov	r0, r6
 8005606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560a:	bf00      	nop
 800560c:	080066dc 	.word	0x080066dc
 8005610:	08006669 	.word	0x08006669
 8005614:	08006680 	.word	0x08006680

08005618 <__lshift>:
 8005618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800561c:	460c      	mov	r4, r1
 800561e:	6849      	ldr	r1, [r1, #4]
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	4607      	mov	r7, r0
 800562a:	4691      	mov	r9, r2
 800562c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005630:	f108 0601 	add.w	r6, r8, #1
 8005634:	42b3      	cmp	r3, r6
 8005636:	db0b      	blt.n	8005650 <__lshift+0x38>
 8005638:	4638      	mov	r0, r7
 800563a:	f7ff fd95 	bl	8005168 <_Balloc>
 800563e:	4605      	mov	r5, r0
 8005640:	b948      	cbnz	r0, 8005656 <__lshift+0x3e>
 8005642:	4602      	mov	r2, r0
 8005644:	4b28      	ldr	r3, [pc, #160]	@ (80056e8 <__lshift+0xd0>)
 8005646:	4829      	ldr	r0, [pc, #164]	@ (80056ec <__lshift+0xd4>)
 8005648:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800564c:	f000 fb08 	bl	8005c60 <__assert_func>
 8005650:	3101      	adds	r1, #1
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	e7ee      	b.n	8005634 <__lshift+0x1c>
 8005656:	2300      	movs	r3, #0
 8005658:	f100 0114 	add.w	r1, r0, #20
 800565c:	f100 0210 	add.w	r2, r0, #16
 8005660:	4618      	mov	r0, r3
 8005662:	4553      	cmp	r3, sl
 8005664:	db33      	blt.n	80056ce <__lshift+0xb6>
 8005666:	6920      	ldr	r0, [r4, #16]
 8005668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800566c:	f104 0314 	add.w	r3, r4, #20
 8005670:	f019 091f 	ands.w	r9, r9, #31
 8005674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005678:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800567c:	d02b      	beq.n	80056d6 <__lshift+0xbe>
 800567e:	f1c9 0e20 	rsb	lr, r9, #32
 8005682:	468a      	mov	sl, r1
 8005684:	2200      	movs	r2, #0
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	fa00 f009 	lsl.w	r0, r0, r9
 800568c:	4310      	orrs	r0, r2
 800568e:	f84a 0b04 	str.w	r0, [sl], #4
 8005692:	f853 2b04 	ldr.w	r2, [r3], #4
 8005696:	459c      	cmp	ip, r3
 8005698:	fa22 f20e 	lsr.w	r2, r2, lr
 800569c:	d8f3      	bhi.n	8005686 <__lshift+0x6e>
 800569e:	ebac 0304 	sub.w	r3, ip, r4
 80056a2:	3b15      	subs	r3, #21
 80056a4:	f023 0303 	bic.w	r3, r3, #3
 80056a8:	3304      	adds	r3, #4
 80056aa:	f104 0015 	add.w	r0, r4, #21
 80056ae:	4584      	cmp	ip, r0
 80056b0:	bf38      	it	cc
 80056b2:	2304      	movcc	r3, #4
 80056b4:	50ca      	str	r2, [r1, r3]
 80056b6:	b10a      	cbz	r2, 80056bc <__lshift+0xa4>
 80056b8:	f108 0602 	add.w	r6, r8, #2
 80056bc:	3e01      	subs	r6, #1
 80056be:	4638      	mov	r0, r7
 80056c0:	612e      	str	r6, [r5, #16]
 80056c2:	4621      	mov	r1, r4
 80056c4:	f7ff fd90 	bl	80051e8 <_Bfree>
 80056c8:	4628      	mov	r0, r5
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80056d2:	3301      	adds	r3, #1
 80056d4:	e7c5      	b.n	8005662 <__lshift+0x4a>
 80056d6:	3904      	subs	r1, #4
 80056d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80056e0:	459c      	cmp	ip, r3
 80056e2:	d8f9      	bhi.n	80056d8 <__lshift+0xc0>
 80056e4:	e7ea      	b.n	80056bc <__lshift+0xa4>
 80056e6:	bf00      	nop
 80056e8:	080065f8 	.word	0x080065f8
 80056ec:	08006680 	.word	0x08006680

080056f0 <__mcmp>:
 80056f0:	690a      	ldr	r2, [r1, #16]
 80056f2:	4603      	mov	r3, r0
 80056f4:	6900      	ldr	r0, [r0, #16]
 80056f6:	1a80      	subs	r0, r0, r2
 80056f8:	b530      	push	{r4, r5, lr}
 80056fa:	d10e      	bne.n	800571a <__mcmp+0x2a>
 80056fc:	3314      	adds	r3, #20
 80056fe:	3114      	adds	r1, #20
 8005700:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005704:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800570c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005710:	4295      	cmp	r5, r2
 8005712:	d003      	beq.n	800571c <__mcmp+0x2c>
 8005714:	d205      	bcs.n	8005722 <__mcmp+0x32>
 8005716:	f04f 30ff 	mov.w	r0, #4294967295
 800571a:	bd30      	pop	{r4, r5, pc}
 800571c:	42a3      	cmp	r3, r4
 800571e:	d3f3      	bcc.n	8005708 <__mcmp+0x18>
 8005720:	e7fb      	b.n	800571a <__mcmp+0x2a>
 8005722:	2001      	movs	r0, #1
 8005724:	e7f9      	b.n	800571a <__mcmp+0x2a>
	...

08005728 <__mdiff>:
 8005728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	4689      	mov	r9, r1
 800572e:	4606      	mov	r6, r0
 8005730:	4611      	mov	r1, r2
 8005732:	4648      	mov	r0, r9
 8005734:	4614      	mov	r4, r2
 8005736:	f7ff ffdb 	bl	80056f0 <__mcmp>
 800573a:	1e05      	subs	r5, r0, #0
 800573c:	d112      	bne.n	8005764 <__mdiff+0x3c>
 800573e:	4629      	mov	r1, r5
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff fd11 	bl	8005168 <_Balloc>
 8005746:	4602      	mov	r2, r0
 8005748:	b928      	cbnz	r0, 8005756 <__mdiff+0x2e>
 800574a:	4b3f      	ldr	r3, [pc, #252]	@ (8005848 <__mdiff+0x120>)
 800574c:	f240 2137 	movw	r1, #567	@ 0x237
 8005750:	483e      	ldr	r0, [pc, #248]	@ (800584c <__mdiff+0x124>)
 8005752:	f000 fa85 	bl	8005c60 <__assert_func>
 8005756:	2301      	movs	r3, #1
 8005758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800575c:	4610      	mov	r0, r2
 800575e:	b003      	add	sp, #12
 8005760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005764:	bfbc      	itt	lt
 8005766:	464b      	movlt	r3, r9
 8005768:	46a1      	movlt	r9, r4
 800576a:	4630      	mov	r0, r6
 800576c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005770:	bfba      	itte	lt
 8005772:	461c      	movlt	r4, r3
 8005774:	2501      	movlt	r5, #1
 8005776:	2500      	movge	r5, #0
 8005778:	f7ff fcf6 	bl	8005168 <_Balloc>
 800577c:	4602      	mov	r2, r0
 800577e:	b918      	cbnz	r0, 8005788 <__mdiff+0x60>
 8005780:	4b31      	ldr	r3, [pc, #196]	@ (8005848 <__mdiff+0x120>)
 8005782:	f240 2145 	movw	r1, #581	@ 0x245
 8005786:	e7e3      	b.n	8005750 <__mdiff+0x28>
 8005788:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800578c:	6926      	ldr	r6, [r4, #16]
 800578e:	60c5      	str	r5, [r0, #12]
 8005790:	f109 0310 	add.w	r3, r9, #16
 8005794:	f109 0514 	add.w	r5, r9, #20
 8005798:	f104 0e14 	add.w	lr, r4, #20
 800579c:	f100 0b14 	add.w	fp, r0, #20
 80057a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80057a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	46d9      	mov	r9, fp
 80057ac:	f04f 0c00 	mov.w	ip, #0
 80057b0:	9b01      	ldr	r3, [sp, #4]
 80057b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80057b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	fa1f f38a 	uxth.w	r3, sl
 80057c0:	4619      	mov	r1, r3
 80057c2:	b283      	uxth	r3, r0
 80057c4:	1acb      	subs	r3, r1, r3
 80057c6:	0c00      	lsrs	r0, r0, #16
 80057c8:	4463      	add	r3, ip
 80057ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80057ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80057d8:	4576      	cmp	r6, lr
 80057da:	f849 3b04 	str.w	r3, [r9], #4
 80057de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057e2:	d8e5      	bhi.n	80057b0 <__mdiff+0x88>
 80057e4:	1b33      	subs	r3, r6, r4
 80057e6:	3b15      	subs	r3, #21
 80057e8:	f023 0303 	bic.w	r3, r3, #3
 80057ec:	3415      	adds	r4, #21
 80057ee:	3304      	adds	r3, #4
 80057f0:	42a6      	cmp	r6, r4
 80057f2:	bf38      	it	cc
 80057f4:	2304      	movcc	r3, #4
 80057f6:	441d      	add	r5, r3
 80057f8:	445b      	add	r3, fp
 80057fa:	461e      	mov	r6, r3
 80057fc:	462c      	mov	r4, r5
 80057fe:	4544      	cmp	r4, r8
 8005800:	d30e      	bcc.n	8005820 <__mdiff+0xf8>
 8005802:	f108 0103 	add.w	r1, r8, #3
 8005806:	1b49      	subs	r1, r1, r5
 8005808:	f021 0103 	bic.w	r1, r1, #3
 800580c:	3d03      	subs	r5, #3
 800580e:	45a8      	cmp	r8, r5
 8005810:	bf38      	it	cc
 8005812:	2100      	movcc	r1, #0
 8005814:	440b      	add	r3, r1
 8005816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800581a:	b191      	cbz	r1, 8005842 <__mdiff+0x11a>
 800581c:	6117      	str	r7, [r2, #16]
 800581e:	e79d      	b.n	800575c <__mdiff+0x34>
 8005820:	f854 1b04 	ldr.w	r1, [r4], #4
 8005824:	46e6      	mov	lr, ip
 8005826:	0c08      	lsrs	r0, r1, #16
 8005828:	fa1c fc81 	uxtah	ip, ip, r1
 800582c:	4471      	add	r1, lr
 800582e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005832:	b289      	uxth	r1, r1
 8005834:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005838:	f846 1b04 	str.w	r1, [r6], #4
 800583c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005840:	e7dd      	b.n	80057fe <__mdiff+0xd6>
 8005842:	3f01      	subs	r7, #1
 8005844:	e7e7      	b.n	8005816 <__mdiff+0xee>
 8005846:	bf00      	nop
 8005848:	080065f8 	.word	0x080065f8
 800584c:	08006680 	.word	0x08006680

08005850 <__ulp>:
 8005850:	b082      	sub	sp, #8
 8005852:	ed8d 0b00 	vstr	d0, [sp]
 8005856:	9a01      	ldr	r2, [sp, #4]
 8005858:	4b0f      	ldr	r3, [pc, #60]	@ (8005898 <__ulp+0x48>)
 800585a:	4013      	ands	r3, r2
 800585c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005860:	2b00      	cmp	r3, #0
 8005862:	dc08      	bgt.n	8005876 <__ulp+0x26>
 8005864:	425b      	negs	r3, r3
 8005866:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800586a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800586e:	da04      	bge.n	800587a <__ulp+0x2a>
 8005870:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005874:	4113      	asrs	r3, r2
 8005876:	2200      	movs	r2, #0
 8005878:	e008      	b.n	800588c <__ulp+0x3c>
 800587a:	f1a2 0314 	sub.w	r3, r2, #20
 800587e:	2b1e      	cmp	r3, #30
 8005880:	bfda      	itte	le
 8005882:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005886:	40da      	lsrle	r2, r3
 8005888:	2201      	movgt	r2, #1
 800588a:	2300      	movs	r3, #0
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	ec41 0b10 	vmov	d0, r0, r1
 8005894:	b002      	add	sp, #8
 8005896:	4770      	bx	lr
 8005898:	7ff00000 	.word	0x7ff00000

0800589c <__b2d>:
 800589c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a0:	6906      	ldr	r6, [r0, #16]
 80058a2:	f100 0814 	add.w	r8, r0, #20
 80058a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80058aa:	1f37      	subs	r7, r6, #4
 80058ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7ff fd4b 	bl	800534c <__hi0bits>
 80058b6:	f1c0 0320 	rsb	r3, r0, #32
 80058ba:	280a      	cmp	r0, #10
 80058bc:	600b      	str	r3, [r1, #0]
 80058be:	491b      	ldr	r1, [pc, #108]	@ (800592c <__b2d+0x90>)
 80058c0:	dc15      	bgt.n	80058ee <__b2d+0x52>
 80058c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80058c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80058ca:	45b8      	cmp	r8, r7
 80058cc:	ea43 0501 	orr.w	r5, r3, r1
 80058d0:	bf34      	ite	cc
 80058d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80058d6:	2300      	movcs	r3, #0
 80058d8:	3015      	adds	r0, #21
 80058da:	fa02 f000 	lsl.w	r0, r2, r0
 80058de:	fa23 f30c 	lsr.w	r3, r3, ip
 80058e2:	4303      	orrs	r3, r0
 80058e4:	461c      	mov	r4, r3
 80058e6:	ec45 4b10 	vmov	d0, r4, r5
 80058ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ee:	45b8      	cmp	r8, r7
 80058f0:	bf3a      	itte	cc
 80058f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80058f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80058fa:	2300      	movcs	r3, #0
 80058fc:	380b      	subs	r0, #11
 80058fe:	d012      	beq.n	8005926 <__b2d+0x8a>
 8005900:	f1c0 0120 	rsb	r1, r0, #32
 8005904:	fa23 f401 	lsr.w	r4, r3, r1
 8005908:	4082      	lsls	r2, r0
 800590a:	4322      	orrs	r2, r4
 800590c:	4547      	cmp	r7, r8
 800590e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005912:	bf8c      	ite	hi
 8005914:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005918:	2200      	movls	r2, #0
 800591a:	4083      	lsls	r3, r0
 800591c:	40ca      	lsrs	r2, r1
 800591e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005922:	4313      	orrs	r3, r2
 8005924:	e7de      	b.n	80058e4 <__b2d+0x48>
 8005926:	ea42 0501 	orr.w	r5, r2, r1
 800592a:	e7db      	b.n	80058e4 <__b2d+0x48>
 800592c:	3ff00000 	.word	0x3ff00000

08005930 <__d2b>:
 8005930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005934:	460f      	mov	r7, r1
 8005936:	2101      	movs	r1, #1
 8005938:	ec59 8b10 	vmov	r8, r9, d0
 800593c:	4616      	mov	r6, r2
 800593e:	f7ff fc13 	bl	8005168 <_Balloc>
 8005942:	4604      	mov	r4, r0
 8005944:	b930      	cbnz	r0, 8005954 <__d2b+0x24>
 8005946:	4602      	mov	r2, r0
 8005948:	4b23      	ldr	r3, [pc, #140]	@ (80059d8 <__d2b+0xa8>)
 800594a:	4824      	ldr	r0, [pc, #144]	@ (80059dc <__d2b+0xac>)
 800594c:	f240 310f 	movw	r1, #783	@ 0x30f
 8005950:	f000 f986 	bl	8005c60 <__assert_func>
 8005954:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800595c:	b10d      	cbz	r5, 8005962 <__d2b+0x32>
 800595e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	f1b8 0300 	subs.w	r3, r8, #0
 8005968:	d023      	beq.n	80059b2 <__d2b+0x82>
 800596a:	4668      	mov	r0, sp
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	f7ff fd0c 	bl	800538a <__lo0bits>
 8005972:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005976:	b1d0      	cbz	r0, 80059ae <__d2b+0x7e>
 8005978:	f1c0 0320 	rsb	r3, r0, #32
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	430b      	orrs	r3, r1
 8005982:	40c2      	lsrs	r2, r0
 8005984:	6163      	str	r3, [r4, #20]
 8005986:	9201      	str	r2, [sp, #4]
 8005988:	9b01      	ldr	r3, [sp, #4]
 800598a:	61a3      	str	r3, [r4, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf0c      	ite	eq
 8005990:	2201      	moveq	r2, #1
 8005992:	2202      	movne	r2, #2
 8005994:	6122      	str	r2, [r4, #16]
 8005996:	b1a5      	cbz	r5, 80059c2 <__d2b+0x92>
 8005998:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800599c:	4405      	add	r5, r0
 800599e:	603d      	str	r5, [r7, #0]
 80059a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80059a4:	6030      	str	r0, [r6, #0]
 80059a6:	4620      	mov	r0, r4
 80059a8:	b003      	add	sp, #12
 80059aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059ae:	6161      	str	r1, [r4, #20]
 80059b0:	e7ea      	b.n	8005988 <__d2b+0x58>
 80059b2:	a801      	add	r0, sp, #4
 80059b4:	f7ff fce9 	bl	800538a <__lo0bits>
 80059b8:	9b01      	ldr	r3, [sp, #4]
 80059ba:	6163      	str	r3, [r4, #20]
 80059bc:	3020      	adds	r0, #32
 80059be:	2201      	movs	r2, #1
 80059c0:	e7e8      	b.n	8005994 <__d2b+0x64>
 80059c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80059c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80059ca:	6038      	str	r0, [r7, #0]
 80059cc:	6918      	ldr	r0, [r3, #16]
 80059ce:	f7ff fcbd 	bl	800534c <__hi0bits>
 80059d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80059d6:	e7e5      	b.n	80059a4 <__d2b+0x74>
 80059d8:	080065f8 	.word	0x080065f8
 80059dc:	08006680 	.word	0x08006680

080059e0 <__ratio>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	b085      	sub	sp, #20
 80059e6:	e9cd 1000 	strd	r1, r0, [sp]
 80059ea:	a902      	add	r1, sp, #8
 80059ec:	f7ff ff56 	bl	800589c <__b2d>
 80059f0:	9800      	ldr	r0, [sp, #0]
 80059f2:	a903      	add	r1, sp, #12
 80059f4:	ec55 4b10 	vmov	r4, r5, d0
 80059f8:	f7ff ff50 	bl	800589c <__b2d>
 80059fc:	9b01      	ldr	r3, [sp, #4]
 80059fe:	6919      	ldr	r1, [r3, #16]
 8005a00:	9b00      	ldr	r3, [sp, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	1ac9      	subs	r1, r1, r3
 8005a06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	ec5b ab10 	vmov	sl, fp, d0
 8005a10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfce      	itee	gt
 8005a18:	462a      	movgt	r2, r5
 8005a1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005a1e:	465a      	movle	r2, fp
 8005a20:	462f      	mov	r7, r5
 8005a22:	46d9      	mov	r9, fp
 8005a24:	bfcc      	ite	gt
 8005a26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005a2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005a2e:	464b      	mov	r3, r9
 8005a30:	4652      	mov	r2, sl
 8005a32:	4620      	mov	r0, r4
 8005a34:	4639      	mov	r1, r7
 8005a36:	f7fa ff09 	bl	800084c <__aeabi_ddiv>
 8005a3a:	ec41 0b10 	vmov	d0, r0, r1
 8005a3e:	b005      	add	sp, #20
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a44 <__copybits>:
 8005a44:	3901      	subs	r1, #1
 8005a46:	b570      	push	{r4, r5, r6, lr}
 8005a48:	1149      	asrs	r1, r1, #5
 8005a4a:	6914      	ldr	r4, [r2, #16]
 8005a4c:	3101      	adds	r1, #1
 8005a4e:	f102 0314 	add.w	r3, r2, #20
 8005a52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005a5a:	1f05      	subs	r5, r0, #4
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d30c      	bcc.n	8005a7a <__copybits+0x36>
 8005a60:	1aa3      	subs	r3, r4, r2
 8005a62:	3b11      	subs	r3, #17
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	3211      	adds	r2, #17
 8005a6a:	42a2      	cmp	r2, r4
 8005a6c:	bf88      	it	hi
 8005a6e:	2300      	movhi	r3, #0
 8005a70:	4418      	add	r0, r3
 8005a72:	2300      	movs	r3, #0
 8005a74:	4288      	cmp	r0, r1
 8005a76:	d305      	bcc.n	8005a84 <__copybits+0x40>
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8005a7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8005a82:	e7eb      	b.n	8005a5c <__copybits+0x18>
 8005a84:	f840 3b04 	str.w	r3, [r0], #4
 8005a88:	e7f4      	b.n	8005a74 <__copybits+0x30>

08005a8a <__any_on>:
 8005a8a:	f100 0214 	add.w	r2, r0, #20
 8005a8e:	6900      	ldr	r0, [r0, #16]
 8005a90:	114b      	asrs	r3, r1, #5
 8005a92:	4298      	cmp	r0, r3
 8005a94:	b510      	push	{r4, lr}
 8005a96:	db11      	blt.n	8005abc <__any_on+0x32>
 8005a98:	dd0a      	ble.n	8005ab0 <__any_on+0x26>
 8005a9a:	f011 011f 	ands.w	r1, r1, #31
 8005a9e:	d007      	beq.n	8005ab0 <__any_on+0x26>
 8005aa0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005aa4:	fa24 f001 	lsr.w	r0, r4, r1
 8005aa8:	fa00 f101 	lsl.w	r1, r0, r1
 8005aac:	428c      	cmp	r4, r1
 8005aae:	d10b      	bne.n	8005ac8 <__any_on+0x3e>
 8005ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d803      	bhi.n	8005ac0 <__any_on+0x36>
 8005ab8:	2000      	movs	r0, #0
 8005aba:	bd10      	pop	{r4, pc}
 8005abc:	4603      	mov	r3, r0
 8005abe:	e7f7      	b.n	8005ab0 <__any_on+0x26>
 8005ac0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	d0f5      	beq.n	8005ab4 <__any_on+0x2a>
 8005ac8:	2001      	movs	r0, #1
 8005aca:	e7f6      	b.n	8005aba <__any_on+0x30>

08005acc <__ascii_wctomb>:
 8005acc:	4603      	mov	r3, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	b141      	cbz	r1, 8005ae4 <__ascii_wctomb+0x18>
 8005ad2:	2aff      	cmp	r2, #255	@ 0xff
 8005ad4:	d904      	bls.n	8005ae0 <__ascii_wctomb+0x14>
 8005ad6:	228a      	movs	r2, #138	@ 0x8a
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295
 8005ade:	4770      	bx	lr
 8005ae0:	700a      	strb	r2, [r1, #0]
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	4770      	bx	lr
	...

08005ae8 <__sflush_r>:
 8005ae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af0:	0716      	lsls	r6, r2, #28
 8005af2:	4605      	mov	r5, r0
 8005af4:	460c      	mov	r4, r1
 8005af6:	d454      	bmi.n	8005ba2 <__sflush_r+0xba>
 8005af8:	684b      	ldr	r3, [r1, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	dc02      	bgt.n	8005b04 <__sflush_r+0x1c>
 8005afe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	dd48      	ble.n	8005b96 <__sflush_r+0xae>
 8005b04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b06:	2e00      	cmp	r6, #0
 8005b08:	d045      	beq.n	8005b96 <__sflush_r+0xae>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b10:	682f      	ldr	r7, [r5, #0]
 8005b12:	6a21      	ldr	r1, [r4, #32]
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	d030      	beq.n	8005b7a <__sflush_r+0x92>
 8005b18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	0759      	lsls	r1, r3, #29
 8005b1e:	d505      	bpl.n	8005b2c <__sflush_r+0x44>
 8005b20:	6863      	ldr	r3, [r4, #4]
 8005b22:	1ad2      	subs	r2, r2, r3
 8005b24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b26:	b10b      	cbz	r3, 8005b2c <__sflush_r+0x44>
 8005b28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b30:	6a21      	ldr	r1, [r4, #32]
 8005b32:	4628      	mov	r0, r5
 8005b34:	47b0      	blx	r6
 8005b36:	1c43      	adds	r3, r0, #1
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	d106      	bne.n	8005b4a <__sflush_r+0x62>
 8005b3c:	6829      	ldr	r1, [r5, #0]
 8005b3e:	291d      	cmp	r1, #29
 8005b40:	d82b      	bhi.n	8005b9a <__sflush_r+0xb2>
 8005b42:	4a2a      	ldr	r2, [pc, #168]	@ (8005bec <__sflush_r+0x104>)
 8005b44:	410a      	asrs	r2, r1
 8005b46:	07d6      	lsls	r6, r2, #31
 8005b48:	d427      	bmi.n	8005b9a <__sflush_r+0xb2>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	6062      	str	r2, [r4, #4]
 8005b4e:	04d9      	lsls	r1, r3, #19
 8005b50:	6922      	ldr	r2, [r4, #16]
 8005b52:	6022      	str	r2, [r4, #0]
 8005b54:	d504      	bpl.n	8005b60 <__sflush_r+0x78>
 8005b56:	1c42      	adds	r2, r0, #1
 8005b58:	d101      	bne.n	8005b5e <__sflush_r+0x76>
 8005b5a:	682b      	ldr	r3, [r5, #0]
 8005b5c:	b903      	cbnz	r3, 8005b60 <__sflush_r+0x78>
 8005b5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b62:	602f      	str	r7, [r5, #0]
 8005b64:	b1b9      	cbz	r1, 8005b96 <__sflush_r+0xae>
 8005b66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b6a:	4299      	cmp	r1, r3
 8005b6c:	d002      	beq.n	8005b74 <__sflush_r+0x8c>
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f7fe feb6 	bl	80048e0 <_free_r>
 8005b74:	2300      	movs	r3, #0
 8005b76:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b78:	e00d      	b.n	8005b96 <__sflush_r+0xae>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b0      	blx	r6
 8005b80:	4602      	mov	r2, r0
 8005b82:	1c50      	adds	r0, r2, #1
 8005b84:	d1c9      	bne.n	8005b1a <__sflush_r+0x32>
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0c6      	beq.n	8005b1a <__sflush_r+0x32>
 8005b8c:	2b1d      	cmp	r3, #29
 8005b8e:	d001      	beq.n	8005b94 <__sflush_r+0xac>
 8005b90:	2b16      	cmp	r3, #22
 8005b92:	d11e      	bne.n	8005bd2 <__sflush_r+0xea>
 8005b94:	602f      	str	r7, [r5, #0]
 8005b96:	2000      	movs	r0, #0
 8005b98:	e022      	b.n	8005be0 <__sflush_r+0xf8>
 8005b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	e01b      	b.n	8005bda <__sflush_r+0xf2>
 8005ba2:	690f      	ldr	r7, [r1, #16]
 8005ba4:	2f00      	cmp	r7, #0
 8005ba6:	d0f6      	beq.n	8005b96 <__sflush_r+0xae>
 8005ba8:	0793      	lsls	r3, r2, #30
 8005baa:	680e      	ldr	r6, [r1, #0]
 8005bac:	bf08      	it	eq
 8005bae:	694b      	ldreq	r3, [r1, #20]
 8005bb0:	600f      	str	r7, [r1, #0]
 8005bb2:	bf18      	it	ne
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	eba6 0807 	sub.w	r8, r6, r7
 8005bba:	608b      	str	r3, [r1, #8]
 8005bbc:	f1b8 0f00 	cmp.w	r8, #0
 8005bc0:	dde9      	ble.n	8005b96 <__sflush_r+0xae>
 8005bc2:	6a21      	ldr	r1, [r4, #32]
 8005bc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005bc6:	4643      	mov	r3, r8
 8005bc8:	463a      	mov	r2, r7
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b0      	blx	r6
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	dc08      	bgt.n	8005be4 <__sflush_r+0xfc>
 8005bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be4:	4407      	add	r7, r0
 8005be6:	eba8 0800 	sub.w	r8, r8, r0
 8005bea:	e7e7      	b.n	8005bbc <__sflush_r+0xd4>
 8005bec:	dfbffffe 	.word	0xdfbffffe

08005bf0 <_fflush_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	690b      	ldr	r3, [r1, #16]
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	b913      	cbnz	r3, 8005c00 <_fflush_r+0x10>
 8005bfa:	2500      	movs	r5, #0
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}
 8005c00:	b118      	cbz	r0, 8005c0a <_fflush_r+0x1a>
 8005c02:	6a03      	ldr	r3, [r0, #32]
 8005c04:	b90b      	cbnz	r3, 8005c0a <_fflush_r+0x1a>
 8005c06:	f7fe fd4b 	bl	80046a0 <__sinit>
 8005c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f3      	beq.n	8005bfa <_fflush_r+0xa>
 8005c12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c14:	07d0      	lsls	r0, r2, #31
 8005c16:	d404      	bmi.n	8005c22 <_fflush_r+0x32>
 8005c18:	0599      	lsls	r1, r3, #22
 8005c1a:	d402      	bmi.n	8005c22 <_fflush_r+0x32>
 8005c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c1e:	f7fe fe44 	bl	80048aa <__retarget_lock_acquire_recursive>
 8005c22:	4628      	mov	r0, r5
 8005c24:	4621      	mov	r1, r4
 8005c26:	f7ff ff5f 	bl	8005ae8 <__sflush_r>
 8005c2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c2c:	07da      	lsls	r2, r3, #31
 8005c2e:	4605      	mov	r5, r0
 8005c30:	d4e4      	bmi.n	8005bfc <_fflush_r+0xc>
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	059b      	lsls	r3, r3, #22
 8005c36:	d4e1      	bmi.n	8005bfc <_fflush_r+0xc>
 8005c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c3a:	f7fe fe37 	bl	80048ac <__retarget_lock_release_recursive>
 8005c3e:	e7dd      	b.n	8005bfc <_fflush_r+0xc>

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	@ (8005c5c <_sbrk_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb fdd8 	bl	8001800 <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	2000051c 	.word	0x2000051c

08005c60 <__assert_func>:
 8005c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c62:	4614      	mov	r4, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <__assert_func+0x2c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	68d8      	ldr	r0, [r3, #12]
 8005c6e:	b954      	cbnz	r4, 8005c86 <__assert_func+0x26>
 8005c70:	4b07      	ldr	r3, [pc, #28]	@ (8005c90 <__assert_func+0x30>)
 8005c72:	461c      	mov	r4, r3
 8005c74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c78:	9100      	str	r1, [sp, #0]
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	4905      	ldr	r1, [pc, #20]	@ (8005c94 <__assert_func+0x34>)
 8005c7e:	f000 f829 	bl	8005cd4 <fiprintf>
 8005c82:	f000 f839 	bl	8005cf8 <abort>
 8005c86:	4b04      	ldr	r3, [pc, #16]	@ (8005c98 <__assert_func+0x38>)
 8005c88:	e7f4      	b.n	8005c74 <__assert_func+0x14>
 8005c8a:	bf00      	nop
 8005c8c:	20000184 	.word	0x20000184
 8005c90:	08006914 	.word	0x08006914
 8005c94:	080068e6 	.word	0x080068e6
 8005c98:	080068d9 	.word	0x080068d9

08005c9c <_calloc_r>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	fba1 5402 	umull	r5, r4, r1, r2
 8005ca2:	b93c      	cbnz	r4, 8005cb4 <_calloc_r+0x18>
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	f7ff f9c1 	bl	800502c <_malloc_r>
 8005caa:	4606      	mov	r6, r0
 8005cac:	b928      	cbnz	r0, 8005cba <_calloc_r+0x1e>
 8005cae:	2600      	movs	r6, #0
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	220c      	movs	r2, #12
 8005cb6:	6002      	str	r2, [r0, #0]
 8005cb8:	e7f9      	b.n	8005cae <_calloc_r+0x12>
 8005cba:	462a      	mov	r2, r5
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	f7fe fd68 	bl	8004792 <memset>
 8005cc2:	e7f5      	b.n	8005cb0 <_calloc_r+0x14>

08005cc4 <malloc>:
 8005cc4:	4b02      	ldr	r3, [pc, #8]	@ (8005cd0 <malloc+0xc>)
 8005cc6:	4601      	mov	r1, r0
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	f7ff b9af 	b.w	800502c <_malloc_r>
 8005cce:	bf00      	nop
 8005cd0:	20000184 	.word	0x20000184

08005cd4 <fiprintf>:
 8005cd4:	b40e      	push	{r1, r2, r3}
 8005cd6:	b503      	push	{r0, r1, lr}
 8005cd8:	4601      	mov	r1, r0
 8005cda:	ab03      	add	r3, sp, #12
 8005cdc:	4805      	ldr	r0, [pc, #20]	@ (8005cf4 <fiprintf+0x20>)
 8005cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce2:	6800      	ldr	r0, [r0, #0]
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	f000 f837 	bl	8005d58 <_vfiprintf_r>
 8005cea:	b002      	add	sp, #8
 8005cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cf0:	b003      	add	sp, #12
 8005cf2:	4770      	bx	lr
 8005cf4:	20000184 	.word	0x20000184

08005cf8 <abort>:
 8005cf8:	b508      	push	{r3, lr}
 8005cfa:	2006      	movs	r0, #6
 8005cfc:	f000 fb8e 	bl	800641c <raise>
 8005d00:	2001      	movs	r0, #1
 8005d02:	f7fb fd04 	bl	800170e <_exit>

08005d06 <__sfputc_r>:
 8005d06:	6893      	ldr	r3, [r2, #8]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	b410      	push	{r4}
 8005d0e:	6093      	str	r3, [r2, #8]
 8005d10:	da08      	bge.n	8005d24 <__sfputc_r+0x1e>
 8005d12:	6994      	ldr	r4, [r2, #24]
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	db01      	blt.n	8005d1c <__sfputc_r+0x16>
 8005d18:	290a      	cmp	r1, #10
 8005d1a:	d103      	bne.n	8005d24 <__sfputc_r+0x1e>
 8005d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d20:	f000 bac0 	b.w	80062a4 <__swbuf_r>
 8005d24:	6813      	ldr	r3, [r2, #0]
 8005d26:	1c58      	adds	r0, r3, #1
 8005d28:	6010      	str	r0, [r2, #0]
 8005d2a:	7019      	strb	r1, [r3, #0]
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <__sfputs_r>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
 8005d3a:	4614      	mov	r4, r2
 8005d3c:	18d5      	adds	r5, r2, r3
 8005d3e:	42ac      	cmp	r4, r5
 8005d40:	d101      	bne.n	8005d46 <__sfputs_r+0x12>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e007      	b.n	8005d56 <__sfputs_r+0x22>
 8005d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4a:	463a      	mov	r2, r7
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7ff ffda 	bl	8005d06 <__sfputc_r>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d1f3      	bne.n	8005d3e <__sfputs_r+0xa>
 8005d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d58 <_vfiprintf_r>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	b09d      	sub	sp, #116	@ 0x74
 8005d60:	4614      	mov	r4, r2
 8005d62:	4698      	mov	r8, r3
 8005d64:	4606      	mov	r6, r0
 8005d66:	b118      	cbz	r0, 8005d70 <_vfiprintf_r+0x18>
 8005d68:	6a03      	ldr	r3, [r0, #32]
 8005d6a:	b90b      	cbnz	r3, 8005d70 <_vfiprintf_r+0x18>
 8005d6c:	f7fe fc98 	bl	80046a0 <__sinit>
 8005d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d72:	07d9      	lsls	r1, r3, #31
 8005d74:	d405      	bmi.n	8005d82 <_vfiprintf_r+0x2a>
 8005d76:	89ab      	ldrh	r3, [r5, #12]
 8005d78:	059a      	lsls	r2, r3, #22
 8005d7a:	d402      	bmi.n	8005d82 <_vfiprintf_r+0x2a>
 8005d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d7e:	f7fe fd94 	bl	80048aa <__retarget_lock_acquire_recursive>
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	071b      	lsls	r3, r3, #28
 8005d86:	d501      	bpl.n	8005d8c <_vfiprintf_r+0x34>
 8005d88:	692b      	ldr	r3, [r5, #16]
 8005d8a:	b99b      	cbnz	r3, 8005db4 <_vfiprintf_r+0x5c>
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f000 fac6 	bl	8006320 <__swsetup_r>
 8005d94:	b170      	cbz	r0, 8005db4 <_vfiprintf_r+0x5c>
 8005d96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d98:	07dc      	lsls	r4, r3, #31
 8005d9a:	d504      	bpl.n	8005da6 <_vfiprintf_r+0x4e>
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	b01d      	add	sp, #116	@ 0x74
 8005da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	0598      	lsls	r0, r3, #22
 8005daa:	d4f7      	bmi.n	8005d9c <_vfiprintf_r+0x44>
 8005dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dae:	f7fe fd7d 	bl	80048ac <__retarget_lock_release_recursive>
 8005db2:	e7f3      	b.n	8005d9c <_vfiprintf_r+0x44>
 8005db4:	2300      	movs	r3, #0
 8005db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db8:	2320      	movs	r3, #32
 8005dba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dc2:	2330      	movs	r3, #48	@ 0x30
 8005dc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f74 <_vfiprintf_r+0x21c>
 8005dc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dcc:	f04f 0901 	mov.w	r9, #1
 8005dd0:	4623      	mov	r3, r4
 8005dd2:	469a      	mov	sl, r3
 8005dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd8:	b10a      	cbz	r2, 8005dde <_vfiprintf_r+0x86>
 8005dda:	2a25      	cmp	r2, #37	@ 0x25
 8005ddc:	d1f9      	bne.n	8005dd2 <_vfiprintf_r+0x7a>
 8005dde:	ebba 0b04 	subs.w	fp, sl, r4
 8005de2:	d00b      	beq.n	8005dfc <_vfiprintf_r+0xa4>
 8005de4:	465b      	mov	r3, fp
 8005de6:	4622      	mov	r2, r4
 8005de8:	4629      	mov	r1, r5
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7ff ffa2 	bl	8005d34 <__sfputs_r>
 8005df0:	3001      	adds	r0, #1
 8005df2:	f000 80a7 	beq.w	8005f44 <_vfiprintf_r+0x1ec>
 8005df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005df8:	445a      	add	r2, fp
 8005dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 809f 	beq.w	8005f44 <_vfiprintf_r+0x1ec>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e10:	f10a 0a01 	add.w	sl, sl, #1
 8005e14:	9304      	str	r3, [sp, #16]
 8005e16:	9307      	str	r3, [sp, #28]
 8005e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e1e:	4654      	mov	r4, sl
 8005e20:	2205      	movs	r2, #5
 8005e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e26:	4853      	ldr	r0, [pc, #332]	@ (8005f74 <_vfiprintf_r+0x21c>)
 8005e28:	f7fa f9da 	bl	80001e0 <memchr>
 8005e2c:	9a04      	ldr	r2, [sp, #16]
 8005e2e:	b9d8      	cbnz	r0, 8005e68 <_vfiprintf_r+0x110>
 8005e30:	06d1      	lsls	r1, r2, #27
 8005e32:	bf44      	itt	mi
 8005e34:	2320      	movmi	r3, #32
 8005e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e3a:	0713      	lsls	r3, r2, #28
 8005e3c:	bf44      	itt	mi
 8005e3e:	232b      	movmi	r3, #43	@ 0x2b
 8005e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e44:	f89a 3000 	ldrb.w	r3, [sl]
 8005e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e4a:	d015      	beq.n	8005e78 <_vfiprintf_r+0x120>
 8005e4c:	9a07      	ldr	r2, [sp, #28]
 8005e4e:	4654      	mov	r4, sl
 8005e50:	2000      	movs	r0, #0
 8005e52:	f04f 0c0a 	mov.w	ip, #10
 8005e56:	4621      	mov	r1, r4
 8005e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e5c:	3b30      	subs	r3, #48	@ 0x30
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	d94b      	bls.n	8005efa <_vfiprintf_r+0x1a2>
 8005e62:	b1b0      	cbz	r0, 8005e92 <_vfiprintf_r+0x13a>
 8005e64:	9207      	str	r2, [sp, #28]
 8005e66:	e014      	b.n	8005e92 <_vfiprintf_r+0x13a>
 8005e68:	eba0 0308 	sub.w	r3, r0, r8
 8005e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e70:	4313      	orrs	r3, r2
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	46a2      	mov	sl, r4
 8005e76:	e7d2      	b.n	8005e1e <_vfiprintf_r+0xc6>
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	1d19      	adds	r1, r3, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	9103      	str	r1, [sp, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	bfbb      	ittet	lt
 8005e84:	425b      	neglt	r3, r3
 8005e86:	f042 0202 	orrlt.w	r2, r2, #2
 8005e8a:	9307      	strge	r3, [sp, #28]
 8005e8c:	9307      	strlt	r3, [sp, #28]
 8005e8e:	bfb8      	it	lt
 8005e90:	9204      	strlt	r2, [sp, #16]
 8005e92:	7823      	ldrb	r3, [r4, #0]
 8005e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e96:	d10a      	bne.n	8005eae <_vfiprintf_r+0x156>
 8005e98:	7863      	ldrb	r3, [r4, #1]
 8005e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e9c:	d132      	bne.n	8005f04 <_vfiprintf_r+0x1ac>
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	1d1a      	adds	r2, r3, #4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	9203      	str	r2, [sp, #12]
 8005ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eaa:	3402      	adds	r4, #2
 8005eac:	9305      	str	r3, [sp, #20]
 8005eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f84 <_vfiprintf_r+0x22c>
 8005eb2:	7821      	ldrb	r1, [r4, #0]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	f7fa f992 	bl	80001e0 <memchr>
 8005ebc:	b138      	cbz	r0, 8005ece <_vfiprintf_r+0x176>
 8005ebe:	9b04      	ldr	r3, [sp, #16]
 8005ec0:	eba0 000a 	sub.w	r0, r0, sl
 8005ec4:	2240      	movs	r2, #64	@ 0x40
 8005ec6:	4082      	lsls	r2, r0
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	3401      	adds	r4, #1
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed2:	4829      	ldr	r0, [pc, #164]	@ (8005f78 <_vfiprintf_r+0x220>)
 8005ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ed8:	2206      	movs	r2, #6
 8005eda:	f7fa f981 	bl	80001e0 <memchr>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d03f      	beq.n	8005f62 <_vfiprintf_r+0x20a>
 8005ee2:	4b26      	ldr	r3, [pc, #152]	@ (8005f7c <_vfiprintf_r+0x224>)
 8005ee4:	bb1b      	cbnz	r3, 8005f2e <_vfiprintf_r+0x1d6>
 8005ee6:	9b03      	ldr	r3, [sp, #12]
 8005ee8:	3307      	adds	r3, #7
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	3308      	adds	r3, #8
 8005ef0:	9303      	str	r3, [sp, #12]
 8005ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef4:	443b      	add	r3, r7
 8005ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ef8:	e76a      	b.n	8005dd0 <_vfiprintf_r+0x78>
 8005efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005efe:	460c      	mov	r4, r1
 8005f00:	2001      	movs	r0, #1
 8005f02:	e7a8      	b.n	8005e56 <_vfiprintf_r+0xfe>
 8005f04:	2300      	movs	r3, #0
 8005f06:	3401      	adds	r4, #1
 8005f08:	9305      	str	r3, [sp, #20]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	f04f 0c0a 	mov.w	ip, #10
 8005f10:	4620      	mov	r0, r4
 8005f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f16:	3a30      	subs	r2, #48	@ 0x30
 8005f18:	2a09      	cmp	r2, #9
 8005f1a:	d903      	bls.n	8005f24 <_vfiprintf_r+0x1cc>
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0c6      	beq.n	8005eae <_vfiprintf_r+0x156>
 8005f20:	9105      	str	r1, [sp, #20]
 8005f22:	e7c4      	b.n	8005eae <_vfiprintf_r+0x156>
 8005f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f28:	4604      	mov	r4, r0
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e7f0      	b.n	8005f10 <_vfiprintf_r+0x1b8>
 8005f2e:	ab03      	add	r3, sp, #12
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	462a      	mov	r2, r5
 8005f34:	4b12      	ldr	r3, [pc, #72]	@ (8005f80 <_vfiprintf_r+0x228>)
 8005f36:	a904      	add	r1, sp, #16
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f3af 8000 	nop.w
 8005f3e:	4607      	mov	r7, r0
 8005f40:	1c78      	adds	r0, r7, #1
 8005f42:	d1d6      	bne.n	8005ef2 <_vfiprintf_r+0x19a>
 8005f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f46:	07d9      	lsls	r1, r3, #31
 8005f48:	d405      	bmi.n	8005f56 <_vfiprintf_r+0x1fe>
 8005f4a:	89ab      	ldrh	r3, [r5, #12]
 8005f4c:	059a      	lsls	r2, r3, #22
 8005f4e:	d402      	bmi.n	8005f56 <_vfiprintf_r+0x1fe>
 8005f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f52:	f7fe fcab 	bl	80048ac <__retarget_lock_release_recursive>
 8005f56:	89ab      	ldrh	r3, [r5, #12]
 8005f58:	065b      	lsls	r3, r3, #25
 8005f5a:	f53f af1f 	bmi.w	8005d9c <_vfiprintf_r+0x44>
 8005f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f60:	e71e      	b.n	8005da0 <_vfiprintf_r+0x48>
 8005f62:	ab03      	add	r3, sp, #12
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	462a      	mov	r2, r5
 8005f68:	4b05      	ldr	r3, [pc, #20]	@ (8005f80 <_vfiprintf_r+0x228>)
 8005f6a:	a904      	add	r1, sp, #16
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f000 f879 	bl	8006064 <_printf_i>
 8005f72:	e7e4      	b.n	8005f3e <_vfiprintf_r+0x1e6>
 8005f74:	08006915 	.word	0x08006915
 8005f78:	0800691f 	.word	0x0800691f
 8005f7c:	00000000 	.word	0x00000000
 8005f80:	08005d35 	.word	0x08005d35
 8005f84:	0800691b 	.word	0x0800691b

08005f88 <_printf_common>:
 8005f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	4698      	mov	r8, r3
 8005f90:	688a      	ldr	r2, [r1, #8]
 8005f92:	690b      	ldr	r3, [r1, #16]
 8005f94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	bfb8      	it	lt
 8005f9c:	4613      	movlt	r3, r2
 8005f9e:	6033      	str	r3, [r6, #0]
 8005fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	b10a      	cbz	r2, 8005fae <_printf_common+0x26>
 8005faa:	3301      	adds	r3, #1
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	0699      	lsls	r1, r3, #26
 8005fb2:	bf42      	ittt	mi
 8005fb4:	6833      	ldrmi	r3, [r6, #0]
 8005fb6:	3302      	addmi	r3, #2
 8005fb8:	6033      	strmi	r3, [r6, #0]
 8005fba:	6825      	ldr	r5, [r4, #0]
 8005fbc:	f015 0506 	ands.w	r5, r5, #6
 8005fc0:	d106      	bne.n	8005fd0 <_printf_common+0x48>
 8005fc2:	f104 0a19 	add.w	sl, r4, #25
 8005fc6:	68e3      	ldr	r3, [r4, #12]
 8005fc8:	6832      	ldr	r2, [r6, #0]
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	42ab      	cmp	r3, r5
 8005fce:	dc26      	bgt.n	800601e <_printf_common+0x96>
 8005fd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fd4:	6822      	ldr	r2, [r4, #0]
 8005fd6:	3b00      	subs	r3, #0
 8005fd8:	bf18      	it	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	0692      	lsls	r2, r2, #26
 8005fde:	d42b      	bmi.n	8006038 <_printf_common+0xb0>
 8005fe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fe4:	4641      	mov	r1, r8
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	47c8      	blx	r9
 8005fea:	3001      	adds	r0, #1
 8005fec:	d01e      	beq.n	800602c <_printf_common+0xa4>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	6922      	ldr	r2, [r4, #16]
 8005ff2:	f003 0306 	and.w	r3, r3, #6
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	bf02      	ittt	eq
 8005ffa:	68e5      	ldreq	r5, [r4, #12]
 8005ffc:	6833      	ldreq	r3, [r6, #0]
 8005ffe:	1aed      	subeq	r5, r5, r3
 8006000:	68a3      	ldr	r3, [r4, #8]
 8006002:	bf0c      	ite	eq
 8006004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006008:	2500      	movne	r5, #0
 800600a:	4293      	cmp	r3, r2
 800600c:	bfc4      	itt	gt
 800600e:	1a9b      	subgt	r3, r3, r2
 8006010:	18ed      	addgt	r5, r5, r3
 8006012:	2600      	movs	r6, #0
 8006014:	341a      	adds	r4, #26
 8006016:	42b5      	cmp	r5, r6
 8006018:	d11a      	bne.n	8006050 <_printf_common+0xc8>
 800601a:	2000      	movs	r0, #0
 800601c:	e008      	b.n	8006030 <_printf_common+0xa8>
 800601e:	2301      	movs	r3, #1
 8006020:	4652      	mov	r2, sl
 8006022:	4641      	mov	r1, r8
 8006024:	4638      	mov	r0, r7
 8006026:	47c8      	blx	r9
 8006028:	3001      	adds	r0, #1
 800602a:	d103      	bne.n	8006034 <_printf_common+0xac>
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006034:	3501      	adds	r5, #1
 8006036:	e7c6      	b.n	8005fc6 <_printf_common+0x3e>
 8006038:	18e1      	adds	r1, r4, r3
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	2030      	movs	r0, #48	@ 0x30
 800603e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006042:	4422      	add	r2, r4
 8006044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800604c:	3302      	adds	r3, #2
 800604e:	e7c7      	b.n	8005fe0 <_printf_common+0x58>
 8006050:	2301      	movs	r3, #1
 8006052:	4622      	mov	r2, r4
 8006054:	4641      	mov	r1, r8
 8006056:	4638      	mov	r0, r7
 8006058:	47c8      	blx	r9
 800605a:	3001      	adds	r0, #1
 800605c:	d0e6      	beq.n	800602c <_printf_common+0xa4>
 800605e:	3601      	adds	r6, #1
 8006060:	e7d9      	b.n	8006016 <_printf_common+0x8e>
	...

08006064 <_printf_i>:
 8006064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	7e0f      	ldrb	r7, [r1, #24]
 800606a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800606c:	2f78      	cmp	r7, #120	@ 0x78
 800606e:	4691      	mov	r9, r2
 8006070:	4680      	mov	r8, r0
 8006072:	460c      	mov	r4, r1
 8006074:	469a      	mov	sl, r3
 8006076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800607a:	d807      	bhi.n	800608c <_printf_i+0x28>
 800607c:	2f62      	cmp	r7, #98	@ 0x62
 800607e:	d80a      	bhi.n	8006096 <_printf_i+0x32>
 8006080:	2f00      	cmp	r7, #0
 8006082:	f000 80d2 	beq.w	800622a <_printf_i+0x1c6>
 8006086:	2f58      	cmp	r7, #88	@ 0x58
 8006088:	f000 80b9 	beq.w	80061fe <_printf_i+0x19a>
 800608c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006094:	e03a      	b.n	800610c <_printf_i+0xa8>
 8006096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800609a:	2b15      	cmp	r3, #21
 800609c:	d8f6      	bhi.n	800608c <_printf_i+0x28>
 800609e:	a101      	add	r1, pc, #4	@ (adr r1, 80060a4 <_printf_i+0x40>)
 80060a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060a4:	080060fd 	.word	0x080060fd
 80060a8:	08006111 	.word	0x08006111
 80060ac:	0800608d 	.word	0x0800608d
 80060b0:	0800608d 	.word	0x0800608d
 80060b4:	0800608d 	.word	0x0800608d
 80060b8:	0800608d 	.word	0x0800608d
 80060bc:	08006111 	.word	0x08006111
 80060c0:	0800608d 	.word	0x0800608d
 80060c4:	0800608d 	.word	0x0800608d
 80060c8:	0800608d 	.word	0x0800608d
 80060cc:	0800608d 	.word	0x0800608d
 80060d0:	08006211 	.word	0x08006211
 80060d4:	0800613b 	.word	0x0800613b
 80060d8:	080061cb 	.word	0x080061cb
 80060dc:	0800608d 	.word	0x0800608d
 80060e0:	0800608d 	.word	0x0800608d
 80060e4:	08006233 	.word	0x08006233
 80060e8:	0800608d 	.word	0x0800608d
 80060ec:	0800613b 	.word	0x0800613b
 80060f0:	0800608d 	.word	0x0800608d
 80060f4:	0800608d 	.word	0x0800608d
 80060f8:	080061d3 	.word	0x080061d3
 80060fc:	6833      	ldr	r3, [r6, #0]
 80060fe:	1d1a      	adds	r2, r3, #4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6032      	str	r2, [r6, #0]
 8006104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800610c:	2301      	movs	r3, #1
 800610e:	e09d      	b.n	800624c <_printf_i+0x1e8>
 8006110:	6833      	ldr	r3, [r6, #0]
 8006112:	6820      	ldr	r0, [r4, #0]
 8006114:	1d19      	adds	r1, r3, #4
 8006116:	6031      	str	r1, [r6, #0]
 8006118:	0606      	lsls	r6, r0, #24
 800611a:	d501      	bpl.n	8006120 <_printf_i+0xbc>
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	e003      	b.n	8006128 <_printf_i+0xc4>
 8006120:	0645      	lsls	r5, r0, #25
 8006122:	d5fb      	bpl.n	800611c <_printf_i+0xb8>
 8006124:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006128:	2d00      	cmp	r5, #0
 800612a:	da03      	bge.n	8006134 <_printf_i+0xd0>
 800612c:	232d      	movs	r3, #45	@ 0x2d
 800612e:	426d      	negs	r5, r5
 8006130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006134:	4859      	ldr	r0, [pc, #356]	@ (800629c <_printf_i+0x238>)
 8006136:	230a      	movs	r3, #10
 8006138:	e011      	b.n	800615e <_printf_i+0xfa>
 800613a:	6821      	ldr	r1, [r4, #0]
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	0608      	lsls	r0, r1, #24
 8006140:	f853 5b04 	ldr.w	r5, [r3], #4
 8006144:	d402      	bmi.n	800614c <_printf_i+0xe8>
 8006146:	0649      	lsls	r1, r1, #25
 8006148:	bf48      	it	mi
 800614a:	b2ad      	uxthmi	r5, r5
 800614c:	2f6f      	cmp	r7, #111	@ 0x6f
 800614e:	4853      	ldr	r0, [pc, #332]	@ (800629c <_printf_i+0x238>)
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	bf14      	ite	ne
 8006154:	230a      	movne	r3, #10
 8006156:	2308      	moveq	r3, #8
 8006158:	2100      	movs	r1, #0
 800615a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800615e:	6866      	ldr	r6, [r4, #4]
 8006160:	60a6      	str	r6, [r4, #8]
 8006162:	2e00      	cmp	r6, #0
 8006164:	bfa2      	ittt	ge
 8006166:	6821      	ldrge	r1, [r4, #0]
 8006168:	f021 0104 	bicge.w	r1, r1, #4
 800616c:	6021      	strge	r1, [r4, #0]
 800616e:	b90d      	cbnz	r5, 8006174 <_printf_i+0x110>
 8006170:	2e00      	cmp	r6, #0
 8006172:	d04b      	beq.n	800620c <_printf_i+0x1a8>
 8006174:	4616      	mov	r6, r2
 8006176:	fbb5 f1f3 	udiv	r1, r5, r3
 800617a:	fb03 5711 	mls	r7, r3, r1, r5
 800617e:	5dc7      	ldrb	r7, [r0, r7]
 8006180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006184:	462f      	mov	r7, r5
 8006186:	42bb      	cmp	r3, r7
 8006188:	460d      	mov	r5, r1
 800618a:	d9f4      	bls.n	8006176 <_printf_i+0x112>
 800618c:	2b08      	cmp	r3, #8
 800618e:	d10b      	bne.n	80061a8 <_printf_i+0x144>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	07df      	lsls	r7, r3, #31
 8006194:	d508      	bpl.n	80061a8 <_printf_i+0x144>
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	6861      	ldr	r1, [r4, #4]
 800619a:	4299      	cmp	r1, r3
 800619c:	bfde      	ittt	le
 800619e:	2330      	movle	r3, #48	@ 0x30
 80061a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061a8:	1b92      	subs	r2, r2, r6
 80061aa:	6122      	str	r2, [r4, #16]
 80061ac:	f8cd a000 	str.w	sl, [sp]
 80061b0:	464b      	mov	r3, r9
 80061b2:	aa03      	add	r2, sp, #12
 80061b4:	4621      	mov	r1, r4
 80061b6:	4640      	mov	r0, r8
 80061b8:	f7ff fee6 	bl	8005f88 <_printf_common>
 80061bc:	3001      	adds	r0, #1
 80061be:	d14a      	bne.n	8006256 <_printf_i+0x1f2>
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	b004      	add	sp, #16
 80061c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	f043 0320 	orr.w	r3, r3, #32
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	4833      	ldr	r0, [pc, #204]	@ (80062a0 <_printf_i+0x23c>)
 80061d4:	2778      	movs	r7, #120	@ 0x78
 80061d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	6831      	ldr	r1, [r6, #0]
 80061de:	061f      	lsls	r7, r3, #24
 80061e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80061e4:	d402      	bmi.n	80061ec <_printf_i+0x188>
 80061e6:	065f      	lsls	r7, r3, #25
 80061e8:	bf48      	it	mi
 80061ea:	b2ad      	uxthmi	r5, r5
 80061ec:	6031      	str	r1, [r6, #0]
 80061ee:	07d9      	lsls	r1, r3, #31
 80061f0:	bf44      	itt	mi
 80061f2:	f043 0320 	orrmi.w	r3, r3, #32
 80061f6:	6023      	strmi	r3, [r4, #0]
 80061f8:	b11d      	cbz	r5, 8006202 <_printf_i+0x19e>
 80061fa:	2310      	movs	r3, #16
 80061fc:	e7ac      	b.n	8006158 <_printf_i+0xf4>
 80061fe:	4827      	ldr	r0, [pc, #156]	@ (800629c <_printf_i+0x238>)
 8006200:	e7e9      	b.n	80061d6 <_printf_i+0x172>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	f023 0320 	bic.w	r3, r3, #32
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	e7f6      	b.n	80061fa <_printf_i+0x196>
 800620c:	4616      	mov	r6, r2
 800620e:	e7bd      	b.n	800618c <_printf_i+0x128>
 8006210:	6833      	ldr	r3, [r6, #0]
 8006212:	6825      	ldr	r5, [r4, #0]
 8006214:	6961      	ldr	r1, [r4, #20]
 8006216:	1d18      	adds	r0, r3, #4
 8006218:	6030      	str	r0, [r6, #0]
 800621a:	062e      	lsls	r6, r5, #24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	d501      	bpl.n	8006224 <_printf_i+0x1c0>
 8006220:	6019      	str	r1, [r3, #0]
 8006222:	e002      	b.n	800622a <_printf_i+0x1c6>
 8006224:	0668      	lsls	r0, r5, #25
 8006226:	d5fb      	bpl.n	8006220 <_printf_i+0x1bc>
 8006228:	8019      	strh	r1, [r3, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	4616      	mov	r6, r2
 8006230:	e7bc      	b.n	80061ac <_printf_i+0x148>
 8006232:	6833      	ldr	r3, [r6, #0]
 8006234:	1d1a      	adds	r2, r3, #4
 8006236:	6032      	str	r2, [r6, #0]
 8006238:	681e      	ldr	r6, [r3, #0]
 800623a:	6862      	ldr	r2, [r4, #4]
 800623c:	2100      	movs	r1, #0
 800623e:	4630      	mov	r0, r6
 8006240:	f7f9 ffce 	bl	80001e0 <memchr>
 8006244:	b108      	cbz	r0, 800624a <_printf_i+0x1e6>
 8006246:	1b80      	subs	r0, r0, r6
 8006248:	6060      	str	r0, [r4, #4]
 800624a:	6863      	ldr	r3, [r4, #4]
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	2300      	movs	r3, #0
 8006250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006254:	e7aa      	b.n	80061ac <_printf_i+0x148>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	4632      	mov	r2, r6
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	47d0      	blx	sl
 8006260:	3001      	adds	r0, #1
 8006262:	d0ad      	beq.n	80061c0 <_printf_i+0x15c>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	079b      	lsls	r3, r3, #30
 8006268:	d413      	bmi.n	8006292 <_printf_i+0x22e>
 800626a:	68e0      	ldr	r0, [r4, #12]
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	4298      	cmp	r0, r3
 8006270:	bfb8      	it	lt
 8006272:	4618      	movlt	r0, r3
 8006274:	e7a6      	b.n	80061c4 <_printf_i+0x160>
 8006276:	2301      	movs	r3, #1
 8006278:	4632      	mov	r2, r6
 800627a:	4649      	mov	r1, r9
 800627c:	4640      	mov	r0, r8
 800627e:	47d0      	blx	sl
 8006280:	3001      	adds	r0, #1
 8006282:	d09d      	beq.n	80061c0 <_printf_i+0x15c>
 8006284:	3501      	adds	r5, #1
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	9903      	ldr	r1, [sp, #12]
 800628a:	1a5b      	subs	r3, r3, r1
 800628c:	42ab      	cmp	r3, r5
 800628e:	dcf2      	bgt.n	8006276 <_printf_i+0x212>
 8006290:	e7eb      	b.n	800626a <_printf_i+0x206>
 8006292:	2500      	movs	r5, #0
 8006294:	f104 0619 	add.w	r6, r4, #25
 8006298:	e7f5      	b.n	8006286 <_printf_i+0x222>
 800629a:	bf00      	nop
 800629c:	08006926 	.word	0x08006926
 80062a0:	08006937 	.word	0x08006937

080062a4 <__swbuf_r>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	460e      	mov	r6, r1
 80062a8:	4614      	mov	r4, r2
 80062aa:	4605      	mov	r5, r0
 80062ac:	b118      	cbz	r0, 80062b6 <__swbuf_r+0x12>
 80062ae:	6a03      	ldr	r3, [r0, #32]
 80062b0:	b90b      	cbnz	r3, 80062b6 <__swbuf_r+0x12>
 80062b2:	f7fe f9f5 	bl	80046a0 <__sinit>
 80062b6:	69a3      	ldr	r3, [r4, #24]
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	071a      	lsls	r2, r3, #28
 80062be:	d501      	bpl.n	80062c4 <__swbuf_r+0x20>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b943      	cbnz	r3, 80062d6 <__swbuf_r+0x32>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f82a 	bl	8006320 <__swsetup_r>
 80062cc:	b118      	cbz	r0, 80062d6 <__swbuf_r+0x32>
 80062ce:	f04f 37ff 	mov.w	r7, #4294967295
 80062d2:	4638      	mov	r0, r7
 80062d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	6922      	ldr	r2, [r4, #16]
 80062da:	1a98      	subs	r0, r3, r2
 80062dc:	6963      	ldr	r3, [r4, #20]
 80062de:	b2f6      	uxtb	r6, r6
 80062e0:	4283      	cmp	r3, r0
 80062e2:	4637      	mov	r7, r6
 80062e4:	dc05      	bgt.n	80062f2 <__swbuf_r+0x4e>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7ff fc81 	bl	8005bf0 <_fflush_r>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d1ed      	bne.n	80062ce <__swbuf_r+0x2a>
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	60a3      	str	r3, [r4, #8]
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	701e      	strb	r6, [r3, #0]
 8006300:	6962      	ldr	r2, [r4, #20]
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	429a      	cmp	r2, r3
 8006306:	d004      	beq.n	8006312 <__swbuf_r+0x6e>
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	07db      	lsls	r3, r3, #31
 800630c:	d5e1      	bpl.n	80062d2 <__swbuf_r+0x2e>
 800630e:	2e0a      	cmp	r6, #10
 8006310:	d1df      	bne.n	80062d2 <__swbuf_r+0x2e>
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f7ff fc6b 	bl	8005bf0 <_fflush_r>
 800631a:	2800      	cmp	r0, #0
 800631c:	d0d9      	beq.n	80062d2 <__swbuf_r+0x2e>
 800631e:	e7d6      	b.n	80062ce <__swbuf_r+0x2a>

08006320 <__swsetup_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4b29      	ldr	r3, [pc, #164]	@ (80063c8 <__swsetup_r+0xa8>)
 8006324:	4605      	mov	r5, r0
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	460c      	mov	r4, r1
 800632a:	b118      	cbz	r0, 8006334 <__swsetup_r+0x14>
 800632c:	6a03      	ldr	r3, [r0, #32]
 800632e:	b90b      	cbnz	r3, 8006334 <__swsetup_r+0x14>
 8006330:	f7fe f9b6 	bl	80046a0 <__sinit>
 8006334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006338:	0719      	lsls	r1, r3, #28
 800633a:	d422      	bmi.n	8006382 <__swsetup_r+0x62>
 800633c:	06da      	lsls	r2, r3, #27
 800633e:	d407      	bmi.n	8006350 <__swsetup_r+0x30>
 8006340:	2209      	movs	r2, #9
 8006342:	602a      	str	r2, [r5, #0]
 8006344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	f04f 30ff 	mov.w	r0, #4294967295
 800634e:	e033      	b.n	80063b8 <__swsetup_r+0x98>
 8006350:	0758      	lsls	r0, r3, #29
 8006352:	d512      	bpl.n	800637a <__swsetup_r+0x5a>
 8006354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006356:	b141      	cbz	r1, 800636a <__swsetup_r+0x4a>
 8006358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800635c:	4299      	cmp	r1, r3
 800635e:	d002      	beq.n	8006366 <__swsetup_r+0x46>
 8006360:	4628      	mov	r0, r5
 8006362:	f7fe fabd 	bl	80048e0 <_free_r>
 8006366:	2300      	movs	r3, #0
 8006368:	6363      	str	r3, [r4, #52]	@ 0x34
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	2300      	movs	r3, #0
 8006374:	6063      	str	r3, [r4, #4]
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f043 0308 	orr.w	r3, r3, #8
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	b94b      	cbnz	r3, 800639a <__swsetup_r+0x7a>
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800638c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006390:	d003      	beq.n	800639a <__swsetup_r+0x7a>
 8006392:	4621      	mov	r1, r4
 8006394:	4628      	mov	r0, r5
 8006396:	f000 f883 	bl	80064a0 <__smakebuf_r>
 800639a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639e:	f013 0201 	ands.w	r2, r3, #1
 80063a2:	d00a      	beq.n	80063ba <__swsetup_r+0x9a>
 80063a4:	2200      	movs	r2, #0
 80063a6:	60a2      	str	r2, [r4, #8]
 80063a8:	6962      	ldr	r2, [r4, #20]
 80063aa:	4252      	negs	r2, r2
 80063ac:	61a2      	str	r2, [r4, #24]
 80063ae:	6922      	ldr	r2, [r4, #16]
 80063b0:	b942      	cbnz	r2, 80063c4 <__swsetup_r+0xa4>
 80063b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063b6:	d1c5      	bne.n	8006344 <__swsetup_r+0x24>
 80063b8:	bd38      	pop	{r3, r4, r5, pc}
 80063ba:	0799      	lsls	r1, r3, #30
 80063bc:	bf58      	it	pl
 80063be:	6962      	ldrpl	r2, [r4, #20]
 80063c0:	60a2      	str	r2, [r4, #8]
 80063c2:	e7f4      	b.n	80063ae <__swsetup_r+0x8e>
 80063c4:	2000      	movs	r0, #0
 80063c6:	e7f7      	b.n	80063b8 <__swsetup_r+0x98>
 80063c8:	20000184 	.word	0x20000184

080063cc <_raise_r>:
 80063cc:	291f      	cmp	r1, #31
 80063ce:	b538      	push	{r3, r4, r5, lr}
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	d904      	bls.n	80063e0 <_raise_r+0x14>
 80063d6:	2316      	movs	r3, #22
 80063d8:	6003      	str	r3, [r0, #0]
 80063da:	f04f 30ff 	mov.w	r0, #4294967295
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80063e2:	b112      	cbz	r2, 80063ea <_raise_r+0x1e>
 80063e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063e8:	b94b      	cbnz	r3, 80063fe <_raise_r+0x32>
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 f830 	bl	8006450 <_getpid_r>
 80063f0:	4622      	mov	r2, r4
 80063f2:	4601      	mov	r1, r0
 80063f4:	4628      	mov	r0, r5
 80063f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063fa:	f000 b817 	b.w	800642c <_kill_r>
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d00a      	beq.n	8006418 <_raise_r+0x4c>
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	d103      	bne.n	800640e <_raise_r+0x42>
 8006406:	2316      	movs	r3, #22
 8006408:	6003      	str	r3, [r0, #0]
 800640a:	2001      	movs	r0, #1
 800640c:	e7e7      	b.n	80063de <_raise_r+0x12>
 800640e:	2100      	movs	r1, #0
 8006410:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006414:	4620      	mov	r0, r4
 8006416:	4798      	blx	r3
 8006418:	2000      	movs	r0, #0
 800641a:	e7e0      	b.n	80063de <_raise_r+0x12>

0800641c <raise>:
 800641c:	4b02      	ldr	r3, [pc, #8]	@ (8006428 <raise+0xc>)
 800641e:	4601      	mov	r1, r0
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	f7ff bfd3 	b.w	80063cc <_raise_r>
 8006426:	bf00      	nop
 8006428:	20000184 	.word	0x20000184

0800642c <_kill_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	@ (800644c <_kill_r+0x20>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	f7fb f958 	bl	80016ee <_kill>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d102      	bne.n	8006448 <_kill_r+0x1c>
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	b103      	cbz	r3, 8006448 <_kill_r+0x1c>
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	2000051c 	.word	0x2000051c

08006450 <_getpid_r>:
 8006450:	f7fb b945 	b.w	80016de <_getpid>

08006454 <__swhatbuf_r>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	460c      	mov	r4, r1
 8006458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800645c:	2900      	cmp	r1, #0
 800645e:	b096      	sub	sp, #88	@ 0x58
 8006460:	4615      	mov	r5, r2
 8006462:	461e      	mov	r6, r3
 8006464:	da0d      	bge.n	8006482 <__swhatbuf_r+0x2e>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800646c:	f04f 0100 	mov.w	r1, #0
 8006470:	bf14      	ite	ne
 8006472:	2340      	movne	r3, #64	@ 0x40
 8006474:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006478:	2000      	movs	r0, #0
 800647a:	6031      	str	r1, [r6, #0]
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	b016      	add	sp, #88	@ 0x58
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	466a      	mov	r2, sp
 8006484:	f000 f848 	bl	8006518 <_fstat_r>
 8006488:	2800      	cmp	r0, #0
 800648a:	dbec      	blt.n	8006466 <__swhatbuf_r+0x12>
 800648c:	9901      	ldr	r1, [sp, #4]
 800648e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006492:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006496:	4259      	negs	r1, r3
 8006498:	4159      	adcs	r1, r3
 800649a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800649e:	e7eb      	b.n	8006478 <__swhatbuf_r+0x24>

080064a0 <__smakebuf_r>:
 80064a0:	898b      	ldrh	r3, [r1, #12]
 80064a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a4:	079d      	lsls	r5, r3, #30
 80064a6:	4606      	mov	r6, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	d507      	bpl.n	80064bc <__smakebuf_r+0x1c>
 80064ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	2301      	movs	r3, #1
 80064b6:	6163      	str	r3, [r4, #20]
 80064b8:	b003      	add	sp, #12
 80064ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064bc:	ab01      	add	r3, sp, #4
 80064be:	466a      	mov	r2, sp
 80064c0:	f7ff ffc8 	bl	8006454 <__swhatbuf_r>
 80064c4:	9f00      	ldr	r7, [sp, #0]
 80064c6:	4605      	mov	r5, r0
 80064c8:	4639      	mov	r1, r7
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7fe fdae 	bl	800502c <_malloc_r>
 80064d0:	b948      	cbnz	r0, 80064e6 <__smakebuf_r+0x46>
 80064d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064d6:	059a      	lsls	r2, r3, #22
 80064d8:	d4ee      	bmi.n	80064b8 <__smakebuf_r+0x18>
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	f043 0302 	orr.w	r3, r3, #2
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	e7e2      	b.n	80064ac <__smakebuf_r+0xc>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	6020      	str	r0, [r4, #0]
 80064ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	9b01      	ldr	r3, [sp, #4]
 80064f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064f6:	b15b      	cbz	r3, 8006510 <__smakebuf_r+0x70>
 80064f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 f81d 	bl	800653c <_isatty_r>
 8006502:	b128      	cbz	r0, 8006510 <__smakebuf_r+0x70>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	431d      	orrs	r5, r3
 8006514:	81a5      	strh	r5, [r4, #12]
 8006516:	e7cf      	b.n	80064b8 <__smakebuf_r+0x18>

08006518 <_fstat_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d07      	ldr	r5, [pc, #28]	@ (8006538 <_fstat_r+0x20>)
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	602b      	str	r3, [r5, #0]
 8006526:	f7fb f942 	bl	80017ae <_fstat>
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d102      	bne.n	8006534 <_fstat_r+0x1c>
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	b103      	cbz	r3, 8006534 <_fstat_r+0x1c>
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	bd38      	pop	{r3, r4, r5, pc}
 8006536:	bf00      	nop
 8006538:	2000051c 	.word	0x2000051c

0800653c <_isatty_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d06      	ldr	r5, [pc, #24]	@ (8006558 <_isatty_r+0x1c>)
 8006540:	2300      	movs	r3, #0
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	f7fb f941 	bl	80017ce <_isatty>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_isatty_r+0x1a>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_isatty_r+0x1a>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	2000051c 	.word	0x2000051c

0800655c <_init>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr

08006568 <_fini>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	bf00      	nop
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr
