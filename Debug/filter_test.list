
filter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fac4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800fc68  0800fc68  00010c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010100  08010100  000122c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010100  08010100  00011100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010108  08010108  000122c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010108  08010108  00011108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801010c  0801010c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  08010110  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002374  200002c8  080103d4  000122c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000263c  080103d4  0001263c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b38  00000000  00000000  000122f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dee  00000000  00000000  0002be2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001122  00000000  00000000  00031260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b82e  00000000  00000000  00032382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afec  00000000  00000000  0004dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f9c2  00000000  00000000  00068b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010855e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000726c  00000000  00000000  001085a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fc4c 	.word	0x0800fc4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800fc4c 	.word	0x0800fc4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffa:	f001 fa95 	bl	8002528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffe:	f000 f90b 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001002:	f000 fb15 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 8001006:	f000 facd 	bl	80015a4 <MX_DMA_Init>
  MX_ADC1_Init();
 800100a:	f000 f9ab 	bl	8001364 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800100e:	f000 fa4b 	bl	80014a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001012:	f000 fa73 	bl	80014fc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001016:	f000 fa9b 	bl	8001550 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 800101a:	f009 fd75 	bl	800ab08 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 800101e:	f000 fa09 	bl	8001434 <MX_TIM9_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001022:	f000 f963 	bl	80012ec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8001026:	4855      	ldr	r0, [pc, #340]	@ (800117c <main+0x188>)
 8001028:	f004 fdc0 	bl	8005bac <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_Pressure_Data();
 800102c:	f000 fb28 	bl	8001680 <Read_Pressure_Data>
	  get_IMU1();
 8001030:	f000 fb8a 	bl	8001748 <get_IMU1>
	  get_IMU2();
 8001034:	f000 fcec 	bl	8001a10 <get_IMU2>

	  //패킷화 하기
	  packetBuffer[0] = 0xAA;
 8001038:	4b51      	ldr	r3, [pc, #324]	@ (8001180 <main+0x18c>)
 800103a:	22aa      	movs	r2, #170	@ 0xaa
 800103c:	701a      	strb	r2, [r3, #0]

      /* IMU1 Data */
      memcpy(packetBuffer + 1, &roll1, sizeof(roll1));
 800103e:	4951      	ldr	r1, [pc, #324]	@ (8001184 <main+0x190>)
 8001040:	4b51      	ldr	r3, [pc, #324]	@ (8001188 <main+0x194>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	600a      	str	r2, [r1, #0]
 8001048:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 9, &pitch1, sizeof(pitch1));
 800104a:	4950      	ldr	r1, [pc, #320]	@ (800118c <main+0x198>)
 800104c:	4b50      	ldr	r3, [pc, #320]	@ (8001190 <main+0x19c>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	600a      	str	r2, [r1, #0]
 8001054:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 17, &yaw1, sizeof(yaw1));
 8001056:	494f      	ldr	r1, [pc, #316]	@ (8001194 <main+0x1a0>)
 8001058:	4b4f      	ldr	r3, [pc, #316]	@ (8001198 <main+0x1a4>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	600a      	str	r2, [r1, #0]
 8001060:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 25, &gyro_x1, sizeof(gyro_x1));
 8001062:	494e      	ldr	r1, [pc, #312]	@ (800119c <main+0x1a8>)
 8001064:	4b4e      	ldr	r3, [pc, #312]	@ (80011a0 <main+0x1ac>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	600a      	str	r2, [r1, #0]
 800106c:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 33, &gyro_y1, sizeof(gyro_y1));
 800106e:	494d      	ldr	r1, [pc, #308]	@ (80011a4 <main+0x1b0>)
 8001070:	4b4d      	ldr	r3, [pc, #308]	@ (80011a8 <main+0x1b4>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	600a      	str	r2, [r1, #0]
 8001078:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 41, &gyro_z1, sizeof(gyro_z1));
 800107a:	494c      	ldr	r1, [pc, #304]	@ (80011ac <main+0x1b8>)
 800107c:	4b4c      	ldr	r3, [pc, #304]	@ (80011b0 <main+0x1bc>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	600a      	str	r2, [r1, #0]
 8001084:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 49, &accel_x1, sizeof(accel_x1));
 8001086:	494b      	ldr	r1, [pc, #300]	@ (80011b4 <main+0x1c0>)
 8001088:	4b4b      	ldr	r3, [pc, #300]	@ (80011b8 <main+0x1c4>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	600a      	str	r2, [r1, #0]
 8001090:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 57, &accel_y1, sizeof(accel_y1));
 8001092:	494a      	ldr	r1, [pc, #296]	@ (80011bc <main+0x1c8>)
 8001094:	4b4a      	ldr	r3, [pc, #296]	@ (80011c0 <main+0x1cc>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	600a      	str	r2, [r1, #0]
 800109c:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 65, &accel_z1, sizeof(accel_z1));
 800109e:	4949      	ldr	r1, [pc, #292]	@ (80011c4 <main+0x1d0>)
 80010a0:	4b49      	ldr	r3, [pc, #292]	@ (80011c8 <main+0x1d4>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	600a      	str	r2, [r1, #0]
 80010a8:	604b      	str	r3, [r1, #4]

      /* IMU2 Data */
      memcpy(packetBuffer + 73, &roll2, sizeof(roll2));
 80010aa:	4948      	ldr	r1, [pc, #288]	@ (80011cc <main+0x1d8>)
 80010ac:	4b48      	ldr	r3, [pc, #288]	@ (80011d0 <main+0x1dc>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	600a      	str	r2, [r1, #0]
 80010b4:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 81, &pitch2, sizeof(pitch2));
 80010b6:	4947      	ldr	r1, [pc, #284]	@ (80011d4 <main+0x1e0>)
 80010b8:	4b47      	ldr	r3, [pc, #284]	@ (80011d8 <main+0x1e4>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	600a      	str	r2, [r1, #0]
 80010c0:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 89, &yaw2, sizeof(yaw2));
 80010c2:	4946      	ldr	r1, [pc, #280]	@ (80011dc <main+0x1e8>)
 80010c4:	4b46      	ldr	r3, [pc, #280]	@ (80011e0 <main+0x1ec>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	600a      	str	r2, [r1, #0]
 80010cc:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 97, &gyro_x2, sizeof(gyro_x2));
 80010ce:	4945      	ldr	r1, [pc, #276]	@ (80011e4 <main+0x1f0>)
 80010d0:	4b45      	ldr	r3, [pc, #276]	@ (80011e8 <main+0x1f4>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	600a      	str	r2, [r1, #0]
 80010d8:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 105, &gyro_y2, sizeof(gyro_y2));
 80010da:	4944      	ldr	r1, [pc, #272]	@ (80011ec <main+0x1f8>)
 80010dc:	4b44      	ldr	r3, [pc, #272]	@ (80011f0 <main+0x1fc>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	600a      	str	r2, [r1, #0]
 80010e4:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 113, &gyro_z2, sizeof(gyro_z2));
 80010e6:	4943      	ldr	r1, [pc, #268]	@ (80011f4 <main+0x200>)
 80010e8:	4b43      	ldr	r3, [pc, #268]	@ (80011f8 <main+0x204>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	600a      	str	r2, [r1, #0]
 80010f0:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 121, &accel_x2, sizeof(accel_x2));
 80010f2:	4942      	ldr	r1, [pc, #264]	@ (80011fc <main+0x208>)
 80010f4:	4b42      	ldr	r3, [pc, #264]	@ (8001200 <main+0x20c>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	600a      	str	r2, [r1, #0]
 80010fc:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 129, &accel_y2, sizeof(accel_y2));
 80010fe:	4941      	ldr	r1, [pc, #260]	@ (8001204 <main+0x210>)
 8001100:	4b41      	ldr	r3, [pc, #260]	@ (8001208 <main+0x214>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	600a      	str	r2, [r1, #0]
 8001108:	604b      	str	r3, [r1, #4]
      memcpy(packetBuffer + 137, &accel_z2, sizeof(accel_z2));
 800110a:	4940      	ldr	r1, [pc, #256]	@ (800120c <main+0x218>)
 800110c:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <main+0x21c>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	600a      	str	r2, [r1, #0]
 8001114:	604b      	str	r3, [r1, #4]

      /* Pressure Sensor Data */
      for (int i = 0; i < NUM_SENSORS; i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	e018      	b.n	800114e <main+0x15a>
          packetBuffer[145 + i * 2] = (sensorValues[i] >> 8) & 0xFF; // 상위 바이트
 800111c:	4a3d      	ldr	r2, [pc, #244]	@ (8001214 <main+0x220>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	3391      	adds	r3, #145	@ 0x91
 800112e:	b2d1      	uxtb	r1, r2
 8001130:	4a13      	ldr	r2, [pc, #76]	@ (8001180 <main+0x18c>)
 8001132:	54d1      	strb	r1, [r2, r3]
          packetBuffer[146 + i * 2] = sensorValues[i] & 0xFF;        // 하위 바이트
 8001134:	4a37      	ldr	r2, [pc, #220]	@ (8001214 <main+0x220>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3349      	adds	r3, #73	@ 0x49
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b2d1      	uxtb	r1, r2
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <main+0x18c>)
 8001146:	54d1      	strb	r1, [r2, r3]
      for (int i = 0; i < NUM_SENSORS; i++) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b03      	cmp	r3, #3
 8001152:	dde3      	ble.n	800111c <main+0x128>
      }


      /* End frame */
      packetBuffer[153] = 0xBB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <main+0x18c>)
 8001156:	22bb      	movs	r2, #187	@ 0xbb
 8001158:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

      /* Transmit data via USB CDC */
      if (CDC_Transmit_FS(packetBuffer, sizeof(packetBuffer)) == USBD_OK) {
 800115c:	219a      	movs	r1, #154	@ 0x9a
 800115e:	4808      	ldr	r0, [pc, #32]	@ (8001180 <main+0x18c>)
 8001160:	f009 fd90 	bl	800ac84 <CDC_Transmit_FS>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <main+0x17e>
         HAL_Delay(40);
 800116a:	2028      	movs	r0, #40	@ 0x28
 800116c:	f001 fa4e 	bl	800260c <HAL_Delay>
 8001170:	e75c      	b.n	800102c <main+0x38>
      } else {
          HAL_Delay(10);
 8001172:	200a      	movs	r0, #10
 8001174:	f001 fa4a 	bl	800260c <HAL_Delay>
	  Read_Pressure_Data();
 8001178:	e758      	b.n	800102c <main+0x38>
 800117a:	bf00      	nop
 800117c:	2000032c 	.word	0x2000032c
 8001180:	20000694 	.word	0x20000694
 8001184:	20000695 	.word	0x20000695
 8001188:	20000798 	.word	0x20000798
 800118c:	2000069d 	.word	0x2000069d
 8001190:	200007a0 	.word	0x200007a0
 8001194:	200006a5 	.word	0x200006a5
 8001198:	200007a8 	.word	0x200007a8
 800119c:	200006ad 	.word	0x200006ad
 80011a0:	200007b0 	.word	0x200007b0
 80011a4:	200006b5 	.word	0x200006b5
 80011a8:	200007b8 	.word	0x200007b8
 80011ac:	200006bd 	.word	0x200006bd
 80011b0:	200007c0 	.word	0x200007c0
 80011b4:	200006c5 	.word	0x200006c5
 80011b8:	200007c8 	.word	0x200007c8
 80011bc:	200006cd 	.word	0x200006cd
 80011c0:	200007d0 	.word	0x200007d0
 80011c4:	200006d5 	.word	0x200006d5
 80011c8:	200007d8 	.word	0x200007d8
 80011cc:	200006dd 	.word	0x200006dd
 80011d0:	20000850 	.word	0x20000850
 80011d4:	200006e5 	.word	0x200006e5
 80011d8:	20000858 	.word	0x20000858
 80011dc:	200006ed 	.word	0x200006ed
 80011e0:	20000860 	.word	0x20000860
 80011e4:	200006f5 	.word	0x200006f5
 80011e8:	20000868 	.word	0x20000868
 80011ec:	200006fd 	.word	0x200006fd
 80011f0:	20000870 	.word	0x20000870
 80011f4:	20000705 	.word	0x20000705
 80011f8:	20000878 	.word	0x20000878
 80011fc:	2000070d 	.word	0x2000070d
 8001200:	20000880 	.word	0x20000880
 8001204:	20000715 	.word	0x20000715
 8001208:	20000888 	.word	0x20000888
 800120c:	2000071d 	.word	0x2000071d
 8001210:	20000890 	.word	0x20000890
 8001214:	2000068c 	.word	0x2000068c

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	@ 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	@ 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f00b ff2d 	bl	800d086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <SystemClock_Config+0xcc>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a27      	ldr	r2, [pc, #156]	@ (80012e4 <SystemClock_Config+0xcc>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <SystemClock_Config+0xd0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001264:	4a20      	ldr	r2, [pc, #128]	@ (80012e8 <SystemClock_Config+0xd0>)
 8001266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <SystemClock_Config+0xd0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2310      	movs	r3, #16
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001288:	2300      	movs	r3, #0
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800128c:	2310      	movs	r3, #16
 800128e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001290:	23c0      	movs	r3, #192	@ 0xc0
 8001292:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 ffdb 	bl	800525c <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012ac:	f000 fd14 	bl	8001cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fa3e 	bl	800574c <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012d6:	f000 fcff 	bl	8001cd8 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3750      	adds	r7, #80	@ 0x50
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2012      	movs	r0, #18
 80012f6:	f001 ffa2 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012fa:	2012      	movs	r0, #18
 80012fc:	f001 ffbb 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2039      	movs	r0, #57	@ 0x39
 8001306:	f001 ff9a 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800130a:	2039      	movs	r0, #57	@ 0x39
 800130c:	f001 ffb3 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	203a      	movs	r0, #58	@ 0x3a
 8001316:	f001 ff92 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800131a:	203a      	movs	r0, #58	@ 0x3a
 800131c:	f001 ffab 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2025      	movs	r0, #37	@ 0x25
 8001326:	f001 ff8a 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800132a:	2025      	movs	r0, #37	@ 0x25
 800132c:	f001 ffa3 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2026      	movs	r0, #38	@ 0x26
 8001336:	f001 ff82 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800133a:	2026      	movs	r0, #38	@ 0x26
 800133c:	f001 ff9b 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2018      	movs	r0, #24
 8001346:	f001 ff7a 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800134a:	2018      	movs	r0, #24
 800134c:	f001 ff93 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2047      	movs	r0, #71	@ 0x47
 8001356:	f001 ff72 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800135a:	2047      	movs	r0, #71	@ 0x47
 800135c:	f001 ff8b 	bl	8003276 <HAL_NVIC_EnableIRQ>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001376:	4b2c      	ldr	r3, [pc, #176]	@ (8001428 <MX_ADC1_Init+0xc4>)
 8001378:	4a2c      	ldr	r2, [pc, #176]	@ (800142c <MX_ADC1_Init+0xc8>)
 800137a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800137c:	4b2a      	ldr	r3, [pc, #168]	@ (8001428 <MX_ADC1_Init+0xc4>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001382:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <MX_ADC1_Init+0xc4>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <MX_ADC1_Init+0xc4>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800138e:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <MX_ADC1_Init+0xc4>)
 8001390:	2200      	movs	r2, #0
 8001392:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <MX_ADC1_Init+0xc4>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_ADC1_Init+0xc4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_ADC1_Init+0xc4>)
 80013a4:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <MX_ADC1_Init+0xcc>)
 80013a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_ADC1_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <MX_ADC1_Init+0xc4>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_ADC1_Init+0xc4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_ADC1_Init+0xc4>)
 80013be:	2201      	movs	r2, #1
 80013c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c2:	4819      	ldr	r0, [pc, #100]	@ (8001428 <MX_ADC1_Init+0xc4>)
 80013c4:	f001 f946 	bl	8002654 <HAL_ADC_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013ce:	f000 fc83 	bl	8001cd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80013da:	2306      	movs	r3, #6
 80013dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4811      	ldr	r0, [pc, #68]	@ (8001428 <MX_ADC1_Init+0xc4>)
 80013e4:	f001 fc28 	bl	8002c38 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013ee:	f000 fc73 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  for(int i=0;i < NUM_SENSORS; i++){
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e00e      	b.n	8001416 <MX_ADC1_Init+0xb2>
	  sConfig.Channel = ADC_CHANNEL_0 + i;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = i + 1;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001402:	2301      	movs	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4807      	ldr	r0, [pc, #28]	@ (8001428 <MX_ADC1_Init+0xc4>)
 800140c:	f001 fc14 	bl	8002c38 <HAL_ADC_ConfigChannel>
  for(int i=0;i < NUM_SENSORS; i++){
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b03      	cmp	r3, #3
 800141a:	dded      	ble.n	80013f8 <MX_ADC1_Init+0x94>
  }
  /* USER CODE END ADC1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002e4 	.word	0x200002e4
 800142c:	40012000 	.word	0x40012000
 8001430:	0f000001 	.word	0x0f000001

08001434 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_TIM9_Init+0x6c>)
 8001448:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <MX_TIM9_Init+0x70>)
 800144a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_TIM9_Init+0x6c>)
 800144e:	f240 3247 	movw	r2, #839	@ 0x347
 8001452:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_TIM9_Init+0x6c>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_TIM9_Init+0x6c>)
 800145c:	2263      	movs	r2, #99	@ 0x63
 800145e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_TIM9_Init+0x6c>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_TIM9_Init+0x6c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <MX_TIM9_Init+0x6c>)
 800146e:	f004 fb4d 	bl	8005b0c <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001478:	f000 fc2e 	bl	8001cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001480:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <MX_TIM9_Init+0x6c>)
 8001488:	f004 fce2 	bl	8005e50 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001492:	f000 fc21 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000032c 	.word	0x2000032c
 80014a4:	40014000 	.word	0x40014000

080014a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_USART1_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014e0:	f004 feea 	bl	80062b8 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f000 fbf5 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000374 	.word	0x20000374
 80014f8:	40011000 	.word	0x40011000

080014fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001502:	4a12      	ldr	r2, [pc, #72]	@ (800154c <MX_USART2_UART_Init+0x50>)
 8001504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001508:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800150c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_USART2_UART_Init+0x4c>)
 8001534:	f004 fec0 	bl	80062b8 <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800153e:	f000 fbcb 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200003bc 	.word	0x200003bc
 800154c:	40004400 	.word	0x40004400

08001550 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <MX_USART6_UART_Init+0x50>)
 8001558:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_USART6_UART_Init+0x4c>)
 8001588:	f004 fe96 	bl	80062b8 <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001592:	f000 fba1 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000404 	.word	0x20000404
 80015a0:	40011400 	.word	0x40011400

080015a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <MX_DMA_Init+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a1e      	ldr	r2, [pc, #120]	@ (800162c <MX_DMA_Init+0x88>)
 80015b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <MX_DMA_Init+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <MX_DMA_Init+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <MX_DMA_Init+0x88>)
 80015d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <MX_DMA_Init+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2010      	movs	r0, #16
 80015e8:	f001 fe29 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015ec:	2010      	movs	r0, #16
 80015ee:	f001 fe42 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2011      	movs	r0, #17
 80015f8:	f001 fe21 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015fc:	2011      	movs	r0, #17
 80015fe:	f001 fe3a 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2045      	movs	r0, #69	@ 0x45
 8001608:	f001 fe19 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800160c:	2045      	movs	r0, #69	@ 0x45
 800160e:	f001 fe32 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2046      	movs	r0, #70	@ 0x46
 8001618:	f001 fe11 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800161c:	2046      	movs	r0, #70	@ 0x46
 800161e:	f001 fe2a 	bl	8003276 <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <MX_GPIO_Init+0x4c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <MX_GPIO_Init+0x4c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <MX_GPIO_Init+0x4c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_GPIO_Init+0x4c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <MX_GPIO_Init+0x4c>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_GPIO_Init+0x4c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <Read_Pressure_Data>:

/* USER CODE BEGIN 4 */
void Read_Pressure_Data(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < NUM_SENSORS; i++) {
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e04a      	b.n	800172e <Read_Pressure_Data+0xae>
        // ADC 채널을 각 센서 핀에 맞게 설정 (IN0, IN1, IN4, IN5)
        switch(i) {
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d816      	bhi.n	80016cc <Read_Pressure_Data+0x4c>
 800169e:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <Read_Pressure_Data+0x24>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016b5 	.word	0x080016b5
 80016a8:	080016bb 	.word	0x080016bb
 80016ac:	080016c1 	.word	0x080016c1
 80016b0:	080016c7 	.word	0x080016c7
            case 0: sConfig.Channel = ADC_CHANNEL_0; break; // IN0
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	e008      	b.n	80016cc <Read_Pressure_Data+0x4c>
            case 1: sConfig.Channel = ADC_CHANNEL_1; break; // IN1
 80016ba:	2301      	movs	r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	e005      	b.n	80016cc <Read_Pressure_Data+0x4c>
            case 2: sConfig.Channel = ADC_CHANNEL_4; break; // IN4
 80016c0:	2304      	movs	r3, #4
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	e002      	b.n	80016cc <Read_Pressure_Data+0x4c>
            case 3: sConfig.Channel = ADC_CHANNEL_5; break; // IN5
 80016c6:	2305      	movs	r3, #5
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	bf00      	nop
        }

        sConfig.Rank = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
        sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80016d0:	2301      	movs	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4819      	ldr	r0, [pc, #100]	@ (8001740 <Read_Pressure_Data+0xc0>)
 80016da:	f001 faad 	bl	8002c38 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <Read_Pressure_Data+0x68>
            Error_Handler();
 80016e4:	f000 faf8 	bl	8001cd8 <Error_Handler>
        }

        if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 80016e8:	4815      	ldr	r0, [pc, #84]	@ (8001740 <Read_Pressure_Data+0xc0>)
 80016ea:	f000 fff7 	bl	80026dc <HAL_ADC_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d117      	bne.n	8001724 <Read_Pressure_Data+0xa4>
            if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016f8:	4811      	ldr	r0, [pc, #68]	@ (8001740 <Read_Pressure_Data+0xc0>)
 80016fa:	f001 f8d6 	bl	80028aa <HAL_ADC_PollForConversion>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <Read_Pressure_Data+0x98>

            	sensorValues[i] = HAL_ADC_GetValue(&hadc1);
 8001704:	480e      	ldr	r0, [pc, #56]	@ (8001740 <Read_Pressure_Data+0xc0>)
 8001706:	f001 fa6b 	bl	8002be0 <HAL_ADC_GetValue>
 800170a:	4603      	mov	r3, r0
 800170c:	b299      	uxth	r1, r3
 800170e:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <Read_Pressure_Data+0xc4>)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001716:	e001      	b.n	800171c <Read_Pressure_Data+0x9c>
            } else {
                Error_Handler();
 8001718:	f000 fade 	bl	8001cd8 <Error_Handler>
            }
            HAL_ADC_Stop(&hadc1);
 800171c:	4808      	ldr	r0, [pc, #32]	@ (8001740 <Read_Pressure_Data+0xc0>)
 800171e:	f001 f891 	bl	8002844 <HAL_ADC_Stop>
 8001722:	e001      	b.n	8001728 <Read_Pressure_Data+0xa8>
        } else {
            Error_Handler();
 8001724:	f000 fad8 	bl	8001cd8 <Error_Handler>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b03      	cmp	r3, #3
 8001732:	ddb1      	ble.n	8001698 <Read_Pressure_Data+0x18>
        }
    }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002e4 	.word	0x200002e4
 8001744:	2000068c 	.word	0x2000068c

08001748 <get_IMU1>:

void get_IMU1()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart1, IMU1array, 50);  // 수신 데이터 크기 확장
 800174e:	2232      	movs	r2, #50	@ 0x32
 8001750:	499b      	ldr	r1, [pc, #620]	@ (80019c0 <get_IMU1+0x278>)
 8001752:	489c      	ldr	r0, [pc, #624]	@ (80019c4 <get_IMU1+0x27c>)
 8001754:	f004 fe00 	bl	8006358 <HAL_UART_Receive_DMA>
    int cnt0 = 0, pos = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 50; i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	e0c1      	b.n	80018ea <get_IMU1+0x1a2>
        if (IMU1array[i] == ',') {
 8001766:	4a96      	ldr	r2, [pc, #600]	@ (80019c0 <get_IMU1+0x278>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001770:	f040 80b8 	bne.w	80018e4 <get_IMU1+0x19c>
            switch (cnt0++) {
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60fa      	str	r2, [r7, #12]
 800177a:	2b08      	cmp	r3, #8
 800177c:	f200 80af 	bhi.w	80018de <get_IMU1+0x196>
 8001780:	a201      	add	r2, pc, #4	@ (adr r2, 8001788 <get_IMU1+0x40>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	080017ad 	.word	0x080017ad
 800178c:	080017cf 	.word	0x080017cf
 8001790:	080017f1 	.word	0x080017f1
 8001794:	08001813 	.word	0x08001813
 8001798:	08001835 	.word	0x08001835
 800179c:	08001857 	.word	0x08001857
 80017a0:	08001879 	.word	0x08001879
 80017a4:	0800189b 	.word	0x0800189b
 80017a8:	080018bd 	.word	0x080018bd
                case 0: strncpy(alpha1, (char *)IMU1array + pos, i - pos); alpha1[i - pos] = '\0'; break;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4a84      	ldr	r2, [pc, #528]	@ (80019c0 <get_IMU1+0x278>)
 80017b0:	1899      	adds	r1, r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4883      	ldr	r0, [pc, #524]	@ (80019c8 <get_IMU1+0x280>)
 80017bc:	f00b fc7d 	bl	800d0ba <strncpy>
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	4a80      	ldr	r2, [pc, #512]	@ (80019c8 <get_IMU1+0x280>)
 80017c8:	2100      	movs	r1, #0
 80017ca:	54d1      	strb	r1, [r2, r3]
 80017cc:	e087      	b.n	80018de <get_IMU1+0x196>
                case 1: strncpy(beta1, (char *)IMU1array + pos, i - pos); beta1[i - pos] = '\0'; break;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4a7b      	ldr	r2, [pc, #492]	@ (80019c0 <get_IMU1+0x278>)
 80017d2:	1899      	adds	r1, r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	487b      	ldr	r0, [pc, #492]	@ (80019cc <get_IMU1+0x284>)
 80017de:	f00b fc6c 	bl	800d0ba <strncpy>
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a78      	ldr	r2, [pc, #480]	@ (80019cc <get_IMU1+0x284>)
 80017ea:	2100      	movs	r1, #0
 80017ec:	54d1      	strb	r1, [r2, r3]
 80017ee:	e076      	b.n	80018de <get_IMU1+0x196>
                case 2: strncpy(gamm1, (char *)IMU1array + pos, i - pos); gamm1[i - pos] = '\0'; break;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4a73      	ldr	r2, [pc, #460]	@ (80019c0 <get_IMU1+0x278>)
 80017f4:	1899      	adds	r1, r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4874      	ldr	r0, [pc, #464]	@ (80019d0 <get_IMU1+0x288>)
 8001800:	f00b fc5b 	bl	800d0ba <strncpy>
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	4a71      	ldr	r2, [pc, #452]	@ (80019d0 <get_IMU1+0x288>)
 800180c:	2100      	movs	r1, #0
 800180e:	54d1      	strb	r1, [r2, r3]
 8001810:	e065      	b.n	80018de <get_IMU1+0x196>
                case 3: strncpy(gyro_x1_str, (char *)IMU1array + pos, i - pos); gyro_x1_str[i - pos] = '\0'; break;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	4a6a      	ldr	r2, [pc, #424]	@ (80019c0 <get_IMU1+0x278>)
 8001816:	1899      	adds	r1, r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	461a      	mov	r2, r3
 8001820:	486c      	ldr	r0, [pc, #432]	@ (80019d4 <get_IMU1+0x28c>)
 8001822:	f00b fc4a 	bl	800d0ba <strncpy>
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a69      	ldr	r2, [pc, #420]	@ (80019d4 <get_IMU1+0x28c>)
 800182e:	2100      	movs	r1, #0
 8001830:	54d1      	strb	r1, [r2, r3]
 8001832:	e054      	b.n	80018de <get_IMU1+0x196>
                case 4: strncpy(gyro_y1_str, (char *)IMU1array + pos, i - pos); gyro_y1_str[i - pos] = '\0'; break;
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4a62      	ldr	r2, [pc, #392]	@ (80019c0 <get_IMU1+0x278>)
 8001838:	1899      	adds	r1, r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4865      	ldr	r0, [pc, #404]	@ (80019d8 <get_IMU1+0x290>)
 8001844:	f00b fc39 	bl	800d0ba <strncpy>
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4a62      	ldr	r2, [pc, #392]	@ (80019d8 <get_IMU1+0x290>)
 8001850:	2100      	movs	r1, #0
 8001852:	54d1      	strb	r1, [r2, r3]
 8001854:	e043      	b.n	80018de <get_IMU1+0x196>
                case 5: strncpy(gyro_z1_str, (char *)IMU1array + pos, i - pos); gyro_z1_str[i - pos] = '\0'; break;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4a59      	ldr	r2, [pc, #356]	@ (80019c0 <get_IMU1+0x278>)
 800185a:	1899      	adds	r1, r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	461a      	mov	r2, r3
 8001864:	485d      	ldr	r0, [pc, #372]	@ (80019dc <get_IMU1+0x294>)
 8001866:	f00b fc28 	bl	800d0ba <strncpy>
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	4a5a      	ldr	r2, [pc, #360]	@ (80019dc <get_IMU1+0x294>)
 8001872:	2100      	movs	r1, #0
 8001874:	54d1      	strb	r1, [r2, r3]
 8001876:	e032      	b.n	80018de <get_IMU1+0x196>
                case 6: strncpy(accel_x1_str, (char *)IMU1array + pos, i - pos); accel_x1_str[i - pos] = '\0'; break;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4a51      	ldr	r2, [pc, #324]	@ (80019c0 <get_IMU1+0x278>)
 800187c:	1899      	adds	r1, r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	461a      	mov	r2, r3
 8001886:	4856      	ldr	r0, [pc, #344]	@ (80019e0 <get_IMU1+0x298>)
 8001888:	f00b fc17 	bl	800d0ba <strncpy>
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	4a53      	ldr	r2, [pc, #332]	@ (80019e0 <get_IMU1+0x298>)
 8001894:	2100      	movs	r1, #0
 8001896:	54d1      	strb	r1, [r2, r3]
 8001898:	e021      	b.n	80018de <get_IMU1+0x196>
                case 7: strncpy(accel_y1_str, (char *)IMU1array + pos, i - pos); accel_y1_str[i - pos] = '\0'; break;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	4a48      	ldr	r2, [pc, #288]	@ (80019c0 <get_IMU1+0x278>)
 800189e:	1899      	adds	r1, r3, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	484e      	ldr	r0, [pc, #312]	@ (80019e4 <get_IMU1+0x29c>)
 80018aa:	f00b fc06 	bl	800d0ba <strncpy>
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	4a4b      	ldr	r2, [pc, #300]	@ (80019e4 <get_IMU1+0x29c>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	54d1      	strb	r1, [r2, r3]
 80018ba:	e010      	b.n	80018de <get_IMU1+0x196>
                case 8: strncpy(accel_z1_str, (char *)IMU1array + pos, i - pos); accel_z1_str[i - pos] = '\0'; break;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4a40      	ldr	r2, [pc, #256]	@ (80019c0 <get_IMU1+0x278>)
 80018c0:	1899      	adds	r1, r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	4847      	ldr	r0, [pc, #284]	@ (80019e8 <get_IMU1+0x2a0>)
 80018cc:	f00b fbf5 	bl	800d0ba <strncpy>
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	4a44      	ldr	r2, [pc, #272]	@ (80019e8 <get_IMU1+0x2a0>)
 80018d8:	2100      	movs	r1, #0
 80018da:	54d1      	strb	r1, [r2, r3]
 80018dc:	bf00      	nop
            }
            pos = i + 1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 50; i++) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b31      	cmp	r3, #49	@ 0x31
 80018ee:	f77f af3a 	ble.w	8001766 <get_IMU1+0x1e>
        }
    }
    roll1 = strtod(alpha1, NULL);
 80018f2:	2100      	movs	r1, #0
 80018f4:	4834      	ldr	r0, [pc, #208]	@ (80019c8 <get_IMU1+0x280>)
 80018f6:	f00a fc29 	bl	800c14c <strtod>
 80018fa:	eeb0 7a40 	vmov.f32	s14, s0
 80018fe:	eef0 7a60 	vmov.f32	s15, s1
 8001902:	4b3a      	ldr	r3, [pc, #232]	@ (80019ec <get_IMU1+0x2a4>)
 8001904:	ed83 7b00 	vstr	d7, [r3]
    pitch1 = strtod(beta1, NULL);
 8001908:	2100      	movs	r1, #0
 800190a:	4830      	ldr	r0, [pc, #192]	@ (80019cc <get_IMU1+0x284>)
 800190c:	f00a fc1e 	bl	800c14c <strtod>
 8001910:	eeb0 7a40 	vmov.f32	s14, s0
 8001914:	eef0 7a60 	vmov.f32	s15, s1
 8001918:	4b35      	ldr	r3, [pc, #212]	@ (80019f0 <get_IMU1+0x2a8>)
 800191a:	ed83 7b00 	vstr	d7, [r3]
    yaw1 = strtod(gamm1, NULL);
 800191e:	2100      	movs	r1, #0
 8001920:	482b      	ldr	r0, [pc, #172]	@ (80019d0 <get_IMU1+0x288>)
 8001922:	f00a fc13 	bl	800c14c <strtod>
 8001926:	eeb0 7a40 	vmov.f32	s14, s0
 800192a:	eef0 7a60 	vmov.f32	s15, s1
 800192e:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <get_IMU1+0x2ac>)
 8001930:	ed83 7b00 	vstr	d7, [r3]
    gyro_x1 = strtod(gyro_x1_str, NULL);
 8001934:	2100      	movs	r1, #0
 8001936:	4827      	ldr	r0, [pc, #156]	@ (80019d4 <get_IMU1+0x28c>)
 8001938:	f00a fc08 	bl	800c14c <strtod>
 800193c:	eeb0 7a40 	vmov.f32	s14, s0
 8001940:	eef0 7a60 	vmov.f32	s15, s1
 8001944:	4b2c      	ldr	r3, [pc, #176]	@ (80019f8 <get_IMU1+0x2b0>)
 8001946:	ed83 7b00 	vstr	d7, [r3]
    gyro_y1 = strtod(gyro_y1_str, NULL);
 800194a:	2100      	movs	r1, #0
 800194c:	4822      	ldr	r0, [pc, #136]	@ (80019d8 <get_IMU1+0x290>)
 800194e:	f00a fbfd 	bl	800c14c <strtod>
 8001952:	eeb0 7a40 	vmov.f32	s14, s0
 8001956:	eef0 7a60 	vmov.f32	s15, s1
 800195a:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <get_IMU1+0x2b4>)
 800195c:	ed83 7b00 	vstr	d7, [r3]
    gyro_z1 = strtod(gyro_z1_str, NULL);
 8001960:	2100      	movs	r1, #0
 8001962:	481e      	ldr	r0, [pc, #120]	@ (80019dc <get_IMU1+0x294>)
 8001964:	f00a fbf2 	bl	800c14c <strtod>
 8001968:	eeb0 7a40 	vmov.f32	s14, s0
 800196c:	eef0 7a60 	vmov.f32	s15, s1
 8001970:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <get_IMU1+0x2b8>)
 8001972:	ed83 7b00 	vstr	d7, [r3]
    accel_x1 = strtod(accel_x1_str, NULL);
 8001976:	2100      	movs	r1, #0
 8001978:	4819      	ldr	r0, [pc, #100]	@ (80019e0 <get_IMU1+0x298>)
 800197a:	f00a fbe7 	bl	800c14c <strtod>
 800197e:	eeb0 7a40 	vmov.f32	s14, s0
 8001982:	eef0 7a60 	vmov.f32	s15, s1
 8001986:	4b1f      	ldr	r3, [pc, #124]	@ (8001a04 <get_IMU1+0x2bc>)
 8001988:	ed83 7b00 	vstr	d7, [r3]
    accel_y1 = strtod(accel_y1_str, NULL);
 800198c:	2100      	movs	r1, #0
 800198e:	4815      	ldr	r0, [pc, #84]	@ (80019e4 <get_IMU1+0x29c>)
 8001990:	f00a fbdc 	bl	800c14c <strtod>
 8001994:	eeb0 7a40 	vmov.f32	s14, s0
 8001998:	eef0 7a60 	vmov.f32	s15, s1
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <get_IMU1+0x2c0>)
 800199e:	ed83 7b00 	vstr	d7, [r3]
    accel_z1 = strtod(accel_z1_str, NULL);
 80019a2:	2100      	movs	r1, #0
 80019a4:	4810      	ldr	r0, [pc, #64]	@ (80019e8 <get_IMU1+0x2a0>)
 80019a6:	f00a fbd1 	bl	800c14c <strtod>
 80019aa:	eeb0 7a40 	vmov.f32	s14, s0
 80019ae:	eef0 7a60 	vmov.f32	s15, s1
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <get_IMU1+0x2c4>)
 80019b4:	ed83 7b00 	vstr	d7, [r3]
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000730 	.word	0x20000730
 80019c4:	20000374 	.word	0x20000374
 80019c8:	200007e0 	.word	0x200007e0
 80019cc:	200007ec 	.word	0x200007ec
 80019d0:	200007f8 	.word	0x200007f8
 80019d4:	20000804 	.word	0x20000804
 80019d8:	20000810 	.word	0x20000810
 80019dc:	2000081c 	.word	0x2000081c
 80019e0:	20000828 	.word	0x20000828
 80019e4:	20000834 	.word	0x20000834
 80019e8:	20000840 	.word	0x20000840
 80019ec:	20000798 	.word	0x20000798
 80019f0:	200007a0 	.word	0x200007a0
 80019f4:	200007a8 	.word	0x200007a8
 80019f8:	200007b0 	.word	0x200007b0
 80019fc:	200007b8 	.word	0x200007b8
 8001a00:	200007c0 	.word	0x200007c0
 8001a04:	200007c8 	.word	0x200007c8
 8001a08:	200007d0 	.word	0x200007d0
 8001a0c:	200007d8 	.word	0x200007d8

08001a10 <get_IMU2>:

void get_IMU2()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart6, IMU2array, 50);
 8001a16:	2232      	movs	r2, #50	@ 0x32
 8001a18:	499b      	ldr	r1, [pc, #620]	@ (8001c88 <get_IMU2+0x278>)
 8001a1a:	489c      	ldr	r0, [pc, #624]	@ (8001c8c <get_IMU2+0x27c>)
 8001a1c:	f004 fc9c 	bl	8006358 <HAL_UART_Receive_DMA>
    int cnt0 = 0, pos = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 50; i++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	e0c1      	b.n	8001bb2 <get_IMU2+0x1a2>
        if (IMU2array[i] == ',') {
 8001a2e:	4a96      	ldr	r2, [pc, #600]	@ (8001c88 <get_IMU2+0x278>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a38:	f040 80b8 	bne.w	8001bac <get_IMU2+0x19c>
            switch (cnt0++) {
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60fa      	str	r2, [r7, #12]
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	f200 80af 	bhi.w	8001ba6 <get_IMU2+0x196>
 8001a48:	a201      	add	r2, pc, #4	@ (adr r2, 8001a50 <get_IMU2+0x40>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a75 	.word	0x08001a75
 8001a54:	08001a97 	.word	0x08001a97
 8001a58:	08001ab9 	.word	0x08001ab9
 8001a5c:	08001adb 	.word	0x08001adb
 8001a60:	08001afd 	.word	0x08001afd
 8001a64:	08001b1f 	.word	0x08001b1f
 8001a68:	08001b41 	.word	0x08001b41
 8001a6c:	08001b63 	.word	0x08001b63
 8001a70:	08001b85 	.word	0x08001b85
                case 0: strncpy(alpha2, (char *)IMU2array + pos, i - pos); alpha2[i - pos] = '\0'; break;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4a84      	ldr	r2, [pc, #528]	@ (8001c88 <get_IMU2+0x278>)
 8001a78:	1899      	adds	r1, r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	4883      	ldr	r0, [pc, #524]	@ (8001c90 <get_IMU2+0x280>)
 8001a84:	f00b fb19 	bl	800d0ba <strncpy>
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	4a80      	ldr	r2, [pc, #512]	@ (8001c90 <get_IMU2+0x280>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	54d1      	strb	r1, [r2, r3]
 8001a94:	e087      	b.n	8001ba6 <get_IMU2+0x196>
                case 1: strncpy(beta2, (char *)IMU2array + pos, i - pos); beta2[i - pos] = '\0'; break;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4a7b      	ldr	r2, [pc, #492]	@ (8001c88 <get_IMU2+0x278>)
 8001a9a:	1899      	adds	r1, r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	487b      	ldr	r0, [pc, #492]	@ (8001c94 <get_IMU2+0x284>)
 8001aa6:	f00b fb08 	bl	800d0ba <strncpy>
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a78      	ldr	r2, [pc, #480]	@ (8001c94 <get_IMU2+0x284>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	54d1      	strb	r1, [r2, r3]
 8001ab6:	e076      	b.n	8001ba6 <get_IMU2+0x196>
                case 2: strncpy(gamm2, (char *)IMU2array + pos, i - pos); gamm2[i - pos] = '\0'; break;
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4a73      	ldr	r2, [pc, #460]	@ (8001c88 <get_IMU2+0x278>)
 8001abc:	1899      	adds	r1, r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4874      	ldr	r0, [pc, #464]	@ (8001c98 <get_IMU2+0x288>)
 8001ac8:	f00b faf7 	bl	800d0ba <strncpy>
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	4a71      	ldr	r2, [pc, #452]	@ (8001c98 <get_IMU2+0x288>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	54d1      	strb	r1, [r2, r3]
 8001ad8:	e065      	b.n	8001ba6 <get_IMU2+0x196>
                case 3: strncpy(gyro_x2_str, (char *)IMU2array + pos, i - pos); gyro_x2_str[i - pos] = '\0'; break;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4a6a      	ldr	r2, [pc, #424]	@ (8001c88 <get_IMU2+0x278>)
 8001ade:	1899      	adds	r1, r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	486c      	ldr	r0, [pc, #432]	@ (8001c9c <get_IMU2+0x28c>)
 8001aea:	f00b fae6 	bl	800d0ba <strncpy>
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a69      	ldr	r2, [pc, #420]	@ (8001c9c <get_IMU2+0x28c>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	54d1      	strb	r1, [r2, r3]
 8001afa:	e054      	b.n	8001ba6 <get_IMU2+0x196>
                case 4: strncpy(gyro_y2_str, (char *)IMU2array + pos, i - pos); gyro_y2_str[i - pos] = '\0'; break;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4a62      	ldr	r2, [pc, #392]	@ (8001c88 <get_IMU2+0x278>)
 8001b00:	1899      	adds	r1, r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4865      	ldr	r0, [pc, #404]	@ (8001ca0 <get_IMU2+0x290>)
 8001b0c:	f00b fad5 	bl	800d0ba <strncpy>
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	4a62      	ldr	r2, [pc, #392]	@ (8001ca0 <get_IMU2+0x290>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	54d1      	strb	r1, [r2, r3]
 8001b1c:	e043      	b.n	8001ba6 <get_IMU2+0x196>
                case 5: strncpy(gyro_z2_str, (char *)(char *)IMU2array + pos, i - pos); gyro_z2_str[i - pos] = '\0'; break;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4a59      	ldr	r2, [pc, #356]	@ (8001c88 <get_IMU2+0x278>)
 8001b22:	1899      	adds	r1, r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	485d      	ldr	r0, [pc, #372]	@ (8001ca4 <get_IMU2+0x294>)
 8001b2e:	f00b fac4 	bl	800d0ba <strncpy>
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca4 <get_IMU2+0x294>)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	54d1      	strb	r1, [r2, r3]
 8001b3e:	e032      	b.n	8001ba6 <get_IMU2+0x196>
                case 6: strncpy(accel_x2_str, (char *)IMU2array + pos, i - pos); accel_x2_str[i - pos] = '\0'; break;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4a51      	ldr	r2, [pc, #324]	@ (8001c88 <get_IMU2+0x278>)
 8001b44:	1899      	adds	r1, r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4856      	ldr	r0, [pc, #344]	@ (8001ca8 <get_IMU2+0x298>)
 8001b50:	f00b fab3 	bl	800d0ba <strncpy>
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4a53      	ldr	r2, [pc, #332]	@ (8001ca8 <get_IMU2+0x298>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	54d1      	strb	r1, [r2, r3]
 8001b60:	e021      	b.n	8001ba6 <get_IMU2+0x196>
                case 7: strncpy(accel_y2_str, (char *)IMU2array + pos, i - pos); accel_y2_str[i - pos] = '\0'; break;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4a48      	ldr	r2, [pc, #288]	@ (8001c88 <get_IMU2+0x278>)
 8001b66:	1899      	adds	r1, r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	484e      	ldr	r0, [pc, #312]	@ (8001cac <get_IMU2+0x29c>)
 8001b72:	f00b faa2 	bl	800d0ba <strncpy>
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8001cac <get_IMU2+0x29c>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	54d1      	strb	r1, [r2, r3]
 8001b82:	e010      	b.n	8001ba6 <get_IMU2+0x196>
                case 8: strncpy(accel_z2_str, (char *)IMU2array + pos, i - pos); accel_z2_str[i - pos] = '\0'; break;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4a40      	ldr	r2, [pc, #256]	@ (8001c88 <get_IMU2+0x278>)
 8001b88:	1899      	adds	r1, r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4847      	ldr	r0, [pc, #284]	@ (8001cb0 <get_IMU2+0x2a0>)
 8001b94:	f00b fa91 	bl	800d0ba <strncpy>
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4a44      	ldr	r2, [pc, #272]	@ (8001cb0 <get_IMU2+0x2a0>)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	54d1      	strb	r1, [r2, r3]
 8001ba4:	bf00      	nop
            }
            pos = i + 1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 50; i++) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b31      	cmp	r3, #49	@ 0x31
 8001bb6:	f77f af3a 	ble.w	8001a2e <get_IMU2+0x1e>
        }
    }
    roll2 = strtod(alpha2, NULL);
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4834      	ldr	r0, [pc, #208]	@ (8001c90 <get_IMU2+0x280>)
 8001bbe:	f00a fac5 	bl	800c14c <strtod>
 8001bc2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc6:	eef0 7a60 	vmov.f32	s15, s1
 8001bca:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb4 <get_IMU2+0x2a4>)
 8001bcc:	ed83 7b00 	vstr	d7, [r3]
    pitch2 = strtod(beta2, NULL);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4830      	ldr	r0, [pc, #192]	@ (8001c94 <get_IMU2+0x284>)
 8001bd4:	f00a faba 	bl	800c14c <strtod>
 8001bd8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bdc:	eef0 7a60 	vmov.f32	s15, s1
 8001be0:	4b35      	ldr	r3, [pc, #212]	@ (8001cb8 <get_IMU2+0x2a8>)
 8001be2:	ed83 7b00 	vstr	d7, [r3]
    yaw2 = strtod(gamm2, NULL);
 8001be6:	2100      	movs	r1, #0
 8001be8:	482b      	ldr	r0, [pc, #172]	@ (8001c98 <get_IMU2+0x288>)
 8001bea:	f00a faaf 	bl	800c14c <strtod>
 8001bee:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf2:	eef0 7a60 	vmov.f32	s15, s1
 8001bf6:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <get_IMU2+0x2ac>)
 8001bf8:	ed83 7b00 	vstr	d7, [r3]
    gyro_x2 = strtod(gyro_x2_str, NULL);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4827      	ldr	r0, [pc, #156]	@ (8001c9c <get_IMU2+0x28c>)
 8001c00:	f00a faa4 	bl	800c14c <strtod>
 8001c04:	eeb0 7a40 	vmov.f32	s14, s0
 8001c08:	eef0 7a60 	vmov.f32	s15, s1
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc0 <get_IMU2+0x2b0>)
 8001c0e:	ed83 7b00 	vstr	d7, [r3]
    gyro_y2 = strtod(gyro_y2_str, NULL);
 8001c12:	2100      	movs	r1, #0
 8001c14:	4822      	ldr	r0, [pc, #136]	@ (8001ca0 <get_IMU2+0x290>)
 8001c16:	f00a fa99 	bl	800c14c <strtod>
 8001c1a:	eeb0 7a40 	vmov.f32	s14, s0
 8001c1e:	eef0 7a60 	vmov.f32	s15, s1
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <get_IMU2+0x2b4>)
 8001c24:	ed83 7b00 	vstr	d7, [r3]
    gyro_z2 = strtod(gyro_z2_str, NULL);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	481e      	ldr	r0, [pc, #120]	@ (8001ca4 <get_IMU2+0x294>)
 8001c2c:	f00a fa8e 	bl	800c14c <strtod>
 8001c30:	eeb0 7a40 	vmov.f32	s14, s0
 8001c34:	eef0 7a60 	vmov.f32	s15, s1
 8001c38:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <get_IMU2+0x2b8>)
 8001c3a:	ed83 7b00 	vstr	d7, [r3]
    accel_x2 = strtod(accel_x2_str, NULL);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4819      	ldr	r0, [pc, #100]	@ (8001ca8 <get_IMU2+0x298>)
 8001c42:	f00a fa83 	bl	800c14c <strtod>
 8001c46:	eeb0 7a40 	vmov.f32	s14, s0
 8001c4a:	eef0 7a60 	vmov.f32	s15, s1
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <get_IMU2+0x2bc>)
 8001c50:	ed83 7b00 	vstr	d7, [r3]
    accel_y2 = strtod(accel_y2_str, NULL);
 8001c54:	2100      	movs	r1, #0
 8001c56:	4815      	ldr	r0, [pc, #84]	@ (8001cac <get_IMU2+0x29c>)
 8001c58:	f00a fa78 	bl	800c14c <strtod>
 8001c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c60:	eef0 7a60 	vmov.f32	s15, s1
 8001c64:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <get_IMU2+0x2c0>)
 8001c66:	ed83 7b00 	vstr	d7, [r3]
    accel_z2 = strtod(accel_z2_str, NULL);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4810      	ldr	r0, [pc, #64]	@ (8001cb0 <get_IMU2+0x2a0>)
 8001c6e:	f00a fa6d 	bl	800c14c <strtod>
 8001c72:	eeb0 7a40 	vmov.f32	s14, s0
 8001c76:	eef0 7a60 	vmov.f32	s15, s1
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <get_IMU2+0x2c4>)
 8001c7c:	ed83 7b00 	vstr	d7, [r3]
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000764 	.word	0x20000764
 8001c8c:	20000404 	.word	0x20000404
 8001c90:	20000898 	.word	0x20000898
 8001c94:	200008a4 	.word	0x200008a4
 8001c98:	200008b0 	.word	0x200008b0
 8001c9c:	200008bc 	.word	0x200008bc
 8001ca0:	200008c8 	.word	0x200008c8
 8001ca4:	200008d4 	.word	0x200008d4
 8001ca8:	200008e0 	.word	0x200008e0
 8001cac:	200008ec 	.word	0x200008ec
 8001cb0:	200008f8 	.word	0x200008f8
 8001cb4:	20000850 	.word	0x20000850
 8001cb8:	20000858 	.word	0x20000858
 8001cbc:	20000860 	.word	0x20000860
 8001cc0:	20000868 	.word	0x20000868
 8001cc4:	20000870 	.word	0x20000870
 8001cc8:	20000878 	.word	0x20000878
 8001ccc:	20000880 	.word	0x20000880
 8001cd0:	20000888 	.word	0x20000888
 8001cd4:	20000890 	.word	0x20000890

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <Error_Handler+0x8>

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_MspInit+0x4c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d30 <HAL_MspInit+0x4c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <HAL_MspInit+0x4c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <HAL_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	@ (8001d30 <HAL_MspInit+0x4c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_MspInit+0x4c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <HAL_ADC_MspInit+0x7c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d127      	bne.n	8001da6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <HAL_ADC_MspInit+0x80>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a15      	ldr	r2, [pc, #84]	@ (8001db4 <HAL_ADC_MspInit+0x80>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <HAL_ADC_MspInit+0x80>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <HAL_ADC_MspInit+0x80>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001db4 <HAL_ADC_MspInit+0x80>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <HAL_ADC_MspInit+0x80>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d8e:	2333      	movs	r3, #51	@ 0x33
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d92:	2303      	movs	r3, #3
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <HAL_ADC_MspInit+0x84>)
 8001da2:	f001 fe85 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	@ 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40012000 	.word	0x40012000
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001df8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10d      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <HAL_TIM_Base_MspInit+0x40>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	4a09      	ldr	r2, [pc, #36]	@ (8001dfc <HAL_TIM_Base_MspInit+0x40>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dde:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <HAL_TIM_Base_MspInit+0x40>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40014000 	.word	0x40014000
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	@ 0x38
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a90      	ldr	r2, [pc, #576]	@ (8002060 <HAL_UART_MspInit+0x260>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	f040 808c 	bne.w	8001f3c <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	4b8e      	ldr	r3, [pc, #568]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2c:	4a8d      	ldr	r2, [pc, #564]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001e2e:	f043 0310 	orr.w	r3, r3, #16
 8001e32:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e34:	4b8b      	ldr	r3, [pc, #556]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	623b      	str	r3, [r7, #32]
 8001e3e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	4b87      	ldr	r3, [pc, #540]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	4a86      	ldr	r2, [pc, #536]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e50:	4b84      	ldr	r3, [pc, #528]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e5c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e6e:	2307      	movs	r3, #7
 8001e70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	487b      	ldr	r0, [pc, #492]	@ (8002068 <HAL_UART_MspInit+0x268>)
 8001e7a:	f001 fe19 	bl	8003ab0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e7e:	4b7b      	ldr	r3, [pc, #492]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001e80:	4a7b      	ldr	r2, [pc, #492]	@ (8002070 <HAL_UART_MspInit+0x270>)
 8001e82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e84:	4b79      	ldr	r3, [pc, #484]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001e86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8c:	4b77      	ldr	r3, [pc, #476]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e92:	4b76      	ldr	r3, [pc, #472]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e98:	4b74      	ldr	r3, [pc, #464]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea0:	4b72      	ldr	r3, [pc, #456]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea6:	4b71      	ldr	r3, [pc, #452]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001eac:	4b6f      	ldr	r3, [pc, #444]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001eae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eb2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb4:	4b6d      	ldr	r3, [pc, #436]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eba:	4b6c      	ldr	r3, [pc, #432]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ec0:	486a      	ldr	r0, [pc, #424]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001ec2:	f001 f9f3 	bl	80032ac <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001ecc:	f7ff ff04 	bl	8001cd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a66      	ldr	r2, [pc, #408]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001ed4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ed6:	4a65      	ldr	r2, [pc, #404]	@ (800206c <HAL_UART_MspInit+0x26c>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001edc:	4b65      	ldr	r3, [pc, #404]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001ede:	4a66      	ldr	r2, [pc, #408]	@ (8002078 <HAL_UART_MspInit+0x278>)
 8001ee0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001ee2:	4b64      	ldr	r3, [pc, #400]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001ee4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eea:	4b62      	ldr	r3, [pc, #392]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001eec:	2240      	movs	r2, #64	@ 0x40
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef0:	4b60      	ldr	r3, [pc, #384]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001efe:	4b5d      	ldr	r3, [pc, #372]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f04:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f10:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f12:	4b58      	ldr	r3, [pc, #352]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f18:	4b56      	ldr	r3, [pc, #344]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f1e:	4855      	ldr	r0, [pc, #340]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001f20:	f001 f9c4 	bl	80032ac <HAL_DMA_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001f2a:	f7ff fed5 	bl	8001cd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a50      	ldr	r2, [pc, #320]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001f32:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f34:	4a4f      	ldr	r2, [pc, #316]	@ (8002074 <HAL_UART_MspInit+0x274>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f3a:	e139      	b.n	80021b0 <HAL_UART_MspInit+0x3b0>
  else if(huart->Instance==USART2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	@ (800207c <HAL_UART_MspInit+0x27c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f040 80a4 	bne.w	8002090 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	4b45      	ldr	r3, [pc, #276]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	4a44      	ldr	r2, [pc, #272]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f58:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f74:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <HAL_UART_MspInit+0x264>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f80:	230c      	movs	r3, #12
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f90:	2307      	movs	r3, #7
 8001f92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4833      	ldr	r0, [pc, #204]	@ (8002068 <HAL_UART_MspInit+0x268>)
 8001f9c:	f001 fd88 	bl	8003ab0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001fa0:	4b37      	ldr	r3, [pc, #220]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fa2:	4a38      	ldr	r2, [pc, #224]	@ (8002084 <HAL_UART_MspInit+0x284>)
 8001fa4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001fa6:	4b36      	ldr	r3, [pc, #216]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fa8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fae:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb4:	4b32      	ldr	r3, [pc, #200]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fba:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001fce:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fd4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fdc:	4b28      	ldr	r3, [pc, #160]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fe2:	4827      	ldr	r0, [pc, #156]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001fe4:	f001 f962 	bl	80032ac <HAL_DMA_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8001fee:	f7ff fe73 	bl	8001cd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a22      	ldr	r2, [pc, #136]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ff8:	4a21      	ldr	r2, [pc, #132]	@ (8002080 <HAL_UART_MspInit+0x280>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001ffe:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002000:	4a22      	ldr	r2, [pc, #136]	@ (800208c <HAL_UART_MspInit+0x28c>)
 8002002:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002004:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002006:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800200a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_UART_MspInit+0x288>)
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002012:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <HAL_UART_MspInit+0x288>)
 800201a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800201e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002020:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002022:	2200      	movs	r2, #0
 8002024:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002026:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800202c:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <HAL_UART_MspInit+0x288>)
 800202e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002032:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002034:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800203a:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_UART_MspInit+0x288>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002040:	4811      	ldr	r0, [pc, #68]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002042:	f001 f933 	bl	80032ac <HAL_DMA_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_MspInit+0x250>
      Error_Handler();
 800204c:	f7ff fe44 	bl	8001cd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002054:	639a      	str	r2, [r3, #56]	@ 0x38
 8002056:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <HAL_UART_MspInit+0x288>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800205c:	e0a8      	b.n	80021b0 <HAL_UART_MspInit+0x3b0>
 800205e:	bf00      	nop
 8002060:	40011000 	.word	0x40011000
 8002064:	40023800 	.word	0x40023800
 8002068:	40020000 	.word	0x40020000
 800206c:	2000044c 	.word	0x2000044c
 8002070:	40026440 	.word	0x40026440
 8002074:	200004ac 	.word	0x200004ac
 8002078:	400264b8 	.word	0x400264b8
 800207c:	40004400 	.word	0x40004400
 8002080:	2000050c 	.word	0x2000050c
 8002084:	40026088 	.word	0x40026088
 8002088:	2000056c 	.word	0x2000056c
 800208c:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART6)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a48      	ldr	r2, [pc, #288]	@ (80021b8 <HAL_UART_MspInit+0x3b8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	f040 808a 	bne.w	80021b0 <HAL_UART_MspInit+0x3b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <HAL_UART_MspInit+0x3bc>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	4a45      	ldr	r2, [pc, #276]	@ (80021bc <HAL_UART_MspInit+0x3bc>)
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ac:	4b43      	ldr	r3, [pc, #268]	@ (80021bc <HAL_UART_MspInit+0x3bc>)
 80020ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4b3f      	ldr	r3, [pc, #252]	@ (80021bc <HAL_UART_MspInit+0x3bc>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <HAL_UART_MspInit+0x3bc>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c8:	4b3c      	ldr	r3, [pc, #240]	@ (80021bc <HAL_UART_MspInit+0x3bc>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d4:	23c0      	movs	r3, #192	@ 0xc0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020e4:	2308      	movs	r3, #8
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	4834      	ldr	r0, [pc, #208]	@ (80021c0 <HAL_UART_MspInit+0x3c0>)
 80020f0:	f001 fcde 	bl	8003ab0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80020f4:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 80020f6:	4a34      	ldr	r2, [pc, #208]	@ (80021c8 <HAL_UART_MspInit+0x3c8>)
 80020f8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80020fa:	4b32      	ldr	r3, [pc, #200]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 80020fc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002100:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002102:	4b30      	ldr	r3, [pc, #192]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002108:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800210e:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 8002110:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002114:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002116:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800211c:	4b29      	ldr	r3, [pc, #164]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002122:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 8002124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002128:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002130:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 8002132:	2200      	movs	r2, #0
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002136:	4823      	ldr	r0, [pc, #140]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 8002138:	f001 f8b8 	bl	80032ac <HAL_DMA_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_UART_MspInit+0x346>
      Error_Handler();
 8002142:	f7ff fdc9 	bl	8001cd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 800214a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800214c:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <HAL_UART_MspInit+0x3c4>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002152:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 8002154:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_UART_MspInit+0x3d0>)
 8002156:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 800215a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800215e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 8002162:	2240      	movs	r2, #64	@ 0x40
 8002164:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002166:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 8002168:	2200      	movs	r2, #0
 800216a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800216c:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 800216e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002172:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002174:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 8002176:	2200      	movs	r2, #0
 8002178:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800217a:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 8002182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002186:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002188:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 800218a:	2200      	movs	r2, #0
 800218c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 8002190:	2200      	movs	r2, #0
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002194:	480d      	ldr	r0, [pc, #52]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 8002196:	f001 f889 	bl	80032ac <HAL_DMA_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 80021a0:	f7ff fd9a 	bl	8001cd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 80021a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80021aa:	4a08      	ldr	r2, [pc, #32]	@ (80021cc <HAL_UART_MspInit+0x3cc>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80021b0:	bf00      	nop
 80021b2:	3738      	adds	r7, #56	@ 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40011400 	.word	0x40011400
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020800 	.word	0x40020800
 80021c4:	200005cc 	.word	0x200005cc
 80021c8:	40026428 	.word	0x40026428
 80021cc:	2000062c 	.word	0x2000062c
 80021d0:	400264a0 	.word	0x400264a0

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <NMI_Handler+0x4>

080021dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <MemManage_Handler+0x4>

080021ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <BusFault_Handler+0x4>

080021f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <UsageFault_Handler+0x4>

080021fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800222a:	f000 f9cf 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <DMA1_Stream5_IRQHandler+0x10>)
 800223a:	f001 f9cf 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000050c 	.word	0x2000050c

08002248 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <DMA1_Stream6_IRQHandler+0x10>)
 800224e:	f001 f9c5 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2000056c 	.word	0x2000056c

0800225c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <ADC_IRQHandler+0x10>)
 8002262:	f000 fbad 	bl	80029c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200002e4 	.word	0x200002e4

08002270 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002276:	f003 fcfb 	bl	8005c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000032c 	.word	0x2000032c

08002284 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <USART1_IRQHandler+0x10>)
 800228a:	f004 f88b 	bl	80063a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000374 	.word	0x20000374

08002298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <USART2_IRQHandler+0x10>)
 800229e:	f004 f881 	bl	80063a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200003bc 	.word	0x200003bc

080022ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <DMA2_Stream1_IRQHandler+0x10>)
 80022b2:	f001 f993 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200005cc 	.word	0x200005cc

080022c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <DMA2_Stream2_IRQHandler+0x10>)
 80022c6:	f001 f989 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000044c 	.word	0x2000044c

080022d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <OTG_FS_IRQHandler+0x10>)
 80022da:	f001 feb1 	bl	8004040 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20001dec 	.word	0x20001dec

080022e8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <DMA2_Stream6_IRQHandler+0x10>)
 80022ee:	f001 f975 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000062c 	.word	0x2000062c

080022fc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <DMA2_Stream7_IRQHandler+0x10>)
 8002302:	f001 f96b 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200004ac 	.word	0x200004ac

08002310 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <USART6_IRQHandler+0x10>)
 8002316:	f004 f845 	bl	80063a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000404 	.word	0x20000404

08002324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return 1;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_kill>:

int _kill(int pid, int sig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800233e:	f00a ff19 	bl	800d174 <__errno>
 8002342:	4603      	mov	r3, r0
 8002344:	2216      	movs	r2, #22
 8002346:	601a      	str	r2, [r3, #0]
  return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_exit>:

void _exit (int status)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800235c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ffe7 	bl	8002334 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002366:	bf00      	nop
 8002368:	e7fd      	b.n	8002366 <_exit+0x12>

0800236a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e00a      	b.n	8002392 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800237c:	f3af 8000 	nop.w
 8002380:	4601      	mov	r1, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	60ba      	str	r2, [r7, #8]
 8002388:	b2ca      	uxtb	r2, r1
 800238a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	dbf0      	blt.n	800237c <_read+0x12>
  }

  return len;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e009      	b.n	80023ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	60ba      	str	r2, [r7, #8]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	dbf1      	blt.n	80023b6 <_write+0x12>
  }
  return len;
 80023d2:	687b      	ldr	r3, [r7, #4]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_close>:

int _close(int file)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002404:	605a      	str	r2, [r3, #4]
  return 0;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <_isatty>:

int _isatty(int file)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800241c:	2301      	movs	r3, #1
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800244c:	4a14      	ldr	r2, [pc, #80]	@ (80024a0 <_sbrk+0x5c>)
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <_sbrk+0x60>)
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002458:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <_sbrk+0x64>)
 8002462:	4a12      	ldr	r2, [pc, #72]	@ (80024ac <_sbrk+0x68>)
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002474:	f00a fe7e 	bl	800d174 <__errno>
 8002478:	4603      	mov	r3, r0
 800247a:	220c      	movs	r2, #12
 800247c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002482:	e009      	b.n	8002498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002484:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248a:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <_sbrk+0x64>)
 8002494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20018000 	.word	0x20018000
 80024a4:	00000400 	.word	0x00000400
 80024a8:	20000904 	.word	0x20000904
 80024ac:	20002640 	.word	0x20002640

080024b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <SystemInit+0x20>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <SystemInit+0x20>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800250c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024d8:	f7ff ffea 	bl	80024b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024dc:	480c      	ldr	r0, [pc, #48]	@ (8002510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024de:	490d      	ldr	r1, [pc, #52]	@ (8002514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002502:	f00a fe3d 	bl	800d180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002506:	f7fe fd75 	bl	8000ff4 <main>
  bx  lr    
 800250a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800250c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002518:	08010110 	.word	0x08010110
  ldr r2, =_sbss
 800251c:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002520:	2000263c 	.word	0x2000263c

08002524 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <DMA1_Stream0_IRQHandler>
	...

08002528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800252c:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0d      	ldr	r2, [pc, #52]	@ (8002568 <HAL_Init+0x40>)
 8002532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <HAL_Init+0x40>)
 800253e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002544:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_Init+0x40>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f000 fe69 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002556:	200f      	movs	r0, #15
 8002558:	f000 f808 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800255c:	f7ff fbc2 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_InitTick+0x54>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_InitTick+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fe81 	bl	8003292 <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025a8:	f000 fe49 	bl	800323e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	@ (80025c8 <HAL_InitTick+0x5c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008
 80025f0:	20000908 	.word	0x20000908

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000908 	.word	0x20000908

0800260c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e033      	b.n	80026d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fb5e 	bl	8001d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800269a:	f023 0302 	bic.w	r3, r3, #2
 800269e:	f043 0202 	orr.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fbe8 	bl	8002e7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c2:	e001      	b.n	80026c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_Start+0x1a>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e097      	b.n	8002826 <HAL_ADC_Start+0x14a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d018      	beq.n	800273e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800271c:	4b45      	ldr	r3, [pc, #276]	@ (8002834 <HAL_ADC_Start+0x158>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a45      	ldr	r2, [pc, #276]	@ (8002838 <HAL_ADC_Start+0x15c>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0c9a      	lsrs	r2, r3, #18
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002730:	e002      	b.n	8002738 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3b01      	subs	r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f9      	bne.n	8002732 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d15f      	bne.n	800280c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002776:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278a:	d106      	bne.n	800279a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	f023 0206 	bic.w	r2, r3, #6
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	645a      	str	r2, [r3, #68]	@ 0x44
 8002798:	e002      	b.n	80027a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a8:	4b24      	ldr	r3, [pc, #144]	@ (800283c <HAL_ADC_Start+0x160>)
 80027aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027b4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d129      	bne.n	8002824 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e020      	b.n	8002824 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a16      	ldr	r2, [pc, #88]	@ (8002840 <HAL_ADC_Start+0x164>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d11b      	bne.n	8002824 <HAL_ADC_Start+0x148>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d114      	bne.n	8002824 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	e00b      	b.n	8002824 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f043 0210 	orr.w	r2, r3, #16
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000
 8002838:	431bde83 	.word	0x431bde83
 800283c:	40012300 	.word	0x40012300
 8002840:	40012000 	.word	0x40012000

08002844 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_ADC_Stop+0x16>
 8002856:	2302      	movs	r3, #2
 8002858:	e021      	b.n	800289e <HAL_ADC_Stop+0x5a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c6:	d113      	bne.n	80028f0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d6:	d10b      	bne.n	80028f0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e063      	b.n	80029b8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f0:	f7ff fe80 	bl	80025f4 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028f6:	e021      	b.n	800293c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028fe:	d01d      	beq.n	800293c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_ADC_PollForConversion+0x6c>
 8002906:	f7ff fe75 	bl	80025f4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d212      	bcs.n	800293c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d00b      	beq.n	800293c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e03d      	b.n	80029b8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b02      	cmp	r3, #2
 8002948:	d1d6      	bne.n	80028f8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f06f 0212 	mvn.w	r2, #18
 8002952:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d123      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002972:	2b00      	cmp	r3, #0
 8002974:	d11f      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800298e:	2b00      	cmp	r3, #0
 8002990:	d111      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d049      	beq.n	8002a8a <HAL_ADC_IRQHandler+0xca>
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d046      	beq.n	8002a8a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d12b      	bne.n	8002a7a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d127      	bne.n	8002a7a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d119      	bne.n	8002a7a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0220 	bic.w	r2, r2, #32
 8002a54:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8bd 	bl	8002bfa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0212 	mvn.w	r2, #18
 8002a88:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a98:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d057      	beq.n	8002b50 <HAL_ADC_IRQHandler+0x190>
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d054      	beq.n	8002b50 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d139      	bne.n	8002b40 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d12b      	bne.n	8002b40 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d124      	bne.n	8002b40 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11d      	bne.n	8002b40 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d119      	bne.n	8002b40 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b1a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa97 	bl	8003074 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 020c 	mvn.w	r2, #12
 8002b4e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d017      	beq.n	8002b96 <HAL_ADC_IRQHandler+0x1d6>
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d014      	beq.n	8002b96 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10d      	bne.n	8002b96 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f841 	bl	8002c0e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0201 	mvn.w	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ba4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_ADC_IRQHandler+0x218>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d012      	beq.n	8002bd8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f043 0202 	orr.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 0220 	mvn.w	r2, #32
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f82a 	bl	8002c22 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0220 	mvn.w	r2, #32
 8002bd6:	601a      	str	r2, [r3, #0]
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1c>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e105      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x228>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b09      	cmp	r3, #9
 8002c62:	d925      	bls.n	8002cb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68d9      	ldr	r1, [r3, #12]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	3b1e      	subs	r3, #30
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43da      	mvns	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	400a      	ands	r2, r1
 8002c88:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68d9      	ldr	r1, [r3, #12]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4403      	add	r3, r0
 8002ca2:	3b1e      	subs	r3, #30
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	e022      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6919      	ldr	r1, [r3, #16]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6919      	ldr	r1, [r3, #16]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4403      	add	r3, r0
 8002cec:	409a      	lsls	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d824      	bhi.n	8002d48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3b05      	subs	r3, #5
 8002d10:	221f      	movs	r2, #31
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	3b05      	subs	r3, #5
 8002d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d46:	e04c      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	d824      	bhi.n	8002d9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b23      	subs	r3, #35	@ 0x23
 8002d62:	221f      	movs	r2, #31
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	400a      	ands	r2, r1
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b23      	subs	r3, #35	@ 0x23
 8002d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d98:	e023      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	3b41      	subs	r3, #65	@ 0x41
 8002dac:	221f      	movs	r2, #31
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3b41      	subs	r3, #65	@ 0x41
 8002dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002de2:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <HAL_ADC_ConfigChannel+0x234>)
 8002de4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a21      	ldr	r2, [pc, #132]	@ (8002e70 <HAL_ADC_ConfigChannel+0x238>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d109      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1cc>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b12      	cmp	r3, #18
 8002df6:	d105      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	@ (8002e70 <HAL_ADC_ConfigChannel+0x238>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d123      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x21e>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d003      	beq.n	8002e1e <HAL_ADC_ConfigChannel+0x1e6>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b11      	cmp	r3, #17
 8002e1c:	d11b      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d111      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <HAL_ADC_ConfigChannel+0x23c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a10      	ldr	r2, [pc, #64]	@ (8002e78 <HAL_ADC_ConfigChannel+0x240>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	0c9a      	lsrs	r2, r3, #18
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e48:	e002      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40012300 	.word	0x40012300
 8002e70:	40012000 	.word	0x40012000
 8002e74:	20000000 	.word	0x20000000
 8002e78:	431bde83 	.word	0x431bde83

08002e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e84:	4b79      	ldr	r3, [pc, #484]	@ (800306c <ADC_Init+0x1f0>)
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	021a      	lsls	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	4a58      	ldr	r2, [pc, #352]	@ (8003070 <ADC_Init+0x1f4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d022      	beq.n	8002f5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6899      	ldr	r1, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6899      	ldr	r1, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	e00f      	b.n	8002f7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0202 	bic.w	r2, r2, #2
 8002f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7e1b      	ldrb	r3, [r3, #24]
 8002f94:	005a      	lsls	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01b      	beq.n	8002fe0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	035a      	lsls	r2, r3, #13
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	e007      	b.n	8002ff0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	3b01      	subs	r3, #1
 800300c:	051a      	lsls	r2, r3, #20
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003032:	025a      	lsls	r2, r3, #9
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800304a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	029a      	lsls	r2, r3, #10
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40012300 	.word	0x40012300
 8003070:	0f000001 	.word	0x0f000001

08003074 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4907      	ldr	r1, [pc, #28]	@ (8003124 <__NVIC_EnableIRQ+0x38>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	@ (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	@ (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	@ 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f4:	d301      	bcc.n	80031fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00f      	b.n	800321a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003224 <SysTick_Config+0x40>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003202:	210f      	movs	r1, #15
 8003204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003208:	f7ff ff8e 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <SysTick_Config+0x40>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003212:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <SysTick_Config+0x40>)
 8003214:	2207      	movs	r2, #7
 8003216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000e010 	.word	0xe000e010

08003228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff29 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003250:	f7ff ff3e 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff ff8e 	bl	800317c <NVIC_EncodePriority>
 8003260:	4602      	mov	r2, r0
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff5d 	bl	8003128 <__NVIC_SetPriority>
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff31 	bl	80030ec <__NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa2 	bl	80031e4 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7ff f99c 	bl	80025f4 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e099      	b.n	80033fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e8:	e00f      	b.n	800330a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ea:	f7ff f983 	bl	80025f4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d908      	bls.n	800330a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2203      	movs	r2, #3
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e078      	b.n	80033fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e8      	bne.n	80032ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4b38      	ldr	r3, [pc, #224]	@ (8003404 <HAL_DMA_Init+0x158>)
 8003324:	4013      	ands	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	4313      	orrs	r3, r2
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0307 	bic.w	r3, r3, #7
 800338a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	2b04      	cmp	r3, #4
 800339c:	d117      	bne.n	80033ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fb01 	bl	80039b8 <DMA_CheckFifoParam>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2240      	movs	r2, #64	@ 0x40
 80033c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033ca:	2301      	movs	r3, #1
 80033cc:	e016      	b.n	80033fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fab8 	bl	800394c <DMA_CalcBaseAndBitshift>
 80033dc:	4603      	mov	r3, r0
 80033de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	223f      	movs	r2, #63	@ 0x3f
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	f010803f 	.word	0xf010803f

08003408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_DMA_Start_IT+0x26>
 800342a:	2302      	movs	r3, #2
 800342c:	e040      	b.n	80034b0 <HAL_DMA_Start_IT+0xa8>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d12f      	bne.n	80034a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa4a 	bl	80038f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	223f      	movs	r2, #63	@ 0x3f
 8003462:	409a      	lsls	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0216 	orr.w	r2, r2, #22
 8003476:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0208 	orr.w	r2, r2, #8
 800348e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e005      	b.n	80034ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
 80034ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034c6:	f7ff f895 	bl	80025f4 <HAL_GetTick>
 80034ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d008      	beq.n	80034ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2280      	movs	r2, #128	@ 0x80
 80034dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e052      	b.n	8003590 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0216 	bic.w	r2, r2, #22
 80034f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003508:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_DMA_Abort+0x62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0208 	bic.w	r2, r2, #8
 8003528:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353a:	e013      	b.n	8003564 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800353c:	f7ff f85a 	bl	80025f4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b05      	cmp	r3, #5
 8003548:	d90c      	bls.n	8003564 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e015      	b.n	8003590 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e4      	bne.n	800353c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	223f      	movs	r2, #63	@ 0x3f
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2280      	movs	r2, #128	@ 0x80
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00c      	b.n	80035d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2205      	movs	r2, #5
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003824 <HAL_DMA_IRQHandler+0x248>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003828 <HAL_DMA_IRQHandler+0x24c>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003606:	2208      	movs	r2, #8
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01a      	beq.n	8003648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	2208      	movs	r2, #8
 8003636:	409a      	lsls	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	2201      	movs	r2, #1
 800366c:	409a      	lsls	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	f043 0202 	orr.w	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	2204      	movs	r2, #4
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	2204      	movs	r2, #4
 80036a2:	409a      	lsls	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ac:	f043 0204 	orr.w	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	2210      	movs	r2, #16
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d043      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d03c      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	2210      	movs	r2, #16
 80036d8:	409a      	lsls	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d024      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
 800370a:	e01f      	b.n	800374c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e016      	b.n	800374c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0208 	bic.w	r2, r2, #8
 800373a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	2220      	movs	r2, #32
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 808f 	beq.w	800387c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8087 	beq.w	800387c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	2220      	movs	r2, #32
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b05      	cmp	r3, #5
 8003784:	d136      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0216 	bic.w	r2, r2, #22
 8003794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x1da>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0208 	bic.w	r2, r2, #8
 80037c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ca:	223f      	movs	r2, #63	@ 0x3f
 80037cc:	409a      	lsls	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d07e      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
        }
        return;
 80037f2:	e079      	b.n	80038e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d01d      	beq.n	800383e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	2b00      	cmp	r3, #0
 8003816:	d031      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
 8003820:	e02c      	b.n	800387c <HAL_DMA_IRQHandler+0x2a0>
 8003822:	bf00      	nop
 8003824:	20000000 	.word	0x20000000
 8003828:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d023      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
 800383c:	e01e      	b.n	800387c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10f      	bne.n	800386c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0210 	bic.w	r2, r2, #16
 800385a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	2b00      	cmp	r3, #0
 8003882:	d032      	beq.n	80038ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2205      	movs	r2, #5
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3301      	adds	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d307      	bcc.n	80038c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f2      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x2cc>
 80038c2:	e000      	b.n	80038c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
 80038e6:	e000      	b.n	80038ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80038e8:	bf00      	nop
    }
  }
}
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800390c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d108      	bne.n	8003930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800392e:	e007      	b.n	8003940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3b10      	subs	r3, #16
 800395c:	4a14      	ldr	r2, [pc, #80]	@ (80039b0 <DMA_CalcBaseAndBitshift+0x64>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d909      	bls.n	800398e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	@ 0x58
 800398c:	e007      	b.n	800399e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	aaaaaaab 	.word	0xaaaaaaab
 80039b4:	0800fcc8 	.word	0x0800fcc8

080039b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d11f      	bne.n	8003a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d856      	bhi.n	8003a86 <DMA_CheckFifoParam+0xce>
 80039d8:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <DMA_CheckFifoParam+0x28>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a03 	.word	0x08003a03
 80039e8:	080039f1 	.word	0x080039f1
 80039ec:	08003a87 	.word	0x08003a87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d046      	beq.n	8003a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e043      	b.n	8003a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a0a:	d140      	bne.n	8003a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a10:	e03d      	b.n	8003a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a1a:	d121      	bne.n	8003a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d837      	bhi.n	8003a92 <DMA_CheckFifoParam+0xda>
 8003a22:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <DMA_CheckFifoParam+0x70>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a3f 	.word	0x08003a3f
 8003a30:	08003a39 	.word	0x08003a39
 8003a34:	08003a51 	.word	0x08003a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3c:	e030      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d025      	beq.n	8003a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4e:	e022      	b.n	8003a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a58:	d11f      	bne.n	8003a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a5e:	e01c      	b.n	8003a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d903      	bls.n	8003a6e <DMA_CheckFifoParam+0xb6>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d003      	beq.n	8003a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a6c:	e018      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      break;
 8003a72:	e015      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e00b      	b.n	8003a9e <DMA_CheckFifoParam+0xe6>
      break;
 8003a86:	bf00      	nop
 8003a88:	e00a      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e008      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e006      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e004      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	@ 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e159      	b.n	8003d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003acc:	2201      	movs	r2, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	f040 8148 	bne.w	8003d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d005      	beq.n	8003b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d130      	bne.n	8003b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b38:	2201      	movs	r2, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 0201 	and.w	r2, r3, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d017      	beq.n	8003ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d123      	bne.n	8003bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	08da      	lsrs	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3208      	adds	r2, #8
 8003bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	69b9      	ldr	r1, [r7, #24]
 8003bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0203 	and.w	r2, r3, #3
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80a2 	beq.w	8003d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b57      	ldr	r3, [pc, #348]	@ (8003d98 <HAL_GPIO_Init+0x2e8>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	4a56      	ldr	r2, [pc, #344]	@ (8003d98 <HAL_GPIO_Init+0x2e8>)
 8003c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c46:	4b54      	ldr	r3, [pc, #336]	@ (8003d98 <HAL_GPIO_Init+0x2e8>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c52:	4a52      	ldr	r2, [pc, #328]	@ (8003d9c <HAL_GPIO_Init+0x2ec>)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a49      	ldr	r2, [pc, #292]	@ (8003da0 <HAL_GPIO_Init+0x2f0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d019      	beq.n	8003cb2 <HAL_GPIO_Init+0x202>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a48      	ldr	r2, [pc, #288]	@ (8003da4 <HAL_GPIO_Init+0x2f4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_GPIO_Init+0x1fe>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a47      	ldr	r2, [pc, #284]	@ (8003da8 <HAL_GPIO_Init+0x2f8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00d      	beq.n	8003caa <HAL_GPIO_Init+0x1fa>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a46      	ldr	r2, [pc, #280]	@ (8003dac <HAL_GPIO_Init+0x2fc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d007      	beq.n	8003ca6 <HAL_GPIO_Init+0x1f6>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a45      	ldr	r2, [pc, #276]	@ (8003db0 <HAL_GPIO_Init+0x300>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_GPIO_Init+0x1f2>
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	e008      	b.n	8003cb4 <HAL_GPIO_Init+0x204>
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	e006      	b.n	8003cb4 <HAL_GPIO_Init+0x204>
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e004      	b.n	8003cb4 <HAL_GPIO_Init+0x204>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_Init+0x204>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_GPIO_Init+0x204>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f002 0203 	and.w	r2, r2, #3
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	4093      	lsls	r3, r2
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc4:	4935      	ldr	r1, [pc, #212]	@ (8003d9c <HAL_GPIO_Init+0x2ec>)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	3302      	adds	r3, #2
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd2:	4b38      	ldr	r3, [pc, #224]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d20:	4a24      	ldr	r2, [pc, #144]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d26:	4b23      	ldr	r3, [pc, #140]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d50:	4b18      	ldr	r3, [pc, #96]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d74:	4a0f      	ldr	r2, [pc, #60]	@ (8003db4 <HAL_GPIO_Init+0x304>)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b0f      	cmp	r3, #15
 8003d84:	f67f aea2 	bls.w	8003acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	3724      	adds	r7, #36	@ 0x24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40013800 	.word	0x40013800
 8003da0:	40020000 	.word	0x40020000
 8003da4:	40020400 	.word	0x40020400
 8003da8:	40020800 	.word	0x40020800
 8003dac:	40020c00 	.word	0x40020c00
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40013c00 	.word	0x40013c00

08003db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e101      	b.n	8003fce <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f007 f895 	bl	800af14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003df8:	d102      	bne.n	8003e00 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 fc7c 	bl	8007702 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7c1a      	ldrb	r2, [r3, #16]
 8003e12:	f88d 2000 	strb.w	r2, [sp]
 8003e16:	3304      	adds	r3, #4
 8003e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e1a:	f003 fb5b 	bl	80074d4 <USB_CoreInit>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0ce      	b.n	8003fce <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f003 fc74 	bl	8007724 <USB_SetCurrentMode>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0bf      	b.n	8003fce <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
 8003e52:	e04a      	b.n	8003eea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3315      	adds	r3, #21
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	3314      	adds	r3, #20
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	b298      	uxth	r0, r3
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	332e      	adds	r3, #46	@ 0x2e
 8003e90:	4602      	mov	r2, r0
 8003e92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3318      	adds	r3, #24
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	331c      	adds	r3, #28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	3320      	adds	r3, #32
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3324      	adds	r3, #36	@ 0x24
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	791b      	ldrb	r3, [r3, #4]
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3af      	bcc.n	8003e54 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e044      	b.n	8003f84 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f26:	7bfa      	ldrb	r2, [r7, #15]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f52:	7bfa      	ldrb	r2, [r7, #15]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	3301      	adds	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	791b      	ldrb	r3, [r3, #4]
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3b5      	bcc.n	8003efa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7c1a      	ldrb	r2, [r3, #16]
 8003f96:	f88d 2000 	strb.w	r2, [sp]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f9e:	f003 fc0d 	bl	80077bc <USB_DevInit>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e00c      	b.n	8003fce <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 fc57 	bl	800887a <USB_DevDisconnect>

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_PCD_Start+0x1c>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e022      	b.n	8004038 <HAL_PCD_Start+0x62>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004012:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f003 fb5e 	bl	80076e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f004 fc05 	bl	8008838 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b08d      	sub	sp, #52	@ 0x34
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 fcc3 	bl	80089e2 <USB_GetMode>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 848c 	bne.w	800497c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f004 fc27 	bl	80088bc <USB_ReadInterrupts>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8482 	beq.w	800497a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f004 fc14 	bl	80088bc <USB_ReadInterrupts>
 8004094:	4603      	mov	r3, r0
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d107      	bne.n	80040ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f002 0202 	and.w	r2, r2, #2
 80040ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 fc02 	bl	80088bc <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d161      	bne.n	8004186 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0210 	bic.w	r2, r2, #16
 80040d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	3304      	adds	r3, #4
 80040f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	0c5b      	lsrs	r3, r3, #17
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d124      	bne.n	8004148 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d035      	beq.n	8004176 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	6a38      	ldr	r0, [r7, #32]
 800411e:	f004 fa39 	bl	8008594 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800412e:	441a      	add	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004140:	441a      	add	r2, r3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	615a      	str	r2, [r3, #20]
 8004146:	e016      	b.n	8004176 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	0c5b      	lsrs	r3, r3, #17
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	2b06      	cmp	r3, #6
 8004152:	d110      	bne.n	8004176 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800415a:	2208      	movs	r2, #8
 800415c:	4619      	mov	r1, r3
 800415e:	6a38      	ldr	r0, [r7, #32]
 8004160:	f004 fa18 	bl	8008594 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004170:	441a      	add	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0210 	orr.w	r2, r2, #16
 8004184:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f004 fb96 	bl	80088bc <USB_ReadInterrupts>
 8004190:	4603      	mov	r3, r0
 8004192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004196:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800419a:	f040 80a7 	bne.w	80042ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f004 fb9b 	bl	80088e2 <USB_ReadDevAllOutEpInterrupt>
 80041ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80041ae:	e099      	b.n	80042e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 808e 	beq.w	80042d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f004 fbbf 	bl	800894a <USB_ReadDevOutEPInterrupt>
 80041cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e4:	461a      	mov	r2, r3
 80041e6:	2301      	movs	r3, #1
 80041e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fea3 	bl	8004f38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00c      	beq.n	8004216 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004208:	461a      	mov	r2, r3
 800420a:	2308      	movs	r3, #8
 800420c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800420e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 ff79 	bl	8005108 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	2310      	movs	r3, #16
 8004230:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d030      	beq.n	800429e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004244:	2b80      	cmp	r3, #128	@ 0x80
 8004246:	d109      	bne.n	800425c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800425a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800425c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	78db      	ldrb	r3, [r3, #3]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d108      	bne.n	800428c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2200      	movs	r2, #0
 800427e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	b2db      	uxtb	r3, r3
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f006 ff4a 	bl	800b120 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004298:	461a      	mov	r2, r3
 800429a:	2302      	movs	r3, #2
 800429c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b4:	461a      	mov	r2, r3
 80042b6:	2320      	movs	r3, #32
 80042b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d0:	461a      	mov	r2, r3
 80042d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	3301      	adds	r3, #1
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f47f af62 	bne.w	80041b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f004 fae3 	bl	80088bc <USB_ReadInterrupts>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004300:	f040 80db 	bne.w	80044ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f004 fb04 	bl	8008916 <USB_ReadDevAllInEpInterrupt>
 800430e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004314:	e0cd      	b.n	80044b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80c2 	beq.w	80044a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f004 fb2a 	bl	8008986 <USB_ReadDevInEPInterrupt>
 8004332:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d057      	beq.n	80043ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	2201      	movs	r2, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	69f9      	ldr	r1, [r7, #28]
 800435a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800435e:	4013      	ands	r3, r2
 8004360:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800436e:	461a      	mov	r2, r3
 8004370:	2301      	movs	r3, #1
 8004372:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	799b      	ldrb	r3, [r3, #6]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d132      	bne.n	80043e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	3320      	adds	r3, #32
 800438c:	6819      	ldr	r1, [r3, #0]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4403      	add	r3, r0
 800439c:	331c      	adds	r3, #28
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4419      	add	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4403      	add	r3, r0
 80043b0:	3320      	adds	r3, #32
 80043b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d113      	bne.n	80043e2 <HAL_PCD_IRQHandler+0x3a2>
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3324      	adds	r3, #36	@ 0x24
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043da:	461a      	mov	r2, r3
 80043dc:	2101      	movs	r1, #1
 80043de:	f004 fb31 	bl	8008a44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	4619      	mov	r1, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f006 fe14 	bl	800b016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004404:	461a      	mov	r2, r3
 8004406:	2308      	movs	r3, #8
 8004408:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004420:	461a      	mov	r2, r3
 8004422:	2310      	movs	r3, #16
 8004424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800443c:	461a      	mov	r2, r3
 800443e:	2340      	movs	r3, #64	@ 0x40
 8004440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d023      	beq.n	8004494 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800444c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800444e:	6a38      	ldr	r0, [r7, #32]
 8004450:	f003 fb18 	bl	8007a84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	3310      	adds	r3, #16
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	4413      	add	r3, r2
 8004464:	3304      	adds	r3, #4
 8004466:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	78db      	ldrb	r3, [r3, #3]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d108      	bne.n	8004482 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2200      	movs	r2, #0
 8004474:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f006 fe61 	bl	800b144 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448e:	461a      	mov	r2, r3
 8004490:	2302      	movs	r3, #2
 8004492:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800449e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fcbd 	bl	8004e20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	3301      	adds	r3, #1
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80044ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f47f af2e 	bne.w	8004316 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 f9fc 	bl	80088bc <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ce:	d122      	bne.n	8004516 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d108      	bne.n	8004500 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044f6:	2100      	movs	r1, #0
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fea3 	bl	8005244 <HAL_PCDEx_LPM_Callback>
 80044fe:	e002      	b.n	8004506 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f006 fdff 	bl	800b104 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f004 f9ce 	bl	80088bc <USB_ReadInterrupts>
 8004520:	4603      	mov	r3, r0
 8004522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452a:	d112      	bne.n	8004552 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f006 fdbb 	bl	800b0b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004550:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f004 f9b0 	bl	80088bc <USB_ReadInterrupts>
 800455c:	4603      	mov	r3, r0
 800455e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004566:	f040 80b7 	bne.w	80046d8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2110      	movs	r1, #16
 8004584:	4618      	mov	r0, r3
 8004586:	f003 fa7d 	bl	8007a84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458e:	e046      	b.n	800461e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459c:	461a      	mov	r2, r3
 800459e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d0:	461a      	mov	r2, r3
 80045d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004612:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004616:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	3301      	adds	r3, #1
 800461c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	791b      	ldrb	r3, [r3, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004626:	4293      	cmp	r3, r2
 8004628:	d3b2      	bcc.n	8004590 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004638:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800463c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	7bdb      	ldrb	r3, [r3, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004656:	f043 030b 	orr.w	r3, r3, #11
 800465a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800466c:	f043 030b 	orr.w	r3, r3, #11
 8004670:	6453      	str	r3, [r2, #68]	@ 0x44
 8004672:	e015      	b.n	80046a0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004682:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004686:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800468a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800469a:	f043 030b 	orr.w	r3, r3, #11
 800469e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80046b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046c2:	461a      	mov	r2, r3
 80046c4:	f004 f9be 	bl	8008a44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80046d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f004 f8ed 	bl	80088bc <USB_ReadInterrupts>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ec:	d123      	bne.n	8004736 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f004 f983 	bl	80089fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f003 fa3a 	bl	8007b76 <USB_GetDevSpeed>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681c      	ldr	r4, [r3, #0]
 800470e:	f001 f9c9 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8004712:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004718:	461a      	mov	r2, r3
 800471a:	4620      	mov	r0, r4
 800471c:	f002 ff3e 	bl	800759c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f006 fca0 	bl	800b066 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004734:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f004 f8be 	bl	80088bc <USB_ReadInterrupts>
 8004740:	4603      	mov	r3, r0
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b08      	cmp	r3, #8
 8004748:	d10a      	bne.n	8004760 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f006 fc7d 	bl	800b04a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f002 0208 	and.w	r2, r2, #8
 800475e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f004 f8a9 	bl	80088bc <USB_ReadInterrupts>
 800476a:	4603      	mov	r3, r0
 800476c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004770:	2b80      	cmp	r3, #128	@ 0x80
 8004772:	d123      	bne.n	80047bc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004780:	2301      	movs	r3, #1
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
 8004784:	e014      	b.n	80047b0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d105      	bne.n	80047aa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fb0a 	bl	8004dbe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	3301      	adds	r3, #1
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	791b      	ldrb	r3, [r3, #4]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d3e4      	bcc.n	8004786 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f004 f87b 	bl	80088bc <USB_ReadInterrupts>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d0:	d13c      	bne.n	800484c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047d2:	2301      	movs	r3, #1
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d6:	e02b      	b.n	8004830 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3318      	adds	r3, #24
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d115      	bne.n	800482a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	da12      	bge.n	800482a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3317      	adds	r3, #23
 8004814:	2201      	movs	r2, #1
 8004816:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004820:	b2db      	uxtb	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 faca 	bl	8004dbe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	3301      	adds	r3, #1
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	791b      	ldrb	r3, [r3, #4]
 8004834:	461a      	mov	r2, r3
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	4293      	cmp	r3, r2
 800483a:	d3cd      	bcc.n	80047d8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800484a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f004 f833 	bl	80088bc <USB_ReadInterrupts>
 8004856:	4603      	mov	r3, r0
 8004858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800485c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004860:	d156      	bne.n	8004910 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004862:	2301      	movs	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
 8004866:	e045      	b.n	80048f4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d12e      	bne.n	80048ee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004890:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004892:	2b00      	cmp	r3, #0
 8004894:	da2b      	bge.n	80048ee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80048a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d121      	bne.n	80048ee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80048bc:	2201      	movs	r2, #1
 80048be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048ea:	6053      	str	r3, [r2, #4]
            break;
 80048ec:	e008      	b.n	8004900 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	3301      	adds	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	791b      	ldrb	r3, [r3, #4]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d3b3      	bcc.n	8004868 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800490e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f003 ffd1 	bl	80088bc <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004924:	d10a      	bne.n	800493c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f006 fc1e 	bl	800b168 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800493a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f003 ffbb 	bl	80088bc <USB_ReadInterrupts>
 8004946:	4603      	mov	r3, r0
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b04      	cmp	r3, #4
 800494e:	d115      	bne.n	800497c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f006 fc0e 	bl	800b184 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6859      	ldr	r1, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	e000      	b.n	800497c <HAL_PCD_IRQHandler+0x93c>
      return;
 800497a:	bf00      	nop
    }
  }
}
 800497c:	3734      	adds	r7, #52	@ 0x34
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}

08004982 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_PCD_SetAddress+0x1a>
 8004998:	2302      	movs	r3, #2
 800499a:	e012      	b.n	80049c2 <HAL_PCD_SetAddress+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f003 ff1a 	bl	80087ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	4608      	mov	r0, r1
 80049d4:	4611      	mov	r1, r2
 80049d6:	461a      	mov	r2, r3
 80049d8:	4603      	mov	r3, r0
 80049da:	70fb      	strb	r3, [r7, #3]
 80049dc:	460b      	mov	r3, r1
 80049de:	803b      	strh	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da0f      	bge.n	8004a10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	3310      	adds	r3, #16
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	3304      	adds	r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	705a      	strb	r2, [r3, #1]
 8004a0e:	e00f      	b.n	8004a30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	3304      	adds	r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004a3c:	883b      	ldrh	r3, [r7, #0]
 8004a3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	78ba      	ldrb	r2, [r7, #2]
 8004a4a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d004      	beq.n	8004a5e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a5e:	78bb      	ldrb	r3, [r7, #2]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d102      	bne.n	8004a6a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_PCD_EP_Open+0xae>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e00e      	b.n	8004a96 <HAL_PCD_EP_Open+0xcc>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68f9      	ldr	r1, [r7, #12]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f003 f89a 	bl	8007bc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004a94:	7afb      	ldrb	r3, [r7, #11]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da0f      	bge.n	8004ad2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	f003 020f 	and.w	r2, r3, #15
 8004ab8:	4613      	mov	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	3310      	adds	r3, #16
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	705a      	strb	r2, [r3, #1]
 8004ad0:	e00f      	b.n	8004af2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	f003 020f 	and.w	r2, r3, #15
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3304      	adds	r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_PCD_EP_Close+0x6e>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e00e      	b.n	8004b2a <HAL_PCD_EP_Close+0x8c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68f9      	ldr	r1, [r7, #12]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f003 f8d8 	bl	8007cd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b42:	7afb      	ldrb	r3, [r7, #11]
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	3304      	adds	r3, #4
 8004b5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b74:	7afb      	ldrb	r3, [r7, #11]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	799b      	ldrb	r3, [r3, #6]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d102      	bne.n	8004b8e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	799b      	ldrb	r3, [r3, #6]
 8004b96:	461a      	mov	r2, r3
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	f003 f975 	bl	8007e88 <USB_EPStartXfer>

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 020f 	and.w	r2, r3, #15
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	460b      	mov	r3, r1
 8004be6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be8:	7afb      	ldrb	r3, [r7, #11]
 8004bea:	f003 020f 	and.w	r2, r3, #15
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2201      	movs	r2, #1
 8004c16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c18:	7afb      	ldrb	r3, [r7, #11]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	799b      	ldrb	r3, [r3, #6]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d102      	bne.n	8004c32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	799b      	ldrb	r3, [r3, #6]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6979      	ldr	r1, [r7, #20]
 8004c3e:	f003 f923 	bl	8007e88 <USB_EPStartXfer>

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	7912      	ldrb	r2, [r2, #4]
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e04f      	b.n	8004d0a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	da0f      	bge.n	8004c92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	f003 020f 	and.w	r2, r3, #15
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	3310      	adds	r3, #16
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	3304      	adds	r3, #4
 8004c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	705a      	strb	r2, [r3, #1]
 8004c90:	e00d      	b.n	8004cae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_PCD_EP_SetStall+0x82>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e01d      	b.n	8004d0a <HAL_PCD_EP_SetStall+0xbe>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f003 fcb1 	bl	8008644 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	7999      	ldrb	r1, [r3, #6]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f003 fea2 	bl	8008a44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	7912      	ldrb	r2, [r2, #4]
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e042      	b.n	8004db6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	da0f      	bge.n	8004d58 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	f003 020f 	and.w	r2, r3, #15
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	3310      	adds	r3, #16
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	705a      	strb	r2, [r3, #1]
 8004d56:	e00f      	b.n	8004d78 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	f003 020f 	and.w	r2, r3, #15
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3304      	adds	r3, #4
 8004d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_PCD_EP_ClrStall+0x86>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e00e      	b.n	8004db6 <HAL_PCD_EP_ClrStall+0xa4>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68f9      	ldr	r1, [r7, #12]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f003 fcba 	bl	8008720 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da0c      	bge.n	8004dec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	f003 020f 	and.w	r2, r3, #15
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	3310      	adds	r3, #16
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	3304      	adds	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e00c      	b.n	8004e06 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	3304      	adds	r3, #4
 8004e04:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f003 fad9 	bl	80083c4 <USB_EPStopXfer>
 8004e12:	4603      	mov	r3, r0
 8004e14:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e16:	7afb      	ldrb	r3, [r7, #11]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	@ 0x28
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	3310      	adds	r3, #16
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	4413      	add	r3, r2
 8004e44:	3304      	adds	r3, #4
 8004e46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d901      	bls.n	8004e58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e06b      	b.n	8004f30 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d902      	bls.n	8004e74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	3303      	adds	r3, #3
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e7c:	e02a      	b.n	8004ed4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d902      	bls.n	8004e9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	3303      	adds	r3, #3
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	68d9      	ldr	r1, [r3, #12]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	6978      	ldr	r0, [r7, #20]
 8004eb8:	f003 fb2e 	bl	8008518 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	441a      	add	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d809      	bhi.n	8004efe <PCD_WriteEmptyTxFifo+0xde>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d203      	bcs.n	8004efe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1bf      	bne.n	8004e7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d811      	bhi.n	8004f2e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	2201      	movs	r2, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	6939      	ldr	r1, [r7, #16]
 8004f26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	333c      	adds	r3, #60	@ 0x3c
 8004f50:	3304      	adds	r3, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	799b      	ldrb	r3, [r3, #6]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d17b      	bne.n	8005066 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4a61      	ldr	r2, [pc, #388]	@ (8005100 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	f240 80b9 	bls.w	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80b3 	beq.w	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa0:	6093      	str	r3, [r2, #8]
 8004fa2:	e0a7      	b.n	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	6093      	str	r3, [r2, #8]
 8004fc0:	e098      	b.n	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f040 8093 	bne.w	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8005100 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d90f      	bls.n	8004ff6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fec:	461a      	mov	r2, r3
 8004fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff2:	6093      	str	r3, [r2, #8]
 8004ff4:	e07e      	b.n	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	4413      	add	r3, r2
 8005008:	3304      	adds	r3, #4
 800500a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a1a      	ldr	r2, [r3, #32]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	0159      	lsls	r1, r3, #5
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	440b      	add	r3, r1
 8005018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d114      	bne.n	8005058 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005040:	461a      	mov	r2, r3
 8005042:	2101      	movs	r1, #1
 8005044:	f003 fcfe 	bl	8008a44 <USB_EP0_OutStart>
 8005048:	e006      	b.n	8005058 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f005 ffbe 	bl	800afe0 <HAL_PCD_DataOutStageCallback>
 8005064:	e046      	b.n	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	4a26      	ldr	r2, [pc, #152]	@ (8005104 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d124      	bne.n	80050b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005084:	461a      	mov	r2, r3
 8005086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800508a:	6093      	str	r3, [r2, #8]
 800508c:	e032      	b.n	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a4:	461a      	mov	r2, r3
 80050a6:	2320      	movs	r3, #32
 80050a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f005 ff95 	bl	800afe0 <HAL_PCD_DataOutStageCallback>
 80050b6:	e01d      	b.n	80050f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d114      	bne.n	80050e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d108      	bne.n	80050e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050e0:	461a      	mov	r2, r3
 80050e2:	2100      	movs	r1, #0
 80050e4:	f003 fcae 	bl	8008a44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f005 ff76 	bl	800afe0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	4f54300a 	.word	0x4f54300a
 8005104:	4f54310a 	.word	0x4f54310a

08005108 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	333c      	adds	r3, #60	@ 0x3c
 8005120:	3304      	adds	r3, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4a15      	ldr	r2, [pc, #84]	@ (8005190 <PCD_EP_OutSetupPacket_int+0x88>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d90e      	bls.n	800515c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005154:	461a      	mov	r2, r3
 8005156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800515a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f005 ff2d 	bl	800afbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a0a      	ldr	r2, [pc, #40]	@ (8005190 <PCD_EP_OutSetupPacket_int+0x88>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d90c      	bls.n	8005184 <PCD_EP_OutSetupPacket_int+0x7c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	799b      	ldrb	r3, [r3, #6]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d108      	bne.n	8005184 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800517c:	461a      	mov	r2, r3
 800517e:	2101      	movs	r1, #1
 8005180:	f003 fc60 	bl	8008a44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	4f54300a 	.word	0x4f54300a

08005194 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
 80051a0:	4613      	mov	r3, r2
 80051a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d107      	bne.n	80051c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051b2:	883b      	ldrh	r3, [r7, #0]
 80051b4:	0419      	lsls	r1, r3, #16
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	430a      	orrs	r2, r1
 80051be:	629a      	str	r2, [r3, #40]	@ 0x28
 80051c0:	e028      	b.n	8005214 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4413      	add	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
 80051d4:	e00d      	b.n	80051f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	3340      	adds	r3, #64	@ 0x40
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	3301      	adds	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d3ec      	bcc.n	80051d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051fc:	883b      	ldrh	r3, [r7, #0]
 80051fe:	0418      	lsls	r0, r3, #16
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	3b01      	subs	r3, #1
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4302      	orrs	r2, r0
 800520c:	3340      	adds	r3, #64	@ 0x40
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	887a      	ldrh	r2, [r7, #2]
 8005234:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e267      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d075      	beq.n	8005366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800527a:	4b88      	ldr	r3, [pc, #544]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b04      	cmp	r3, #4
 8005284:	d00c      	beq.n	80052a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005286:	4b85      	ldr	r3, [pc, #532]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800528e:	2b08      	cmp	r3, #8
 8005290:	d112      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005292:	4b82      	ldr	r3, [pc, #520]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800529a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800529e:	d10b      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	4b7e      	ldr	r3, [pc, #504]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d05b      	beq.n	8005364 <HAL_RCC_OscConfig+0x108>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d157      	bne.n	8005364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e242      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c0:	d106      	bne.n	80052d0 <HAL_RCC_OscConfig+0x74>
 80052c2:	4b76      	ldr	r3, [pc, #472]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a75      	ldr	r2, [pc, #468]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e01d      	b.n	800530c <HAL_RCC_OscConfig+0xb0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x98>
 80052da:	4b70      	ldr	r3, [pc, #448]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6f      	ldr	r2, [pc, #444]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6c      	ldr	r2, [pc, #432]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0xb0>
 80052f4:	4b69      	ldr	r3, [pc, #420]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a68      	ldr	r2, [pc, #416]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b66      	ldr	r3, [pc, #408]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a65      	ldr	r2, [pc, #404]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800530a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d013      	beq.n	800533c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005314:	f7fd f96e 	bl	80025f4 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800531c:	f7fd f96a 	bl	80025f4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	@ 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e207      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b5b      	ldr	r3, [pc, #364]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0xc0>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fd f95a 	bl	80025f4 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005344:	f7fd f956 	bl	80025f4 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	@ 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e1f3      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	4b51      	ldr	r3, [pc, #324]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0xe8>
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d063      	beq.n	800543a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005372:	4b4a      	ldr	r3, [pc, #296]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800537e:	4b47      	ldr	r3, [pc, #284]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005386:	2b08      	cmp	r3, #8
 8005388:	d11c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538a:	4b44      	ldr	r3, [pc, #272]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	4b41      	ldr	r3, [pc, #260]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_RCC_OscConfig+0x152>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e1c7      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ae:	4b3b      	ldr	r3, [pc, #236]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4937      	ldr	r1, [pc, #220]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c2:	e03a      	b.n	800543a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053cc:	4b34      	ldr	r3, [pc, #208]	@ (80054a0 <HAL_RCC_OscConfig+0x244>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7fd f90f 	bl	80025f4 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053da:	f7fd f90b 	bl	80025f4 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e1a8      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	4b2b      	ldr	r3, [pc, #172]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f8:	4b28      	ldr	r3, [pc, #160]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4925      	ldr	r1, [pc, #148]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]
 800540c:	e015      	b.n	800543a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540e:	4b24      	ldr	r3, [pc, #144]	@ (80054a0 <HAL_RCC_OscConfig+0x244>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fd f8ee 	bl	80025f4 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541c:	f7fd f8ea 	bl	80025f4 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e187      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d036      	beq.n	80054b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544e:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <HAL_RCC_OscConfig+0x248>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005454:	f7fd f8ce 	bl	80025f4 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545c:	f7fd f8ca 	bl	80025f4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e167      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <HAL_RCC_OscConfig+0x240>)
 8005470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x200>
 800547a:	e01b      	b.n	80054b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547c:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCC_OscConfig+0x248>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005482:	f7fd f8b7 	bl	80025f4 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005488:	e00e      	b.n	80054a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800548a:	f7fd f8b3 	bl	80025f4 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d907      	bls.n	80054a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e150      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
 800549c:	40023800 	.word	0x40023800
 80054a0:	42470000 	.word	0x42470000
 80054a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a8:	4b88      	ldr	r3, [pc, #544]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ea      	bne.n	800548a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8097 	beq.w	80055f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c6:	4b81      	ldr	r3, [pc, #516]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10f      	bne.n	80054f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	4b7d      	ldr	r3, [pc, #500]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	4a7c      	ldr	r2, [pc, #496]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054e2:	4b7a      	ldr	r3, [pc, #488]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	4b77      	ldr	r3, [pc, #476]	@ (80056d0 <HAL_RCC_OscConfig+0x474>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fe:	4b74      	ldr	r3, [pc, #464]	@ (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a73      	ldr	r2, [pc, #460]	@ (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550a:	f7fd f873 	bl	80025f4 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005512:	f7fd f86f 	bl	80025f4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e10c      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	4b6a      	ldr	r3, [pc, #424]	@ (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x2ea>
 8005538:	4b64      	ldr	r3, [pc, #400]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	4a63      	ldr	r2, [pc, #396]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6713      	str	r3, [r2, #112]	@ 0x70
 8005544:	e01c      	b.n	8005580 <HAL_RCC_OscConfig+0x324>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b05      	cmp	r3, #5
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x30c>
 800554e:	4b5f      	ldr	r3, [pc, #380]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	4a5e      	ldr	r2, [pc, #376]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	6713      	str	r3, [r2, #112]	@ 0x70
 800555a:	4b5c      	ldr	r3, [pc, #368]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555e:	4a5b      	ldr	r2, [pc, #364]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6713      	str	r3, [r2, #112]	@ 0x70
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0x324>
 8005568:	4b58      	ldr	r3, [pc, #352]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556c:	4a57      	ldr	r2, [pc, #348]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6713      	str	r3, [r2, #112]	@ 0x70
 8005574:	4b55      	ldr	r3, [pc, #340]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005578:	4a54      	ldr	r2, [pc, #336]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fd f834 	bl	80025f4 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7fd f830 	bl	80025f4 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0cb      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	4b49      	ldr	r3, [pc, #292]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ee      	beq.n	8005590 <HAL_RCC_OscConfig+0x334>
 80055b2:	e014      	b.n	80055de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b4:	f7fd f81e 	bl	80025f4 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fd f81a 	bl	80025f4 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0b5      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d2:	4b3e      	ldr	r3, [pc, #248]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ee      	bne.n	80055bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b39      	ldr	r3, [pc, #228]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e8:	4a38      	ldr	r2, [pc, #224]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a1 	beq.w	800573c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055fa:	4b34      	ldr	r3, [pc, #208]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b08      	cmp	r3, #8
 8005604:	d05c      	beq.n	80056c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d141      	bne.n	8005692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b31      	ldr	r3, [pc, #196]	@ (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fc ffee 	bl	80025f4 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561c:	f7fc ffea 	bl	80025f4 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e087      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	4b27      	ldr	r3, [pc, #156]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	3b01      	subs	r3, #1
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	491b      	ldr	r1, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005660:	4313      	orrs	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005664:	4b1b      	ldr	r3, [pc, #108]	@ (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7fc ffc3 	bl	80025f4 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005672:	f7fc ffbf 	bl	80025f4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e05c      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x416>
 8005690:	e054      	b.n	800573c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005692:	4b10      	ldr	r3, [pc, #64]	@ (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fc ffac 	bl	80025f4 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fc ffa8 	bl	80025f4 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e045      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <HAL_RCC_OscConfig+0x470>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x444>
 80056be:	e03d      	b.n	800573c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e038      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40007000 	.word	0x40007000
 80056d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <HAL_RCC_OscConfig+0x4ec>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d028      	beq.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d121      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d11a      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005708:	4013      	ands	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800570e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	3b01      	subs	r3, #1
 8005722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d107      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0cc      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b68      	ldr	r3, [pc, #416]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d90c      	bls.n	8005788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b65      	ldr	r3, [pc, #404]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b63      	ldr	r3, [pc, #396]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d001      	beq.n	8005788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0b8      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a0:	4b59      	ldr	r3, [pc, #356]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a58      	ldr	r2, [pc, #352]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b8:	4b53      	ldr	r3, [pc, #332]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a52      	ldr	r2, [pc, #328]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c4:	4b50      	ldr	r3, [pc, #320]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	494d      	ldr	r1, [pc, #308]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d044      	beq.n	800586c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d107      	bne.n	80057fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	4b47      	ldr	r3, [pc, #284]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d119      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e07f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d003      	beq.n	800580a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005806:	2b03      	cmp	r3, #3
 8005808:	d107      	bne.n	800581a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	4b3f      	ldr	r3, [pc, #252]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e06f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581a:	4b3b      	ldr	r3, [pc, #236]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e067      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b37      	ldr	r3, [pc, #220]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4934      	ldr	r1, [pc, #208]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800583c:	f7fc feda 	bl	80025f4 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7fc fed6 	bl	80025f4 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e04f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b2b      	ldr	r3, [pc, #172]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b25      	ldr	r3, [pc, #148]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d20c      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b22      	ldr	r3, [pc, #136]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b20      	ldr	r3, [pc, #128]	@ (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e032      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a0:	4b19      	ldr	r3, [pc, #100]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4916      	ldr	r1, [pc, #88]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058be:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	490e      	ldr	r1, [pc, #56]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058d2:	f000 f821 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	490a      	ldr	r1, [pc, #40]	@ (800590c <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	4a09      	ldr	r2, [pc, #36]	@ (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058ee:	4b09      	ldr	r3, [pc, #36]	@ (8005914 <HAL_RCC_ClockConfig+0x1c8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fc fe3a 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023c00 	.word	0x40023c00
 8005908:	40023800 	.word	0x40023800
 800590c:	0800fcb0 	.word	0x0800fcb0
 8005910:	20000000 	.word	0x20000000
 8005914:	20000004 	.word	0x20000004

08005918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b090      	sub	sp, #64	@ 0x40
 800591e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005930:	4b59      	ldr	r3, [pc, #356]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d00d      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x40>
 800593c:	2b08      	cmp	r3, #8
 800593e:	f200 80a1 	bhi.w	8005a84 <HAL_RCC_GetSysClockFreq+0x16c>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x34>
 8005946:	2b04      	cmp	r3, #4
 8005948:	d003      	beq.n	8005952 <HAL_RCC_GetSysClockFreq+0x3a>
 800594a:	e09b      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800594c:	4b53      	ldr	r3, [pc, #332]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x184>)
 800594e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005950:	e09b      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005952:	4b53      	ldr	r3, [pc, #332]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005954:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005956:	e098      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005958:	4b4f      	ldr	r3, [pc, #316]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005960:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005962:	4b4d      	ldr	r3, [pc, #308]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d028      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	099b      	lsrs	r3, r3, #6
 8005974:	2200      	movs	r2, #0
 8005976:	623b      	str	r3, [r7, #32]
 8005978:	627a      	str	r2, [r7, #36]	@ 0x24
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005980:	2100      	movs	r1, #0
 8005982:	4b47      	ldr	r3, [pc, #284]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005984:	fb03 f201 	mul.w	r2, r3, r1
 8005988:	2300      	movs	r3, #0
 800598a:	fb00 f303 	mul.w	r3, r0, r3
 800598e:	4413      	add	r3, r2
 8005990:	4a43      	ldr	r2, [pc, #268]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005992:	fba0 1202 	umull	r1, r2, r0, r2
 8005996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005998:	460a      	mov	r2, r1
 800599a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800599c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800599e:	4413      	add	r3, r2
 80059a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a4:	2200      	movs	r2, #0
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	61fa      	str	r2, [r7, #28]
 80059aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80059b2:	f7fb f971 	bl	8000c98 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4613      	mov	r3, r2
 80059bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059be:	e053      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c0:	4b35      	ldr	r3, [pc, #212]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	2200      	movs	r2, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	617a      	str	r2, [r7, #20]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059d2:	f04f 0b00 	mov.w	fp, #0
 80059d6:	4652      	mov	r2, sl
 80059d8:	465b      	mov	r3, fp
 80059da:	f04f 0000 	mov.w	r0, #0
 80059de:	f04f 0100 	mov.w	r1, #0
 80059e2:	0159      	lsls	r1, r3, #5
 80059e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059e8:	0150      	lsls	r0, r2, #5
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	ebb2 080a 	subs.w	r8, r2, sl
 80059f2:	eb63 090b 	sbc.w	r9, r3, fp
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a0a:	ebb2 0408 	subs.w	r4, r2, r8
 8005a0e:	eb63 0509 	sbc.w	r5, r3, r9
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	00eb      	lsls	r3, r5, #3
 8005a1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a20:	00e2      	lsls	r2, r4, #3
 8005a22:	4614      	mov	r4, r2
 8005a24:	461d      	mov	r5, r3
 8005a26:	eb14 030a 	adds.w	r3, r4, sl
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	eb45 030b 	adc.w	r3, r5, fp
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a3e:	4629      	mov	r1, r5
 8005a40:	028b      	lsls	r3, r1, #10
 8005a42:	4621      	mov	r1, r4
 8005a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a48:	4621      	mov	r1, r4
 8005a4a:	028a      	lsls	r2, r1, #10
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	2200      	movs	r2, #0
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	60fa      	str	r2, [r7, #12]
 8005a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a5c:	f7fb f91c 	bl	8000c98 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4613      	mov	r3, r2
 8005a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a68:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	3301      	adds	r3, #1
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005a78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a82:	e002      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a84:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x184>)
 8005a86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3740      	adds	r7, #64	@ 0x40
 8005a90:	46bd      	mov	sp, r7
 8005a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	00f42400 	.word	0x00f42400
 8005aa0:	017d7840 	.word	0x017d7840

08005aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa8:	4b03      	ldr	r3, [pc, #12]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000000 	.word	0x20000000

08005abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ac0:	f7ff fff0 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	0a9b      	lsrs	r3, r3, #10
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	4903      	ldr	r1, [pc, #12]	@ (8005ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad2:	5ccb      	ldrb	r3, [r1, r3]
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	0800fcc0 	.word	0x0800fcc0

08005ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ae8:	f7ff ffdc 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	0b5b      	lsrs	r3, r3, #13
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4903      	ldr	r1, [pc, #12]	@ (8005b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40023800 	.word	0x40023800
 8005b08:	0800fcc0 	.word	0x0800fcc0

08005b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e041      	b.n	8005ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc f942 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f000 fa7a 	bl	8006044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e044      	b.n	8005c4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c5c <HAL_TIM_Base_Start_IT+0xb0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d018      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bee:	d013      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c60 <HAL_TIM_Base_Start_IT+0xb4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a19      	ldr	r2, [pc, #100]	@ (8005c64 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a17      	ldr	r2, [pc, #92]	@ (8005c68 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a16      	ldr	r2, [pc, #88]	@ (8005c6c <HAL_TIM_Base_Start_IT+0xc0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d111      	bne.n	8005c3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b06      	cmp	r3, #6
 8005c28:	d010      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	e007      	b.n	8005c4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40014000 	.word	0x40014000

08005c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d020      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01b      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0202 	mvn.w	r2, #2
 8005ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9a3 	bl	8006006 <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f995 	bl	8005ff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f9a6 	bl	800601a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d020      	beq.n	8005d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0204 	mvn.w	r2, #4
 8005cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f97d 	bl	8006006 <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f96f 	bl	8005ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f980 	bl	800601a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d020      	beq.n	8005d6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d01b      	beq.n	8005d6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0208 	mvn.w	r2, #8
 8005d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2204      	movs	r2, #4
 8005d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f957 	bl	8006006 <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f949 	bl	8005ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f95a 	bl	800601a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d020      	beq.n	8005db8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01b      	beq.n	8005db8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0210 	mvn.w	r2, #16
 8005d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f931 	bl	8006006 <HAL_TIM_IC_CaptureCallback>
 8005da4:	e005      	b.n	8005db2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f923 	bl	8005ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f934 	bl	800601a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00c      	beq.n	8005ddc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0201 	mvn.w	r2, #1
 8005dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f901 	bl	8005fde <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00c      	beq.n	8005e00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa52 	bl	80062a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f905 	bl	800602e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0220 	mvn.w	r2, #32
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa24 	bl	8006290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0b4      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x186>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea4:	d03e      	beq.n	8005f24 <HAL_TIM_ConfigClockSource+0xd4>
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eaa:	f200 8087 	bhi.w	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb2:	f000 8086 	beq.w	8005fc2 <HAL_TIM_ConfigClockSource+0x172>
 8005eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eba:	d87f      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b70      	cmp	r3, #112	@ 0x70
 8005ebe:	d01a      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8005ec0:	2b70      	cmp	r3, #112	@ 0x70
 8005ec2:	d87b      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b60      	cmp	r3, #96	@ 0x60
 8005ec6:	d050      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x11a>
 8005ec8:	2b60      	cmp	r3, #96	@ 0x60
 8005eca:	d877      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b50      	cmp	r3, #80	@ 0x50
 8005ece:	d03c      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0xfa>
 8005ed0:	2b50      	cmp	r3, #80	@ 0x50
 8005ed2:	d873      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b40      	cmp	r3, #64	@ 0x40
 8005ed6:	d058      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x13a>
 8005ed8:	2b40      	cmp	r3, #64	@ 0x40
 8005eda:	d86f      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b30      	cmp	r3, #48	@ 0x30
 8005ede:	d064      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15a>
 8005ee0:	2b30      	cmp	r3, #48	@ 0x30
 8005ee2:	d86b      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d060      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15a>
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d867      	bhi.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d05c      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15a>
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d05a      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x15a>
 8005ef4:	e062      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f06:	f000 f9a3 	bl	8006250 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	609a      	str	r2, [r3, #8]
      break;
 8005f22:	e04f      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f34:	f000 f98c 	bl	8006250 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e03c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f56:	461a      	mov	r2, r3
 8005f58:	f000 f900 	bl	800615c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2150      	movs	r1, #80	@ 0x50
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 f959 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005f68:	e02c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f76:	461a      	mov	r2, r3
 8005f78:	f000 f91f 	bl	80061ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2160      	movs	r1, #96	@ 0x60
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f949 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005f88:	e01c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f96:	461a      	mov	r2, r3
 8005f98:	f000 f8e0 	bl	800615c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2140      	movs	r1, #64	@ 0x40
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f939 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005fa8:	e00c      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f000 f930 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005fba:	e003      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	e000      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a3a      	ldr	r2, [pc, #232]	@ (8006140 <TIM_Base_SetConfig+0xfc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00f      	beq.n	800607c <TIM_Base_SetConfig+0x38>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006062:	d00b      	beq.n	800607c <TIM_Base_SetConfig+0x38>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a37      	ldr	r2, [pc, #220]	@ (8006144 <TIM_Base_SetConfig+0x100>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_Base_SetConfig+0x38>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a36      	ldr	r2, [pc, #216]	@ (8006148 <TIM_Base_SetConfig+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0x38>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a35      	ldr	r2, [pc, #212]	@ (800614c <TIM_Base_SetConfig+0x108>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d108      	bne.n	800608e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2b      	ldr	r2, [pc, #172]	@ (8006140 <TIM_Base_SetConfig+0xfc>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d01b      	beq.n	80060ce <TIM_Base_SetConfig+0x8a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609c:	d017      	beq.n	80060ce <TIM_Base_SetConfig+0x8a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a28      	ldr	r2, [pc, #160]	@ (8006144 <TIM_Base_SetConfig+0x100>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <TIM_Base_SetConfig+0x8a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a27      	ldr	r2, [pc, #156]	@ (8006148 <TIM_Base_SetConfig+0x104>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00f      	beq.n	80060ce <TIM_Base_SetConfig+0x8a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a26      	ldr	r2, [pc, #152]	@ (800614c <TIM_Base_SetConfig+0x108>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00b      	beq.n	80060ce <TIM_Base_SetConfig+0x8a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a25      	ldr	r2, [pc, #148]	@ (8006150 <TIM_Base_SetConfig+0x10c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d007      	beq.n	80060ce <TIM_Base_SetConfig+0x8a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a24      	ldr	r2, [pc, #144]	@ (8006154 <TIM_Base_SetConfig+0x110>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_Base_SetConfig+0x8a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a23      	ldr	r2, [pc, #140]	@ (8006158 <TIM_Base_SetConfig+0x114>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d108      	bne.n	80060e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a0e      	ldr	r2, [pc, #56]	@ (8006140 <TIM_Base_SetConfig+0xfc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d103      	bne.n	8006114 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b01      	cmp	r3, #1
 8006124:	d105      	bne.n	8006132 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f023 0201 	bic.w	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	611a      	str	r2, [r3, #16]
  }
}
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800

0800615c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 030a 	bic.w	r3, r3, #10
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f023 0210 	bic.w	r2, r3, #16
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	031b      	lsls	r3, r3, #12
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	f043 0307 	orr.w	r3, r3, #7
 800623c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	609a      	str	r2, [r3, #8]
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800626a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	021a      	lsls	r2, r3, #8
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	431a      	orrs	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4313      	orrs	r3, r2
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e042      	b.n	8006350 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fb fd8e 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2224      	movs	r2, #36	@ 0x24
 80062e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fe75 	bl	8006fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b20      	cmp	r3, #32
 8006370:	d112      	bne.n	8006398 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_UART_Receive_DMA+0x26>
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e00b      	b.n	800639a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	461a      	mov	r2, r3
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fbcc 	bl	8006b2c <UART_Start_Receive_DMA>
 8006394:	4603      	mov	r3, r0
 8006396:	e000      	b.n	800639a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006398:	2302      	movs	r3, #2
  }
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b0ba      	sub	sp, #232	@ 0xe8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80063e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_UART_IRQHandler+0x66>
 80063f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fd33 	bl	8006e6e <UART_Receive_IT>
      return;
 8006408:	e25b      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800640a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 80de 	beq.w	80065d0 <HAL_UART_IRQHandler+0x22c>
 8006414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006424:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80d1 	beq.w	80065d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <HAL_UART_IRQHandler+0xae>
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800643e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f043 0201 	orr.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_UART_IRQHandler+0xd2>
 800645e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646e:	f043 0202 	orr.w	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_UART_IRQHandler+0xf6>
 8006482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	f043 0204 	orr.w	r2, r3, #4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d011      	beq.n	80064ca <HAL_UART_IRQHandler+0x126>
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c2:	f043 0208 	orr.w	r2, r3, #8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 81f2 	beq.w	80068b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_UART_IRQHandler+0x14e>
 80064e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fcbe 	bl	8006e6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_UART_IRQHandler+0x17a>
 8006516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d04f      	beq.n	80065be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fbc6 	bl	8006cb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652e:	2b40      	cmp	r3, #64	@ 0x40
 8006530:	d141      	bne.n	80065b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800654c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3314      	adds	r3, #20
 800655a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800655e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800656a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1d9      	bne.n	8006532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d013      	beq.n	80065ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658a:	4a7e      	ldr	r2, [pc, #504]	@ (8006784 <HAL_UART_IRQHandler+0x3e0>)
 800658c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006592:	4618      	mov	r0, r3
 8006594:	f7fd f800 	bl	8003598 <HAL_DMA_Abort_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d016      	beq.n	80065cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	e00e      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9a8 	bl	8006904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b4:	e00a      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f9a4 	bl	8006904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	e006      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9a0 	bl	8006904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80065ca:	e175      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	bf00      	nop
    return;
 80065ce:	e173      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	f040 814f 	bne.w	8006878 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8148 	beq.w	8006878 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8141 	beq.w	8006878 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006616:	2b40      	cmp	r3, #64	@ 0x40
 8006618:	f040 80b6 	bne.w	8006788 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8145 	beq.w	80068bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800663a:	429a      	cmp	r2, r3
 800663c:	f080 813e 	bcs.w	80068bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006646:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006652:	f000 8088 	beq.w	8006766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800666c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800668e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800669a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1d9      	bne.n	8006656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3314      	adds	r3, #20
 80066a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3314      	adds	r3, #20
 80066c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e1      	bne.n	80066a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3314      	adds	r3, #20
 80066e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006702:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006704:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e3      	bne.n	80066de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006736:	f023 0310 	bic.w	r3, r3, #16
 800673a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006748:	65ba      	str	r2, [r7, #88]	@ 0x58
 800674a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800674e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e3      	bne.n	8006724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006760:	4618      	mov	r0, r3
 8006762:	f7fc fea9 	bl	80034b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006774:	b29b      	uxth	r3, r3
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8cb 	bl	8006918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006782:	e09b      	b.n	80068bc <HAL_UART_IRQHandler+0x518>
 8006784:	08006d77 	.word	0x08006d77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006790:	b29b      	uxth	r3, r3
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 808e 	beq.w	80068c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80067a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8089 	beq.w	80068c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80067d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80067d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e3      	bne.n	80067ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	623b      	str	r3, [r7, #32]
   return(result);
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3314      	adds	r3, #20
 8006806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800680a:	633a      	str	r2, [r7, #48]	@ 0x30
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e3      	bne.n	80067e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	330c      	adds	r3, #12
 8006832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	60fb      	str	r3, [r7, #12]
   return(result);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0310 	bic.w	r3, r3, #16
 8006842:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006850:	61fa      	str	r2, [r7, #28]
 8006852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	69b9      	ldr	r1, [r7, #24]
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	617b      	str	r3, [r7, #20]
   return(result);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e3      	bne.n	800682c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800686a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f851 	bl	8006918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006876:	e023      	b.n	80068c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800687c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <HAL_UART_IRQHandler+0x4f4>
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fa84 	bl	8006d9e <UART_Transmit_IT>
    return;
 8006896:	e014      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00e      	beq.n	80068c2 <HAL_UART_IRQHandler+0x51e>
 80068a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fac4 	bl	8006e3e <UART_EndTransmit_IT>
    return;
 80068b6:	e004      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80068b8:	bf00      	nop
 80068ba:	e002      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80068bc:	bf00      	nop
 80068be:	e000      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80068c0:	bf00      	nop
  }
}
 80068c2:	37e8      	adds	r7, #232	@ 0xe8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b09c      	sub	sp, #112	@ 0x70
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d172      	bne.n	8006a32 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800694c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800694e:	2200      	movs	r2, #0
 8006950:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800696a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006972:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006974:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006978:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e5      	bne.n	8006952 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	667b      	str	r3, [r7, #100]	@ 0x64
 800699e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3314      	adds	r3, #20
 80069a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80069a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80069a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e5      	bne.n	8006986 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	623b      	str	r3, [r7, #32]
   return(result);
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80069d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80069da:	633a      	str	r2, [r7, #48]	@ 0x30
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069f0:	2220      	movs	r2, #32
 80069f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d119      	bne.n	8006a32 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f023 0310 	bic.w	r3, r3, #16
 8006a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a1e:	61fa      	str	r2, [r7, #28]
 8006a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	69b9      	ldr	r1, [r7, #24]
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e5      	bne.n	80069fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a34:	2200      	movs	r2, #0
 8006a36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d106      	bne.n	8006a4e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a44:	4619      	mov	r1, r3
 8006a46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a48:	f7ff ff66 	bl	8006918 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a4c:	e002      	b.n	8006a54 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006a4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a50:	f7ff ff44 	bl	80068dc <HAL_UART_RxCpltCallback>
}
 8006a54:	bf00      	nop
 8006a56:	3770      	adds	r7, #112	@ 0x70
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d108      	bne.n	8006a8a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4619      	mov	r1, r3
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f7ff ff48 	bl	8006918 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a88:	e002      	b.n	8006a90 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff ff30 	bl	80068f0 <HAL_UART_RxHalfCpltCallback>
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab4:	2b80      	cmp	r3, #128	@ 0x80
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b21      	cmp	r3, #33	@ 0x21
 8006aca:	d108      	bne.n	8006ade <UART_DMAError+0x46>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d005      	beq.n	8006ade <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006ad8:	68b8      	ldr	r0, [r7, #8]
 8006ada:	f000 f8c1 	bl	8006c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae8:	2b40      	cmp	r3, #64	@ 0x40
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b22      	cmp	r3, #34	@ 0x22
 8006afe:	d108      	bne.n	8006b12 <UART_DMAError+0x7a>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006b0c:	68b8      	ldr	r0, [r7, #8]
 8006b0e:	f000 f8cf 	bl	8006cb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b16:	f043 0210 	orr.w	r2, r3, #16
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b1e:	68b8      	ldr	r0, [r7, #8]
 8006b20:	f7ff fef0 	bl	8006904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b098      	sub	sp, #96	@ 0x60
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	88fa      	ldrh	r2, [r7, #6]
 8006b44:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2222      	movs	r2, #34	@ 0x22
 8006b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b58:	4a3e      	ldr	r2, [pc, #248]	@ (8006c54 <UART_Start_Receive_DMA+0x128>)
 8006b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b60:	4a3d      	ldr	r2, [pc, #244]	@ (8006c58 <UART_Start_Receive_DMA+0x12c>)
 8006b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b68:	4a3c      	ldr	r2, [pc, #240]	@ (8006c5c <UART_Start_Receive_DMA+0x130>)
 8006b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b70:	2200      	movs	r2, #0
 8006b72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006b74:	f107 0308 	add.w	r3, r7, #8
 8006b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4619      	mov	r1, r3
 8006b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	f7fc fc3c 	bl	8003408 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d019      	beq.n	8006be2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3314      	adds	r3, #20
 8006be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3314      	adds	r3, #20
 8006c00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c02:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006c04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006c08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3314      	adds	r3, #20
 8006c1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	617b      	str	r3, [r7, #20]
   return(result);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3314      	adds	r3, #20
 8006c34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c36:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6a39      	ldr	r1, [r7, #32]
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e5      	bne.n	8006c16 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3760      	adds	r7, #96	@ 0x60
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	08006931 	.word	0x08006931
 8006c58:	08006a5d 	.word	0x08006a5d
 8006c5c:	08006a99 	.word	0x08006a99

08006c60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	@ 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	61ba      	str	r2, [r7, #24]
 8006c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6979      	ldr	r1, [r7, #20]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	613b      	str	r3, [r7, #16]
   return(result);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e5      	bne.n	8006c68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006ca4:	bf00      	nop
 8006ca6:	3724      	adds	r7, #36	@ 0x24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b095      	sub	sp, #84	@ 0x54
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3314      	adds	r3, #20
 8006cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3314      	adds	r3, #20
 8006d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e5      	bne.n	8006cec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d119      	bne.n	8006d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f023 0310 	bic.w	r3, r3, #16
 8006d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d48:	61ba      	str	r2, [r7, #24]
 8006d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6979      	ldr	r1, [r7, #20]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	613b      	str	r3, [r7, #16]
   return(result);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d6a:	bf00      	nop
 8006d6c:	3754      	adds	r7, #84	@ 0x54
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f7ff fdb7 	bl	8006904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b21      	cmp	r3, #33	@ 0x21
 8006db0:	d13e      	bne.n	8006e30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dba:	d114      	bne.n	8006de6 <UART_Transmit_IT+0x48>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d110      	bne.n	8006de6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	1c9a      	adds	r2, r3, #2
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]
 8006de4:	e008      	b.n	8006df8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	1c59      	adds	r1, r3, #1
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6211      	str	r1, [r2, #32]
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4619      	mov	r1, r3
 8006e06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10f      	bne.n	8006e2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e000      	b.n	8006e32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e30:	2302      	movs	r3, #2
  }
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fd32 	bl	80068c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b08c      	sub	sp, #48	@ 0x30
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b22      	cmp	r3, #34	@ 0x22
 8006e80:	f040 80ae 	bne.w	8006fe0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8c:	d117      	bne.n	8006ebe <UART_Receive_IT+0x50>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d113      	bne.n	8006ebe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	1c9a      	adds	r2, r3, #2
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ebc:	e026      	b.n	8006f0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed0:	d007      	beq.n	8006ee2 <UART_Receive_IT+0x74>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <UART_Receive_IT+0x82>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e008      	b.n	8006f02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d15d      	bne.n	8006fdc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0220 	bic.w	r2, r2, #32
 8006f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695a      	ldr	r2, [r3, #20]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0201 	bic.w	r2, r2, #1
 8006f4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d135      	bne.n	8006fd2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f023 0310 	bic.w	r3, r3, #16
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f8c:	623a      	str	r2, [r7, #32]
 8006f8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	6a3a      	ldr	r2, [r7, #32]
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d10a      	bne.n	8006fc4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fca4 	bl	8006918 <HAL_UARTEx_RxEventCallback>
 8006fd0:	e002      	b.n	8006fd8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fc82 	bl	80068dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e002      	b.n	8006fe2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e000      	b.n	8006fe2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3730      	adds	r7, #48	@ 0x30
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff0:	b0c0      	sub	sp, #256	@ 0x100
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007008:	68d9      	ldr	r1, [r3, #12]
 800700a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	ea40 0301 	orr.w	r3, r0, r1
 8007014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	431a      	orrs	r2, r3
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	431a      	orrs	r2, r3
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007044:	f021 010c 	bic.w	r1, r1, #12
 8007048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007052:	430b      	orrs	r3, r1
 8007054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007066:	6999      	ldr	r1, [r3, #24]
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	ea40 0301 	orr.w	r3, r0, r1
 8007072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b8f      	ldr	r3, [pc, #572]	@ (80072b8 <UART_SetConfig+0x2cc>)
 800707c:	429a      	cmp	r2, r3
 800707e:	d005      	beq.n	800708c <UART_SetConfig+0xa0>
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b8d      	ldr	r3, [pc, #564]	@ (80072bc <UART_SetConfig+0x2d0>)
 8007088:	429a      	cmp	r2, r3
 800708a:	d104      	bne.n	8007096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800708c:	f7fe fd2a 	bl	8005ae4 <HAL_RCC_GetPCLK2Freq>
 8007090:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007094:	e003      	b.n	800709e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007096:	f7fe fd11 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 800709a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070a8:	f040 810c 	bne.w	80072c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80070ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80070be:	4622      	mov	r2, r4
 80070c0:	462b      	mov	r3, r5
 80070c2:	1891      	adds	r1, r2, r2
 80070c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80070c6:	415b      	adcs	r3, r3
 80070c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80070ce:	4621      	mov	r1, r4
 80070d0:	eb12 0801 	adds.w	r8, r2, r1
 80070d4:	4629      	mov	r1, r5
 80070d6:	eb43 0901 	adc.w	r9, r3, r1
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070ee:	4690      	mov	r8, r2
 80070f0:	4699      	mov	r9, r3
 80070f2:	4623      	mov	r3, r4
 80070f4:	eb18 0303 	adds.w	r3, r8, r3
 80070f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070fc:	462b      	mov	r3, r5
 80070fe:	eb49 0303 	adc.w	r3, r9, r3
 8007102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007112:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800711a:	460b      	mov	r3, r1
 800711c:	18db      	adds	r3, r3, r3
 800711e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007120:	4613      	mov	r3, r2
 8007122:	eb42 0303 	adc.w	r3, r2, r3
 8007126:	657b      	str	r3, [r7, #84]	@ 0x54
 8007128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800712c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007130:	f7f9 fdb2 	bl	8000c98 <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4b61      	ldr	r3, [pc, #388]	@ (80072c0 <UART_SetConfig+0x2d4>)
 800713a:	fba3 2302 	umull	r2, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	011c      	lsls	r4, r3, #4
 8007142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007146:	2200      	movs	r2, #0
 8007148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800714c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	1891      	adds	r1, r2, r2
 800715a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800715c:	415b      	adcs	r3, r3
 800715e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007164:	4641      	mov	r1, r8
 8007166:	eb12 0a01 	adds.w	sl, r2, r1
 800716a:	4649      	mov	r1, r9
 800716c:	eb43 0b01 	adc.w	fp, r3, r1
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800717c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007184:	4692      	mov	sl, r2
 8007186:	469b      	mov	fp, r3
 8007188:	4643      	mov	r3, r8
 800718a:	eb1a 0303 	adds.w	r3, sl, r3
 800718e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007192:	464b      	mov	r3, r9
 8007194:	eb4b 0303 	adc.w	r3, fp, r3
 8007198:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80071ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80071b0:	460b      	mov	r3, r1
 80071b2:	18db      	adds	r3, r3, r3
 80071b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80071b6:	4613      	mov	r3, r2
 80071b8:	eb42 0303 	adc.w	r3, r2, r3
 80071bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80071be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80071c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80071c6:	f7f9 fd67 	bl	8000c98 <__aeabi_uldivmod>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	4b3b      	ldr	r3, [pc, #236]	@ (80072c0 <UART_SetConfig+0x2d4>)
 80071d2:	fba3 2301 	umull	r2, r3, r3, r1
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	2264      	movs	r2, #100	@ 0x64
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	1acb      	subs	r3, r1, r3
 80071e0:	00db      	lsls	r3, r3, #3
 80071e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80071e6:	4b36      	ldr	r3, [pc, #216]	@ (80072c0 <UART_SetConfig+0x2d4>)
 80071e8:	fba3 2302 	umull	r2, r3, r3, r2
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80071f4:	441c      	add	r4, r3
 80071f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007200:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	1891      	adds	r1, r2, r2
 800720e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007210:	415b      	adcs	r3, r3
 8007212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007218:	4641      	mov	r1, r8
 800721a:	1851      	adds	r1, r2, r1
 800721c:	6339      	str	r1, [r7, #48]	@ 0x30
 800721e:	4649      	mov	r1, r9
 8007220:	414b      	adcs	r3, r1
 8007222:	637b      	str	r3, [r7, #52]	@ 0x34
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007230:	4659      	mov	r1, fp
 8007232:	00cb      	lsls	r3, r1, #3
 8007234:	4651      	mov	r1, sl
 8007236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723a:	4651      	mov	r1, sl
 800723c:	00ca      	lsls	r2, r1, #3
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	4603      	mov	r3, r0
 8007244:	4642      	mov	r2, r8
 8007246:	189b      	adds	r3, r3, r2
 8007248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800724c:	464b      	mov	r3, r9
 800724e:	460a      	mov	r2, r1
 8007250:	eb42 0303 	adc.w	r3, r2, r3
 8007254:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007264:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800726c:	460b      	mov	r3, r1
 800726e:	18db      	adds	r3, r3, r3
 8007270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007272:	4613      	mov	r3, r2
 8007274:	eb42 0303 	adc.w	r3, r2, r3
 8007278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800727a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800727e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007282:	f7f9 fd09 	bl	8000c98 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4b0d      	ldr	r3, [pc, #52]	@ (80072c0 <UART_SetConfig+0x2d4>)
 800728c:	fba3 1302 	umull	r1, r3, r3, r2
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	2164      	movs	r1, #100	@ 0x64
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	3332      	adds	r3, #50	@ 0x32
 800729e:	4a08      	ldr	r2, [pc, #32]	@ (80072c0 <UART_SetConfig+0x2d4>)
 80072a0:	fba2 2303 	umull	r2, r3, r2, r3
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	f003 0207 	and.w	r2, r3, #7
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4422      	add	r2, r4
 80072b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072b4:	e106      	b.n	80074c4 <UART_SetConfig+0x4d8>
 80072b6:	bf00      	nop
 80072b8:	40011000 	.word	0x40011000
 80072bc:	40011400 	.word	0x40011400
 80072c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80072d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80072d6:	4642      	mov	r2, r8
 80072d8:	464b      	mov	r3, r9
 80072da:	1891      	adds	r1, r2, r2
 80072dc:	6239      	str	r1, [r7, #32]
 80072de:	415b      	adcs	r3, r3
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072e6:	4641      	mov	r1, r8
 80072e8:	1854      	adds	r4, r2, r1
 80072ea:	4649      	mov	r1, r9
 80072ec:	eb43 0501 	adc.w	r5, r3, r1
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	00eb      	lsls	r3, r5, #3
 80072fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072fe:	00e2      	lsls	r2, r4, #3
 8007300:	4614      	mov	r4, r2
 8007302:	461d      	mov	r5, r3
 8007304:	4643      	mov	r3, r8
 8007306:	18e3      	adds	r3, r4, r3
 8007308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800730c:	464b      	mov	r3, r9
 800730e:	eb45 0303 	adc.w	r3, r5, r3
 8007312:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007322:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007332:	4629      	mov	r1, r5
 8007334:	008b      	lsls	r3, r1, #2
 8007336:	4621      	mov	r1, r4
 8007338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733c:	4621      	mov	r1, r4
 800733e:	008a      	lsls	r2, r1, #2
 8007340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007344:	f7f9 fca8 	bl	8000c98 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4b60      	ldr	r3, [pc, #384]	@ (80074d0 <UART_SetConfig+0x4e4>)
 800734e:	fba3 2302 	umull	r2, r3, r3, r2
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	011c      	lsls	r4, r3, #4
 8007356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735a:	2200      	movs	r2, #0
 800735c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007360:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	1891      	adds	r1, r2, r2
 800736e:	61b9      	str	r1, [r7, #24]
 8007370:	415b      	adcs	r3, r3
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007378:	4641      	mov	r1, r8
 800737a:	1851      	adds	r1, r2, r1
 800737c:	6139      	str	r1, [r7, #16]
 800737e:	4649      	mov	r1, r9
 8007380:	414b      	adcs	r3, r1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007390:	4659      	mov	r1, fp
 8007392:	00cb      	lsls	r3, r1, #3
 8007394:	4651      	mov	r1, sl
 8007396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739a:	4651      	mov	r1, sl
 800739c:	00ca      	lsls	r2, r1, #3
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	4642      	mov	r2, r8
 80073a6:	189b      	adds	r3, r3, r2
 80073a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073ac:	464b      	mov	r3, r9
 80073ae:	460a      	mov	r2, r1
 80073b0:	eb42 0303 	adc.w	r3, r2, r3
 80073b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80073d0:	4649      	mov	r1, r9
 80073d2:	008b      	lsls	r3, r1, #2
 80073d4:	4641      	mov	r1, r8
 80073d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073da:	4641      	mov	r1, r8
 80073dc:	008a      	lsls	r2, r1, #2
 80073de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073e2:	f7f9 fc59 	bl	8000c98 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4611      	mov	r1, r2
 80073ec:	4b38      	ldr	r3, [pc, #224]	@ (80074d0 <UART_SetConfig+0x4e4>)
 80073ee:	fba3 2301 	umull	r2, r3, r3, r1
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	2264      	movs	r2, #100	@ 0x64
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	1acb      	subs	r3, r1, r3
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	3332      	adds	r3, #50	@ 0x32
 8007400:	4a33      	ldr	r2, [pc, #204]	@ (80074d0 <UART_SetConfig+0x4e4>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800740c:	441c      	add	r4, r3
 800740e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007412:	2200      	movs	r2, #0
 8007414:	673b      	str	r3, [r7, #112]	@ 0x70
 8007416:	677a      	str	r2, [r7, #116]	@ 0x74
 8007418:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	1891      	adds	r1, r2, r2
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	415b      	adcs	r3, r3
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800742c:	4641      	mov	r1, r8
 800742e:	1851      	adds	r1, r2, r1
 8007430:	6039      	str	r1, [r7, #0]
 8007432:	4649      	mov	r1, r9
 8007434:	414b      	adcs	r3, r1
 8007436:	607b      	str	r3, [r7, #4]
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007444:	4659      	mov	r1, fp
 8007446:	00cb      	lsls	r3, r1, #3
 8007448:	4651      	mov	r1, sl
 800744a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744e:	4651      	mov	r1, sl
 8007450:	00ca      	lsls	r2, r1, #3
 8007452:	4610      	mov	r0, r2
 8007454:	4619      	mov	r1, r3
 8007456:	4603      	mov	r3, r0
 8007458:	4642      	mov	r2, r8
 800745a:	189b      	adds	r3, r3, r2
 800745c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800745e:	464b      	mov	r3, r9
 8007460:	460a      	mov	r2, r1
 8007462:	eb42 0303 	adc.w	r3, r2, r3
 8007466:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	663b      	str	r3, [r7, #96]	@ 0x60
 8007472:	667a      	str	r2, [r7, #100]	@ 0x64
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007480:	4649      	mov	r1, r9
 8007482:	008b      	lsls	r3, r1, #2
 8007484:	4641      	mov	r1, r8
 8007486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800748a:	4641      	mov	r1, r8
 800748c:	008a      	lsls	r2, r1, #2
 800748e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007492:	f7f9 fc01 	bl	8000c98 <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <UART_SetConfig+0x4e4>)
 800749c:	fba3 1302 	umull	r1, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	2164      	movs	r1, #100	@ 0x64
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	3332      	adds	r3, #50	@ 0x32
 80074ae:	4a08      	ldr	r2, [pc, #32]	@ (80074d0 <UART_SetConfig+0x4e4>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4422      	add	r2, r4
 80074c2:	609a      	str	r2, [r3, #8]
}
 80074c4:	bf00      	nop
 80074c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80074ca:	46bd      	mov	sp, r7
 80074cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074d0:	51eb851f 	.word	0x51eb851f

080074d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074d4:	b084      	sub	sp, #16
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	f107 001c 	add.w	r0, r7, #28
 80074e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d123      	bne.n	8007536 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007516:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800751a:	2b01      	cmp	r3, #1
 800751c:	d105      	bne.n	800752a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 fae8 	bl	8008b00 <USB_CoreReset>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
 8007534:	e01b      	b.n	800756e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fadc 	bl	8008b00 <USB_CoreReset>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800754c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007558:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007560:	e005      	b.n	800756e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007566:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800756e:	7fbb      	ldrb	r3, [r7, #30]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10b      	bne.n	800758c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f043 0206 	orr.w	r2, r3, #6
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f043 0220 	orr.w	r2, r3, #32
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007598:	b004      	add	sp, #16
 800759a:	4770      	bx	lr

0800759c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d165      	bne.n	800767c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4a41      	ldr	r2, [pc, #260]	@ (80076b8 <USB_SetTurnaroundTime+0x11c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d906      	bls.n	80075c6 <USB_SetTurnaroundTime+0x2a>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4a40      	ldr	r2, [pc, #256]	@ (80076bc <USB_SetTurnaroundTime+0x120>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d202      	bcs.n	80075c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075c0:	230f      	movs	r3, #15
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e062      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4a3c      	ldr	r2, [pc, #240]	@ (80076bc <USB_SetTurnaroundTime+0x120>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d306      	bcc.n	80075dc <USB_SetTurnaroundTime+0x40>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	4a3b      	ldr	r2, [pc, #236]	@ (80076c0 <USB_SetTurnaroundTime+0x124>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d202      	bcs.n	80075dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075d6:	230e      	movs	r3, #14
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	e057      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4a38      	ldr	r2, [pc, #224]	@ (80076c0 <USB_SetTurnaroundTime+0x124>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d306      	bcc.n	80075f2 <USB_SetTurnaroundTime+0x56>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4a37      	ldr	r2, [pc, #220]	@ (80076c4 <USB_SetTurnaroundTime+0x128>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d202      	bcs.n	80075f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80075ec:	230d      	movs	r3, #13
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e04c      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	4a33      	ldr	r2, [pc, #204]	@ (80076c4 <USB_SetTurnaroundTime+0x128>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d306      	bcc.n	8007608 <USB_SetTurnaroundTime+0x6c>
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	4a32      	ldr	r2, [pc, #200]	@ (80076c8 <USB_SetTurnaroundTime+0x12c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d802      	bhi.n	8007608 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007602:	230c      	movs	r3, #12
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	e041      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4a2f      	ldr	r2, [pc, #188]	@ (80076c8 <USB_SetTurnaroundTime+0x12c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d906      	bls.n	800761e <USB_SetTurnaroundTime+0x82>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4a2e      	ldr	r2, [pc, #184]	@ (80076cc <USB_SetTurnaroundTime+0x130>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d802      	bhi.n	800761e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007618:	230b      	movs	r3, #11
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	e036      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4a2a      	ldr	r2, [pc, #168]	@ (80076cc <USB_SetTurnaroundTime+0x130>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d906      	bls.n	8007634 <USB_SetTurnaroundTime+0x98>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	4a29      	ldr	r2, [pc, #164]	@ (80076d0 <USB_SetTurnaroundTime+0x134>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d802      	bhi.n	8007634 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800762e:	230a      	movs	r3, #10
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	e02b      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4a26      	ldr	r2, [pc, #152]	@ (80076d0 <USB_SetTurnaroundTime+0x134>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d906      	bls.n	800764a <USB_SetTurnaroundTime+0xae>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4a25      	ldr	r2, [pc, #148]	@ (80076d4 <USB_SetTurnaroundTime+0x138>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d202      	bcs.n	800764a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007644:	2309      	movs	r3, #9
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e020      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	4a21      	ldr	r2, [pc, #132]	@ (80076d4 <USB_SetTurnaroundTime+0x138>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d306      	bcc.n	8007660 <USB_SetTurnaroundTime+0xc4>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4a20      	ldr	r2, [pc, #128]	@ (80076d8 <USB_SetTurnaroundTime+0x13c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d802      	bhi.n	8007660 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800765a:	2308      	movs	r3, #8
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	e015      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4a1d      	ldr	r2, [pc, #116]	@ (80076d8 <USB_SetTurnaroundTime+0x13c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d906      	bls.n	8007676 <USB_SetTurnaroundTime+0xda>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4a1c      	ldr	r2, [pc, #112]	@ (80076dc <USB_SetTurnaroundTime+0x140>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d202      	bcs.n	8007676 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007670:	2307      	movs	r3, #7
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	e00a      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007676:	2306      	movs	r3, #6
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	e007      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007682:	2309      	movs	r3, #9
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e001      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007688:	2309      	movs	r3, #9
 800768a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	029b      	lsls	r3, r3, #10
 80076a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80076a4:	431a      	orrs	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	00d8acbf 	.word	0x00d8acbf
 80076bc:	00e4e1c0 	.word	0x00e4e1c0
 80076c0:	00f42400 	.word	0x00f42400
 80076c4:	01067380 	.word	0x01067380
 80076c8:	011a499f 	.word	0x011a499f
 80076cc:	01312cff 	.word	0x01312cff
 80076d0:	014ca43f 	.word	0x014ca43f
 80076d4:	016e3600 	.word	0x016e3600
 80076d8:	01a6ab1f 	.word	0x01a6ab1f
 80076dc:	01e84800 	.word	0x01e84800

080076e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f043 0201 	orr.w	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f023 0201 	bic.w	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d115      	bne.n	8007772 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007752:	200a      	movs	r0, #10
 8007754:	f7fa ff5a 	bl	800260c <HAL_Delay>
      ms += 10U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	330a      	adds	r3, #10
 800775c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f93f 	bl	80089e2 <USB_GetMode>
 8007764:	4603      	mov	r3, r0
 8007766:	2b01      	cmp	r3, #1
 8007768:	d01e      	beq.n	80077a8 <USB_SetCurrentMode+0x84>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2bc7      	cmp	r3, #199	@ 0xc7
 800776e:	d9f0      	bls.n	8007752 <USB_SetCurrentMode+0x2e>
 8007770:	e01a      	b.n	80077a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d115      	bne.n	80077a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007784:	200a      	movs	r0, #10
 8007786:	f7fa ff41 	bl	800260c <HAL_Delay>
      ms += 10U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	330a      	adds	r3, #10
 800778e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f926 	bl	80089e2 <USB_GetMode>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <USB_SetCurrentMode+0x84>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2bc7      	cmp	r3, #199	@ 0xc7
 80077a0:	d9f0      	bls.n	8007784 <USB_SetCurrentMode+0x60>
 80077a2:	e001      	b.n	80077a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e005      	b.n	80077b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80077ac:	d101      	bne.n	80077b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077bc:	b084      	sub	sp, #16
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	e009      	b.n	80077f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	3340      	adds	r3, #64	@ 0x40
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3301      	adds	r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b0e      	cmp	r3, #14
 80077f4:	d9f2      	bls.n	80077dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d11c      	bne.n	8007838 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800780c:	f043 0302 	orr.w	r3, r3, #2
 8007810:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007816:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007822:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	639a      	str	r2, [r3, #56]	@ 0x38
 8007836:	e00b      	b.n	8007850 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007848:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007856:	461a      	mov	r2, r3
 8007858:	2300      	movs	r3, #0
 800785a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800785c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007860:	2b01      	cmp	r3, #1
 8007862:	d10d      	bne.n	8007880 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007868:	2b00      	cmp	r3, #0
 800786a:	d104      	bne.n	8007876 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800786c:	2100      	movs	r1, #0
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f968 	bl	8007b44 <USB_SetDevSpeed>
 8007874:	e008      	b.n	8007888 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007876:	2101      	movs	r1, #1
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f963 	bl	8007b44 <USB_SetDevSpeed>
 800787e:	e003      	b.n	8007888 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007880:	2103      	movs	r1, #3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f95e 	bl	8007b44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007888:	2110      	movs	r1, #16
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f8fa 	bl	8007a84 <USB_FlushTxFifo>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f924 	bl	8007ae8 <USB_FlushRxFifo>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b0:	461a      	mov	r2, r3
 80078b2:	2300      	movs	r3, #0
 80078b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078bc:	461a      	mov	r2, r3
 80078be:	2300      	movs	r3, #0
 80078c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c8:	461a      	mov	r2, r3
 80078ca:	2300      	movs	r3, #0
 80078cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	e043      	b.n	800795c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078ea:	d118      	bne.n	800791e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fe:	461a      	mov	r2, r3
 8007900:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	e013      	b.n	8007930 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007914:	461a      	mov	r2, r3
 8007916:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	e008      	b.n	8007930 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800792a:	461a      	mov	r2, r3
 800792c:	2300      	movs	r3, #0
 800792e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793c:	461a      	mov	r2, r3
 800793e:	2300      	movs	r3, #0
 8007940:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794e:	461a      	mov	r2, r3
 8007950:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007954:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	3301      	adds	r3, #1
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007960:	461a      	mov	r2, r3
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	4293      	cmp	r3, r2
 8007966:	d3b5      	bcc.n	80078d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	e043      	b.n	80079f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007984:	d118      	bne.n	80079b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007998:	461a      	mov	r2, r3
 800799a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	e013      	b.n	80079ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ae:	461a      	mov	r2, r3
 80079b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	e008      	b.n	80079ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c4:	461a      	mov	r2, r3
 80079c6:	2300      	movs	r3, #0
 80079c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d6:	461a      	mov	r2, r3
 80079d8:	2300      	movs	r3, #0
 80079da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e8:	461a      	mov	r2, r3
 80079ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	3301      	adds	r3, #1
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079fa:	461a      	mov	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d3b5      	bcc.n	800796e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d105      	bne.n	8007a38 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	f043 0210 	orr.w	r2, r3, #16
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699a      	ldr	r2, [r3, #24]
 8007a3c:	4b10      	ldr	r3, [pc, #64]	@ (8007a80 <USB_DevInit+0x2c4>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	f043 0208 	orr.w	r2, r3, #8
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d107      	bne.n	8007a70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a68:	f043 0304 	orr.w	r3, r3, #4
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a7c:	b004      	add	sp, #16
 8007a7e:	4770      	bx	lr
 8007a80:	803c3800 	.word	0x803c3800

08007a84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a9e:	d901      	bls.n	8007aa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e01b      	b.n	8007adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	daf2      	bge.n	8007a92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	019b      	lsls	r3, r3, #6
 8007ab4:	f043 0220 	orr.w	r2, r3, #32
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ac8:	d901      	bls.n	8007ace <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e006      	b.n	8007adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d0f0      	beq.n	8007abc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3301      	adds	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b00:	d901      	bls.n	8007b06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e018      	b.n	8007b38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	daf2      	bge.n	8007af4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2210      	movs	r2, #16
 8007b16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b24:	d901      	bls.n	8007b2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e006      	b.n	8007b38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0310 	and.w	r3, r3, #16
 8007b32:	2b10      	cmp	r3, #16
 8007b34:	d0f0      	beq.n	8007b18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	68f9      	ldr	r1, [r7, #12]
 8007b60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b64:	4313      	orrs	r3, r2
 8007b66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b087      	sub	sp, #28
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0306 	and.w	r3, r3, #6
 8007b8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d102      	bne.n	8007b9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b96:	2300      	movs	r3, #0
 8007b98:	75fb      	strb	r3, [r7, #23]
 8007b9a:	e00a      	b.n	8007bb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d002      	beq.n	8007ba8 <USB_GetDevSpeed+0x32>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b06      	cmp	r3, #6
 8007ba6:	d102      	bne.n	8007bae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	75fb      	strb	r3, [r7, #23]
 8007bac:	e001      	b.n	8007bb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007bae:	230f      	movs	r3, #15
 8007bb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d13a      	bne.n	8007c52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be2:	69da      	ldr	r2, [r3, #28]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	2101      	movs	r1, #1
 8007bee:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	68f9      	ldr	r1, [r7, #12]
 8007bf6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d155      	bne.n	8007cc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	791b      	ldrb	r3, [r3, #4]
 8007c2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	059b      	lsls	r3, r3, #22
 8007c36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	e036      	b.n	8007cc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	2101      	movs	r1, #1
 8007c64:	fa01 f303 	lsl.w	r3, r1, r3
 8007c68:	041b      	lsls	r3, r3, #16
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c70:	4313      	orrs	r3, r2
 8007c72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d11a      	bne.n	8007cc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	791b      	ldrb	r3, [r3, #4]
 8007ca4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ca6:	430b      	orrs	r3, r1
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d161      	bne.n	8007db0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d02:	d11f      	bne.n	8007d44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	2101      	movs	r1, #1
 8007d56:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d64:	4013      	ands	r3, r2
 8007d66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	2101      	movs	r1, #1
 8007d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	43db      	mvns	r3, r3
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d88:	4013      	ands	r3, r2
 8007d8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	0159      	lsls	r1, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	440b      	add	r3, r1
 8007da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da6:	4619      	mov	r1, r3
 8007da8:	4b35      	ldr	r3, [pc, #212]	@ (8007e80 <USB_DeactivateEndpoint+0x1b0>)
 8007daa:	4013      	ands	r3, r2
 8007dac:	600b      	str	r3, [r1, #0]
 8007dae:	e060      	b.n	8007e72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dc6:	d11f      	bne.n	8007e08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007de6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	2101      	movs	r1, #1
 8007e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	43db      	mvns	r3, r3
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e28:	4013      	ands	r3, r2
 8007e2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	43db      	mvns	r3, r3
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	0159      	lsls	r1, r3, #5
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	440b      	add	r3, r1
 8007e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4b05      	ldr	r3, [pc, #20]	@ (8007e84 <USB_DeactivateEndpoint+0x1b4>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	ec337800 	.word	0xec337800
 8007e84:	eff37800 	.word	0xeff37800

08007e88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	@ 0x28
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	f040 817f 	bne.w	80081a8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d132      	bne.n	8007f18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ecc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ed0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	0151      	lsls	r1, r2, #5
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	440a      	add	r2, r1
 8007f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f10:	0cdb      	lsrs	r3, r3, #19
 8007f12:	04db      	lsls	r3, r3, #19
 8007f14:	6113      	str	r3, [r2, #16]
 8007f16:	e097      	b.n	8008048 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f32:	0cdb      	lsrs	r3, r3, #19
 8007f34:	04db      	lsls	r3, r3, #19
 8007f36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	0151      	lsls	r1, r2, #5
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f5a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d11a      	bne.n	8007f98 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d903      	bls.n	8007f76 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f94:	6113      	str	r3, [r2, #16]
 8007f96:	e044      	b.n	8008022 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	1e5a      	subs	r2, r3, #1
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	8afb      	ldrh	r3, [r7, #22]
 8007fbe:	04d9      	lsls	r1, r3, #19
 8007fc0:	4ba4      	ldr	r3, [pc, #656]	@ (8008254 <USB_EPStartXfer+0x3cc>)
 8007fc2:	400b      	ands	r3, r1
 8007fc4:	69b9      	ldr	r1, [r7, #24]
 8007fc6:	0148      	lsls	r0, r1, #5
 8007fc8:	69f9      	ldr	r1, [r7, #28]
 8007fca:	4401      	add	r1, r0
 8007fcc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	791b      	ldrb	r3, [r3, #4]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d122      	bne.n	8008022 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	0151      	lsls	r1, r2, #5
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	440a      	add	r2, r1
 8007ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007ffa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008008:	691a      	ldr	r2, [r3, #16]
 800800a:	8afb      	ldrh	r3, [r7, #22]
 800800c:	075b      	lsls	r3, r3, #29
 800800e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008012:	69b9      	ldr	r1, [r7, #24]
 8008014:	0148      	lsls	r0, r1, #5
 8008016:	69f9      	ldr	r1, [r7, #28]
 8008018:	4401      	add	r1, r0
 800801a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800801e:	4313      	orrs	r3, r2
 8008020:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800802e:	691a      	ldr	r2, [r3, #16]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008038:	69b9      	ldr	r1, [r7, #24]
 800803a:	0148      	lsls	r0, r1, #5
 800803c:	69f9      	ldr	r1, [r7, #28]
 800803e:	4401      	add	r1, r0
 8008040:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008044:	4313      	orrs	r3, r2
 8008046:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d14b      	bne.n	80080e6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d009      	beq.n	800806a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008062:	461a      	mov	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	791b      	ldrb	r3, [r3, #4]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d128      	bne.n	80080c4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d110      	bne.n	80080a4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	440a      	add	r2, r1
 8008098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800809c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	e00f      	b.n	80080c4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	0151      	lsls	r1, r2, #5
 80080b6:	69fa      	ldr	r2, [r7, #28]
 80080b8:	440a      	add	r2, r1
 80080ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080c2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	0151      	lsls	r1, r2, #5
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	440a      	add	r2, r1
 80080da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	e166      	b.n	80083b4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	0151      	lsls	r1, r2, #5
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	440a      	add	r2, r1
 80080fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008100:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008104:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	791b      	ldrb	r3, [r3, #4]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d015      	beq.n	800813a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 814e 	beq.w	80083b4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800811e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	2101      	movs	r1, #1
 800812a:	fa01 f303 	lsl.w	r3, r1, r3
 800812e:	69f9      	ldr	r1, [r7, #28]
 8008130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008134:	4313      	orrs	r3, r2
 8008136:	634b      	str	r3, [r1, #52]	@ 0x34
 8008138:	e13c      	b.n	80083b4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008146:	2b00      	cmp	r3, #0
 8008148:	d110      	bne.n	800816c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008164:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	e00f      	b.n	800818c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	0151      	lsls	r1, r2, #5
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	440a      	add	r2, r1
 8008182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800818a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	68d9      	ldr	r1, [r3, #12]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	b298      	uxth	r0, r3
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4603      	mov	r3, r0
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 f9b9 	bl	8008518 <USB_WritePacket>
 80081a6:	e105      	b.n	80083b4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	0151      	lsls	r1, r2, #5
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	440a      	add	r2, r1
 80081be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081c2:	0cdb      	lsrs	r3, r3, #19
 80081c4:	04db      	lsls	r3, r3, #19
 80081c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80081e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80081ea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d132      	bne.n	8008258 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	689a      	ldr	r2, [r3, #8]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008220:	69b9      	ldr	r1, [r7, #24]
 8008222:	0148      	lsls	r0, r1, #5
 8008224:	69f9      	ldr	r1, [r7, #28]
 8008226:	4401      	add	r1, r0
 8008228:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800822c:	4313      	orrs	r3, r2
 800822e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800824a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800824e:	6113      	str	r3, [r2, #16]
 8008250:	e062      	b.n	8008318 <USB_EPStartXfer+0x490>
 8008252:	bf00      	nop
 8008254:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d123      	bne.n	80082a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826c:	691a      	ldr	r2, [r3, #16]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008276:	69b9      	ldr	r1, [r7, #24]
 8008278:	0148      	lsls	r0, r1, #5
 800827a:	69f9      	ldr	r1, [r7, #28]
 800827c:	4401      	add	r1, r0
 800827e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008282:	4313      	orrs	r3, r2
 8008284:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082a4:	6113      	str	r3, [r2, #16]
 80082a6:	e037      	b.n	8008318 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4413      	add	r3, r2
 80082b2:	1e5a      	subs	r2, r3, #1
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	8afa      	ldrh	r2, [r7, #22]
 80082c4:	fb03 f202 	mul.w	r2, r3, r2
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d8:	691a      	ldr	r2, [r3, #16]
 80082da:	8afb      	ldrh	r3, [r7, #22]
 80082dc:	04d9      	lsls	r1, r3, #19
 80082de:	4b38      	ldr	r3, [pc, #224]	@ (80083c0 <USB_EPStartXfer+0x538>)
 80082e0:	400b      	ands	r3, r1
 80082e2:	69b9      	ldr	r1, [r7, #24]
 80082e4:	0148      	lsls	r0, r1, #5
 80082e6:	69f9      	ldr	r1, [r7, #28]
 80082e8:	4401      	add	r1, r0
 80082ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082ee:	4313      	orrs	r3, r2
 80082f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082fe:	691a      	ldr	r2, [r3, #16]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008308:	69b9      	ldr	r1, [r7, #24]
 800830a:	0148      	lsls	r0, r1, #5
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	4401      	add	r1, r0
 8008310:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008314:	4313      	orrs	r3, r2
 8008316:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d10d      	bne.n	800833a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	68d9      	ldr	r1, [r3, #12]
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008336:	460a      	mov	r2, r1
 8008338:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	791b      	ldrb	r3, [r3, #4]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d128      	bne.n	8008394 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d110      	bne.n	8008374 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800836c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	e00f      	b.n	8008394 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	0151      	lsls	r1, r2, #5
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	440a      	add	r2, r1
 800838a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800838e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008392:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3720      	adds	r7, #32
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	1ff80000 	.word	0x1ff80000

080083c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	785b      	ldrb	r3, [r3, #1]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d14a      	bne.n	8008478 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083fa:	f040 8086 	bne.w	800850a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	7812      	ldrb	r2, [r2, #0]
 8008412:	0151      	lsls	r1, r2, #5
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	440a      	add	r2, r1
 8008418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800841c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008420:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	7812      	ldrb	r2, [r2, #0]
 8008436:	0151      	lsls	r1, r2, #5
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	440a      	add	r2, r1
 800843c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3301      	adds	r3, #1
 800844a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008452:	4293      	cmp	r3, r2
 8008454:	d902      	bls.n	800845c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
          break;
 800845a:	e056      	b.n	800850a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008474:	d0e7      	beq.n	8008446 <USB_EPStopXfer+0x82>
 8008476:	e048      	b.n	800850a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800848c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008490:	d13b      	bne.n	800850a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	7812      	ldrb	r2, [r2, #0]
 80084a6:	0151      	lsls	r1, r2, #5
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	440a      	add	r2, r1
 80084ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	7812      	ldrb	r2, [r2, #0]
 80084ca:	0151      	lsls	r1, r2, #5
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	440a      	add	r2, r1
 80084d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d902      	bls.n	80084f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	75fb      	strb	r3, [r7, #23]
          break;
 80084ee:	e00c      	b.n	800850a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008508:	d0e7      	beq.n	80084da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
}
 800850c:	4618      	mov	r0, r3
 800850e:	371c      	adds	r7, #28
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008518:	b480      	push	{r7}
 800851a:	b089      	sub	sp, #36	@ 0x24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	4611      	mov	r1, r2
 8008524:	461a      	mov	r2, r3
 8008526:	460b      	mov	r3, r1
 8008528:	71fb      	strb	r3, [r7, #7]
 800852a:	4613      	mov	r3, r2
 800852c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008536:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800853a:	2b00      	cmp	r3, #0
 800853c:	d123      	bne.n	8008586 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800853e:	88bb      	ldrh	r3, [r7, #4]
 8008540:	3303      	adds	r3, #3
 8008542:	089b      	lsrs	r3, r3, #2
 8008544:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008546:	2300      	movs	r3, #0
 8008548:	61bb      	str	r3, [r7, #24]
 800854a:	e018      	b.n	800857e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	031a      	lsls	r2, r3, #12
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	4413      	add	r3, r2
 8008554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008558:	461a      	mov	r2, r3
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	3301      	adds	r3, #1
 8008564:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	3301      	adds	r3, #1
 800856a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	3301      	adds	r3, #1
 8008570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	3301      	adds	r3, #1
 8008576:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	3301      	adds	r3, #1
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	429a      	cmp	r2, r3
 8008584:	d3e2      	bcc.n	800854c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3724      	adds	r7, #36	@ 0x24
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008594:	b480      	push	{r7}
 8008596:	b08b      	sub	sp, #44	@ 0x2c
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	089b      	lsrs	r3, r3, #2
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085ba:	2300      	movs	r3, #0
 80085bc:	623b      	str	r3, [r7, #32]
 80085be:	e014      	b.n	80085ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	3301      	adds	r3, #1
 80085d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d4:	3301      	adds	r3, #1
 80085d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	3301      	adds	r3, #1
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	3301      	adds	r3, #1
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	3301      	adds	r3, #1
 80085e8:	623b      	str	r3, [r7, #32]
 80085ea:	6a3a      	ldr	r2, [r7, #32]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d3e6      	bcc.n	80085c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085f2:	8bfb      	ldrh	r3, [r7, #30]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d01e      	beq.n	8008636 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008602:	461a      	mov	r2, r3
 8008604:	f107 0310 	add.w	r3, r7, #16
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	fa22 f303 	lsr.w	r3, r2, r3
 8008618:	b2da      	uxtb	r2, r3
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	701a      	strb	r2, [r3, #0]
      i++;
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	3301      	adds	r3, #1
 8008622:	623b      	str	r3, [r7, #32]
      pDest++;
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	3301      	adds	r3, #1
 8008628:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800862a:	8bfb      	ldrh	r3, [r7, #30]
 800862c:	3b01      	subs	r3, #1
 800862e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008630:	8bfb      	ldrh	r3, [r7, #30]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1ea      	bne.n	800860c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008638:	4618      	mov	r0, r3
 800863a:	372c      	adds	r7, #44	@ 0x2c
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	785b      	ldrb	r3, [r3, #1]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d12c      	bne.n	80086ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	db12      	blt.n	8008698 <USB_EPSetStall+0x54>
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00f      	beq.n	8008698 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	440a      	add	r2, r1
 800868e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008692:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008696:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	e02b      	b.n	8008712 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	db12      	blt.n	80086f2 <USB_EPSetStall+0xae>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00f      	beq.n	80086f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	0151      	lsls	r1, r2, #5
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	440a      	add	r2, r1
 8008708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800870c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008710:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d128      	bne.n	800878e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	0151      	lsls	r1, r2, #5
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	440a      	add	r2, r1
 8008752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008756:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800875a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	791b      	ldrb	r3, [r3, #4]
 8008760:	2b03      	cmp	r3, #3
 8008762:	d003      	beq.n	800876c <USB_EPClearStall+0x4c>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	791b      	ldrb	r3, [r3, #4]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d138      	bne.n	80087de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	0151      	lsls	r1, r2, #5
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	440a      	add	r2, r1
 8008782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	e027      	b.n	80087de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	791b      	ldrb	r3, [r3, #4]
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d003      	beq.n	80087be <USB_EPClearStall+0x9e>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	791b      	ldrb	r3, [r3, #4]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d10f      	bne.n	80087de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800880a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800880e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008820:	68f9      	ldr	r1, [r7, #12]
 8008822:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008826:	4313      	orrs	r3, r2
 8008828:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008866:	f023 0302 	bic.w	r3, r3, #2
 800886a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008894:	f023 0303 	bic.w	r3, r3, #3
 8008898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088a8:	f043 0302 	orr.w	r3, r3, #2
 80088ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4013      	ands	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088d4:	68fb      	ldr	r3, [r7, #12]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	4013      	ands	r3, r2
 8008904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	0c1b      	lsrs	r3, r3, #16
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008916:	b480      	push	{r7}
 8008918:	b085      	sub	sp, #20
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	4013      	ands	r3, r2
 8008938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	b29b      	uxth	r3, r3
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	460b      	mov	r3, r1
 8008954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4413      	add	r3, r2
 8008962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4013      	ands	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008978:	68bb      	ldr	r3, [r7, #8]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008986:	b480      	push	{r7}
 8008988:	b087      	sub	sp, #28
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	fa22 f303 	lsr.w	r3, r2, r3
 80089b6:	01db      	lsls	r3, r3, #7
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4013      	ands	r3, r2
 80089d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089d4:	68bb      	ldr	r3, [r7, #8]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f003 0301 	and.w	r3, r3, #1
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008a1c:	f023 0307 	bic.w	r3, r3, #7
 8008a20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	333c      	adds	r3, #60	@ 0x3c
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	4a26      	ldr	r2, [pc, #152]	@ (8008afc <USB_EP0_OutStart+0xb8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d90a      	bls.n	8008a7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a78:	d101      	bne.n	8008a7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e037      	b.n	8008aee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a84:	461a      	mov	r2, r3
 8008a86:	2300      	movs	r3, #0
 8008a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aac:	f043 0318 	orr.w	r3, r3, #24
 8008ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008ac4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d10f      	bne.n	8008aec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ae6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	4f54300a 	.word	0x4f54300a

08008b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b18:	d901      	bls.n	8008b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e01b      	b.n	8008b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	daf2      	bge.n	8008b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f043 0201 	orr.w	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b42:	d901      	bls.n	8008b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e006      	b.n	8008b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d0f0      	beq.n	8008b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
	...

08008b64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008b74:	f002 fc9e 	bl	800b4b4 <USBD_static_malloc>
 8008b78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d109      	bne.n	8008b94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32b0      	adds	r2, #176	@ 0xb0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008b90:	2302      	movs	r3, #2
 8008b92:	e0d4      	b.n	8008d3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008b94:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b98:	2100      	movs	r1, #0
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f004 fa73 	bl	800d086 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	32b0      	adds	r2, #176	@ 0xb0
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	32b0      	adds	r2, #176	@ 0xb0
 8008bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7c1b      	ldrb	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d138      	bne.n	8008c3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8008d48 <USBD_CDC_Init+0x1e4>)
 8008bce:	7819      	ldrb	r1, [r3, #0]
 8008bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f002 fb49 	bl	800b26e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8008d48 <USBD_CDC_Init+0x1e4>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	3324      	adds	r3, #36	@ 0x24
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bf6:	4b55      	ldr	r3, [pc, #340]	@ (8008d4c <USBD_CDC_Init+0x1e8>)
 8008bf8:	7819      	ldrb	r1, [r3, #0]
 8008bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bfe:	2202      	movs	r2, #2
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f002 fb34 	bl	800b26e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c06:	4b51      	ldr	r3, [pc, #324]	@ (8008d4c <USBD_CDC_Init+0x1e8>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f003 020f 	and.w	r2, r3, #15
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	440b      	add	r3, r1
 8008c1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c1e:	2201      	movs	r2, #1
 8008c20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c22:	4b4b      	ldr	r3, [pc, #300]	@ (8008d50 <USBD_CDC_Init+0x1ec>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	f003 020f 	and.w	r2, r3, #15
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	3326      	adds	r3, #38	@ 0x26
 8008c38:	2210      	movs	r2, #16
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	e035      	b.n	8008caa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c3e:	4b42      	ldr	r3, [pc, #264]	@ (8008d48 <USBD_CDC_Init+0x1e4>)
 8008c40:	7819      	ldrb	r1, [r3, #0]
 8008c42:	2340      	movs	r3, #64	@ 0x40
 8008c44:	2202      	movs	r2, #2
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f002 fb11 	bl	800b26e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8008d48 <USBD_CDC_Init+0x1e4>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	3324      	adds	r3, #36	@ 0x24
 8008c62:	2201      	movs	r2, #1
 8008c64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c66:	4b39      	ldr	r3, [pc, #228]	@ (8008d4c <USBD_CDC_Init+0x1e8>)
 8008c68:	7819      	ldrb	r1, [r3, #0]
 8008c6a:	2340      	movs	r3, #64	@ 0x40
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f002 fafd 	bl	800b26e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c74:	4b35      	ldr	r3, [pc, #212]	@ (8008d4c <USBD_CDC_Init+0x1e8>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	f003 020f 	and.w	r2, r3, #15
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c90:	4b2f      	ldr	r3, [pc, #188]	@ (8008d50 <USBD_CDC_Init+0x1ec>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3326      	adds	r3, #38	@ 0x26
 8008ca6:	2210      	movs	r2, #16
 8008ca8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008caa:	4b29      	ldr	r3, [pc, #164]	@ (8008d50 <USBD_CDC_Init+0x1ec>)
 8008cac:	7819      	ldrb	r1, [r3, #0]
 8008cae:	2308      	movs	r3, #8
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f002 fadb 	bl	800b26e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008cb8:	4b25      	ldr	r3, [pc, #148]	@ (8008d50 <USBD_CDC_Init+0x1ec>)
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	f003 020f 	and.w	r2, r3, #15
 8008cc0:	6879      	ldr	r1, [r7, #4]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	440b      	add	r3, r1
 8008ccc:	3324      	adds	r3, #36	@ 0x24
 8008cce:	2201      	movs	r2, #1
 8008cd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	33b0      	adds	r3, #176	@ 0xb0
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e018      	b.n	8008d3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	7c1b      	ldrb	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d14:	4b0d      	ldr	r3, [pc, #52]	@ (8008d4c <USBD_CDC_Init+0x1e8>)
 8008d16:	7819      	ldrb	r1, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f002 fb92 	bl	800b44c <USBD_LL_PrepareReceive>
 8008d28:	e008      	b.n	8008d3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d2a:	4b08      	ldr	r3, [pc, #32]	@ (8008d4c <USBD_CDC_Init+0x1e8>)
 8008d2c:	7819      	ldrb	r1, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d34:	2340      	movs	r3, #64	@ 0x40
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f002 fb88 	bl	800b44c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000093 	.word	0x20000093
 8008d4c:	20000094 	.word	0x20000094
 8008d50:	20000095 	.word	0x20000095

08008d54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008d60:	4b3a      	ldr	r3, [pc, #232]	@ (8008e4c <USBD_CDC_DeInit+0xf8>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f002 faa7 	bl	800b2ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008d6c:	4b37      	ldr	r3, [pc, #220]	@ (8008e4c <USBD_CDC_DeInit+0xf8>)
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	f003 020f 	and.w	r2, r3, #15
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	3324      	adds	r3, #36	@ 0x24
 8008d82:	2200      	movs	r2, #0
 8008d84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008d86:	4b32      	ldr	r3, [pc, #200]	@ (8008e50 <USBD_CDC_DeInit+0xfc>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f002 fa94 	bl	800b2ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008d92:	4b2f      	ldr	r3, [pc, #188]	@ (8008e50 <USBD_CDC_DeInit+0xfc>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	f003 020f 	and.w	r2, r3, #15
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008daa:	2200      	movs	r2, #0
 8008dac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008dae:	4b29      	ldr	r3, [pc, #164]	@ (8008e54 <USBD_CDC_DeInit+0x100>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f002 fa80 	bl	800b2ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008dba:	4b26      	ldr	r3, [pc, #152]	@ (8008e54 <USBD_CDC_DeInit+0x100>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	f003 020f 	and.w	r2, r3, #15
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	440b      	add	r3, r1
 8008dce:	3324      	adds	r3, #36	@ 0x24
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8008e54 <USBD_CDC_DeInit+0x100>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 020f 	and.w	r2, r3, #15
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	3326      	adds	r3, #38	@ 0x26
 8008dea:	2200      	movs	r2, #0
 8008dec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	32b0      	adds	r2, #176	@ 0xb0
 8008df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d01f      	beq.n	8008e40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	33b0      	adds	r3, #176	@ 0xb0
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	32b0      	adds	r2, #176	@ 0xb0
 8008e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f002 fb54 	bl	800b4d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	32b0      	adds	r2, #176	@ 0xb0
 8008e32:	2100      	movs	r1, #0
 8008e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000093 	.word	0x20000093
 8008e50:	20000094 	.word	0x20000094
 8008e54:	20000095 	.word	0x20000095

08008e58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	32b0      	adds	r2, #176	@ 0xb0
 8008e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e0bf      	b.n	8009008 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d050      	beq.n	8008f36 <USBD_CDC_Setup+0xde>
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	f040 80af 	bne.w	8008ff8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	88db      	ldrh	r3, [r3, #6]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d03a      	beq.n	8008f18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	b25b      	sxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	da1b      	bge.n	8008ee4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	33b0      	adds	r3, #176	@ 0xb0
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008ec2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	88d2      	ldrh	r2, [r2, #6]
 8008ec8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	88db      	ldrh	r3, [r3, #6]
 8008ece:	2b07      	cmp	r3, #7
 8008ed0:	bf28      	it	cs
 8008ed2:	2307      	movcs	r3, #7
 8008ed4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	89fa      	ldrh	r2, [r7, #14]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 fd93 	bl	800aa08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008ee2:	e090      	b.n	8009006 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	785a      	ldrb	r2, [r3, #1]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	88db      	ldrh	r3, [r3, #6]
 8008ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ef4:	d803      	bhi.n	8008efe <USBD_CDC_Setup+0xa6>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	88db      	ldrh	r3, [r3, #6]
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	e000      	b.n	8008f00 <USBD_CDC_Setup+0xa8>
 8008efe:	2240      	movs	r2, #64	@ 0x40
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008f06:	6939      	ldr	r1, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008f0e:	461a      	mov	r2, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 fda5 	bl	800aa60 <USBD_CtlPrepareRx>
      break;
 8008f16:	e076      	b.n	8009006 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	33b0      	adds	r3, #176	@ 0xb0
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	7850      	ldrb	r0, [r2, #1]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	4798      	blx	r3
      break;
 8008f34:	e067      	b.n	8009006 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2b0b      	cmp	r3, #11
 8008f3c:	d851      	bhi.n	8008fe2 <USBD_CDC_Setup+0x18a>
 8008f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f44 <USBD_CDC_Setup+0xec>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008f75 	.word	0x08008f75
 8008f48:	08008ff1 	.word	0x08008ff1
 8008f4c:	08008fe3 	.word	0x08008fe3
 8008f50:	08008fe3 	.word	0x08008fe3
 8008f54:	08008fe3 	.word	0x08008fe3
 8008f58:	08008fe3 	.word	0x08008fe3
 8008f5c:	08008fe3 	.word	0x08008fe3
 8008f60:	08008fe3 	.word	0x08008fe3
 8008f64:	08008fe3 	.word	0x08008fe3
 8008f68:	08008fe3 	.word	0x08008fe3
 8008f6c:	08008f9f 	.word	0x08008f9f
 8008f70:	08008fc9 	.word	0x08008fc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d107      	bne.n	8008f90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f80:	f107 030a 	add.w	r3, r7, #10
 8008f84:	2202      	movs	r2, #2
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 fd3d 	bl	800aa08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f8e:	e032      	b.n	8008ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f001 fcbb 	bl	800a90e <USBD_CtlError>
            ret = USBD_FAIL;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8008f9c:	e02b      	b.n	8008ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d107      	bne.n	8008fba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008faa:	f107 030d 	add.w	r3, r7, #13
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 fd28 	bl	800aa08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fb8:	e01d      	b.n	8008ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 fca6 	bl	800a90e <USBD_CtlError>
            ret = USBD_FAIL;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8008fc6:	e016      	b.n	8008ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d00f      	beq.n	8008ff4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 fc99 	bl	800a90e <USBD_CtlError>
            ret = USBD_FAIL;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008fe0:	e008      	b.n	8008ff4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 fc92 	bl	800a90e <USBD_CtlError>
          ret = USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	75fb      	strb	r3, [r7, #23]
          break;
 8008fee:	e002      	b.n	8008ff6 <USBD_CDC_Setup+0x19e>
          break;
 8008ff0:	bf00      	nop
 8008ff2:	e008      	b.n	8009006 <USBD_CDC_Setup+0x1ae>
          break;
 8008ff4:	bf00      	nop
      }
      break;
 8008ff6:	e006      	b.n	8009006 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 fc87 	bl	800a90e <USBD_CtlError>
      ret = USBD_FAIL;
 8009000:	2303      	movs	r3, #3
 8009002:	75fb      	strb	r3, [r7, #23]
      break;
 8009004:	bf00      	nop
  }

  return (uint8_t)ret;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009022:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32b0      	adds	r2, #176	@ 0xb0
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009036:	2303      	movs	r3, #3
 8009038:	e065      	b.n	8009106 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	32b0      	adds	r2, #176	@ 0xb0
 8009044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009048:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 020f 	and.w	r2, r3, #15
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	4613      	mov	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	440b      	add	r3, r1
 800905c:	3318      	adds	r3, #24
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d02f      	beq.n	80090c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	f003 020f 	and.w	r2, r3, #15
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	3318      	adds	r3, #24
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	f003 010f 	and.w	r1, r3, #15
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	460b      	mov	r3, r1
 8009084:	00db      	lsls	r3, r3, #3
 8009086:	440b      	add	r3, r1
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4403      	add	r3, r0
 800908c:	331c      	adds	r3, #28
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	fbb2 f1f3 	udiv	r1, r2, r3
 8009094:	fb01 f303 	mul.w	r3, r1, r3
 8009098:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800909a:	2b00      	cmp	r3, #0
 800909c:	d112      	bne.n	80090c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	f003 020f 	and.w	r2, r3, #15
 80090a4:	6879      	ldr	r1, [r7, #4]
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	440b      	add	r3, r1
 80090b0:	3318      	adds	r3, #24
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090b6:	78f9      	ldrb	r1, [r7, #3]
 80090b8:	2300      	movs	r3, #0
 80090ba:	2200      	movs	r2, #0
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f002 f9a4 	bl	800b40a <USBD_LL_Transmit>
 80090c2:	e01f      	b.n	8009104 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	33b0      	adds	r3, #176	@ 0xb0
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d010      	beq.n	8009104 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	33b0      	adds	r3, #176	@ 0xb0
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	32b0      	adds	r2, #176	@ 0xb0
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	32b0      	adds	r2, #176	@ 0xb0
 8009134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800913c:	2303      	movs	r3, #3
 800913e:	e01a      	b.n	8009176 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009140:	78fb      	ldrb	r3, [r7, #3]
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f002 f9a2 	bl	800b48e <USBD_LL_GetRxDataSize>
 800914a:	4602      	mov	r2, r0
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	33b0      	adds	r3, #176	@ 0xb0
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009170:	4611      	mov	r1, r2
 8009172:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	32b0      	adds	r2, #176	@ 0xb0
 8009190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009194:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	e024      	b.n	80091ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	33b0      	adds	r3, #176	@ 0xb0
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d019      	beq.n	80091e8 <USBD_CDC_EP0_RxReady+0x6a>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80091ba:	2bff      	cmp	r3, #255	@ 0xff
 80091bc:	d014      	beq.n	80091e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	33b0      	adds	r3, #176	@ 0xb0
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80091d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	22ff      	movs	r2, #255	@ 0xff
 80091e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091fc:	2182      	movs	r1, #130	@ 0x82
 80091fe:	4818      	ldr	r0, [pc, #96]	@ (8009260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009200:	f000 fd4f 	bl	8009ca2 <USBD_GetEpDesc>
 8009204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009206:	2101      	movs	r1, #1
 8009208:	4815      	ldr	r0, [pc, #84]	@ (8009260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800920a:	f000 fd4a 	bl	8009ca2 <USBD_GetEpDesc>
 800920e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009210:	2181      	movs	r1, #129	@ 0x81
 8009212:	4813      	ldr	r0, [pc, #76]	@ (8009260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009214:	f000 fd45 	bl	8009ca2 <USBD_GetEpDesc>
 8009218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2210      	movs	r2, #16
 8009224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d006      	beq.n	800923a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2200      	movs	r2, #0
 8009230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009234:	711a      	strb	r2, [r3, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d006      	beq.n	800924e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009248:	711a      	strb	r2, [r3, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2243      	movs	r2, #67	@ 0x43
 8009252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009254:	4b02      	ldr	r3, [pc, #8]	@ (8009260 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20000050 	.word	0x20000050

08009264 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800926c:	2182      	movs	r1, #130	@ 0x82
 800926e:	4818      	ldr	r0, [pc, #96]	@ (80092d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009270:	f000 fd17 	bl	8009ca2 <USBD_GetEpDesc>
 8009274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009276:	2101      	movs	r1, #1
 8009278:	4815      	ldr	r0, [pc, #84]	@ (80092d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800927a:	f000 fd12 	bl	8009ca2 <USBD_GetEpDesc>
 800927e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009280:	2181      	movs	r1, #129	@ 0x81
 8009282:	4813      	ldr	r0, [pc, #76]	@ (80092d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009284:	f000 fd0d 	bl	8009ca2 <USBD_GetEpDesc>
 8009288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2210      	movs	r2, #16
 8009294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d006      	beq.n	80092aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2200      	movs	r2, #0
 80092a0:	711a      	strb	r2, [r3, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f042 0202 	orr.w	r2, r2, #2
 80092a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d006      	beq.n	80092be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	711a      	strb	r2, [r3, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f042 0202 	orr.w	r2, r2, #2
 80092bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2243      	movs	r2, #67	@ 0x43
 80092c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092c4:	4b02      	ldr	r3, [pc, #8]	@ (80092d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000050 	.word	0x20000050

080092d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092dc:	2182      	movs	r1, #130	@ 0x82
 80092de:	4818      	ldr	r0, [pc, #96]	@ (8009340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092e0:	f000 fcdf 	bl	8009ca2 <USBD_GetEpDesc>
 80092e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092e6:	2101      	movs	r1, #1
 80092e8:	4815      	ldr	r0, [pc, #84]	@ (8009340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092ea:	f000 fcda 	bl	8009ca2 <USBD_GetEpDesc>
 80092ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092f0:	2181      	movs	r1, #129	@ 0x81
 80092f2:	4813      	ldr	r0, [pc, #76]	@ (8009340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092f4:	f000 fcd5 	bl	8009ca2 <USBD_GetEpDesc>
 80092f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	2210      	movs	r2, #16
 8009304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	2200      	movs	r2, #0
 8009310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009314:	711a      	strb	r2, [r3, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d006      	beq.n	800932e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009328:	711a      	strb	r2, [r3, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2243      	movs	r2, #67	@ 0x43
 8009332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009334:	4b02      	ldr	r3, [pc, #8]	@ (8009340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000050 	.word	0x20000050

08009344 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	220a      	movs	r2, #10
 8009350:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009352:	4b03      	ldr	r3, [pc, #12]	@ (8009360 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	2000000c 	.word	0x2000000c

08009364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009374:	2303      	movs	r3, #3
 8009376:	e009      	b.n	800938c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	33b0      	adds	r3, #176	@ 0xb0
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	32b0      	adds	r2, #176	@ 0xb0
 80093ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e008      	b.n	80093d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	371c      	adds	r7, #28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	32b0      	adds	r2, #176	@ 0xb0
 80093f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e004      	b.n	800940a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
	...

08009418 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32b0      	adds	r2, #176	@ 0xb0
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009430:	2301      	movs	r3, #1
 8009432:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800943a:	2303      	movs	r3, #3
 800943c:	e025      	b.n	800948a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009444:	2b00      	cmp	r3, #0
 8009446:	d11f      	bne.n	8009488 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2201      	movs	r2, #1
 800944c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009450:	4b10      	ldr	r3, [pc, #64]	@ (8009494 <USBD_CDC_TransmitPacket+0x7c>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	f003 020f 	and.w	r2, r3, #15
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4403      	add	r3, r0
 800946a:	3318      	adds	r3, #24
 800946c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800946e:	4b09      	ldr	r3, [pc, #36]	@ (8009494 <USBD_CDC_TransmitPacket+0x7c>)
 8009470:	7819      	ldrb	r1, [r3, #0]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 ffc3 	bl	800b40a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20000093 	.word	0x20000093

08009498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	32b0      	adds	r2, #176	@ 0xb0
 80094aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	32b0      	adds	r2, #176	@ 0xb0
 80094ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e018      	b.n	80094f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	7c1b      	ldrb	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009500 <USBD_CDC_ReceivePacket+0x68>)
 80094d0:	7819      	ldrb	r1, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 ffb5 	bl	800b44c <USBD_LL_PrepareReceive>
 80094e2:	e008      	b.n	80094f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094e4:	4b06      	ldr	r3, [pc, #24]	@ (8009500 <USBD_CDC_ReceivePacket+0x68>)
 80094e6:	7819      	ldrb	r1, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094ee:	2340      	movs	r3, #64	@ 0x40
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 ffab 	bl	800b44c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20000094 	.word	0x20000094

08009504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	4613      	mov	r3, r2
 8009510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009518:	2303      	movs	r3, #3
 800951a:	e01f      	b.n	800955c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	79fa      	ldrb	r2, [r7, #7]
 800954e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f001 fe25 	bl	800b1a0 <USBD_LL_Init>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	e025      	b.n	80095c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	32ae      	adds	r2, #174	@ 0xae
 800958e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00f      	beq.n	80095b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	32ae      	adds	r2, #174	@ 0xae
 80095a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a8:	f107 020e 	add.w	r2, r7, #14
 80095ac:	4610      	mov	r0, r2
 80095ae:	4798      	blx	r3
 80095b0:	4602      	mov	r2, r0
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fe2d 	bl	800b238 <USBD_LL_Start>
 80095de:	4603      	mov	r3, r0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009614:	2b00      	cmp	r3, #0
 8009616:	d009      	beq.n	800962c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	78fa      	ldrb	r2, [r7, #3]
 8009622:	4611      	mov	r1, r2
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	4798      	blx	r3
 8009628:	4603      	mov	r3, r0
 800962a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800962c:	7bfb      	ldrb	r3, [r7, #15]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	4611      	mov	r1, r2
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	4798      	blx	r3
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800965c:	2303      	movs	r3, #3
 800965e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	4618      	mov	r0, r3
 800967e:	f001 f90c 	bl	800a89a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009690:	461a      	mov	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800969e:	f003 031f 	and.w	r3, r3, #31
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d01a      	beq.n	80096dc <USBD_LL_SetupStage+0x72>
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d822      	bhi.n	80096f0 <USBD_LL_SetupStage+0x86>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <USBD_LL_SetupStage+0x4a>
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d00a      	beq.n	80096c8 <USBD_LL_SetupStage+0x5e>
 80096b2:	e01d      	b.n	80096f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fb63 	bl	8009d88 <USBD_StdDevReq>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]
      break;
 80096c6:	e020      	b.n	800970a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fbcb 	bl	8009e6c <USBD_StdItfReq>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]
      break;
 80096da:	e016      	b.n	800970a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fc2d 	bl	8009f44 <USBD_StdEPReq>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73fb      	strb	r3, [r7, #15]
      break;
 80096ee:	e00c      	b.n	800970a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 fdfa 	bl	800b2f8 <USBD_LL_StallEP>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
      break;
 8009708:	bf00      	nop
  }

  return ret;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	460b      	mov	r3, r1
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009726:	7afb      	ldrb	r3, [r7, #11]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d16e      	bne.n	800980a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800973a:	2b03      	cmp	r3, #3
 800973c:	f040 8098 	bne.w	8009870 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	429a      	cmp	r2, r3
 800974a:	d913      	bls.n	8009774 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	1ad2      	subs	r2, r2, r3
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	4293      	cmp	r3, r2
 8009764:	bf28      	it	cs
 8009766:	4613      	movcs	r3, r2
 8009768:	461a      	mov	r2, r3
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f001 f994 	bl	800aa9a <USBD_CtlContinueRx>
 8009772:	e07d      	b.n	8009870 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800977a:	f003 031f 	and.w	r3, r3, #31
 800977e:	2b02      	cmp	r3, #2
 8009780:	d014      	beq.n	80097ac <USBD_LL_DataOutStage+0x98>
 8009782:	2b02      	cmp	r3, #2
 8009784:	d81d      	bhi.n	80097c2 <USBD_LL_DataOutStage+0xae>
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <USBD_LL_DataOutStage+0x7c>
 800978a:	2b01      	cmp	r3, #1
 800978c:	d003      	beq.n	8009796 <USBD_LL_DataOutStage+0x82>
 800978e:	e018      	b.n	80097c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	75bb      	strb	r3, [r7, #22]
            break;
 8009794:	e018      	b.n	80097c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800979c:	b2db      	uxtb	r3, r3
 800979e:	4619      	mov	r1, r3
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 fa64 	bl	8009c6e <USBD_CoreFindIF>
 80097a6:	4603      	mov	r3, r0
 80097a8:	75bb      	strb	r3, [r7, #22]
            break;
 80097aa:	e00d      	b.n	80097c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	4619      	mov	r1, r3
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 fa66 	bl	8009c88 <USBD_CoreFindEP>
 80097bc:	4603      	mov	r3, r0
 80097be:	75bb      	strb	r3, [r7, #22]
            break;
 80097c0:	e002      	b.n	80097c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	75bb      	strb	r3, [r7, #22]
            break;
 80097c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80097c8:	7dbb      	ldrb	r3, [r7, #22]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d119      	bne.n	8009802 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d113      	bne.n	8009802 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80097da:	7dba      	ldrb	r2, [r7, #22]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	32ae      	adds	r2, #174	@ 0xae
 80097e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00b      	beq.n	8009802 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80097ea:	7dba      	ldrb	r2, [r7, #22]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80097f2:	7dba      	ldrb	r2, [r7, #22]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	32ae      	adds	r2, #174	@ 0xae
 80097f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f001 f95a 	bl	800aabc <USBD_CtlSendStatus>
 8009808:	e032      	b.n	8009870 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800980a:	7afb      	ldrb	r3, [r7, #11]
 800980c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009810:	b2db      	uxtb	r3, r3
 8009812:	4619      	mov	r1, r3
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 fa37 	bl	8009c88 <USBD_CoreFindEP>
 800981a:	4603      	mov	r3, r0
 800981c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800981e:	7dbb      	ldrb	r3, [r7, #22]
 8009820:	2bff      	cmp	r3, #255	@ 0xff
 8009822:	d025      	beq.n	8009870 <USBD_LL_DataOutStage+0x15c>
 8009824:	7dbb      	ldrb	r3, [r7, #22]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d122      	bne.n	8009870 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b03      	cmp	r3, #3
 8009834:	d117      	bne.n	8009866 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009836:	7dba      	ldrb	r2, [r7, #22]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	32ae      	adds	r2, #174	@ 0xae
 800983c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00f      	beq.n	8009866 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009846:	7dba      	ldrb	r2, [r7, #22]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800984e:	7dba      	ldrb	r2, [r7, #22]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	32ae      	adds	r2, #174	@ 0xae
 8009854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	7afa      	ldrb	r2, [r7, #11]
 800985c:	4611      	mov	r1, r2
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	e000      	b.n	8009872 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b086      	sub	sp, #24
 800987e:	af00      	add	r7, sp, #0
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	460b      	mov	r3, r1
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009888:	7afb      	ldrb	r3, [r7, #11]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d16f      	bne.n	800996e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3314      	adds	r3, #20
 8009892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800989a:	2b02      	cmp	r3, #2
 800989c:	d15a      	bne.n	8009954 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	689a      	ldr	r2, [r3, #8]
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d914      	bls.n	80098d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	689a      	ldr	r2, [r3, #8]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	1ad2      	subs	r2, r2, r3
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	461a      	mov	r2, r3
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f001 f8bc 	bl	800aa3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098c6:	2300      	movs	r3, #0
 80098c8:	2200      	movs	r2, #0
 80098ca:	2100      	movs	r1, #0
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f001 fdbd 	bl	800b44c <USBD_LL_PrepareReceive>
 80098d2:	e03f      	b.n	8009954 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	68da      	ldr	r2, [r3, #12]
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d11c      	bne.n	800991a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d316      	bcc.n	800991a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d20f      	bcs.n	800991a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098fa:	2200      	movs	r2, #0
 80098fc:	2100      	movs	r1, #0
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f001 f89d 	bl	800aa3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800990c:	2300      	movs	r3, #0
 800990e:	2200      	movs	r2, #0
 8009910:	2100      	movs	r1, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f001 fd9a 	bl	800b44c <USBD_LL_PrepareReceive>
 8009918:	e01c      	b.n	8009954 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b03      	cmp	r3, #3
 8009924:	d10f      	bne.n	8009946 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d009      	beq.n	8009946 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009946:	2180      	movs	r1, #128	@ 0x80
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f001 fcd5 	bl	800b2f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 f8c7 	bl	800aae2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d03a      	beq.n	80099d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff fe42 	bl	80095e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800996c:	e032      	b.n	80099d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800996e:	7afb      	ldrb	r3, [r7, #11]
 8009970:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009974:	b2db      	uxtb	r3, r3
 8009976:	4619      	mov	r1, r3
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 f985 	bl	8009c88 <USBD_CoreFindEP>
 800997e:	4603      	mov	r3, r0
 8009980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	2bff      	cmp	r3, #255	@ 0xff
 8009986:	d025      	beq.n	80099d4 <USBD_LL_DataInStage+0x15a>
 8009988:	7dfb      	ldrb	r3, [r7, #23]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d122      	bne.n	80099d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b03      	cmp	r3, #3
 8009998:	d11c      	bne.n	80099d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800999a:	7dfa      	ldrb	r2, [r7, #23]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	32ae      	adds	r2, #174	@ 0xae
 80099a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d014      	beq.n	80099d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80099aa:	7dfa      	ldrb	r2, [r7, #23]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80099b2:	7dfa      	ldrb	r2, [r7, #23]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	32ae      	adds	r2, #174	@ 0xae
 80099b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	7afa      	ldrb	r2, [r7, #11]
 80099c0:	4611      	mov	r1, r2
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	4798      	blx	r3
 80099c6:	4603      	mov	r3, r0
 80099c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80099ca:	7dbb      	ldrb	r3, [r7, #22]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80099d0:	7dbb      	ldrb	r3, [r7, #22]
 80099d2:	e000      	b.n	80099d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d014      	beq.n	8009a44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00e      	beq.n	8009a44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	6852      	ldr	r2, [r2, #4]
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	4611      	mov	r1, r2
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	4798      	blx	r3
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a40:	2303      	movs	r3, #3
 8009a42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a44:	2340      	movs	r3, #64	@ 0x40
 8009a46:	2200      	movs	r2, #0
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f001 fc0f 	bl	800b26e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2240      	movs	r2, #64	@ 0x40
 8009a5c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a60:	2340      	movs	r3, #64	@ 0x40
 8009a62:	2200      	movs	r2, #0
 8009a64:	2180      	movs	r1, #128	@ 0x80
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fc01 	bl	800b26e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2240      	movs	r2, #64	@ 0x40
 8009a76:	621a      	str	r2, [r3, #32]

  return ret;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	78fa      	ldrb	r2, [r7, #3]
 8009a92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d006      	beq.n	8009ac4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2204      	movs	r2, #4
 8009ac8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b04      	cmp	r3, #4
 8009aec:	d106      	bne.n	8009afc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d110      	bne.n	8009b40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	460b      	mov	r3, r1
 8009b54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	32ae      	adds	r2, #174	@ 0xae
 8009b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e01c      	b.n	8009ba6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d115      	bne.n	8009ba4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	32ae      	adds	r2, #174	@ 0xae
 8009b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00b      	beq.n	8009ba4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	32ae      	adds	r2, #174	@ 0xae
 8009b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	78fa      	ldrb	r2, [r7, #3]
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	32ae      	adds	r2, #174	@ 0xae
 8009bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e01c      	b.n	8009c0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	d115      	bne.n	8009c08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	32ae      	adds	r2, #174	@ 0xae
 8009be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32ae      	adds	r2, #174	@ 0xae
 8009bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	4611      	mov	r1, r2
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00e      	beq.n	8009c64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	6852      	ldr	r2, [r2, #4]
 8009c52:	b2d2      	uxtb	r2, r2
 8009c54:	4611      	mov	r1, r2
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	4798      	blx	r3
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009c60:	2303      	movs	r3, #3
 8009c62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	460b      	mov	r3, r1
 8009c78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009c7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009c94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	370c      	adds	r7, #12
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b086      	sub	sp, #24
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	460b      	mov	r3, r1
 8009cac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	885b      	ldrh	r3, [r3, #2]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	7812      	ldrb	r2, [r2, #0]
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d91f      	bls.n	8009d08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009cce:	e013      	b.n	8009cf8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009cd0:	f107 030a 	add.w	r3, r7, #10
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6978      	ldr	r0, [r7, #20]
 8009cd8:	f000 f81b 	bl	8009d12 <USBD_GetNextDesc>
 8009cdc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	2b05      	cmp	r3, #5
 8009ce4:	d108      	bne.n	8009cf8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	789b      	ldrb	r3, [r3, #2]
 8009cee:	78fa      	ldrb	r2, [r7, #3]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d008      	beq.n	8009d06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	885b      	ldrh	r3, [r3, #2]
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	897b      	ldrh	r3, [r7, #10]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d8e5      	bhi.n	8009cd0 <USBD_GetEpDesc+0x2e>
 8009d04:	e000      	b.n	8009d08 <USBD_GetEpDesc+0x66>
          break;
 8009d06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d08:	693b      	ldr	r3, [r7, #16]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	7812      	ldrb	r2, [r2, #0]
 8009d28:	4413      	add	r3, r2
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	461a      	mov	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4413      	add	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b087      	sub	sp, #28
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009d68:	8a3b      	ldrh	r3, [r7, #16]
 8009d6a:	021b      	lsls	r3, r3, #8
 8009d6c:	b21a      	sxth	r2, r3
 8009d6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	b21b      	sxth	r3, r3
 8009d76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009d78:	89fb      	ldrh	r3, [r7, #14]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
	...

08009d88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d9e:	2b40      	cmp	r3, #64	@ 0x40
 8009da0:	d005      	beq.n	8009dae <USBD_StdDevReq+0x26>
 8009da2:	2b40      	cmp	r3, #64	@ 0x40
 8009da4:	d857      	bhi.n	8009e56 <USBD_StdDevReq+0xce>
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00f      	beq.n	8009dca <USBD_StdDevReq+0x42>
 8009daa:	2b20      	cmp	r3, #32
 8009dac:	d153      	bne.n	8009e56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	32ae      	adds	r2, #174	@ 0xae
 8009db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	4798      	blx	r3
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc8:	e04a      	b.n	8009e60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	785b      	ldrb	r3, [r3, #1]
 8009dce:	2b09      	cmp	r3, #9
 8009dd0:	d83b      	bhi.n	8009e4a <USBD_StdDevReq+0xc2>
 8009dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd8 <USBD_StdDevReq+0x50>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009e2d 	.word	0x08009e2d
 8009ddc:	08009e41 	.word	0x08009e41
 8009de0:	08009e4b 	.word	0x08009e4b
 8009de4:	08009e37 	.word	0x08009e37
 8009de8:	08009e4b 	.word	0x08009e4b
 8009dec:	08009e0b 	.word	0x08009e0b
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e4b 	.word	0x08009e4b
 8009df8:	08009e23 	.word	0x08009e23
 8009dfc:	08009e15 	.word	0x08009e15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fa3c 	bl	800a280 <USBD_GetDescriptor>
          break;
 8009e08:	e024      	b.n	8009e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fba1 	bl	800a554 <USBD_SetAddress>
          break;
 8009e12:	e01f      	b.n	8009e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fbe0 	bl	800a5dc <USBD_SetConfig>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]
          break;
 8009e20:	e018      	b.n	8009e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc83 	bl	800a730 <USBD_GetConfig>
          break;
 8009e2a:	e013      	b.n	8009e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fcb4 	bl	800a79c <USBD_GetStatus>
          break;
 8009e34:	e00e      	b.n	8009e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fce3 	bl	800a804 <USBD_SetFeature>
          break;
 8009e3e:	e009      	b.n	8009e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fd07 	bl	800a856 <USBD_ClrFeature>
          break;
 8009e48:	e004      	b.n	8009e54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fd5e 	bl	800a90e <USBD_CtlError>
          break;
 8009e52:	bf00      	nop
      }
      break;
 8009e54:	e004      	b.n	8009e60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fd58 	bl	800a90e <USBD_CtlError>
      break;
 8009e5e:	bf00      	nop
  }

  return ret;
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop

08009e6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e82:	2b40      	cmp	r3, #64	@ 0x40
 8009e84:	d005      	beq.n	8009e92 <USBD_StdItfReq+0x26>
 8009e86:	2b40      	cmp	r3, #64	@ 0x40
 8009e88:	d852      	bhi.n	8009f30 <USBD_StdItfReq+0xc4>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <USBD_StdItfReq+0x26>
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d14e      	bne.n	8009f30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d840      	bhi.n	8009f22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	889b      	ldrh	r3, [r3, #4]
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d836      	bhi.n	8009f18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	889b      	ldrh	r3, [r3, #4]
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff fedb 	bl	8009c6e <USBD_CoreFindIF>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	2bff      	cmp	r3, #255	@ 0xff
 8009ec0:	d01d      	beq.n	8009efe <USBD_StdItfReq+0x92>
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d11a      	bne.n	8009efe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ec8:	7bba      	ldrb	r2, [r7, #14]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	32ae      	adds	r2, #174	@ 0xae
 8009ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00f      	beq.n	8009ef8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ed8:	7bba      	ldrb	r2, [r7, #14]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ee0:	7bba      	ldrb	r2, [r7, #14]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	32ae      	adds	r2, #174	@ 0xae
 8009ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	4798      	blx	r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ef6:	e004      	b.n	8009f02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009efc:	e001      	b.n	8009f02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009efe:	2303      	movs	r3, #3
 8009f00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	88db      	ldrh	r3, [r3, #6]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d110      	bne.n	8009f2c <USBD_StdItfReq+0xc0>
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10d      	bne.n	8009f2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fdd3 	bl	800aabc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f16:	e009      	b.n	8009f2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fcf7 	bl	800a90e <USBD_CtlError>
          break;
 8009f20:	e004      	b.n	8009f2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fcf2 	bl	800a90e <USBD_CtlError>
          break;
 8009f2a:	e000      	b.n	8009f2e <USBD_StdItfReq+0xc2>
          break;
 8009f2c:	bf00      	nop
      }
      break;
 8009f2e:	e004      	b.n	8009f3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fceb 	bl	800a90e <USBD_CtlError>
      break;
 8009f38:	bf00      	nop
  }

  return ret;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	889b      	ldrh	r3, [r3, #4]
 8009f56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f60:	2b40      	cmp	r3, #64	@ 0x40
 8009f62:	d007      	beq.n	8009f74 <USBD_StdEPReq+0x30>
 8009f64:	2b40      	cmp	r3, #64	@ 0x40
 8009f66:	f200 817f 	bhi.w	800a268 <USBD_StdEPReq+0x324>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d02a      	beq.n	8009fc4 <USBD_StdEPReq+0x80>
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	f040 817a 	bne.w	800a268 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff fe85 	bl	8009c88 <USBD_CoreFindEP>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f82:	7b7b      	ldrb	r3, [r7, #13]
 8009f84:	2bff      	cmp	r3, #255	@ 0xff
 8009f86:	f000 8174 	beq.w	800a272 <USBD_StdEPReq+0x32e>
 8009f8a:	7b7b      	ldrb	r3, [r7, #13]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f040 8170 	bne.w	800a272 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009f92:	7b7a      	ldrb	r2, [r7, #13]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009f9a:	7b7a      	ldrb	r2, [r7, #13]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	32ae      	adds	r2, #174	@ 0xae
 8009fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 8163 	beq.w	800a272 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009fac:	7b7a      	ldrb	r2, [r7, #13]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	32ae      	adds	r2, #174	@ 0xae
 8009fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009fc2:	e156      	b.n	800a272 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d008      	beq.n	8009fde <USBD_StdEPReq+0x9a>
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	f300 8145 	bgt.w	800a25c <USBD_StdEPReq+0x318>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 809b 	beq.w	800a10e <USBD_StdEPReq+0x1ca>
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d03c      	beq.n	800a056 <USBD_StdEPReq+0x112>
 8009fdc:	e13e      	b.n	800a25c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d002      	beq.n	8009ff0 <USBD_StdEPReq+0xac>
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d016      	beq.n	800a01c <USBD_StdEPReq+0xd8>
 8009fee:	e02c      	b.n	800a04a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00d      	beq.n	800a012 <USBD_StdEPReq+0xce>
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b80      	cmp	r3, #128	@ 0x80
 8009ffa:	d00a      	beq.n	800a012 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 f979 	bl	800b2f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a006:	2180      	movs	r1, #128	@ 0x80
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 f975 	bl	800b2f8 <USBD_LL_StallEP>
 800a00e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a010:	e020      	b.n	800a054 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fc7a 	bl	800a90e <USBD_CtlError>
              break;
 800a01a:	e01b      	b.n	800a054 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	885b      	ldrh	r3, [r3, #2]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10e      	bne.n	800a042 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00b      	beq.n	800a042 <USBD_StdEPReq+0xfe>
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	2b80      	cmp	r3, #128	@ 0x80
 800a02e:	d008      	beq.n	800a042 <USBD_StdEPReq+0xfe>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	88db      	ldrh	r3, [r3, #6]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d104      	bne.n	800a042 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	4619      	mov	r1, r3
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 f95b 	bl	800b2f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fd3a 	bl	800aabc <USBD_CtlSendStatus>

              break;
 800a048:	e004      	b.n	800a054 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fc5e 	bl	800a90e <USBD_CtlError>
              break;
 800a052:	bf00      	nop
          }
          break;
 800a054:	e107      	b.n	800a266 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d002      	beq.n	800a068 <USBD_StdEPReq+0x124>
 800a062:	2b03      	cmp	r3, #3
 800a064:	d016      	beq.n	800a094 <USBD_StdEPReq+0x150>
 800a066:	e04b      	b.n	800a100 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a068:	7bbb      	ldrb	r3, [r7, #14]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00d      	beq.n	800a08a <USBD_StdEPReq+0x146>
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	2b80      	cmp	r3, #128	@ 0x80
 800a072:	d00a      	beq.n	800a08a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	4619      	mov	r1, r3
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f001 f93d 	bl	800b2f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a07e:	2180      	movs	r1, #128	@ 0x80
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 f939 	bl	800b2f8 <USBD_LL_StallEP>
 800a086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a088:	e040      	b.n	800a10c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fc3e 	bl	800a90e <USBD_CtlError>
              break;
 800a092:	e03b      	b.n	800a10c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	885b      	ldrh	r3, [r3, #2]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d136      	bne.n	800a10a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d004      	beq.n	800a0b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 f943 	bl	800b336 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fd03 	bl	800aabc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fde4 	bl	8009c88 <USBD_CoreFindEP>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0c4:	7b7b      	ldrb	r3, [r7, #13]
 800a0c6:	2bff      	cmp	r3, #255	@ 0xff
 800a0c8:	d01f      	beq.n	800a10a <USBD_StdEPReq+0x1c6>
 800a0ca:	7b7b      	ldrb	r3, [r7, #13]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d11c      	bne.n	800a10a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a0d0:	7b7a      	ldrb	r2, [r7, #13]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a0d8:	7b7a      	ldrb	r2, [r7, #13]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	32ae      	adds	r2, #174	@ 0xae
 800a0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d010      	beq.n	800a10a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a0e8:	7b7a      	ldrb	r2, [r7, #13]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	32ae      	adds	r2, #174	@ 0xae
 800a0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	4798      	blx	r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a0fe:	e004      	b.n	800a10a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fc03 	bl	800a90e <USBD_CtlError>
              break;
 800a108:	e000      	b.n	800a10c <USBD_StdEPReq+0x1c8>
              break;
 800a10a:	bf00      	nop
          }
          break;
 800a10c:	e0ab      	b.n	800a266 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b02      	cmp	r3, #2
 800a118:	d002      	beq.n	800a120 <USBD_StdEPReq+0x1dc>
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d032      	beq.n	800a184 <USBD_StdEPReq+0x240>
 800a11e:	e097      	b.n	800a250 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d007      	beq.n	800a136 <USBD_StdEPReq+0x1f2>
 800a126:	7bbb      	ldrb	r3, [r7, #14]
 800a128:	2b80      	cmp	r3, #128	@ 0x80
 800a12a:	d004      	beq.n	800a136 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fbed 	bl	800a90e <USBD_CtlError>
                break;
 800a134:	e091      	b.n	800a25a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	da0b      	bge.n	800a156 <USBD_StdEPReq+0x212>
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
 800a140:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	3310      	adds	r3, #16
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	3304      	adds	r3, #4
 800a154:	e00b      	b.n	800a16e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a15c:	4613      	mov	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	4413      	add	r3, r2
 800a16c:	3304      	adds	r3, #4
 800a16e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2202      	movs	r2, #2
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fc43 	bl	800aa08 <USBD_CtlSendData>
              break;
 800a182:	e06a      	b.n	800a25a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	da11      	bge.n	800a1b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
 800a18e:	f003 020f 	and.w	r2, r3, #15
 800a192:	6879      	ldr	r1, [r7, #4]
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	440b      	add	r3, r1
 800a19e:	3324      	adds	r3, #36	@ 0x24
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d117      	bne.n	800a1d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fbb0 	bl	800a90e <USBD_CtlError>
                  break;
 800a1ae:	e054      	b.n	800a25a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
 800a1b2:	f003 020f 	and.w	r2, r3, #15
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fb9d 	bl	800a90e <USBD_CtlError>
                  break;
 800a1d4:	e041      	b.n	800a25a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da0b      	bge.n	800a1f6 <USBD_StdEPReq+0x2b2>
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
 800a1e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	3310      	adds	r3, #16
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	e00b      	b.n	800a20e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4413      	add	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	4413      	add	r3, r2
 800a20c:	3304      	adds	r3, #4
 800a20e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <USBD_StdEPReq+0x2d8>
 800a216:	7bbb      	ldrb	r3, [r7, #14]
 800a218:	2b80      	cmp	r3, #128	@ 0x80
 800a21a:	d103      	bne.n	800a224 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e00e      	b.n	800a242 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 f8a3 	bl	800b374 <USBD_LL_IsStallEP>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d003      	beq.n	800a23c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2201      	movs	r2, #1
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	e002      	b.n	800a242 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2202      	movs	r2, #2
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fbdd 	bl	800aa08 <USBD_CtlSendData>
              break;
 800a24e:	e004      	b.n	800a25a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fb5b 	bl	800a90e <USBD_CtlError>
              break;
 800a258:	bf00      	nop
          }
          break;
 800a25a:	e004      	b.n	800a266 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fb55 	bl	800a90e <USBD_CtlError>
          break;
 800a264:	bf00      	nop
      }
      break;
 800a266:	e005      	b.n	800a274 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fb4f 	bl	800a90e <USBD_CtlError>
      break;
 800a270:	e000      	b.n	800a274 <USBD_StdEPReq+0x330>
      break;
 800a272:	bf00      	nop
  }

  return ret;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	885b      	ldrh	r3, [r3, #2]
 800a29a:	0a1b      	lsrs	r3, r3, #8
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	2b06      	cmp	r3, #6
 800a2a2:	f200 8128 	bhi.w	800a4f6 <USBD_GetDescriptor+0x276>
 800a2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ac <USBD_GetDescriptor+0x2c>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a2c9 	.word	0x0800a2c9
 800a2b0:	0800a2e1 	.word	0x0800a2e1
 800a2b4:	0800a321 	.word	0x0800a321
 800a2b8:	0800a4f7 	.word	0x0800a4f7
 800a2bc:	0800a4f7 	.word	0x0800a4f7
 800a2c0:	0800a497 	.word	0x0800a497
 800a2c4:	0800a4c3 	.word	0x0800a4c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	7c12      	ldrb	r2, [r2, #16]
 800a2d4:	f107 0108 	add.w	r1, r7, #8
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
 800a2dc:	60f8      	str	r0, [r7, #12]
      break;
 800a2de:	e112      	b.n	800a506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	7c1b      	ldrb	r3, [r3, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10d      	bne.n	800a304 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f0:	f107 0208 	add.w	r2, r7, #8
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4798      	blx	r3
 800a2f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	2202      	movs	r2, #2
 800a300:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a302:	e100      	b.n	800a506 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30c:	f107 0208 	add.w	r2, r7, #8
 800a310:	4610      	mov	r0, r2
 800a312:	4798      	blx	r3
 800a314:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3301      	adds	r3, #1
 800a31a:	2202      	movs	r2, #2
 800a31c:	701a      	strb	r2, [r3, #0]
      break;
 800a31e:	e0f2      	b.n	800a506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	885b      	ldrh	r3, [r3, #2]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b05      	cmp	r3, #5
 800a328:	f200 80ac 	bhi.w	800a484 <USBD_GetDescriptor+0x204>
 800a32c:	a201      	add	r2, pc, #4	@ (adr r2, 800a334 <USBD_GetDescriptor+0xb4>)
 800a32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a332:	bf00      	nop
 800a334:	0800a34d 	.word	0x0800a34d
 800a338:	0800a381 	.word	0x0800a381
 800a33c:	0800a3b5 	.word	0x0800a3b5
 800a340:	0800a3e9 	.word	0x0800a3e9
 800a344:	0800a41d 	.word	0x0800a41d
 800a348:	0800a451 	.word	0x0800a451
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	7c12      	ldrb	r2, [r2, #16]
 800a364:	f107 0108 	add.w	r1, r7, #8
 800a368:	4610      	mov	r0, r2
 800a36a:	4798      	blx	r3
 800a36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36e:	e091      	b.n	800a494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 facb 	bl	800a90e <USBD_CtlError>
            err++;
 800a378:	7afb      	ldrb	r3, [r7, #11]
 800a37a:	3301      	adds	r3, #1
 800a37c:	72fb      	strb	r3, [r7, #11]
          break;
 800a37e:	e089      	b.n	800a494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00b      	beq.n	800a3a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	7c12      	ldrb	r2, [r2, #16]
 800a398:	f107 0108 	add.w	r1, r7, #8
 800a39c:	4610      	mov	r0, r2
 800a39e:	4798      	blx	r3
 800a3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3a2:	e077      	b.n	800a494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fab1 	bl	800a90e <USBD_CtlError>
            err++;
 800a3ac:	7afb      	ldrb	r3, [r7, #11]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3b2:	e06f      	b.n	800a494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	7c12      	ldrb	r2, [r2, #16]
 800a3cc:	f107 0108 	add.w	r1, r7, #8
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	4798      	blx	r3
 800a3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3d6:	e05d      	b.n	800a494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fa97 	bl	800a90e <USBD_CtlError>
            err++;
 800a3e0:	7afb      	ldrb	r3, [r7, #11]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3e6:	e055      	b.n	800a494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00b      	beq.n	800a40c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	7c12      	ldrb	r2, [r2, #16]
 800a400:	f107 0108 	add.w	r1, r7, #8
 800a404:	4610      	mov	r0, r2
 800a406:	4798      	blx	r3
 800a408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a40a:	e043      	b.n	800a494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa7d 	bl	800a90e <USBD_CtlError>
            err++;
 800a414:	7afb      	ldrb	r3, [r7, #11]
 800a416:	3301      	adds	r3, #1
 800a418:	72fb      	strb	r3, [r7, #11]
          break;
 800a41a:	e03b      	b.n	800a494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00b      	beq.n	800a440 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	7c12      	ldrb	r2, [r2, #16]
 800a434:	f107 0108 	add.w	r1, r7, #8
 800a438:	4610      	mov	r0, r2
 800a43a:	4798      	blx	r3
 800a43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a43e:	e029      	b.n	800a494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fa63 	bl	800a90e <USBD_CtlError>
            err++;
 800a448:	7afb      	ldrb	r3, [r7, #11]
 800a44a:	3301      	adds	r3, #1
 800a44c:	72fb      	strb	r3, [r7, #11]
          break;
 800a44e:	e021      	b.n	800a494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00b      	beq.n	800a474 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	7c12      	ldrb	r2, [r2, #16]
 800a468:	f107 0108 	add.w	r1, r7, #8
 800a46c:	4610      	mov	r0, r2
 800a46e:	4798      	blx	r3
 800a470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a472:	e00f      	b.n	800a494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fa49 	bl	800a90e <USBD_CtlError>
            err++;
 800a47c:	7afb      	ldrb	r3, [r7, #11]
 800a47e:	3301      	adds	r3, #1
 800a480:	72fb      	strb	r3, [r7, #11]
          break;
 800a482:	e007      	b.n	800a494 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fa41 	bl	800a90e <USBD_CtlError>
          err++;
 800a48c:	7afb      	ldrb	r3, [r7, #11]
 800a48e:	3301      	adds	r3, #1
 800a490:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a492:	bf00      	nop
      }
      break;
 800a494:	e037      	b.n	800a506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	7c1b      	ldrb	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d109      	bne.n	800a4b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a6:	f107 0208 	add.w	r2, r7, #8
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	4798      	blx	r3
 800a4ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4b0:	e029      	b.n	800a506 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fa2a 	bl	800a90e <USBD_CtlError>
        err++;
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	72fb      	strb	r3, [r7, #11]
      break;
 800a4c0:	e021      	b.n	800a506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	7c1b      	ldrb	r3, [r3, #16]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10d      	bne.n	800a4e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d2:	f107 0208 	add.w	r2, r7, #8
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	4798      	blx	r3
 800a4da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	2207      	movs	r2, #7
 800a4e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4e4:	e00f      	b.n	800a506 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fa10 	bl	800a90e <USBD_CtlError>
        err++;
 800a4ee:	7afb      	ldrb	r3, [r7, #11]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a4f4:	e007      	b.n	800a506 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fa08 	bl	800a90e <USBD_CtlError>
      err++;
 800a4fe:	7afb      	ldrb	r3, [r7, #11]
 800a500:	3301      	adds	r3, #1
 800a502:	72fb      	strb	r3, [r7, #11]
      break;
 800a504:	bf00      	nop
  }

  if (err != 0U)
 800a506:	7afb      	ldrb	r3, [r7, #11]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d11e      	bne.n	800a54a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	88db      	ldrh	r3, [r3, #6]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d016      	beq.n	800a542 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a514:	893b      	ldrh	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00e      	beq.n	800a538 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	88da      	ldrh	r2, [r3, #6]
 800a51e:	893b      	ldrh	r3, [r7, #8]
 800a520:	4293      	cmp	r3, r2
 800a522:	bf28      	it	cs
 800a524:	4613      	movcs	r3, r2
 800a526:	b29b      	uxth	r3, r3
 800a528:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a52a:	893b      	ldrh	r3, [r7, #8]
 800a52c:	461a      	mov	r2, r3
 800a52e:	68f9      	ldr	r1, [r7, #12]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fa69 	bl	800aa08 <USBD_CtlSendData>
 800a536:	e009      	b.n	800a54c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f9e7 	bl	800a90e <USBD_CtlError>
 800a540:	e004      	b.n	800a54c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 faba 	bl	800aabc <USBD_CtlSendStatus>
 800a548:	e000      	b.n	800a54c <USBD_GetDescriptor+0x2cc>
    return;
 800a54a:	bf00      	nop
  }
}
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop

0800a554 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	889b      	ldrh	r3, [r3, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d131      	bne.n	800a5ca <USBD_SetAddress+0x76>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	88db      	ldrh	r3, [r3, #6]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d12d      	bne.n	800a5ca <USBD_SetAddress+0x76>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	885b      	ldrh	r3, [r3, #2]
 800a572:	2b7f      	cmp	r3, #127	@ 0x7f
 800a574:	d829      	bhi.n	800a5ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	885b      	ldrh	r3, [r3, #2]
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a580:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d104      	bne.n	800a598 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f9bc 	bl	800a90e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a596:	e01d      	b.n	800a5d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	7bfa      	ldrb	r2, [r7, #15]
 800a59c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 ff11 	bl	800b3cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fa86 	bl	800aabc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d004      	beq.n	800a5c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5be:	e009      	b.n	800a5d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c8:	e004      	b.n	800a5d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f99e 	bl	800a90e <USBD_CtlError>
  }
}
 800a5d2:	bf00      	nop
 800a5d4:	bf00      	nop
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	885b      	ldrh	r3, [r3, #2]
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	4b4e      	ldr	r3, [pc, #312]	@ (800a72c <USBD_SetConfig+0x150>)
 800a5f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a5f4:	4b4d      	ldr	r3, [pc, #308]	@ (800a72c <USBD_SetConfig+0x150>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d905      	bls.n	800a608 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f985 	bl	800a90e <USBD_CtlError>
    return USBD_FAIL;
 800a604:	2303      	movs	r3, #3
 800a606:	e08c      	b.n	800a722 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b02      	cmp	r3, #2
 800a612:	d002      	beq.n	800a61a <USBD_SetConfig+0x3e>
 800a614:	2b03      	cmp	r3, #3
 800a616:	d029      	beq.n	800a66c <USBD_SetConfig+0x90>
 800a618:	e075      	b.n	800a706 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a61a:	4b44      	ldr	r3, [pc, #272]	@ (800a72c <USBD_SetConfig+0x150>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d020      	beq.n	800a664 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a622:	4b42      	ldr	r3, [pc, #264]	@ (800a72c <USBD_SetConfig+0x150>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a62c:	4b3f      	ldr	r3, [pc, #252]	@ (800a72c <USBD_SetConfig+0x150>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7fe ffe3 	bl	80095fe <USBD_SetClassConfig>
 800a638:	4603      	mov	r3, r0
 800a63a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d008      	beq.n	800a654 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f962 	bl	800a90e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2202      	movs	r2, #2
 800a64e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a652:	e065      	b.n	800a720 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fa31 	bl	800aabc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2203      	movs	r2, #3
 800a65e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a662:	e05d      	b.n	800a720 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fa29 	bl	800aabc <USBD_CtlSendStatus>
      break;
 800a66a:	e059      	b.n	800a720 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a66c:	4b2f      	ldr	r3, [pc, #188]	@ (800a72c <USBD_SetConfig+0x150>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d112      	bne.n	800a69a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2202      	movs	r2, #2
 800a678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a67c:	4b2b      	ldr	r3, [pc, #172]	@ (800a72c <USBD_SetConfig+0x150>)
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	461a      	mov	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a686:	4b29      	ldr	r3, [pc, #164]	@ (800a72c <USBD_SetConfig+0x150>)
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7fe ffd2 	bl	8009636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fa12 	bl	800aabc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a698:	e042      	b.n	800a720 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a69a:	4b24      	ldr	r3, [pc, #144]	@ (800a72c <USBD_SetConfig+0x150>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d02a      	beq.n	800a6fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7fe ffc0 	bl	8009636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a6b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a72c <USBD_SetConfig+0x150>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a72c <USBD_SetConfig+0x150>)
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7fe ff99 	bl	80095fe <USBD_SetClassConfig>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00f      	beq.n	800a6f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f918 	bl	800a90e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7fe ffa5 	bl	8009636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a6f4:	e014      	b.n	800a720 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f9e0 	bl	800aabc <USBD_CtlSendStatus>
      break;
 800a6fc:	e010      	b.n	800a720 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f9dc 	bl	800aabc <USBD_CtlSendStatus>
      break;
 800a704:	e00c      	b.n	800a720 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f900 	bl	800a90e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a70e:	4b07      	ldr	r3, [pc, #28]	@ (800a72c <USBD_SetConfig+0x150>)
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	4619      	mov	r1, r3
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7fe ff8e 	bl	8009636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a71a:	2303      	movs	r3, #3
 800a71c:	73fb      	strb	r3, [r7, #15]
      break;
 800a71e:	bf00      	nop
  }

  return ret;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	2000090c 	.word	0x2000090c

0800a730 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	88db      	ldrh	r3, [r3, #6]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d004      	beq.n	800a74c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f8e2 	bl	800a90e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a74a:	e023      	b.n	800a794 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b02      	cmp	r3, #2
 800a756:	dc02      	bgt.n	800a75e <USBD_GetConfig+0x2e>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	dc03      	bgt.n	800a764 <USBD_GetConfig+0x34>
 800a75c:	e015      	b.n	800a78a <USBD_GetConfig+0x5a>
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d00b      	beq.n	800a77a <USBD_GetConfig+0x4a>
 800a762:	e012      	b.n	800a78a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	3308      	adds	r3, #8
 800a76e:	2201      	movs	r2, #1
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f948 	bl	800aa08 <USBD_CtlSendData>
        break;
 800a778:	e00c      	b.n	800a794 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	3304      	adds	r3, #4
 800a77e:	2201      	movs	r2, #1
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f940 	bl	800aa08 <USBD_CtlSendData>
        break;
 800a788:	e004      	b.n	800a794 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f8be 	bl	800a90e <USBD_CtlError>
        break;
 800a792:	bf00      	nop
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d81e      	bhi.n	800a7f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	88db      	ldrh	r3, [r3, #6]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d004      	beq.n	800a7c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f8a5 	bl	800a90e <USBD_CtlError>
        break;
 800a7c4:	e01a      	b.n	800a7fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f043 0202 	orr.w	r2, r3, #2
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f90c 	bl	800aa08 <USBD_CtlSendData>
      break;
 800a7f0:	e004      	b.n	800a7fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f88a 	bl	800a90e <USBD_CtlError>
      break;
 800a7fa:	bf00      	nop
  }
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	885b      	ldrh	r3, [r3, #2]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d107      	bne.n	800a826 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2201      	movs	r2, #1
 800a81a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f94c 	bl	800aabc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a824:	e013      	b.n	800a84e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	885b      	ldrh	r3, [r3, #2]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d10b      	bne.n	800a846 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	889b      	ldrh	r3, [r3, #4]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	b29b      	uxth	r3, r3
 800a836:	b2da      	uxtb	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f93c 	bl	800aabc <USBD_CtlSendStatus>
}
 800a844:	e003      	b.n	800a84e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f860 	bl	800a90e <USBD_CtlError>
}
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b082      	sub	sp, #8
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a866:	b2db      	uxtb	r3, r3
 800a868:	3b01      	subs	r3, #1
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d80b      	bhi.n	800a886 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	885b      	ldrh	r3, [r3, #2]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d10c      	bne.n	800a890 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f91c 	bl	800aabc <USBD_CtlSendStatus>
      }
      break;
 800a884:	e004      	b.n	800a890 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f840 	bl	800a90e <USBD_CtlError>
      break;
 800a88e:	e000      	b.n	800a892 <USBD_ClrFeature+0x3c>
      break;
 800a890:	bf00      	nop
  }
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b084      	sub	sp, #16
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	781a      	ldrb	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	781a      	ldrb	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff fa40 	bl	8009d4a <SWAPBYTE>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f7ff fa33 	bl	8009d4a <SWAPBYTE>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff fa26 	bl	8009d4a <SWAPBYTE>
 800a8fe:	4603      	mov	r3, r0
 800a900:	461a      	mov	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	80da      	strh	r2, [r3, #6]
}
 800a906:	bf00      	nop
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a918:	2180      	movs	r1, #128	@ 0x80
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fcec 	bl	800b2f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a920:	2100      	movs	r1, #0
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fce8 	bl	800b2f8 <USBD_LL_StallEP>
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d042      	beq.n	800a9cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a94a:	6938      	ldr	r0, [r7, #16]
 800a94c:	f000 f842 	bl	800a9d4 <USBD_GetLen>
 800a950:	4603      	mov	r3, r0
 800a952:	3301      	adds	r3, #1
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a95a:	d808      	bhi.n	800a96e <USBD_GetString+0x3e>
 800a95c:	6938      	ldr	r0, [r7, #16]
 800a95e:	f000 f839 	bl	800a9d4 <USBD_GetLen>
 800a962:	4603      	mov	r3, r0
 800a964:	3301      	adds	r3, #1
 800a966:	b29b      	uxth	r3, r3
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	e001      	b.n	800a972 <USBD_GetString+0x42>
 800a96e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	4413      	add	r3, r2
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	7812      	ldrb	r2, [r2, #0]
 800a980:	701a      	strb	r2, [r3, #0]
  idx++;
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	3301      	adds	r3, #1
 800a986:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	4413      	add	r3, r2
 800a98e:	2203      	movs	r2, #3
 800a990:	701a      	strb	r2, [r3, #0]
  idx++;
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	3301      	adds	r3, #1
 800a996:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a998:	e013      	b.n	800a9c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	4413      	add	r3, r2
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	7812      	ldrb	r2, [r2, #0]
 800a9a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	613b      	str	r3, [r7, #16]
    idx++;
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
    idx++;
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1e7      	bne.n	800a99a <USBD_GetString+0x6a>
 800a9ca:	e000      	b.n	800a9ce <USBD_GetString+0x9e>
    return;
 800a9cc:	bf00      	nop
  }
}
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a9e4:	e005      	b.n	800a9f2 <USBD_GetLen+0x1e>
  {
    len++;
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1f5      	bne.n	800a9e6 <USBD_GetLen+0x12>
  }

  return len;
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 fceb 	bl	800b40a <USBD_LL_Transmit>

  return USBD_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b084      	sub	sp, #16
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	2100      	movs	r1, #0
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f000 fcda 	bl	800b40a <USBD_LL_Transmit>

  return USBD_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2203      	movs	r2, #3
 800aa70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	2100      	movs	r1, #0
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f000 fcde 	bl	800b44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	60f8      	str	r0, [r7, #12]
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	2100      	movs	r1, #0
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 fccd 	bl	800b44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2204      	movs	r2, #4
 800aac8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aacc:	2300      	movs	r3, #0
 800aace:	2200      	movs	r2, #0
 800aad0:	2100      	movs	r1, #0
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fc99 	bl	800b40a <USBD_LL_Transmit>

  return USBD_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2205      	movs	r2, #5
 800aaee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fca7 	bl	800b44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4912      	ldr	r1, [pc, #72]	@ (800ab58 <MX_USB_DEVICE_Init+0x50>)
 800ab10:	4812      	ldr	r0, [pc, #72]	@ (800ab5c <MX_USB_DEVICE_Init+0x54>)
 800ab12:	f7fe fcf7 	bl	8009504 <USBD_Init>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab1c:	f7f7 f8dc 	bl	8001cd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab20:	490f      	ldr	r1, [pc, #60]	@ (800ab60 <MX_USB_DEVICE_Init+0x58>)
 800ab22:	480e      	ldr	r0, [pc, #56]	@ (800ab5c <MX_USB_DEVICE_Init+0x54>)
 800ab24:	f7fe fd1e 	bl	8009564 <USBD_RegisterClass>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab2e:	f7f7 f8d3 	bl	8001cd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab32:	490c      	ldr	r1, [pc, #48]	@ (800ab64 <MX_USB_DEVICE_Init+0x5c>)
 800ab34:	4809      	ldr	r0, [pc, #36]	@ (800ab5c <MX_USB_DEVICE_Init+0x54>)
 800ab36:	f7fe fc15 	bl	8009364 <USBD_CDC_RegisterInterface>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab40:	f7f7 f8ca 	bl	8001cd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab44:	4805      	ldr	r0, [pc, #20]	@ (800ab5c <MX_USB_DEVICE_Init+0x54>)
 800ab46:	f7fe fd43 	bl	80095d0 <USBD_Start>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab50:	f7f7 f8c2 	bl	8001cd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab54:	bf00      	nop
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	200000ac 	.word	0x200000ac
 800ab5c:	20000910 	.word	0x20000910
 800ab60:	20000018 	.word	0x20000018
 800ab64:	20000098 	.word	0x20000098

0800ab68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	4905      	ldr	r1, [pc, #20]	@ (800ab84 <CDC_Init_FS+0x1c>)
 800ab70:	4805      	ldr	r0, [pc, #20]	@ (800ab88 <CDC_Init_FS+0x20>)
 800ab72:	f7fe fc11 	bl	8009398 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab76:	4905      	ldr	r1, [pc, #20]	@ (800ab8c <CDC_Init_FS+0x24>)
 800ab78:	4803      	ldr	r0, [pc, #12]	@ (800ab88 <CDC_Init_FS+0x20>)
 800ab7a:	f7fe fc2f 	bl	80093dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	200013ec 	.word	0x200013ec
 800ab88:	20000910 	.word	0x20000910
 800ab8c:	20000bec 	.word	0x20000bec

0800ab90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	6039      	str	r1, [r7, #0]
 800abaa:	71fb      	strb	r3, [r7, #7]
 800abac:	4613      	mov	r3, r2
 800abae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800abb0:	79fb      	ldrb	r3, [r7, #7]
 800abb2:	2b23      	cmp	r3, #35	@ 0x23
 800abb4:	d84a      	bhi.n	800ac4c <CDC_Control_FS+0xac>
 800abb6:	a201      	add	r2, pc, #4	@ (adr r2, 800abbc <CDC_Control_FS+0x1c>)
 800abb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbc:	0800ac4d 	.word	0x0800ac4d
 800abc0:	0800ac4d 	.word	0x0800ac4d
 800abc4:	0800ac4d 	.word	0x0800ac4d
 800abc8:	0800ac4d 	.word	0x0800ac4d
 800abcc:	0800ac4d 	.word	0x0800ac4d
 800abd0:	0800ac4d 	.word	0x0800ac4d
 800abd4:	0800ac4d 	.word	0x0800ac4d
 800abd8:	0800ac4d 	.word	0x0800ac4d
 800abdc:	0800ac4d 	.word	0x0800ac4d
 800abe0:	0800ac4d 	.word	0x0800ac4d
 800abe4:	0800ac4d 	.word	0x0800ac4d
 800abe8:	0800ac4d 	.word	0x0800ac4d
 800abec:	0800ac4d 	.word	0x0800ac4d
 800abf0:	0800ac4d 	.word	0x0800ac4d
 800abf4:	0800ac4d 	.word	0x0800ac4d
 800abf8:	0800ac4d 	.word	0x0800ac4d
 800abfc:	0800ac4d 	.word	0x0800ac4d
 800ac00:	0800ac4d 	.word	0x0800ac4d
 800ac04:	0800ac4d 	.word	0x0800ac4d
 800ac08:	0800ac4d 	.word	0x0800ac4d
 800ac0c:	0800ac4d 	.word	0x0800ac4d
 800ac10:	0800ac4d 	.word	0x0800ac4d
 800ac14:	0800ac4d 	.word	0x0800ac4d
 800ac18:	0800ac4d 	.word	0x0800ac4d
 800ac1c:	0800ac4d 	.word	0x0800ac4d
 800ac20:	0800ac4d 	.word	0x0800ac4d
 800ac24:	0800ac4d 	.word	0x0800ac4d
 800ac28:	0800ac4d 	.word	0x0800ac4d
 800ac2c:	0800ac4d 	.word	0x0800ac4d
 800ac30:	0800ac4d 	.word	0x0800ac4d
 800ac34:	0800ac4d 	.word	0x0800ac4d
 800ac38:	0800ac4d 	.word	0x0800ac4d
 800ac3c:	0800ac4d 	.word	0x0800ac4d
 800ac40:	0800ac4d 	.word	0x0800ac4d
 800ac44:	0800ac4d 	.word	0x0800ac4d
 800ac48:	0800ac4d 	.word	0x0800ac4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac4c:	bf00      	nop
  }

  return (USBD_OK);
 800ac4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	4805      	ldr	r0, [pc, #20]	@ (800ac80 <CDC_Receive_FS+0x24>)
 800ac6a:	f7fe fbb7 	bl	80093dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac6e:	4804      	ldr	r0, [pc, #16]	@ (800ac80 <CDC_Receive_FS+0x24>)
 800ac70:	f7fe fc12 	bl	8009498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000910 	.word	0x20000910

0800ac84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac94:	4b0d      	ldr	r3, [pc, #52]	@ (800accc <CDC_Transmit_FS+0x48>)
 800ac96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e00b      	b.n	800acc2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800acaa:	887b      	ldrh	r3, [r7, #2]
 800acac:	461a      	mov	r2, r3
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	4806      	ldr	r0, [pc, #24]	@ (800accc <CDC_Transmit_FS+0x48>)
 800acb2:	f7fe fb71 	bl	8009398 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800acb6:	4805      	ldr	r0, [pc, #20]	@ (800accc <CDC_Transmit_FS+0x48>)
 800acb8:	f7fe fbae 	bl	8009418 <USBD_CDC_TransmitPacket>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20000910 	.word	0x20000910

0800acd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ace2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	6039      	str	r1, [r7, #0]
 800acfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2212      	movs	r2, #18
 800ad04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad06:	4b03      	ldr	r3, [pc, #12]	@ (800ad14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	200000c8 	.word	0x200000c8

0800ad18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	6039      	str	r1, [r7, #0]
 800ad22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2204      	movs	r2, #4
 800ad28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad2a:	4b03      	ldr	r3, [pc, #12]	@ (800ad38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	200000dc 	.word	0x200000dc

0800ad3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	6039      	str	r1, [r7, #0]
 800ad46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad48:	79fb      	ldrb	r3, [r7, #7]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d105      	bne.n	800ad5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	4907      	ldr	r1, [pc, #28]	@ (800ad70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad52:	4808      	ldr	r0, [pc, #32]	@ (800ad74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad54:	f7ff fdec 	bl	800a930 <USBD_GetString>
 800ad58:	e004      	b.n	800ad64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	4904      	ldr	r1, [pc, #16]	@ (800ad70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad5e:	4805      	ldr	r0, [pc, #20]	@ (800ad74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad60:	f7ff fde6 	bl	800a930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad64:	4b02      	ldr	r3, [pc, #8]	@ (800ad70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20001bec 	.word	0x20001bec
 800ad74:	0800fc68 	.word	0x0800fc68

0800ad78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	6039      	str	r1, [r7, #0]
 800ad82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	4904      	ldr	r1, [pc, #16]	@ (800ad98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad88:	4804      	ldr	r0, [pc, #16]	@ (800ad9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad8a:	f7ff fdd1 	bl	800a930 <USBD_GetString>
  return USBD_StrDesc;
 800ad8e:	4b02      	ldr	r3, [pc, #8]	@ (800ad98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20001bec 	.word	0x20001bec
 800ad9c:	0800fc80 	.word	0x0800fc80

0800ada0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	221a      	movs	r2, #26
 800adb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800adb2:	f000 f843 	bl	800ae3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800adb6:	4b02      	ldr	r3, [pc, #8]	@ (800adc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	200000e0 	.word	0x200000e0

0800adc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	6039      	str	r1, [r7, #0]
 800adce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800add0:	79fb      	ldrb	r3, [r7, #7]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d105      	bne.n	800ade2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	4907      	ldr	r1, [pc, #28]	@ (800adf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800adda:	4808      	ldr	r0, [pc, #32]	@ (800adfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800addc:	f7ff fda8 	bl	800a930 <USBD_GetString>
 800ade0:	e004      	b.n	800adec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	4904      	ldr	r1, [pc, #16]	@ (800adf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ade6:	4805      	ldr	r0, [pc, #20]	@ (800adfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ade8:	f7ff fda2 	bl	800a930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adec:	4b02      	ldr	r3, [pc, #8]	@ (800adf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20001bec 	.word	0x20001bec
 800adfc:	0800fc94 	.word	0x0800fc94

0800ae00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	4603      	mov	r3, r0
 800ae08:	6039      	str	r1, [r7, #0]
 800ae0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d105      	bne.n	800ae1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	4907      	ldr	r1, [pc, #28]	@ (800ae34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae16:	4808      	ldr	r0, [pc, #32]	@ (800ae38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae18:	f7ff fd8a 	bl	800a930 <USBD_GetString>
 800ae1c:	e004      	b.n	800ae28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	4904      	ldr	r1, [pc, #16]	@ (800ae34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae22:	4805      	ldr	r0, [pc, #20]	@ (800ae38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae24:	f7ff fd84 	bl	800a930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae28:	4b02      	ldr	r3, [pc, #8]	@ (800ae34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20001bec 	.word	0x20001bec
 800ae38:	0800fca0 	.word	0x0800fca0

0800ae3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae42:	4b0f      	ldr	r3, [pc, #60]	@ (800ae80 <Get_SerialNum+0x44>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae48:	4b0e      	ldr	r3, [pc, #56]	@ (800ae84 <Get_SerialNum+0x48>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae88 <Get_SerialNum+0x4c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4413      	add	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d009      	beq.n	800ae76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae62:	2208      	movs	r2, #8
 800ae64:	4909      	ldr	r1, [pc, #36]	@ (800ae8c <Get_SerialNum+0x50>)
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 f814 	bl	800ae94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	4908      	ldr	r1, [pc, #32]	@ (800ae90 <Get_SerialNum+0x54>)
 800ae70:	68b8      	ldr	r0, [r7, #8]
 800ae72:	f000 f80f 	bl	800ae94 <IntToUnicode>
  }
}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	1fff7a10 	.word	0x1fff7a10
 800ae84:	1fff7a14 	.word	0x1fff7a14
 800ae88:	1fff7a18 	.word	0x1fff7a18
 800ae8c:	200000e2 	.word	0x200000e2
 800ae90:	200000f2 	.word	0x200000f2

0800ae94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aea6:	2300      	movs	r3, #0
 800aea8:	75fb      	strb	r3, [r7, #23]
 800aeaa:	e027      	b.n	800aefc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	0f1b      	lsrs	r3, r3, #28
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	d80b      	bhi.n	800aecc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	0f1b      	lsrs	r3, r3, #28
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	005b      	lsls	r3, r3, #1
 800aebe:	4619      	mov	r1, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	440b      	add	r3, r1
 800aec4:	3230      	adds	r2, #48	@ 0x30
 800aec6:	b2d2      	uxtb	r2, r2
 800aec8:	701a      	strb	r2, [r3, #0]
 800aeca:	e00a      	b.n	800aee2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	0f1b      	lsrs	r3, r3, #28
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	4619      	mov	r1, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	440b      	add	r3, r1
 800aedc:	3237      	adds	r2, #55	@ 0x37
 800aede:	b2d2      	uxtb	r2, r2
 800aee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	3301      	adds	r3, #1
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	4413      	add	r3, r2
 800aef2:	2200      	movs	r2, #0
 800aef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	3301      	adds	r3, #1
 800aefa:	75fb      	strb	r3, [r7, #23]
 800aefc:	7dfa      	ldrb	r2, [r7, #23]
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	429a      	cmp	r2, r3
 800af02:	d3d3      	bcc.n	800aeac <IntToUnicode+0x18>
  }
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
	...

0800af14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	@ 0x28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af1c:	f107 0314 	add.w	r3, r7, #20
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	609a      	str	r2, [r3, #8]
 800af28:	60da      	str	r2, [r3, #12]
 800af2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af34:	d13a      	bne.n	800afac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af36:	2300      	movs	r3, #0
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	4b1e      	ldr	r3, [pc, #120]	@ (800afb4 <HAL_PCD_MspInit+0xa0>)
 800af3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3e:	4a1d      	ldr	r2, [pc, #116]	@ (800afb4 <HAL_PCD_MspInit+0xa0>)
 800af40:	f043 0301 	orr.w	r3, r3, #1
 800af44:	6313      	str	r3, [r2, #48]	@ 0x30
 800af46:	4b1b      	ldr	r3, [pc, #108]	@ (800afb4 <HAL_PCD_MspInit+0xa0>)
 800af48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	613b      	str	r3, [r7, #16]
 800af50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800af52:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800af56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af58:	2302      	movs	r3, #2
 800af5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af5c:	2300      	movs	r3, #0
 800af5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af60:	2303      	movs	r3, #3
 800af62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af64:	230a      	movs	r3, #10
 800af66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af68:	f107 0314 	add.w	r3, r7, #20
 800af6c:	4619      	mov	r1, r3
 800af6e:	4812      	ldr	r0, [pc, #72]	@ (800afb8 <HAL_PCD_MspInit+0xa4>)
 800af70:	f7f8 fd9e 	bl	8003ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af74:	4b0f      	ldr	r3, [pc, #60]	@ (800afb4 <HAL_PCD_MspInit+0xa0>)
 800af76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af78:	4a0e      	ldr	r2, [pc, #56]	@ (800afb4 <HAL_PCD_MspInit+0xa0>)
 800af7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af7e:	6353      	str	r3, [r2, #52]	@ 0x34
 800af80:	2300      	movs	r3, #0
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	4b0b      	ldr	r3, [pc, #44]	@ (800afb4 <HAL_PCD_MspInit+0xa0>)
 800af86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af88:	4a0a      	ldr	r2, [pc, #40]	@ (800afb4 <HAL_PCD_MspInit+0xa0>)
 800af8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800af8e:	6453      	str	r3, [r2, #68]	@ 0x44
 800af90:	4b08      	ldr	r3, [pc, #32]	@ (800afb4 <HAL_PCD_MspInit+0xa0>)
 800af92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af9c:	2200      	movs	r2, #0
 800af9e:	2100      	movs	r1, #0
 800afa0:	2043      	movs	r0, #67	@ 0x43
 800afa2:	f7f8 f94c 	bl	800323e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800afa6:	2043      	movs	r0, #67	@ 0x43
 800afa8:	f7f8 f965 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afac:	bf00      	nop
 800afae:	3728      	adds	r7, #40	@ 0x28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	40023800 	.word	0x40023800
 800afb8:	40020000 	.word	0x40020000

0800afbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800afd0:	4619      	mov	r1, r3
 800afd2:	4610      	mov	r0, r2
 800afd4:	f7fe fb49 	bl	800966a <USBD_LL_SetupStage>
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	4613      	mov	r3, r2
 800aff8:	00db      	lsls	r3, r3, #3
 800affa:	4413      	add	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	440b      	add	r3, r1
 800b000:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	78fb      	ldrb	r3, [r7, #3]
 800b008:	4619      	mov	r1, r3
 800b00a:	f7fe fb83 	bl	8009714 <USBD_LL_DataOutStage>
}
 800b00e:	bf00      	nop
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b082      	sub	sp, #8
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	460b      	mov	r3, r1
 800b020:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b028:	78fa      	ldrb	r2, [r7, #3]
 800b02a:	6879      	ldr	r1, [r7, #4]
 800b02c:	4613      	mov	r3, r2
 800b02e:	00db      	lsls	r3, r3, #3
 800b030:	4413      	add	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	440b      	add	r3, r1
 800b036:	3320      	adds	r3, #32
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	78fb      	ldrb	r3, [r7, #3]
 800b03c:	4619      	mov	r1, r3
 800b03e:	f7fe fc1c 	bl	800987a <USBD_LL_DataInStage>
}
 800b042:	bf00      	nop
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b058:	4618      	mov	r0, r3
 800b05a:	f7fe fd56 	bl	8009b0a <USBD_LL_SOF>
}
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b06e:	2301      	movs	r3, #1
 800b070:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	79db      	ldrb	r3, [r3, #7]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d102      	bne.n	800b080 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]
 800b07e:	e008      	b.n	800b092 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	79db      	ldrb	r3, [r3, #7]
 800b084:	2b02      	cmp	r3, #2
 800b086:	d102      	bne.n	800b08e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b088:	2301      	movs	r3, #1
 800b08a:	73fb      	strb	r3, [r7, #15]
 800b08c:	e001      	b.n	800b092 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b08e:	f7f6 fe23 	bl	8001cd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b098:	7bfa      	ldrb	r2, [r7, #15]
 800b09a:	4611      	mov	r1, r2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7fe fcf0 	bl	8009a82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe fc98 	bl	80099de <USBD_LL_Reset>
}
 800b0ae:	bf00      	nop
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe fceb 	bl	8009aa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	6812      	ldr	r2, [r2, #0]
 800b0da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b0de:	f043 0301 	orr.w	r3, r3, #1
 800b0e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7adb      	ldrb	r3, [r3, #11]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d005      	beq.n	800b0f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0ec:	4b04      	ldr	r3, [pc, #16]	@ (800b100 <HAL_PCD_SuspendCallback+0x48>)
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	4a03      	ldr	r2, [pc, #12]	@ (800b100 <HAL_PCD_SuspendCallback+0x48>)
 800b0f2:	f043 0306 	orr.w	r3, r3, #6
 800b0f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b0f8:	bf00      	nop
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	e000ed00 	.word	0xe000ed00

0800b104 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b112:	4618      	mov	r0, r3
 800b114:	f7fe fce1 	bl	8009ada <USBD_LL_Resume>
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b132:	78fa      	ldrb	r2, [r7, #3]
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe fd39 	bl	8009bae <USBD_LL_IsoOUTIncomplete>
}
 800b13c:	bf00      	nop
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b156:	78fa      	ldrb	r2, [r7, #3]
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe fcf5 	bl	8009b4a <USBD_LL_IsoINIncomplete>
}
 800b160:	bf00      	nop
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe fd4b 	bl	8009c12 <USBD_LL_DevConnected>
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b192:	4618      	mov	r0, r3
 800b194:	f7fe fd48 	bl	8009c28 <USBD_LL_DevDisconnected>
}
 800b198:	bf00      	nop
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d13c      	bne.n	800b22a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b1b0:	4a20      	ldr	r2, [pc, #128]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b1c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1ce:	4b19      	ldr	r3, [pc, #100]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b1d4:	4b17      	ldr	r3, [pc, #92]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b1da:	4b16      	ldr	r3, [pc, #88]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1dc:	2202      	movs	r2, #2
 800b1de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1e0:	4b14      	ldr	r3, [pc, #80]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b1e6:	4b13      	ldr	r3, [pc, #76]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b1ec:	4b11      	ldr	r3, [pc, #68]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b1f2:	4b10      	ldr	r3, [pc, #64]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b1f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b234 <USBD_LL_Init+0x94>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b1fe:	480d      	ldr	r0, [pc, #52]	@ (800b234 <USBD_LL_Init+0x94>)
 800b200:	f7f8 fdda 	bl	8003db8 <HAL_PCD_Init>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b20a:	f7f6 fd65 	bl	8001cd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b20e:	2180      	movs	r1, #128	@ 0x80
 800b210:	4808      	ldr	r0, [pc, #32]	@ (800b234 <USBD_LL_Init+0x94>)
 800b212:	f7fa f806 	bl	8005222 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b216:	2240      	movs	r2, #64	@ 0x40
 800b218:	2100      	movs	r1, #0
 800b21a:	4806      	ldr	r0, [pc, #24]	@ (800b234 <USBD_LL_Init+0x94>)
 800b21c:	f7f9 ffba 	bl	8005194 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b220:	2280      	movs	r2, #128	@ 0x80
 800b222:	2101      	movs	r1, #1
 800b224:	4803      	ldr	r0, [pc, #12]	@ (800b234 <USBD_LL_Init+0x94>)
 800b226:	f7f9 ffb5 	bl	8005194 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	20001dec 	.word	0x20001dec

0800b238 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b24e:	4618      	mov	r0, r3
 800b250:	f7f8 fec1 	bl	8003fd6 <HAL_PCD_Start>
 800b254:	4603      	mov	r3, r0
 800b256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b258:	7bfb      	ldrb	r3, [r7, #15]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 f942 	bl	800b4e4 <USBD_Get_USB_Status>
 800b260:	4603      	mov	r3, r0
 800b262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b264:	7bbb      	ldrb	r3, [r7, #14]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	4608      	mov	r0, r1
 800b278:	4611      	mov	r1, r2
 800b27a:	461a      	mov	r2, r3
 800b27c:	4603      	mov	r3, r0
 800b27e:	70fb      	strb	r3, [r7, #3]
 800b280:	460b      	mov	r3, r1
 800b282:	70bb      	strb	r3, [r7, #2]
 800b284:	4613      	mov	r3, r2
 800b286:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b296:	78bb      	ldrb	r3, [r7, #2]
 800b298:	883a      	ldrh	r2, [r7, #0]
 800b29a:	78f9      	ldrb	r1, [r7, #3]
 800b29c:	f7f9 fb95 	bl	80049ca <HAL_PCD_EP_Open>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f91c 	bl	800b4e4 <USBD_Get_USB_Status>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b084      	sub	sp, #16
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2d4:	78fa      	ldrb	r2, [r7, #3]
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7f9 fbe0 	bl	8004a9e <HAL_PCD_EP_Close>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 f8fd 	bl	800b4e4 <USBD_Get_USB_Status>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	460b      	mov	r3, r1
 800b302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b312:	78fa      	ldrb	r2, [r7, #3]
 800b314:	4611      	mov	r1, r2
 800b316:	4618      	mov	r0, r3
 800b318:	f7f9 fc98 	bl	8004c4c <HAL_PCD_EP_SetStall>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 f8de 	bl	800b4e4 <USBD_Get_USB_Status>
 800b328:	4603      	mov	r3, r0
 800b32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	460b      	mov	r3, r1
 800b340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b350:	78fa      	ldrb	r2, [r7, #3]
 800b352:	4611      	mov	r1, r2
 800b354:	4618      	mov	r0, r3
 800b356:	f7f9 fcdc 	bl	8004d12 <HAL_PCD_EP_ClrStall>
 800b35a:	4603      	mov	r3, r0
 800b35c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	4618      	mov	r0, r3
 800b362:	f000 f8bf 	bl	800b4e4 <USBD_Get_USB_Status>
 800b366:	4603      	mov	r3, r0
 800b368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b36a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	460b      	mov	r3, r1
 800b37e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b386:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	da0b      	bge.n	800b3a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	4613      	mov	r3, r2
 800b39a:	00db      	lsls	r3, r3, #3
 800b39c:	4413      	add	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	440b      	add	r3, r1
 800b3a2:	3316      	adds	r3, #22
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	e00b      	b.n	800b3c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b3a8:	78fb      	ldrb	r3, [r7, #3]
 800b3aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3ae:	68f9      	ldr	r1, [r7, #12]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	00db      	lsls	r3, r3, #3
 800b3b4:	4413      	add	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	440b      	add	r3, r1
 800b3ba:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b3be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3e6:	78fa      	ldrb	r2, [r7, #3]
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f9 fac9 	bl	8004982 <HAL_PCD_SetAddress>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 f874 	bl	800b4e4 <USBD_Get_USB_Status>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b400:	7bbb      	ldrb	r3, [r7, #14]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b086      	sub	sp, #24
 800b40e:	af00      	add	r7, sp, #0
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	607a      	str	r2, [r7, #4]
 800b414:	603b      	str	r3, [r7, #0]
 800b416:	460b      	mov	r3, r1
 800b418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b428:	7af9      	ldrb	r1, [r7, #11]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	f7f9 fbd3 	bl	8004bd8 <HAL_PCD_EP_Transmit>
 800b432:	4603      	mov	r3, r0
 800b434:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 f853 	bl	800b4e4 <USBD_Get_USB_Status>
 800b43e:	4603      	mov	r3, r0
 800b440:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b442:	7dbb      	ldrb	r3, [r7, #22]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	460b      	mov	r3, r1
 800b45a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b46a:	7af9      	ldrb	r1, [r7, #11]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	f7f9 fb5f 	bl	8004b32 <HAL_PCD_EP_Receive>
 800b474:	4603      	mov	r3, r0
 800b476:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 f832 	bl	800b4e4 <USBD_Get_USB_Status>
 800b480:	4603      	mov	r3, r0
 800b482:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b484:	7dbb      	ldrb	r3, [r7, #22]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4a0:	78fa      	ldrb	r2, [r7, #3]
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7f9 fb7f 	bl	8004ba8 <HAL_PCD_EP_GetRxCount>
 800b4aa:	4603      	mov	r3, r0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b4bc:	4b03      	ldr	r3, [pc, #12]	@ (800b4cc <USBD_static_malloc+0x18>)
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	200022d0 	.word	0x200022d0

0800b4d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]

}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	2b03      	cmp	r3, #3
 800b4f6:	d817      	bhi.n	800b528 <USBD_Get_USB_Status+0x44>
 800b4f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b500 <USBD_Get_USB_Status+0x1c>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b511 	.word	0x0800b511
 800b504:	0800b517 	.word	0x0800b517
 800b508:	0800b51d 	.word	0x0800b51d
 800b50c:	0800b523 	.word	0x0800b523
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
    break;
 800b514:	e00b      	b.n	800b52e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b516:	2303      	movs	r3, #3
 800b518:	73fb      	strb	r3, [r7, #15]
    break;
 800b51a:	e008      	b.n	800b52e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b51c:	2301      	movs	r3, #1
 800b51e:	73fb      	strb	r3, [r7, #15]
    break;
 800b520:	e005      	b.n	800b52e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b522:	2303      	movs	r3, #3
 800b524:	73fb      	strb	r3, [r7, #15]
    break;
 800b526:	e002      	b.n	800b52e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b528:	2303      	movs	r3, #3
 800b52a:	73fb      	strb	r3, [r7, #15]
    break;
 800b52c:	bf00      	nop
  }
  return usb_status;
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <sulp>:
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	4604      	mov	r4, r0
 800b540:	460d      	mov	r5, r1
 800b542:	ec45 4b10 	vmov	d0, r4, r5
 800b546:	4616      	mov	r6, r2
 800b548:	f003 fc6e 	bl	800ee28 <__ulp>
 800b54c:	ec51 0b10 	vmov	r0, r1, d0
 800b550:	b17e      	cbz	r6, 800b572 <sulp+0x36>
 800b552:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b556:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	dd09      	ble.n	800b572 <sulp+0x36>
 800b55e:	051b      	lsls	r3, r3, #20
 800b560:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b564:	2400      	movs	r4, #0
 800b566:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b56a:	4622      	mov	r2, r4
 800b56c:	462b      	mov	r3, r5
 800b56e:	f7f5 f84b 	bl	8000608 <__aeabi_dmul>
 800b572:	ec41 0b10 	vmov	d0, r0, r1
 800b576:	bd70      	pop	{r4, r5, r6, pc}

0800b578 <_strtod_l>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	b09f      	sub	sp, #124	@ 0x7c
 800b57e:	460c      	mov	r4, r1
 800b580:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b582:	2200      	movs	r2, #0
 800b584:	921a      	str	r2, [sp, #104]	@ 0x68
 800b586:	9005      	str	r0, [sp, #20]
 800b588:	f04f 0a00 	mov.w	sl, #0
 800b58c:	f04f 0b00 	mov.w	fp, #0
 800b590:	460a      	mov	r2, r1
 800b592:	9219      	str	r2, [sp, #100]	@ 0x64
 800b594:	7811      	ldrb	r1, [r2, #0]
 800b596:	292b      	cmp	r1, #43	@ 0x2b
 800b598:	d04a      	beq.n	800b630 <_strtod_l+0xb8>
 800b59a:	d838      	bhi.n	800b60e <_strtod_l+0x96>
 800b59c:	290d      	cmp	r1, #13
 800b59e:	d832      	bhi.n	800b606 <_strtod_l+0x8e>
 800b5a0:	2908      	cmp	r1, #8
 800b5a2:	d832      	bhi.n	800b60a <_strtod_l+0x92>
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d03b      	beq.n	800b620 <_strtod_l+0xa8>
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b5ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b5ae:	782a      	ldrb	r2, [r5, #0]
 800b5b0:	2a30      	cmp	r2, #48	@ 0x30
 800b5b2:	f040 80b3 	bne.w	800b71c <_strtod_l+0x1a4>
 800b5b6:	786a      	ldrb	r2, [r5, #1]
 800b5b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5bc:	2a58      	cmp	r2, #88	@ 0x58
 800b5be:	d16e      	bne.n	800b69e <_strtod_l+0x126>
 800b5c0:	9302      	str	r3, [sp, #8]
 800b5c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	4a8e      	ldr	r2, [pc, #568]	@ (800b804 <_strtod_l+0x28c>)
 800b5cc:	9805      	ldr	r0, [sp, #20]
 800b5ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b5d0:	a919      	add	r1, sp, #100	@ 0x64
 800b5d2:	f002 fd1b 	bl	800e00c <__gethex>
 800b5d6:	f010 060f 	ands.w	r6, r0, #15
 800b5da:	4604      	mov	r4, r0
 800b5dc:	d005      	beq.n	800b5ea <_strtod_l+0x72>
 800b5de:	2e06      	cmp	r6, #6
 800b5e0:	d128      	bne.n	800b634 <_strtod_l+0xbc>
 800b5e2:	3501      	adds	r5, #1
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b5e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f040 858e 	bne.w	800c10e <_strtod_l+0xb96>
 800b5f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5f4:	b1cb      	cbz	r3, 800b62a <_strtod_l+0xb2>
 800b5f6:	4652      	mov	r2, sl
 800b5f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b5fc:	ec43 2b10 	vmov	d0, r2, r3
 800b600:	b01f      	add	sp, #124	@ 0x7c
 800b602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	2920      	cmp	r1, #32
 800b608:	d1ce      	bne.n	800b5a8 <_strtod_l+0x30>
 800b60a:	3201      	adds	r2, #1
 800b60c:	e7c1      	b.n	800b592 <_strtod_l+0x1a>
 800b60e:	292d      	cmp	r1, #45	@ 0x2d
 800b610:	d1ca      	bne.n	800b5a8 <_strtod_l+0x30>
 800b612:	2101      	movs	r1, #1
 800b614:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b616:	1c51      	adds	r1, r2, #1
 800b618:	9119      	str	r1, [sp, #100]	@ 0x64
 800b61a:	7852      	ldrb	r2, [r2, #1]
 800b61c:	2a00      	cmp	r2, #0
 800b61e:	d1c5      	bne.n	800b5ac <_strtod_l+0x34>
 800b620:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b622:	9419      	str	r4, [sp, #100]	@ 0x64
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 8570 	bne.w	800c10a <_strtod_l+0xb92>
 800b62a:	4652      	mov	r2, sl
 800b62c:	465b      	mov	r3, fp
 800b62e:	e7e5      	b.n	800b5fc <_strtod_l+0x84>
 800b630:	2100      	movs	r1, #0
 800b632:	e7ef      	b.n	800b614 <_strtod_l+0x9c>
 800b634:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b636:	b13a      	cbz	r2, 800b648 <_strtod_l+0xd0>
 800b638:	2135      	movs	r1, #53	@ 0x35
 800b63a:	a81c      	add	r0, sp, #112	@ 0x70
 800b63c:	f003 fcee 	bl	800f01c <__copybits>
 800b640:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b642:	9805      	ldr	r0, [sp, #20]
 800b644:	f003 f8bc 	bl	800e7c0 <_Bfree>
 800b648:	3e01      	subs	r6, #1
 800b64a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b64c:	2e04      	cmp	r6, #4
 800b64e:	d806      	bhi.n	800b65e <_strtod_l+0xe6>
 800b650:	e8df f006 	tbb	[pc, r6]
 800b654:	201d0314 	.word	0x201d0314
 800b658:	14          	.byte	0x14
 800b659:	00          	.byte	0x00
 800b65a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b65e:	05e1      	lsls	r1, r4, #23
 800b660:	bf48      	it	mi
 800b662:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b66a:	0d1b      	lsrs	r3, r3, #20
 800b66c:	051b      	lsls	r3, r3, #20
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1bb      	bne.n	800b5ea <_strtod_l+0x72>
 800b672:	f001 fd7f 	bl	800d174 <__errno>
 800b676:	2322      	movs	r3, #34	@ 0x22
 800b678:	6003      	str	r3, [r0, #0]
 800b67a:	e7b6      	b.n	800b5ea <_strtod_l+0x72>
 800b67c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b680:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b684:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b688:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b68c:	e7e7      	b.n	800b65e <_strtod_l+0xe6>
 800b68e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b80c <_strtod_l+0x294>
 800b692:	e7e4      	b.n	800b65e <_strtod_l+0xe6>
 800b694:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b698:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b69c:	e7df      	b.n	800b65e <_strtod_l+0xe6>
 800b69e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6a4:	785b      	ldrb	r3, [r3, #1]
 800b6a6:	2b30      	cmp	r3, #48	@ 0x30
 800b6a8:	d0f9      	beq.n	800b69e <_strtod_l+0x126>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d09d      	beq.n	800b5ea <_strtod_l+0x72>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	9308      	str	r3, [sp, #32]
 800b6ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6bc:	461f      	mov	r7, r3
 800b6be:	220a      	movs	r2, #10
 800b6c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b6c2:	7805      	ldrb	r5, [r0, #0]
 800b6c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b6c8:	b2d9      	uxtb	r1, r3
 800b6ca:	2909      	cmp	r1, #9
 800b6cc:	d928      	bls.n	800b720 <_strtod_l+0x1a8>
 800b6ce:	494e      	ldr	r1, [pc, #312]	@ (800b808 <_strtod_l+0x290>)
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f001 fce0 	bl	800d096 <strncmp>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d032      	beq.n	800b740 <_strtod_l+0x1c8>
 800b6da:	2000      	movs	r0, #0
 800b6dc:	462a      	mov	r2, r5
 800b6de:	4681      	mov	r9, r0
 800b6e0:	463d      	mov	r5, r7
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2a65      	cmp	r2, #101	@ 0x65
 800b6e6:	d001      	beq.n	800b6ec <_strtod_l+0x174>
 800b6e8:	2a45      	cmp	r2, #69	@ 0x45
 800b6ea:	d114      	bne.n	800b716 <_strtod_l+0x19e>
 800b6ec:	b91d      	cbnz	r5, 800b6f6 <_strtod_l+0x17e>
 800b6ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6f0:	4302      	orrs	r2, r0
 800b6f2:	d095      	beq.n	800b620 <_strtod_l+0xa8>
 800b6f4:	2500      	movs	r5, #0
 800b6f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b6f8:	1c62      	adds	r2, r4, #1
 800b6fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6fc:	7862      	ldrb	r2, [r4, #1]
 800b6fe:	2a2b      	cmp	r2, #43	@ 0x2b
 800b700:	d077      	beq.n	800b7f2 <_strtod_l+0x27a>
 800b702:	2a2d      	cmp	r2, #45	@ 0x2d
 800b704:	d07b      	beq.n	800b7fe <_strtod_l+0x286>
 800b706:	f04f 0c00 	mov.w	ip, #0
 800b70a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b70e:	2909      	cmp	r1, #9
 800b710:	f240 8082 	bls.w	800b818 <_strtod_l+0x2a0>
 800b714:	9419      	str	r4, [sp, #100]	@ 0x64
 800b716:	f04f 0800 	mov.w	r8, #0
 800b71a:	e0a2      	b.n	800b862 <_strtod_l+0x2ea>
 800b71c:	2300      	movs	r3, #0
 800b71e:	e7c7      	b.n	800b6b0 <_strtod_l+0x138>
 800b720:	2f08      	cmp	r7, #8
 800b722:	bfd5      	itete	le
 800b724:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b726:	9908      	ldrgt	r1, [sp, #32]
 800b728:	fb02 3301 	mlale	r3, r2, r1, r3
 800b72c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b730:	f100 0001 	add.w	r0, r0, #1
 800b734:	bfd4      	ite	le
 800b736:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b738:	9308      	strgt	r3, [sp, #32]
 800b73a:	3701      	adds	r7, #1
 800b73c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b73e:	e7bf      	b.n	800b6c0 <_strtod_l+0x148>
 800b740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	9219      	str	r2, [sp, #100]	@ 0x64
 800b746:	785a      	ldrb	r2, [r3, #1]
 800b748:	b37f      	cbz	r7, 800b7aa <_strtod_l+0x232>
 800b74a:	4681      	mov	r9, r0
 800b74c:	463d      	mov	r5, r7
 800b74e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b752:	2b09      	cmp	r3, #9
 800b754:	d912      	bls.n	800b77c <_strtod_l+0x204>
 800b756:	2301      	movs	r3, #1
 800b758:	e7c4      	b.n	800b6e4 <_strtod_l+0x16c>
 800b75a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b760:	785a      	ldrb	r2, [r3, #1]
 800b762:	3001      	adds	r0, #1
 800b764:	2a30      	cmp	r2, #48	@ 0x30
 800b766:	d0f8      	beq.n	800b75a <_strtod_l+0x1e2>
 800b768:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b76c:	2b08      	cmp	r3, #8
 800b76e:	f200 84d3 	bhi.w	800c118 <_strtod_l+0xba0>
 800b772:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b774:	930c      	str	r3, [sp, #48]	@ 0x30
 800b776:	4681      	mov	r9, r0
 800b778:	2000      	movs	r0, #0
 800b77a:	4605      	mov	r5, r0
 800b77c:	3a30      	subs	r2, #48	@ 0x30
 800b77e:	f100 0301 	add.w	r3, r0, #1
 800b782:	d02a      	beq.n	800b7da <_strtod_l+0x262>
 800b784:	4499      	add	r9, r3
 800b786:	eb00 0c05 	add.w	ip, r0, r5
 800b78a:	462b      	mov	r3, r5
 800b78c:	210a      	movs	r1, #10
 800b78e:	4563      	cmp	r3, ip
 800b790:	d10d      	bne.n	800b7ae <_strtod_l+0x236>
 800b792:	1c69      	adds	r1, r5, #1
 800b794:	4401      	add	r1, r0
 800b796:	4428      	add	r0, r5
 800b798:	2808      	cmp	r0, #8
 800b79a:	dc16      	bgt.n	800b7ca <_strtod_l+0x252>
 800b79c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b79e:	230a      	movs	r3, #10
 800b7a0:	fb03 2300 	mla	r3, r3, r0, r2
 800b7a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e018      	b.n	800b7dc <_strtod_l+0x264>
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	e7da      	b.n	800b764 <_strtod_l+0x1ec>
 800b7ae:	2b08      	cmp	r3, #8
 800b7b0:	f103 0301 	add.w	r3, r3, #1
 800b7b4:	dc03      	bgt.n	800b7be <_strtod_l+0x246>
 800b7b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b7b8:	434e      	muls	r6, r1
 800b7ba:	960a      	str	r6, [sp, #40]	@ 0x28
 800b7bc:	e7e7      	b.n	800b78e <_strtod_l+0x216>
 800b7be:	2b10      	cmp	r3, #16
 800b7c0:	bfde      	ittt	le
 800b7c2:	9e08      	ldrle	r6, [sp, #32]
 800b7c4:	434e      	mulle	r6, r1
 800b7c6:	9608      	strle	r6, [sp, #32]
 800b7c8:	e7e1      	b.n	800b78e <_strtod_l+0x216>
 800b7ca:	280f      	cmp	r0, #15
 800b7cc:	dceb      	bgt.n	800b7a6 <_strtod_l+0x22e>
 800b7ce:	9808      	ldr	r0, [sp, #32]
 800b7d0:	230a      	movs	r3, #10
 800b7d2:	fb03 2300 	mla	r3, r3, r0, r2
 800b7d6:	9308      	str	r3, [sp, #32]
 800b7d8:	e7e5      	b.n	800b7a6 <_strtod_l+0x22e>
 800b7da:	4629      	mov	r1, r5
 800b7dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7de:	1c50      	adds	r0, r2, #1
 800b7e0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7e2:	7852      	ldrb	r2, [r2, #1]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	e7b1      	b.n	800b74e <_strtod_l+0x1d6>
 800b7ea:	f04f 0900 	mov.w	r9, #0
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e77d      	b.n	800b6ee <_strtod_l+0x176>
 800b7f2:	f04f 0c00 	mov.w	ip, #0
 800b7f6:	1ca2      	adds	r2, r4, #2
 800b7f8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7fa:	78a2      	ldrb	r2, [r4, #2]
 800b7fc:	e785      	b.n	800b70a <_strtod_l+0x192>
 800b7fe:	f04f 0c01 	mov.w	ip, #1
 800b802:	e7f8      	b.n	800b7f6 <_strtod_l+0x27e>
 800b804:	0800fce8 	.word	0x0800fce8
 800b808:	0800fcd0 	.word	0x0800fcd0
 800b80c:	7ff00000 	.word	0x7ff00000
 800b810:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b812:	1c51      	adds	r1, r2, #1
 800b814:	9119      	str	r1, [sp, #100]	@ 0x64
 800b816:	7852      	ldrb	r2, [r2, #1]
 800b818:	2a30      	cmp	r2, #48	@ 0x30
 800b81a:	d0f9      	beq.n	800b810 <_strtod_l+0x298>
 800b81c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b820:	2908      	cmp	r1, #8
 800b822:	f63f af78 	bhi.w	800b716 <_strtod_l+0x19e>
 800b826:	3a30      	subs	r2, #48	@ 0x30
 800b828:	920e      	str	r2, [sp, #56]	@ 0x38
 800b82a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b82c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b82e:	f04f 080a 	mov.w	r8, #10
 800b832:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b834:	1c56      	adds	r6, r2, #1
 800b836:	9619      	str	r6, [sp, #100]	@ 0x64
 800b838:	7852      	ldrb	r2, [r2, #1]
 800b83a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b83e:	f1be 0f09 	cmp.w	lr, #9
 800b842:	d939      	bls.n	800b8b8 <_strtod_l+0x340>
 800b844:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b846:	1a76      	subs	r6, r6, r1
 800b848:	2e08      	cmp	r6, #8
 800b84a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b84e:	dc03      	bgt.n	800b858 <_strtod_l+0x2e0>
 800b850:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b852:	4588      	cmp	r8, r1
 800b854:	bfa8      	it	ge
 800b856:	4688      	movge	r8, r1
 800b858:	f1bc 0f00 	cmp.w	ip, #0
 800b85c:	d001      	beq.n	800b862 <_strtod_l+0x2ea>
 800b85e:	f1c8 0800 	rsb	r8, r8, #0
 800b862:	2d00      	cmp	r5, #0
 800b864:	d14e      	bne.n	800b904 <_strtod_l+0x38c>
 800b866:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b868:	4308      	orrs	r0, r1
 800b86a:	f47f aebe 	bne.w	800b5ea <_strtod_l+0x72>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f47f aed6 	bne.w	800b620 <_strtod_l+0xa8>
 800b874:	2a69      	cmp	r2, #105	@ 0x69
 800b876:	d028      	beq.n	800b8ca <_strtod_l+0x352>
 800b878:	dc25      	bgt.n	800b8c6 <_strtod_l+0x34e>
 800b87a:	2a49      	cmp	r2, #73	@ 0x49
 800b87c:	d025      	beq.n	800b8ca <_strtod_l+0x352>
 800b87e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b880:	f47f aece 	bne.w	800b620 <_strtod_l+0xa8>
 800b884:	499b      	ldr	r1, [pc, #620]	@ (800baf4 <_strtod_l+0x57c>)
 800b886:	a819      	add	r0, sp, #100	@ 0x64
 800b888:	f002 fde2 	bl	800e450 <__match>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f43f aec7 	beq.w	800b620 <_strtod_l+0xa8>
 800b892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b28      	cmp	r3, #40	@ 0x28
 800b898:	d12e      	bne.n	800b8f8 <_strtod_l+0x380>
 800b89a:	4997      	ldr	r1, [pc, #604]	@ (800baf8 <_strtod_l+0x580>)
 800b89c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b89e:	a819      	add	r0, sp, #100	@ 0x64
 800b8a0:	f002 fdea 	bl	800e478 <__hexnan>
 800b8a4:	2805      	cmp	r0, #5
 800b8a6:	d127      	bne.n	800b8f8 <_strtod_l+0x380>
 800b8a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b8ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b8b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b8b6:	e698      	b.n	800b5ea <_strtod_l+0x72>
 800b8b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8ba:	fb08 2101 	mla	r1, r8, r1, r2
 800b8be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b8c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8c4:	e7b5      	b.n	800b832 <_strtod_l+0x2ba>
 800b8c6:	2a6e      	cmp	r2, #110	@ 0x6e
 800b8c8:	e7da      	b.n	800b880 <_strtod_l+0x308>
 800b8ca:	498c      	ldr	r1, [pc, #560]	@ (800bafc <_strtod_l+0x584>)
 800b8cc:	a819      	add	r0, sp, #100	@ 0x64
 800b8ce:	f002 fdbf 	bl	800e450 <__match>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	f43f aea4 	beq.w	800b620 <_strtod_l+0xa8>
 800b8d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8da:	4989      	ldr	r1, [pc, #548]	@ (800bb00 <_strtod_l+0x588>)
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	a819      	add	r0, sp, #100	@ 0x64
 800b8e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8e2:	f002 fdb5 	bl	800e450 <__match>
 800b8e6:	b910      	cbnz	r0, 800b8ee <_strtod_l+0x376>
 800b8e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8ee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bb10 <_strtod_l+0x598>
 800b8f2:	f04f 0a00 	mov.w	sl, #0
 800b8f6:	e678      	b.n	800b5ea <_strtod_l+0x72>
 800b8f8:	4882      	ldr	r0, [pc, #520]	@ (800bb04 <_strtod_l+0x58c>)
 800b8fa:	f001 fc79 	bl	800d1f0 <nan>
 800b8fe:	ec5b ab10 	vmov	sl, fp, d0
 800b902:	e672      	b.n	800b5ea <_strtod_l+0x72>
 800b904:	eba8 0309 	sub.w	r3, r8, r9
 800b908:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b90c:	2f00      	cmp	r7, #0
 800b90e:	bf08      	it	eq
 800b910:	462f      	moveq	r7, r5
 800b912:	2d10      	cmp	r5, #16
 800b914:	462c      	mov	r4, r5
 800b916:	bfa8      	it	ge
 800b918:	2410      	movge	r4, #16
 800b91a:	f7f4 fdfb 	bl	8000514 <__aeabi_ui2d>
 800b91e:	2d09      	cmp	r5, #9
 800b920:	4682      	mov	sl, r0
 800b922:	468b      	mov	fp, r1
 800b924:	dc13      	bgt.n	800b94e <_strtod_l+0x3d6>
 800b926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f43f ae5e 	beq.w	800b5ea <_strtod_l+0x72>
 800b92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b930:	dd78      	ble.n	800ba24 <_strtod_l+0x4ac>
 800b932:	2b16      	cmp	r3, #22
 800b934:	dc5f      	bgt.n	800b9f6 <_strtod_l+0x47e>
 800b936:	4974      	ldr	r1, [pc, #464]	@ (800bb08 <_strtod_l+0x590>)
 800b938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b93c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b940:	4652      	mov	r2, sl
 800b942:	465b      	mov	r3, fp
 800b944:	f7f4 fe60 	bl	8000608 <__aeabi_dmul>
 800b948:	4682      	mov	sl, r0
 800b94a:	468b      	mov	fp, r1
 800b94c:	e64d      	b.n	800b5ea <_strtod_l+0x72>
 800b94e:	4b6e      	ldr	r3, [pc, #440]	@ (800bb08 <_strtod_l+0x590>)
 800b950:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b954:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b958:	f7f4 fe56 	bl	8000608 <__aeabi_dmul>
 800b95c:	4682      	mov	sl, r0
 800b95e:	9808      	ldr	r0, [sp, #32]
 800b960:	468b      	mov	fp, r1
 800b962:	f7f4 fdd7 	bl	8000514 <__aeabi_ui2d>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4650      	mov	r0, sl
 800b96c:	4659      	mov	r1, fp
 800b96e:	f7f4 fc95 	bl	800029c <__adddf3>
 800b972:	2d0f      	cmp	r5, #15
 800b974:	4682      	mov	sl, r0
 800b976:	468b      	mov	fp, r1
 800b978:	ddd5      	ble.n	800b926 <_strtod_l+0x3ae>
 800b97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97c:	1b2c      	subs	r4, r5, r4
 800b97e:	441c      	add	r4, r3
 800b980:	2c00      	cmp	r4, #0
 800b982:	f340 8096 	ble.w	800bab2 <_strtod_l+0x53a>
 800b986:	f014 030f 	ands.w	r3, r4, #15
 800b98a:	d00a      	beq.n	800b9a2 <_strtod_l+0x42a>
 800b98c:	495e      	ldr	r1, [pc, #376]	@ (800bb08 <_strtod_l+0x590>)
 800b98e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b992:	4652      	mov	r2, sl
 800b994:	465b      	mov	r3, fp
 800b996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b99a:	f7f4 fe35 	bl	8000608 <__aeabi_dmul>
 800b99e:	4682      	mov	sl, r0
 800b9a0:	468b      	mov	fp, r1
 800b9a2:	f034 040f 	bics.w	r4, r4, #15
 800b9a6:	d073      	beq.n	800ba90 <_strtod_l+0x518>
 800b9a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b9ac:	dd48      	ble.n	800ba40 <_strtod_l+0x4c8>
 800b9ae:	2400      	movs	r4, #0
 800b9b0:	46a0      	mov	r8, r4
 800b9b2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9b4:	46a1      	mov	r9, r4
 800b9b6:	9a05      	ldr	r2, [sp, #20]
 800b9b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bb10 <_strtod_l+0x598>
 800b9bc:	2322      	movs	r3, #34	@ 0x22
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	f04f 0a00 	mov.w	sl, #0
 800b9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f43f ae0f 	beq.w	800b5ea <_strtod_l+0x72>
 800b9cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9ce:	9805      	ldr	r0, [sp, #20]
 800b9d0:	f002 fef6 	bl	800e7c0 <_Bfree>
 800b9d4:	9805      	ldr	r0, [sp, #20]
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	f002 fef2 	bl	800e7c0 <_Bfree>
 800b9dc:	9805      	ldr	r0, [sp, #20]
 800b9de:	4641      	mov	r1, r8
 800b9e0:	f002 feee 	bl	800e7c0 <_Bfree>
 800b9e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9e6:	9805      	ldr	r0, [sp, #20]
 800b9e8:	f002 feea 	bl	800e7c0 <_Bfree>
 800b9ec:	9805      	ldr	r0, [sp, #20]
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	f002 fee6 	bl	800e7c0 <_Bfree>
 800b9f4:	e5f9      	b.n	800b5ea <_strtod_l+0x72>
 800b9f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	dbbc      	blt.n	800b97a <_strtod_l+0x402>
 800ba00:	4c41      	ldr	r4, [pc, #260]	@ (800bb08 <_strtod_l+0x590>)
 800ba02:	f1c5 050f 	rsb	r5, r5, #15
 800ba06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba0a:	4652      	mov	r2, sl
 800ba0c:	465b      	mov	r3, fp
 800ba0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba12:	f7f4 fdf9 	bl	8000608 <__aeabi_dmul>
 800ba16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba18:	1b5d      	subs	r5, r3, r5
 800ba1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba22:	e78f      	b.n	800b944 <_strtod_l+0x3cc>
 800ba24:	3316      	adds	r3, #22
 800ba26:	dba8      	blt.n	800b97a <_strtod_l+0x402>
 800ba28:	4b37      	ldr	r3, [pc, #220]	@ (800bb08 <_strtod_l+0x590>)
 800ba2a:	eba9 0808 	sub.w	r8, r9, r8
 800ba2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ba32:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ba36:	4650      	mov	r0, sl
 800ba38:	4659      	mov	r1, fp
 800ba3a:	f7f4 ff0f 	bl	800085c <__aeabi_ddiv>
 800ba3e:	e783      	b.n	800b948 <_strtod_l+0x3d0>
 800ba40:	4b32      	ldr	r3, [pc, #200]	@ (800bb0c <_strtod_l+0x594>)
 800ba42:	9308      	str	r3, [sp, #32]
 800ba44:	2300      	movs	r3, #0
 800ba46:	1124      	asrs	r4, r4, #4
 800ba48:	4650      	mov	r0, sl
 800ba4a:	4659      	mov	r1, fp
 800ba4c:	461e      	mov	r6, r3
 800ba4e:	2c01      	cmp	r4, #1
 800ba50:	dc21      	bgt.n	800ba96 <_strtod_l+0x51e>
 800ba52:	b10b      	cbz	r3, 800ba58 <_strtod_l+0x4e0>
 800ba54:	4682      	mov	sl, r0
 800ba56:	468b      	mov	fp, r1
 800ba58:	492c      	ldr	r1, [pc, #176]	@ (800bb0c <_strtod_l+0x594>)
 800ba5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ba5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ba62:	4652      	mov	r2, sl
 800ba64:	465b      	mov	r3, fp
 800ba66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba6a:	f7f4 fdcd 	bl	8000608 <__aeabi_dmul>
 800ba6e:	4b28      	ldr	r3, [pc, #160]	@ (800bb10 <_strtod_l+0x598>)
 800ba70:	460a      	mov	r2, r1
 800ba72:	400b      	ands	r3, r1
 800ba74:	4927      	ldr	r1, [pc, #156]	@ (800bb14 <_strtod_l+0x59c>)
 800ba76:	428b      	cmp	r3, r1
 800ba78:	4682      	mov	sl, r0
 800ba7a:	d898      	bhi.n	800b9ae <_strtod_l+0x436>
 800ba7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba80:	428b      	cmp	r3, r1
 800ba82:	bf86      	itte	hi
 800ba84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bb18 <_strtod_l+0x5a0>
 800ba88:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ba8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ba90:	2300      	movs	r3, #0
 800ba92:	9308      	str	r3, [sp, #32]
 800ba94:	e07a      	b.n	800bb8c <_strtod_l+0x614>
 800ba96:	07e2      	lsls	r2, r4, #31
 800ba98:	d505      	bpl.n	800baa6 <_strtod_l+0x52e>
 800ba9a:	9b08      	ldr	r3, [sp, #32]
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fdb2 	bl	8000608 <__aeabi_dmul>
 800baa4:	2301      	movs	r3, #1
 800baa6:	9a08      	ldr	r2, [sp, #32]
 800baa8:	3208      	adds	r2, #8
 800baaa:	3601      	adds	r6, #1
 800baac:	1064      	asrs	r4, r4, #1
 800baae:	9208      	str	r2, [sp, #32]
 800bab0:	e7cd      	b.n	800ba4e <_strtod_l+0x4d6>
 800bab2:	d0ed      	beq.n	800ba90 <_strtod_l+0x518>
 800bab4:	4264      	negs	r4, r4
 800bab6:	f014 020f 	ands.w	r2, r4, #15
 800baba:	d00a      	beq.n	800bad2 <_strtod_l+0x55a>
 800babc:	4b12      	ldr	r3, [pc, #72]	@ (800bb08 <_strtod_l+0x590>)
 800babe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bac2:	4650      	mov	r0, sl
 800bac4:	4659      	mov	r1, fp
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	f7f4 fec7 	bl	800085c <__aeabi_ddiv>
 800bace:	4682      	mov	sl, r0
 800bad0:	468b      	mov	fp, r1
 800bad2:	1124      	asrs	r4, r4, #4
 800bad4:	d0dc      	beq.n	800ba90 <_strtod_l+0x518>
 800bad6:	2c1f      	cmp	r4, #31
 800bad8:	dd20      	ble.n	800bb1c <_strtod_l+0x5a4>
 800bada:	2400      	movs	r4, #0
 800badc:	46a0      	mov	r8, r4
 800bade:	940a      	str	r4, [sp, #40]	@ 0x28
 800bae0:	46a1      	mov	r9, r4
 800bae2:	9a05      	ldr	r2, [sp, #20]
 800bae4:	2322      	movs	r3, #34	@ 0x22
 800bae6:	f04f 0a00 	mov.w	sl, #0
 800baea:	f04f 0b00 	mov.w	fp, #0
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	e768      	b.n	800b9c4 <_strtod_l+0x44c>
 800baf2:	bf00      	nop
 800baf4:	0800fd35 	.word	0x0800fd35
 800baf8:	0800fcd4 	.word	0x0800fcd4
 800bafc:	0800fd2d 	.word	0x0800fd2d
 800bb00:	0800fd6c 	.word	0x0800fd6c
 800bb04:	080100fd 	.word	0x080100fd
 800bb08:	0800fee8 	.word	0x0800fee8
 800bb0c:	0800fec0 	.word	0x0800fec0
 800bb10:	7ff00000 	.word	0x7ff00000
 800bb14:	7ca00000 	.word	0x7ca00000
 800bb18:	7fefffff 	.word	0x7fefffff
 800bb1c:	f014 0310 	ands.w	r3, r4, #16
 800bb20:	bf18      	it	ne
 800bb22:	236a      	movne	r3, #106	@ 0x6a
 800bb24:	4ea9      	ldr	r6, [pc, #676]	@ (800bdcc <_strtod_l+0x854>)
 800bb26:	9308      	str	r3, [sp, #32]
 800bb28:	4650      	mov	r0, sl
 800bb2a:	4659      	mov	r1, fp
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	07e2      	lsls	r2, r4, #31
 800bb30:	d504      	bpl.n	800bb3c <_strtod_l+0x5c4>
 800bb32:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb36:	f7f4 fd67 	bl	8000608 <__aeabi_dmul>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	1064      	asrs	r4, r4, #1
 800bb3e:	f106 0608 	add.w	r6, r6, #8
 800bb42:	d1f4      	bne.n	800bb2e <_strtod_l+0x5b6>
 800bb44:	b10b      	cbz	r3, 800bb4a <_strtod_l+0x5d2>
 800bb46:	4682      	mov	sl, r0
 800bb48:	468b      	mov	fp, r1
 800bb4a:	9b08      	ldr	r3, [sp, #32]
 800bb4c:	b1b3      	cbz	r3, 800bb7c <_strtod_l+0x604>
 800bb4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	4659      	mov	r1, fp
 800bb5a:	dd0f      	ble.n	800bb7c <_strtod_l+0x604>
 800bb5c:	2b1f      	cmp	r3, #31
 800bb5e:	dd55      	ble.n	800bc0c <_strtod_l+0x694>
 800bb60:	2b34      	cmp	r3, #52	@ 0x34
 800bb62:	bfde      	ittt	le
 800bb64:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800bb68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb6c:	4093      	lslle	r3, r2
 800bb6e:	f04f 0a00 	mov.w	sl, #0
 800bb72:	bfcc      	ite	gt
 800bb74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb78:	ea03 0b01 	andle.w	fp, r3, r1
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2300      	movs	r3, #0
 800bb80:	4650      	mov	r0, sl
 800bb82:	4659      	mov	r1, fp
 800bb84:	f7f4 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d1a6      	bne.n	800bada <_strtod_l+0x562>
 800bb8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb92:	9805      	ldr	r0, [sp, #20]
 800bb94:	462b      	mov	r3, r5
 800bb96:	463a      	mov	r2, r7
 800bb98:	f002 fe7a 	bl	800e890 <__s2b>
 800bb9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	f43f af05 	beq.w	800b9ae <_strtod_l+0x436>
 800bba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bba6:	2a00      	cmp	r2, #0
 800bba8:	eba9 0308 	sub.w	r3, r9, r8
 800bbac:	bfa8      	it	ge
 800bbae:	2300      	movge	r3, #0
 800bbb0:	9312      	str	r3, [sp, #72]	@ 0x48
 800bbb2:	2400      	movs	r4, #0
 800bbb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bbb8:	9316      	str	r3, [sp, #88]	@ 0x58
 800bbba:	46a0      	mov	r8, r4
 800bbbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbbe:	9805      	ldr	r0, [sp, #20]
 800bbc0:	6859      	ldr	r1, [r3, #4]
 800bbc2:	f002 fdbd 	bl	800e740 <_Balloc>
 800bbc6:	4681      	mov	r9, r0
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	f43f aef4 	beq.w	800b9b6 <_strtod_l+0x43e>
 800bbce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbd0:	691a      	ldr	r2, [r3, #16]
 800bbd2:	3202      	adds	r2, #2
 800bbd4:	f103 010c 	add.w	r1, r3, #12
 800bbd8:	0092      	lsls	r2, r2, #2
 800bbda:	300c      	adds	r0, #12
 800bbdc:	f001 faf7 	bl	800d1ce <memcpy>
 800bbe0:	ec4b ab10 	vmov	d0, sl, fp
 800bbe4:	9805      	ldr	r0, [sp, #20]
 800bbe6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bbe8:	a91b      	add	r1, sp, #108	@ 0x6c
 800bbea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bbee:	f003 f98b 	bl	800ef08 <__d2b>
 800bbf2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f43f aede 	beq.w	800b9b6 <_strtod_l+0x43e>
 800bbfa:	9805      	ldr	r0, [sp, #20]
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	f002 fedd 	bl	800e9bc <__i2b>
 800bc02:	4680      	mov	r8, r0
 800bc04:	b948      	cbnz	r0, 800bc1a <_strtod_l+0x6a2>
 800bc06:	f04f 0800 	mov.w	r8, #0
 800bc0a:	e6d4      	b.n	800b9b6 <_strtod_l+0x43e>
 800bc0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc10:	fa02 f303 	lsl.w	r3, r2, r3
 800bc14:	ea03 0a0a 	and.w	sl, r3, sl
 800bc18:	e7b0      	b.n	800bb7c <_strtod_l+0x604>
 800bc1a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bc1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bc1e:	2d00      	cmp	r5, #0
 800bc20:	bfab      	itete	ge
 800bc22:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bc24:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bc26:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bc28:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bc2a:	bfac      	ite	ge
 800bc2c:	18ef      	addge	r7, r5, r3
 800bc2e:	1b5e      	sublt	r6, r3, r5
 800bc30:	9b08      	ldr	r3, [sp, #32]
 800bc32:	1aed      	subs	r5, r5, r3
 800bc34:	4415      	add	r5, r2
 800bc36:	4b66      	ldr	r3, [pc, #408]	@ (800bdd0 <_strtod_l+0x858>)
 800bc38:	3d01      	subs	r5, #1
 800bc3a:	429d      	cmp	r5, r3
 800bc3c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc40:	da50      	bge.n	800bce4 <_strtod_l+0x76c>
 800bc42:	1b5b      	subs	r3, r3, r5
 800bc44:	2b1f      	cmp	r3, #31
 800bc46:	eba2 0203 	sub.w	r2, r2, r3
 800bc4a:	f04f 0101 	mov.w	r1, #1
 800bc4e:	dc3d      	bgt.n	800bccc <_strtod_l+0x754>
 800bc50:	fa01 f303 	lsl.w	r3, r1, r3
 800bc54:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc56:	2300      	movs	r3, #0
 800bc58:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc5a:	18bd      	adds	r5, r7, r2
 800bc5c:	9b08      	ldr	r3, [sp, #32]
 800bc5e:	42af      	cmp	r7, r5
 800bc60:	4416      	add	r6, r2
 800bc62:	441e      	add	r6, r3
 800bc64:	463b      	mov	r3, r7
 800bc66:	bfa8      	it	ge
 800bc68:	462b      	movge	r3, r5
 800bc6a:	42b3      	cmp	r3, r6
 800bc6c:	bfa8      	it	ge
 800bc6e:	4633      	movge	r3, r6
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfc2      	ittt	gt
 800bc74:	1aed      	subgt	r5, r5, r3
 800bc76:	1af6      	subgt	r6, r6, r3
 800bc78:	1aff      	subgt	r7, r7, r3
 800bc7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dd16      	ble.n	800bcae <_strtod_l+0x736>
 800bc80:	4641      	mov	r1, r8
 800bc82:	9805      	ldr	r0, [sp, #20]
 800bc84:	461a      	mov	r2, r3
 800bc86:	f002 ff59 	bl	800eb3c <__pow5mult>
 800bc8a:	4680      	mov	r8, r0
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d0ba      	beq.n	800bc06 <_strtod_l+0x68e>
 800bc90:	4601      	mov	r1, r0
 800bc92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc94:	9805      	ldr	r0, [sp, #20]
 800bc96:	f002 fea7 	bl	800e9e8 <__multiply>
 800bc9a:	900e      	str	r0, [sp, #56]	@ 0x38
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	f43f ae8a 	beq.w	800b9b6 <_strtod_l+0x43e>
 800bca2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bca4:	9805      	ldr	r0, [sp, #20]
 800bca6:	f002 fd8b 	bl	800e7c0 <_Bfree>
 800bcaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcac:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcae:	2d00      	cmp	r5, #0
 800bcb0:	dc1d      	bgt.n	800bcee <_strtod_l+0x776>
 800bcb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	dd23      	ble.n	800bd00 <_strtod_l+0x788>
 800bcb8:	4649      	mov	r1, r9
 800bcba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bcbc:	9805      	ldr	r0, [sp, #20]
 800bcbe:	f002 ff3d 	bl	800eb3c <__pow5mult>
 800bcc2:	4681      	mov	r9, r0
 800bcc4:	b9e0      	cbnz	r0, 800bd00 <_strtod_l+0x788>
 800bcc6:	f04f 0900 	mov.w	r9, #0
 800bcca:	e674      	b.n	800b9b6 <_strtod_l+0x43e>
 800bccc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bcd0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bcd4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bcd8:	35e2      	adds	r5, #226	@ 0xe2
 800bcda:	fa01 f305 	lsl.w	r3, r1, r5
 800bcde:	9310      	str	r3, [sp, #64]	@ 0x40
 800bce0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bce2:	e7ba      	b.n	800bc5a <_strtod_l+0x6e2>
 800bce4:	2300      	movs	r3, #0
 800bce6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bce8:	2301      	movs	r3, #1
 800bcea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcec:	e7b5      	b.n	800bc5a <_strtod_l+0x6e2>
 800bcee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcf0:	9805      	ldr	r0, [sp, #20]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	f002 ff7c 	bl	800ebf0 <__lshift>
 800bcf8:	901a      	str	r0, [sp, #104]	@ 0x68
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d1d9      	bne.n	800bcb2 <_strtod_l+0x73a>
 800bcfe:	e65a      	b.n	800b9b6 <_strtod_l+0x43e>
 800bd00:	2e00      	cmp	r6, #0
 800bd02:	dd07      	ble.n	800bd14 <_strtod_l+0x79c>
 800bd04:	4649      	mov	r1, r9
 800bd06:	9805      	ldr	r0, [sp, #20]
 800bd08:	4632      	mov	r2, r6
 800bd0a:	f002 ff71 	bl	800ebf0 <__lshift>
 800bd0e:	4681      	mov	r9, r0
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d0d8      	beq.n	800bcc6 <_strtod_l+0x74e>
 800bd14:	2f00      	cmp	r7, #0
 800bd16:	dd08      	ble.n	800bd2a <_strtod_l+0x7b2>
 800bd18:	4641      	mov	r1, r8
 800bd1a:	9805      	ldr	r0, [sp, #20]
 800bd1c:	463a      	mov	r2, r7
 800bd1e:	f002 ff67 	bl	800ebf0 <__lshift>
 800bd22:	4680      	mov	r8, r0
 800bd24:	2800      	cmp	r0, #0
 800bd26:	f43f ae46 	beq.w	800b9b6 <_strtod_l+0x43e>
 800bd2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd2c:	9805      	ldr	r0, [sp, #20]
 800bd2e:	464a      	mov	r2, r9
 800bd30:	f002 ffe6 	bl	800ed00 <__mdiff>
 800bd34:	4604      	mov	r4, r0
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f43f ae3d 	beq.w	800b9b6 <_strtod_l+0x43e>
 800bd3c:	68c3      	ldr	r3, [r0, #12]
 800bd3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd40:	2300      	movs	r3, #0
 800bd42:	60c3      	str	r3, [r0, #12]
 800bd44:	4641      	mov	r1, r8
 800bd46:	f002 ffbf 	bl	800ecc8 <__mcmp>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	da46      	bge.n	800bddc <_strtod_l+0x864>
 800bd4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd50:	ea53 030a 	orrs.w	r3, r3, sl
 800bd54:	d16c      	bne.n	800be30 <_strtod_l+0x8b8>
 800bd56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d168      	bne.n	800be30 <_strtod_l+0x8b8>
 800bd5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd62:	0d1b      	lsrs	r3, r3, #20
 800bd64:	051b      	lsls	r3, r3, #20
 800bd66:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd6a:	d961      	bls.n	800be30 <_strtod_l+0x8b8>
 800bd6c:	6963      	ldr	r3, [r4, #20]
 800bd6e:	b913      	cbnz	r3, 800bd76 <_strtod_l+0x7fe>
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	dd5c      	ble.n	800be30 <_strtod_l+0x8b8>
 800bd76:	4621      	mov	r1, r4
 800bd78:	2201      	movs	r2, #1
 800bd7a:	9805      	ldr	r0, [sp, #20]
 800bd7c:	f002 ff38 	bl	800ebf0 <__lshift>
 800bd80:	4641      	mov	r1, r8
 800bd82:	4604      	mov	r4, r0
 800bd84:	f002 ffa0 	bl	800ecc8 <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	dd51      	ble.n	800be30 <_strtod_l+0x8b8>
 800bd8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd90:	9a08      	ldr	r2, [sp, #32]
 800bd92:	0d1b      	lsrs	r3, r3, #20
 800bd94:	051b      	lsls	r3, r3, #20
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	d06b      	beq.n	800be72 <_strtod_l+0x8fa>
 800bd9a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd9e:	d868      	bhi.n	800be72 <_strtod_l+0x8fa>
 800bda0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bda4:	f67f ae9d 	bls.w	800bae2 <_strtod_l+0x56a>
 800bda8:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd4 <_strtod_l+0x85c>)
 800bdaa:	4650      	mov	r0, sl
 800bdac:	4659      	mov	r1, fp
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f7f4 fc2a 	bl	8000608 <__aeabi_dmul>
 800bdb4:	4b08      	ldr	r3, [pc, #32]	@ (800bdd8 <_strtod_l+0x860>)
 800bdb6:	400b      	ands	r3, r1
 800bdb8:	4682      	mov	sl, r0
 800bdba:	468b      	mov	fp, r1
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f47f ae05 	bne.w	800b9cc <_strtod_l+0x454>
 800bdc2:	9a05      	ldr	r2, [sp, #20]
 800bdc4:	2322      	movs	r3, #34	@ 0x22
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	e600      	b.n	800b9cc <_strtod_l+0x454>
 800bdca:	bf00      	nop
 800bdcc:	0800fd00 	.word	0x0800fd00
 800bdd0:	fffffc02 	.word	0xfffffc02
 800bdd4:	39500000 	.word	0x39500000
 800bdd8:	7ff00000 	.word	0x7ff00000
 800bddc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bde0:	d165      	bne.n	800beae <_strtod_l+0x936>
 800bde2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bde4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bde8:	b35a      	cbz	r2, 800be42 <_strtod_l+0x8ca>
 800bdea:	4a9f      	ldr	r2, [pc, #636]	@ (800c068 <_strtod_l+0xaf0>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d12b      	bne.n	800be48 <_strtod_l+0x8d0>
 800bdf0:	9b08      	ldr	r3, [sp, #32]
 800bdf2:	4651      	mov	r1, sl
 800bdf4:	b303      	cbz	r3, 800be38 <_strtod_l+0x8c0>
 800bdf6:	4b9d      	ldr	r3, [pc, #628]	@ (800c06c <_strtod_l+0xaf4>)
 800bdf8:	465a      	mov	r2, fp
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be04:	d81b      	bhi.n	800be3e <_strtod_l+0x8c6>
 800be06:	0d1b      	lsrs	r3, r3, #20
 800be08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be0c:	fa02 f303 	lsl.w	r3, r2, r3
 800be10:	4299      	cmp	r1, r3
 800be12:	d119      	bne.n	800be48 <_strtod_l+0x8d0>
 800be14:	4b96      	ldr	r3, [pc, #600]	@ (800c070 <_strtod_l+0xaf8>)
 800be16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be18:	429a      	cmp	r2, r3
 800be1a:	d102      	bne.n	800be22 <_strtod_l+0x8aa>
 800be1c:	3101      	adds	r1, #1
 800be1e:	f43f adca 	beq.w	800b9b6 <_strtod_l+0x43e>
 800be22:	4b92      	ldr	r3, [pc, #584]	@ (800c06c <_strtod_l+0xaf4>)
 800be24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be26:	401a      	ands	r2, r3
 800be28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800be2c:	f04f 0a00 	mov.w	sl, #0
 800be30:	9b08      	ldr	r3, [sp, #32]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1b8      	bne.n	800bda8 <_strtod_l+0x830>
 800be36:	e5c9      	b.n	800b9cc <_strtod_l+0x454>
 800be38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be3c:	e7e8      	b.n	800be10 <_strtod_l+0x898>
 800be3e:	4613      	mov	r3, r2
 800be40:	e7e6      	b.n	800be10 <_strtod_l+0x898>
 800be42:	ea53 030a 	orrs.w	r3, r3, sl
 800be46:	d0a1      	beq.n	800bd8c <_strtod_l+0x814>
 800be48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be4a:	b1db      	cbz	r3, 800be84 <_strtod_l+0x90c>
 800be4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be4e:	4213      	tst	r3, r2
 800be50:	d0ee      	beq.n	800be30 <_strtod_l+0x8b8>
 800be52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be54:	9a08      	ldr	r2, [sp, #32]
 800be56:	4650      	mov	r0, sl
 800be58:	4659      	mov	r1, fp
 800be5a:	b1bb      	cbz	r3, 800be8c <_strtod_l+0x914>
 800be5c:	f7ff fb6e 	bl	800b53c <sulp>
 800be60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be64:	ec53 2b10 	vmov	r2, r3, d0
 800be68:	f7f4 fa18 	bl	800029c <__adddf3>
 800be6c:	4682      	mov	sl, r0
 800be6e:	468b      	mov	fp, r1
 800be70:	e7de      	b.n	800be30 <_strtod_l+0x8b8>
 800be72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be7e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800be82:	e7d5      	b.n	800be30 <_strtod_l+0x8b8>
 800be84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be86:	ea13 0f0a 	tst.w	r3, sl
 800be8a:	e7e1      	b.n	800be50 <_strtod_l+0x8d8>
 800be8c:	f7ff fb56 	bl	800b53c <sulp>
 800be90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be94:	ec53 2b10 	vmov	r2, r3, d0
 800be98:	f7f4 f9fe 	bl	8000298 <__aeabi_dsub>
 800be9c:	2200      	movs	r2, #0
 800be9e:	2300      	movs	r3, #0
 800bea0:	4682      	mov	sl, r0
 800bea2:	468b      	mov	fp, r1
 800bea4:	f7f4 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d0c1      	beq.n	800be30 <_strtod_l+0x8b8>
 800beac:	e619      	b.n	800bae2 <_strtod_l+0x56a>
 800beae:	4641      	mov	r1, r8
 800beb0:	4620      	mov	r0, r4
 800beb2:	f003 f881 	bl	800efb8 <__ratio>
 800beb6:	ec57 6b10 	vmov	r6, r7, d0
 800beba:	2200      	movs	r2, #0
 800bebc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bec0:	4630      	mov	r0, r6
 800bec2:	4639      	mov	r1, r7
 800bec4:	f7f4 fe1c 	bl	8000b00 <__aeabi_dcmple>
 800bec8:	2800      	cmp	r0, #0
 800beca:	d06f      	beq.n	800bfac <_strtod_l+0xa34>
 800becc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d17a      	bne.n	800bfc8 <_strtod_l+0xa50>
 800bed2:	f1ba 0f00 	cmp.w	sl, #0
 800bed6:	d158      	bne.n	800bf8a <_strtod_l+0xa12>
 800bed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d15a      	bne.n	800bf98 <_strtod_l+0xa20>
 800bee2:	4b64      	ldr	r3, [pc, #400]	@ (800c074 <_strtod_l+0xafc>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	4630      	mov	r0, r6
 800bee8:	4639      	mov	r1, r7
 800beea:	f7f4 fdff 	bl	8000aec <__aeabi_dcmplt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d159      	bne.n	800bfa6 <_strtod_l+0xa2e>
 800bef2:	4630      	mov	r0, r6
 800bef4:	4639      	mov	r1, r7
 800bef6:	4b60      	ldr	r3, [pc, #384]	@ (800c078 <_strtod_l+0xb00>)
 800bef8:	2200      	movs	r2, #0
 800befa:	f7f4 fb85 	bl	8000608 <__aeabi_dmul>
 800befe:	4606      	mov	r6, r0
 800bf00:	460f      	mov	r7, r1
 800bf02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bf06:	9606      	str	r6, [sp, #24]
 800bf08:	9307      	str	r3, [sp, #28]
 800bf0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf0e:	4d57      	ldr	r5, [pc, #348]	@ (800c06c <_strtod_l+0xaf4>)
 800bf10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf16:	401d      	ands	r5, r3
 800bf18:	4b58      	ldr	r3, [pc, #352]	@ (800c07c <_strtod_l+0xb04>)
 800bf1a:	429d      	cmp	r5, r3
 800bf1c:	f040 80b2 	bne.w	800c084 <_strtod_l+0xb0c>
 800bf20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bf26:	ec4b ab10 	vmov	d0, sl, fp
 800bf2a:	f002 ff7d 	bl	800ee28 <__ulp>
 800bf2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf32:	ec51 0b10 	vmov	r0, r1, d0
 800bf36:	f7f4 fb67 	bl	8000608 <__aeabi_dmul>
 800bf3a:	4652      	mov	r2, sl
 800bf3c:	465b      	mov	r3, fp
 800bf3e:	f7f4 f9ad 	bl	800029c <__adddf3>
 800bf42:	460b      	mov	r3, r1
 800bf44:	4949      	ldr	r1, [pc, #292]	@ (800c06c <_strtod_l+0xaf4>)
 800bf46:	4a4e      	ldr	r2, [pc, #312]	@ (800c080 <_strtod_l+0xb08>)
 800bf48:	4019      	ands	r1, r3
 800bf4a:	4291      	cmp	r1, r2
 800bf4c:	4682      	mov	sl, r0
 800bf4e:	d942      	bls.n	800bfd6 <_strtod_l+0xa5e>
 800bf50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf52:	4b47      	ldr	r3, [pc, #284]	@ (800c070 <_strtod_l+0xaf8>)
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d103      	bne.n	800bf60 <_strtod_l+0x9e8>
 800bf58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	f43f ad2b 	beq.w	800b9b6 <_strtod_l+0x43e>
 800bf60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c070 <_strtod_l+0xaf8>
 800bf64:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bf68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf6a:	9805      	ldr	r0, [sp, #20]
 800bf6c:	f002 fc28 	bl	800e7c0 <_Bfree>
 800bf70:	9805      	ldr	r0, [sp, #20]
 800bf72:	4649      	mov	r1, r9
 800bf74:	f002 fc24 	bl	800e7c0 <_Bfree>
 800bf78:	9805      	ldr	r0, [sp, #20]
 800bf7a:	4641      	mov	r1, r8
 800bf7c:	f002 fc20 	bl	800e7c0 <_Bfree>
 800bf80:	9805      	ldr	r0, [sp, #20]
 800bf82:	4621      	mov	r1, r4
 800bf84:	f002 fc1c 	bl	800e7c0 <_Bfree>
 800bf88:	e618      	b.n	800bbbc <_strtod_l+0x644>
 800bf8a:	f1ba 0f01 	cmp.w	sl, #1
 800bf8e:	d103      	bne.n	800bf98 <_strtod_l+0xa20>
 800bf90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f43f ada5 	beq.w	800bae2 <_strtod_l+0x56a>
 800bf98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c048 <_strtod_l+0xad0>
 800bf9c:	4f35      	ldr	r7, [pc, #212]	@ (800c074 <_strtod_l+0xafc>)
 800bf9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfa2:	2600      	movs	r6, #0
 800bfa4:	e7b1      	b.n	800bf0a <_strtod_l+0x992>
 800bfa6:	4f34      	ldr	r7, [pc, #208]	@ (800c078 <_strtod_l+0xb00>)
 800bfa8:	2600      	movs	r6, #0
 800bfaa:	e7aa      	b.n	800bf02 <_strtod_l+0x98a>
 800bfac:	4b32      	ldr	r3, [pc, #200]	@ (800c078 <_strtod_l+0xb00>)
 800bfae:	4630      	mov	r0, r6
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f7f4 fb28 	bl	8000608 <__aeabi_dmul>
 800bfb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfba:	4606      	mov	r6, r0
 800bfbc:	460f      	mov	r7, r1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d09f      	beq.n	800bf02 <_strtod_l+0x98a>
 800bfc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bfc6:	e7a0      	b.n	800bf0a <_strtod_l+0x992>
 800bfc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c050 <_strtod_l+0xad8>
 800bfcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfd0:	ec57 6b17 	vmov	r6, r7, d7
 800bfd4:	e799      	b.n	800bf0a <_strtod_l+0x992>
 800bfd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bfda:	9b08      	ldr	r3, [sp, #32]
 800bfdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1c1      	bne.n	800bf68 <_strtod_l+0x9f0>
 800bfe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bfe8:	0d1b      	lsrs	r3, r3, #20
 800bfea:	051b      	lsls	r3, r3, #20
 800bfec:	429d      	cmp	r5, r3
 800bfee:	d1bb      	bne.n	800bf68 <_strtod_l+0x9f0>
 800bff0:	4630      	mov	r0, r6
 800bff2:	4639      	mov	r1, r7
 800bff4:	f7f4 fe68 	bl	8000cc8 <__aeabi_d2lz>
 800bff8:	f7f4 fad8 	bl	80005ac <__aeabi_l2d>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	4630      	mov	r0, r6
 800c002:	4639      	mov	r1, r7
 800c004:	f7f4 f948 	bl	8000298 <__aeabi_dsub>
 800c008:	460b      	mov	r3, r1
 800c00a:	4602      	mov	r2, r0
 800c00c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c010:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c016:	ea46 060a 	orr.w	r6, r6, sl
 800c01a:	431e      	orrs	r6, r3
 800c01c:	d06f      	beq.n	800c0fe <_strtod_l+0xb86>
 800c01e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c058 <_strtod_l+0xae0>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 fd62 	bl	8000aec <__aeabi_dcmplt>
 800c028:	2800      	cmp	r0, #0
 800c02a:	f47f accf 	bne.w	800b9cc <_strtod_l+0x454>
 800c02e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c060 <_strtod_l+0xae8>)
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c038:	f7f4 fd76 	bl	8000b28 <__aeabi_dcmpgt>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d093      	beq.n	800bf68 <_strtod_l+0x9f0>
 800c040:	e4c4      	b.n	800b9cc <_strtod_l+0x454>
 800c042:	bf00      	nop
 800c044:	f3af 8000 	nop.w
 800c048:	00000000 	.word	0x00000000
 800c04c:	bff00000 	.word	0xbff00000
 800c050:	00000000 	.word	0x00000000
 800c054:	3ff00000 	.word	0x3ff00000
 800c058:	94a03595 	.word	0x94a03595
 800c05c:	3fdfffff 	.word	0x3fdfffff
 800c060:	35afe535 	.word	0x35afe535
 800c064:	3fe00000 	.word	0x3fe00000
 800c068:	000fffff 	.word	0x000fffff
 800c06c:	7ff00000 	.word	0x7ff00000
 800c070:	7fefffff 	.word	0x7fefffff
 800c074:	3ff00000 	.word	0x3ff00000
 800c078:	3fe00000 	.word	0x3fe00000
 800c07c:	7fe00000 	.word	0x7fe00000
 800c080:	7c9fffff 	.word	0x7c9fffff
 800c084:	9b08      	ldr	r3, [sp, #32]
 800c086:	b323      	cbz	r3, 800c0d2 <_strtod_l+0xb5a>
 800c088:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c08c:	d821      	bhi.n	800c0d2 <_strtod_l+0xb5a>
 800c08e:	a328      	add	r3, pc, #160	@ (adr r3, 800c130 <_strtod_l+0xbb8>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	4630      	mov	r0, r6
 800c096:	4639      	mov	r1, r7
 800c098:	f7f4 fd32 	bl	8000b00 <__aeabi_dcmple>
 800c09c:	b1a0      	cbz	r0, 800c0c8 <_strtod_l+0xb50>
 800c09e:	4639      	mov	r1, r7
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7f4 fd89 	bl	8000bb8 <__aeabi_d2uiz>
 800c0a6:	2801      	cmp	r0, #1
 800c0a8:	bf38      	it	cc
 800c0aa:	2001      	movcc	r0, #1
 800c0ac:	f7f4 fa32 	bl	8000514 <__aeabi_ui2d>
 800c0b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	b9fb      	cbnz	r3, 800c0f8 <_strtod_l+0xb80>
 800c0b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800c0be:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c0c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c0c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c0ce:	1b5b      	subs	r3, r3, r5
 800c0d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c0d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c0da:	f002 fea5 	bl	800ee28 <__ulp>
 800c0de:	4650      	mov	r0, sl
 800c0e0:	ec53 2b10 	vmov	r2, r3, d0
 800c0e4:	4659      	mov	r1, fp
 800c0e6:	f7f4 fa8f 	bl	8000608 <__aeabi_dmul>
 800c0ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c0ee:	f7f4 f8d5 	bl	800029c <__adddf3>
 800c0f2:	4682      	mov	sl, r0
 800c0f4:	468b      	mov	fp, r1
 800c0f6:	e770      	b.n	800bfda <_strtod_l+0xa62>
 800c0f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c0fc:	e7e0      	b.n	800c0c0 <_strtod_l+0xb48>
 800c0fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800c138 <_strtod_l+0xbc0>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 fcf2 	bl	8000aec <__aeabi_dcmplt>
 800c108:	e798      	b.n	800c03c <_strtod_l+0xac4>
 800c10a:	2300      	movs	r3, #0
 800c10c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c10e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c112:	6013      	str	r3, [r2, #0]
 800c114:	f7ff ba6d 	b.w	800b5f2 <_strtod_l+0x7a>
 800c118:	2a65      	cmp	r2, #101	@ 0x65
 800c11a:	f43f ab66 	beq.w	800b7ea <_strtod_l+0x272>
 800c11e:	2a45      	cmp	r2, #69	@ 0x45
 800c120:	f43f ab63 	beq.w	800b7ea <_strtod_l+0x272>
 800c124:	2301      	movs	r3, #1
 800c126:	f7ff bb9e 	b.w	800b866 <_strtod_l+0x2ee>
 800c12a:	bf00      	nop
 800c12c:	f3af 8000 	nop.w
 800c130:	ffc00000 	.word	0xffc00000
 800c134:	41dfffff 	.word	0x41dfffff
 800c138:	94a03595 	.word	0x94a03595
 800c13c:	3fcfffff 	.word	0x3fcfffff

0800c140 <_strtod_r>:
 800c140:	4b01      	ldr	r3, [pc, #4]	@ (800c148 <_strtod_r+0x8>)
 800c142:	f7ff ba19 	b.w	800b578 <_strtod_l>
 800c146:	bf00      	nop
 800c148:	20000108 	.word	0x20000108

0800c14c <strtod>:
 800c14c:	460a      	mov	r2, r1
 800c14e:	4601      	mov	r1, r0
 800c150:	4802      	ldr	r0, [pc, #8]	@ (800c15c <strtod+0x10>)
 800c152:	4b03      	ldr	r3, [pc, #12]	@ (800c160 <strtod+0x14>)
 800c154:	6800      	ldr	r0, [r0, #0]
 800c156:	f7ff ba0f 	b.w	800b578 <_strtod_l>
 800c15a:	bf00      	nop
 800c15c:	20000274 	.word	0x20000274
 800c160:	20000108 	.word	0x20000108

0800c164 <__cvt>:
 800c164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c168:	ec57 6b10 	vmov	r6, r7, d0
 800c16c:	2f00      	cmp	r7, #0
 800c16e:	460c      	mov	r4, r1
 800c170:	4619      	mov	r1, r3
 800c172:	463b      	mov	r3, r7
 800c174:	bfbb      	ittet	lt
 800c176:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c17a:	461f      	movlt	r7, r3
 800c17c:	2300      	movge	r3, #0
 800c17e:	232d      	movlt	r3, #45	@ 0x2d
 800c180:	700b      	strb	r3, [r1, #0]
 800c182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c184:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c188:	4691      	mov	r9, r2
 800c18a:	f023 0820 	bic.w	r8, r3, #32
 800c18e:	bfbc      	itt	lt
 800c190:	4632      	movlt	r2, r6
 800c192:	4616      	movlt	r6, r2
 800c194:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c198:	d005      	beq.n	800c1a6 <__cvt+0x42>
 800c19a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c19e:	d100      	bne.n	800c1a2 <__cvt+0x3e>
 800c1a0:	3401      	adds	r4, #1
 800c1a2:	2102      	movs	r1, #2
 800c1a4:	e000      	b.n	800c1a8 <__cvt+0x44>
 800c1a6:	2103      	movs	r1, #3
 800c1a8:	ab03      	add	r3, sp, #12
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	ab02      	add	r3, sp, #8
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	ec47 6b10 	vmov	d0, r6, r7
 800c1b4:	4653      	mov	r3, sl
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	f001 f8b2 	bl	800d320 <_dtoa_r>
 800c1bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	d119      	bne.n	800c1f8 <__cvt+0x94>
 800c1c4:	f019 0f01 	tst.w	r9, #1
 800c1c8:	d00e      	beq.n	800c1e8 <__cvt+0x84>
 800c1ca:	eb00 0904 	add.w	r9, r0, r4
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	f7f4 fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1da:	b108      	cbz	r0, 800c1e0 <__cvt+0x7c>
 800c1dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1e0:	2230      	movs	r2, #48	@ 0x30
 800c1e2:	9b03      	ldr	r3, [sp, #12]
 800c1e4:	454b      	cmp	r3, r9
 800c1e6:	d31e      	bcc.n	800c226 <__cvt+0xc2>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1ec:	1b5b      	subs	r3, r3, r5
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	b004      	add	sp, #16
 800c1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c1fc:	eb00 0904 	add.w	r9, r0, r4
 800c200:	d1e5      	bne.n	800c1ce <__cvt+0x6a>
 800c202:	7803      	ldrb	r3, [r0, #0]
 800c204:	2b30      	cmp	r3, #48	@ 0x30
 800c206:	d10a      	bne.n	800c21e <__cvt+0xba>
 800c208:	2200      	movs	r2, #0
 800c20a:	2300      	movs	r3, #0
 800c20c:	4630      	mov	r0, r6
 800c20e:	4639      	mov	r1, r7
 800c210:	f7f4 fc62 	bl	8000ad8 <__aeabi_dcmpeq>
 800c214:	b918      	cbnz	r0, 800c21e <__cvt+0xba>
 800c216:	f1c4 0401 	rsb	r4, r4, #1
 800c21a:	f8ca 4000 	str.w	r4, [sl]
 800c21e:	f8da 3000 	ldr.w	r3, [sl]
 800c222:	4499      	add	r9, r3
 800c224:	e7d3      	b.n	800c1ce <__cvt+0x6a>
 800c226:	1c59      	adds	r1, r3, #1
 800c228:	9103      	str	r1, [sp, #12]
 800c22a:	701a      	strb	r2, [r3, #0]
 800c22c:	e7d9      	b.n	800c1e2 <__cvt+0x7e>

0800c22e <__exponent>:
 800c22e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c230:	2900      	cmp	r1, #0
 800c232:	bfba      	itte	lt
 800c234:	4249      	neglt	r1, r1
 800c236:	232d      	movlt	r3, #45	@ 0x2d
 800c238:	232b      	movge	r3, #43	@ 0x2b
 800c23a:	2909      	cmp	r1, #9
 800c23c:	7002      	strb	r2, [r0, #0]
 800c23e:	7043      	strb	r3, [r0, #1]
 800c240:	dd29      	ble.n	800c296 <__exponent+0x68>
 800c242:	f10d 0307 	add.w	r3, sp, #7
 800c246:	461d      	mov	r5, r3
 800c248:	270a      	movs	r7, #10
 800c24a:	461a      	mov	r2, r3
 800c24c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c250:	fb07 1416 	mls	r4, r7, r6, r1
 800c254:	3430      	adds	r4, #48	@ 0x30
 800c256:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c25a:	460c      	mov	r4, r1
 800c25c:	2c63      	cmp	r4, #99	@ 0x63
 800c25e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c262:	4631      	mov	r1, r6
 800c264:	dcf1      	bgt.n	800c24a <__exponent+0x1c>
 800c266:	3130      	adds	r1, #48	@ 0x30
 800c268:	1e94      	subs	r4, r2, #2
 800c26a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c26e:	1c41      	adds	r1, r0, #1
 800c270:	4623      	mov	r3, r4
 800c272:	42ab      	cmp	r3, r5
 800c274:	d30a      	bcc.n	800c28c <__exponent+0x5e>
 800c276:	f10d 0309 	add.w	r3, sp, #9
 800c27a:	1a9b      	subs	r3, r3, r2
 800c27c:	42ac      	cmp	r4, r5
 800c27e:	bf88      	it	hi
 800c280:	2300      	movhi	r3, #0
 800c282:	3302      	adds	r3, #2
 800c284:	4403      	add	r3, r0
 800c286:	1a18      	subs	r0, r3, r0
 800c288:	b003      	add	sp, #12
 800c28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c290:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c294:	e7ed      	b.n	800c272 <__exponent+0x44>
 800c296:	2330      	movs	r3, #48	@ 0x30
 800c298:	3130      	adds	r1, #48	@ 0x30
 800c29a:	7083      	strb	r3, [r0, #2]
 800c29c:	70c1      	strb	r1, [r0, #3]
 800c29e:	1d03      	adds	r3, r0, #4
 800c2a0:	e7f1      	b.n	800c286 <__exponent+0x58>
	...

0800c2a4 <_printf_float>:
 800c2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a8:	b08d      	sub	sp, #52	@ 0x34
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c2b0:	4616      	mov	r6, r2
 800c2b2:	461f      	mov	r7, r3
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	f000 ff13 	bl	800d0e0 <_localeconv_r>
 800c2ba:	6803      	ldr	r3, [r0, #0]
 800c2bc:	9304      	str	r3, [sp, #16]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7f3 ffde 	bl	8000280 <strlen>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2cc:	9005      	str	r0, [sp, #20]
 800c2ce:	3307      	adds	r3, #7
 800c2d0:	f023 0307 	bic.w	r3, r3, #7
 800c2d4:	f103 0208 	add.w	r2, r3, #8
 800c2d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c2dc:	f8d4 b000 	ldr.w	fp, [r4]
 800c2e0:	f8c8 2000 	str.w	r2, [r8]
 800c2e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c2ec:	9307      	str	r3, [sp, #28]
 800c2ee:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c2f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2fa:	4b9c      	ldr	r3, [pc, #624]	@ (800c56c <_printf_float+0x2c8>)
 800c2fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c300:	f7f4 fc1c 	bl	8000b3c <__aeabi_dcmpun>
 800c304:	bb70      	cbnz	r0, 800c364 <_printf_float+0xc0>
 800c306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c30a:	4b98      	ldr	r3, [pc, #608]	@ (800c56c <_printf_float+0x2c8>)
 800c30c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c310:	f7f4 fbf6 	bl	8000b00 <__aeabi_dcmple>
 800c314:	bb30      	cbnz	r0, 800c364 <_printf_float+0xc0>
 800c316:	2200      	movs	r2, #0
 800c318:	2300      	movs	r3, #0
 800c31a:	4640      	mov	r0, r8
 800c31c:	4649      	mov	r1, r9
 800c31e:	f7f4 fbe5 	bl	8000aec <__aeabi_dcmplt>
 800c322:	b110      	cbz	r0, 800c32a <_printf_float+0x86>
 800c324:	232d      	movs	r3, #45	@ 0x2d
 800c326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c32a:	4a91      	ldr	r2, [pc, #580]	@ (800c570 <_printf_float+0x2cc>)
 800c32c:	4b91      	ldr	r3, [pc, #580]	@ (800c574 <_printf_float+0x2d0>)
 800c32e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c332:	bf94      	ite	ls
 800c334:	4690      	movls	r8, r2
 800c336:	4698      	movhi	r8, r3
 800c338:	2303      	movs	r3, #3
 800c33a:	6123      	str	r3, [r4, #16]
 800c33c:	f02b 0304 	bic.w	r3, fp, #4
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	f04f 0900 	mov.w	r9, #0
 800c346:	9700      	str	r7, [sp, #0]
 800c348:	4633      	mov	r3, r6
 800c34a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c34c:	4621      	mov	r1, r4
 800c34e:	4628      	mov	r0, r5
 800c350:	f000 f9d2 	bl	800c6f8 <_printf_common>
 800c354:	3001      	adds	r0, #1
 800c356:	f040 808d 	bne.w	800c474 <_printf_float+0x1d0>
 800c35a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c35e:	b00d      	add	sp, #52	@ 0x34
 800c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c364:	4642      	mov	r2, r8
 800c366:	464b      	mov	r3, r9
 800c368:	4640      	mov	r0, r8
 800c36a:	4649      	mov	r1, r9
 800c36c:	f7f4 fbe6 	bl	8000b3c <__aeabi_dcmpun>
 800c370:	b140      	cbz	r0, 800c384 <_printf_float+0xe0>
 800c372:	464b      	mov	r3, r9
 800c374:	2b00      	cmp	r3, #0
 800c376:	bfbc      	itt	lt
 800c378:	232d      	movlt	r3, #45	@ 0x2d
 800c37a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c37e:	4a7e      	ldr	r2, [pc, #504]	@ (800c578 <_printf_float+0x2d4>)
 800c380:	4b7e      	ldr	r3, [pc, #504]	@ (800c57c <_printf_float+0x2d8>)
 800c382:	e7d4      	b.n	800c32e <_printf_float+0x8a>
 800c384:	6863      	ldr	r3, [r4, #4]
 800c386:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c38a:	9206      	str	r2, [sp, #24]
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	d13b      	bne.n	800c408 <_printf_float+0x164>
 800c390:	2306      	movs	r3, #6
 800c392:	6063      	str	r3, [r4, #4]
 800c394:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c398:	2300      	movs	r3, #0
 800c39a:	6022      	str	r2, [r4, #0]
 800c39c:	9303      	str	r3, [sp, #12]
 800c39e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c3a4:	ab09      	add	r3, sp, #36	@ 0x24
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	6861      	ldr	r1, [r4, #4]
 800c3aa:	ec49 8b10 	vmov	d0, r8, r9
 800c3ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	f7ff fed6 	bl	800c164 <__cvt>
 800c3b8:	9b06      	ldr	r3, [sp, #24]
 800c3ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3bc:	2b47      	cmp	r3, #71	@ 0x47
 800c3be:	4680      	mov	r8, r0
 800c3c0:	d129      	bne.n	800c416 <_printf_float+0x172>
 800c3c2:	1cc8      	adds	r0, r1, #3
 800c3c4:	db02      	blt.n	800c3cc <_printf_float+0x128>
 800c3c6:	6863      	ldr	r3, [r4, #4]
 800c3c8:	4299      	cmp	r1, r3
 800c3ca:	dd41      	ble.n	800c450 <_printf_float+0x1ac>
 800c3cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c3d0:	fa5f fa8a 	uxtb.w	sl, sl
 800c3d4:	3901      	subs	r1, #1
 800c3d6:	4652      	mov	r2, sl
 800c3d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3de:	f7ff ff26 	bl	800c22e <__exponent>
 800c3e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3e4:	1813      	adds	r3, r2, r0
 800c3e6:	2a01      	cmp	r2, #1
 800c3e8:	4681      	mov	r9, r0
 800c3ea:	6123      	str	r3, [r4, #16]
 800c3ec:	dc02      	bgt.n	800c3f4 <_printf_float+0x150>
 800c3ee:	6822      	ldr	r2, [r4, #0]
 800c3f0:	07d2      	lsls	r2, r2, #31
 800c3f2:	d501      	bpl.n	800c3f8 <_printf_float+0x154>
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	6123      	str	r3, [r4, #16]
 800c3f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0a2      	beq.n	800c346 <_printf_float+0xa2>
 800c400:	232d      	movs	r3, #45	@ 0x2d
 800c402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c406:	e79e      	b.n	800c346 <_printf_float+0xa2>
 800c408:	9a06      	ldr	r2, [sp, #24]
 800c40a:	2a47      	cmp	r2, #71	@ 0x47
 800c40c:	d1c2      	bne.n	800c394 <_printf_float+0xf0>
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1c0      	bne.n	800c394 <_printf_float+0xf0>
 800c412:	2301      	movs	r3, #1
 800c414:	e7bd      	b.n	800c392 <_printf_float+0xee>
 800c416:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c41a:	d9db      	bls.n	800c3d4 <_printf_float+0x130>
 800c41c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c420:	d118      	bne.n	800c454 <_printf_float+0x1b0>
 800c422:	2900      	cmp	r1, #0
 800c424:	6863      	ldr	r3, [r4, #4]
 800c426:	dd0b      	ble.n	800c440 <_printf_float+0x19c>
 800c428:	6121      	str	r1, [r4, #16]
 800c42a:	b913      	cbnz	r3, 800c432 <_printf_float+0x18e>
 800c42c:	6822      	ldr	r2, [r4, #0]
 800c42e:	07d0      	lsls	r0, r2, #31
 800c430:	d502      	bpl.n	800c438 <_printf_float+0x194>
 800c432:	3301      	adds	r3, #1
 800c434:	440b      	add	r3, r1
 800c436:	6123      	str	r3, [r4, #16]
 800c438:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c43a:	f04f 0900 	mov.w	r9, #0
 800c43e:	e7db      	b.n	800c3f8 <_printf_float+0x154>
 800c440:	b913      	cbnz	r3, 800c448 <_printf_float+0x1a4>
 800c442:	6822      	ldr	r2, [r4, #0]
 800c444:	07d2      	lsls	r2, r2, #31
 800c446:	d501      	bpl.n	800c44c <_printf_float+0x1a8>
 800c448:	3302      	adds	r3, #2
 800c44a:	e7f4      	b.n	800c436 <_printf_float+0x192>
 800c44c:	2301      	movs	r3, #1
 800c44e:	e7f2      	b.n	800c436 <_printf_float+0x192>
 800c450:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c456:	4299      	cmp	r1, r3
 800c458:	db05      	blt.n	800c466 <_printf_float+0x1c2>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	6121      	str	r1, [r4, #16]
 800c45e:	07d8      	lsls	r0, r3, #31
 800c460:	d5ea      	bpl.n	800c438 <_printf_float+0x194>
 800c462:	1c4b      	adds	r3, r1, #1
 800c464:	e7e7      	b.n	800c436 <_printf_float+0x192>
 800c466:	2900      	cmp	r1, #0
 800c468:	bfd4      	ite	le
 800c46a:	f1c1 0202 	rsble	r2, r1, #2
 800c46e:	2201      	movgt	r2, #1
 800c470:	4413      	add	r3, r2
 800c472:	e7e0      	b.n	800c436 <_printf_float+0x192>
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	055a      	lsls	r2, r3, #21
 800c478:	d407      	bmi.n	800c48a <_printf_float+0x1e6>
 800c47a:	6923      	ldr	r3, [r4, #16]
 800c47c:	4642      	mov	r2, r8
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	d12b      	bne.n	800c4e0 <_printf_float+0x23c>
 800c488:	e767      	b.n	800c35a <_printf_float+0xb6>
 800c48a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c48e:	f240 80dd 	bls.w	800c64c <_printf_float+0x3a8>
 800c492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c496:	2200      	movs	r2, #0
 800c498:	2300      	movs	r3, #0
 800c49a:	f7f4 fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d033      	beq.n	800c50a <_printf_float+0x266>
 800c4a2:	4a37      	ldr	r2, [pc, #220]	@ (800c580 <_printf_float+0x2dc>)
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	47b8      	blx	r7
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	f43f af54 	beq.w	800c35a <_printf_float+0xb6>
 800c4b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c4b6:	4543      	cmp	r3, r8
 800c4b8:	db02      	blt.n	800c4c0 <_printf_float+0x21c>
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	07d8      	lsls	r0, r3, #31
 800c4be:	d50f      	bpl.n	800c4e0 <_printf_float+0x23c>
 800c4c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	47b8      	blx	r7
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	f43f af45 	beq.w	800c35a <_printf_float+0xb6>
 800c4d0:	f04f 0900 	mov.w	r9, #0
 800c4d4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c4d8:	f104 0a1a 	add.w	sl, r4, #26
 800c4dc:	45c8      	cmp	r8, r9
 800c4de:	dc09      	bgt.n	800c4f4 <_printf_float+0x250>
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	079b      	lsls	r3, r3, #30
 800c4e4:	f100 8103 	bmi.w	800c6ee <_printf_float+0x44a>
 800c4e8:	68e0      	ldr	r0, [r4, #12]
 800c4ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4ec:	4298      	cmp	r0, r3
 800c4ee:	bfb8      	it	lt
 800c4f0:	4618      	movlt	r0, r3
 800c4f2:	e734      	b.n	800c35e <_printf_float+0xba>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	4652      	mov	r2, sl
 800c4f8:	4631      	mov	r1, r6
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	47b8      	blx	r7
 800c4fe:	3001      	adds	r0, #1
 800c500:	f43f af2b 	beq.w	800c35a <_printf_float+0xb6>
 800c504:	f109 0901 	add.w	r9, r9, #1
 800c508:	e7e8      	b.n	800c4dc <_printf_float+0x238>
 800c50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dc39      	bgt.n	800c584 <_printf_float+0x2e0>
 800c510:	4a1b      	ldr	r2, [pc, #108]	@ (800c580 <_printf_float+0x2dc>)
 800c512:	2301      	movs	r3, #1
 800c514:	4631      	mov	r1, r6
 800c516:	4628      	mov	r0, r5
 800c518:	47b8      	blx	r7
 800c51a:	3001      	adds	r0, #1
 800c51c:	f43f af1d 	beq.w	800c35a <_printf_float+0xb6>
 800c520:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c524:	ea59 0303 	orrs.w	r3, r9, r3
 800c528:	d102      	bne.n	800c530 <_printf_float+0x28c>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	07d9      	lsls	r1, r3, #31
 800c52e:	d5d7      	bpl.n	800c4e0 <_printf_float+0x23c>
 800c530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c534:	4631      	mov	r1, r6
 800c536:	4628      	mov	r0, r5
 800c538:	47b8      	blx	r7
 800c53a:	3001      	adds	r0, #1
 800c53c:	f43f af0d 	beq.w	800c35a <_printf_float+0xb6>
 800c540:	f04f 0a00 	mov.w	sl, #0
 800c544:	f104 0b1a 	add.w	fp, r4, #26
 800c548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c54a:	425b      	negs	r3, r3
 800c54c:	4553      	cmp	r3, sl
 800c54e:	dc01      	bgt.n	800c554 <_printf_float+0x2b0>
 800c550:	464b      	mov	r3, r9
 800c552:	e793      	b.n	800c47c <_printf_float+0x1d8>
 800c554:	2301      	movs	r3, #1
 800c556:	465a      	mov	r2, fp
 800c558:	4631      	mov	r1, r6
 800c55a:	4628      	mov	r0, r5
 800c55c:	47b8      	blx	r7
 800c55e:	3001      	adds	r0, #1
 800c560:	f43f aefb 	beq.w	800c35a <_printf_float+0xb6>
 800c564:	f10a 0a01 	add.w	sl, sl, #1
 800c568:	e7ee      	b.n	800c548 <_printf_float+0x2a4>
 800c56a:	bf00      	nop
 800c56c:	7fefffff 	.word	0x7fefffff
 800c570:	0800fd28 	.word	0x0800fd28
 800c574:	0800fd2c 	.word	0x0800fd2c
 800c578:	0800fd30 	.word	0x0800fd30
 800c57c:	0800fd34 	.word	0x0800fd34
 800c580:	0800fd38 	.word	0x0800fd38
 800c584:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c586:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c58a:	4553      	cmp	r3, sl
 800c58c:	bfa8      	it	ge
 800c58e:	4653      	movge	r3, sl
 800c590:	2b00      	cmp	r3, #0
 800c592:	4699      	mov	r9, r3
 800c594:	dc36      	bgt.n	800c604 <_printf_float+0x360>
 800c596:	f04f 0b00 	mov.w	fp, #0
 800c59a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c59e:	f104 021a 	add.w	r2, r4, #26
 800c5a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5a4:	9306      	str	r3, [sp, #24]
 800c5a6:	eba3 0309 	sub.w	r3, r3, r9
 800c5aa:	455b      	cmp	r3, fp
 800c5ac:	dc31      	bgt.n	800c612 <_printf_float+0x36e>
 800c5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b0:	459a      	cmp	sl, r3
 800c5b2:	dc3a      	bgt.n	800c62a <_printf_float+0x386>
 800c5b4:	6823      	ldr	r3, [r4, #0]
 800c5b6:	07da      	lsls	r2, r3, #31
 800c5b8:	d437      	bmi.n	800c62a <_printf_float+0x386>
 800c5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5bc:	ebaa 0903 	sub.w	r9, sl, r3
 800c5c0:	9b06      	ldr	r3, [sp, #24]
 800c5c2:	ebaa 0303 	sub.w	r3, sl, r3
 800c5c6:	4599      	cmp	r9, r3
 800c5c8:	bfa8      	it	ge
 800c5ca:	4699      	movge	r9, r3
 800c5cc:	f1b9 0f00 	cmp.w	r9, #0
 800c5d0:	dc33      	bgt.n	800c63a <_printf_float+0x396>
 800c5d2:	f04f 0800 	mov.w	r8, #0
 800c5d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5da:	f104 0b1a 	add.w	fp, r4, #26
 800c5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e0:	ebaa 0303 	sub.w	r3, sl, r3
 800c5e4:	eba3 0309 	sub.w	r3, r3, r9
 800c5e8:	4543      	cmp	r3, r8
 800c5ea:	f77f af79 	ble.w	800c4e0 <_printf_float+0x23c>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	465a      	mov	r2, fp
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	47b8      	blx	r7
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	f43f aeae 	beq.w	800c35a <_printf_float+0xb6>
 800c5fe:	f108 0801 	add.w	r8, r8, #1
 800c602:	e7ec      	b.n	800c5de <_printf_float+0x33a>
 800c604:	4642      	mov	r2, r8
 800c606:	4631      	mov	r1, r6
 800c608:	4628      	mov	r0, r5
 800c60a:	47b8      	blx	r7
 800c60c:	3001      	adds	r0, #1
 800c60e:	d1c2      	bne.n	800c596 <_printf_float+0x2f2>
 800c610:	e6a3      	b.n	800c35a <_printf_float+0xb6>
 800c612:	2301      	movs	r3, #1
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	9206      	str	r2, [sp, #24]
 800c61a:	47b8      	blx	r7
 800c61c:	3001      	adds	r0, #1
 800c61e:	f43f ae9c 	beq.w	800c35a <_printf_float+0xb6>
 800c622:	9a06      	ldr	r2, [sp, #24]
 800c624:	f10b 0b01 	add.w	fp, fp, #1
 800c628:	e7bb      	b.n	800c5a2 <_printf_float+0x2fe>
 800c62a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c62e:	4631      	mov	r1, r6
 800c630:	4628      	mov	r0, r5
 800c632:	47b8      	blx	r7
 800c634:	3001      	adds	r0, #1
 800c636:	d1c0      	bne.n	800c5ba <_printf_float+0x316>
 800c638:	e68f      	b.n	800c35a <_printf_float+0xb6>
 800c63a:	9a06      	ldr	r2, [sp, #24]
 800c63c:	464b      	mov	r3, r9
 800c63e:	4442      	add	r2, r8
 800c640:	4631      	mov	r1, r6
 800c642:	4628      	mov	r0, r5
 800c644:	47b8      	blx	r7
 800c646:	3001      	adds	r0, #1
 800c648:	d1c3      	bne.n	800c5d2 <_printf_float+0x32e>
 800c64a:	e686      	b.n	800c35a <_printf_float+0xb6>
 800c64c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c650:	f1ba 0f01 	cmp.w	sl, #1
 800c654:	dc01      	bgt.n	800c65a <_printf_float+0x3b6>
 800c656:	07db      	lsls	r3, r3, #31
 800c658:	d536      	bpl.n	800c6c8 <_printf_float+0x424>
 800c65a:	2301      	movs	r3, #1
 800c65c:	4642      	mov	r2, r8
 800c65e:	4631      	mov	r1, r6
 800c660:	4628      	mov	r0, r5
 800c662:	47b8      	blx	r7
 800c664:	3001      	adds	r0, #1
 800c666:	f43f ae78 	beq.w	800c35a <_printf_float+0xb6>
 800c66a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c66e:	4631      	mov	r1, r6
 800c670:	4628      	mov	r0, r5
 800c672:	47b8      	blx	r7
 800c674:	3001      	adds	r0, #1
 800c676:	f43f ae70 	beq.w	800c35a <_printf_float+0xb6>
 800c67a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c67e:	2200      	movs	r2, #0
 800c680:	2300      	movs	r3, #0
 800c682:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c686:	f7f4 fa27 	bl	8000ad8 <__aeabi_dcmpeq>
 800c68a:	b9c0      	cbnz	r0, 800c6be <_printf_float+0x41a>
 800c68c:	4653      	mov	r3, sl
 800c68e:	f108 0201 	add.w	r2, r8, #1
 800c692:	4631      	mov	r1, r6
 800c694:	4628      	mov	r0, r5
 800c696:	47b8      	blx	r7
 800c698:	3001      	adds	r0, #1
 800c69a:	d10c      	bne.n	800c6b6 <_printf_float+0x412>
 800c69c:	e65d      	b.n	800c35a <_printf_float+0xb6>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	465a      	mov	r2, fp
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	47b8      	blx	r7
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	f43f ae56 	beq.w	800c35a <_printf_float+0xb6>
 800c6ae:	f108 0801 	add.w	r8, r8, #1
 800c6b2:	45d0      	cmp	r8, sl
 800c6b4:	dbf3      	blt.n	800c69e <_printf_float+0x3fa>
 800c6b6:	464b      	mov	r3, r9
 800c6b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c6bc:	e6df      	b.n	800c47e <_printf_float+0x1da>
 800c6be:	f04f 0800 	mov.w	r8, #0
 800c6c2:	f104 0b1a 	add.w	fp, r4, #26
 800c6c6:	e7f4      	b.n	800c6b2 <_printf_float+0x40e>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	4642      	mov	r2, r8
 800c6cc:	e7e1      	b.n	800c692 <_printf_float+0x3ee>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	464a      	mov	r2, r9
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	f43f ae3e 	beq.w	800c35a <_printf_float+0xb6>
 800c6de:	f108 0801 	add.w	r8, r8, #1
 800c6e2:	68e3      	ldr	r3, [r4, #12]
 800c6e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6e6:	1a5b      	subs	r3, r3, r1
 800c6e8:	4543      	cmp	r3, r8
 800c6ea:	dcf0      	bgt.n	800c6ce <_printf_float+0x42a>
 800c6ec:	e6fc      	b.n	800c4e8 <_printf_float+0x244>
 800c6ee:	f04f 0800 	mov.w	r8, #0
 800c6f2:	f104 0919 	add.w	r9, r4, #25
 800c6f6:	e7f4      	b.n	800c6e2 <_printf_float+0x43e>

0800c6f8 <_printf_common>:
 800c6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6fc:	4616      	mov	r6, r2
 800c6fe:	4698      	mov	r8, r3
 800c700:	688a      	ldr	r2, [r1, #8]
 800c702:	690b      	ldr	r3, [r1, #16]
 800c704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c708:	4293      	cmp	r3, r2
 800c70a:	bfb8      	it	lt
 800c70c:	4613      	movlt	r3, r2
 800c70e:	6033      	str	r3, [r6, #0]
 800c710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c714:	4607      	mov	r7, r0
 800c716:	460c      	mov	r4, r1
 800c718:	b10a      	cbz	r2, 800c71e <_printf_common+0x26>
 800c71a:	3301      	adds	r3, #1
 800c71c:	6033      	str	r3, [r6, #0]
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	0699      	lsls	r1, r3, #26
 800c722:	bf42      	ittt	mi
 800c724:	6833      	ldrmi	r3, [r6, #0]
 800c726:	3302      	addmi	r3, #2
 800c728:	6033      	strmi	r3, [r6, #0]
 800c72a:	6825      	ldr	r5, [r4, #0]
 800c72c:	f015 0506 	ands.w	r5, r5, #6
 800c730:	d106      	bne.n	800c740 <_printf_common+0x48>
 800c732:	f104 0a19 	add.w	sl, r4, #25
 800c736:	68e3      	ldr	r3, [r4, #12]
 800c738:	6832      	ldr	r2, [r6, #0]
 800c73a:	1a9b      	subs	r3, r3, r2
 800c73c:	42ab      	cmp	r3, r5
 800c73e:	dc26      	bgt.n	800c78e <_printf_common+0x96>
 800c740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c744:	6822      	ldr	r2, [r4, #0]
 800c746:	3b00      	subs	r3, #0
 800c748:	bf18      	it	ne
 800c74a:	2301      	movne	r3, #1
 800c74c:	0692      	lsls	r2, r2, #26
 800c74e:	d42b      	bmi.n	800c7a8 <_printf_common+0xb0>
 800c750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c754:	4641      	mov	r1, r8
 800c756:	4638      	mov	r0, r7
 800c758:	47c8      	blx	r9
 800c75a:	3001      	adds	r0, #1
 800c75c:	d01e      	beq.n	800c79c <_printf_common+0xa4>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	6922      	ldr	r2, [r4, #16]
 800c762:	f003 0306 	and.w	r3, r3, #6
 800c766:	2b04      	cmp	r3, #4
 800c768:	bf02      	ittt	eq
 800c76a:	68e5      	ldreq	r5, [r4, #12]
 800c76c:	6833      	ldreq	r3, [r6, #0]
 800c76e:	1aed      	subeq	r5, r5, r3
 800c770:	68a3      	ldr	r3, [r4, #8]
 800c772:	bf0c      	ite	eq
 800c774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c778:	2500      	movne	r5, #0
 800c77a:	4293      	cmp	r3, r2
 800c77c:	bfc4      	itt	gt
 800c77e:	1a9b      	subgt	r3, r3, r2
 800c780:	18ed      	addgt	r5, r5, r3
 800c782:	2600      	movs	r6, #0
 800c784:	341a      	adds	r4, #26
 800c786:	42b5      	cmp	r5, r6
 800c788:	d11a      	bne.n	800c7c0 <_printf_common+0xc8>
 800c78a:	2000      	movs	r0, #0
 800c78c:	e008      	b.n	800c7a0 <_printf_common+0xa8>
 800c78e:	2301      	movs	r3, #1
 800c790:	4652      	mov	r2, sl
 800c792:	4641      	mov	r1, r8
 800c794:	4638      	mov	r0, r7
 800c796:	47c8      	blx	r9
 800c798:	3001      	adds	r0, #1
 800c79a:	d103      	bne.n	800c7a4 <_printf_common+0xac>
 800c79c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a4:	3501      	adds	r5, #1
 800c7a6:	e7c6      	b.n	800c736 <_printf_common+0x3e>
 800c7a8:	18e1      	adds	r1, r4, r3
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	2030      	movs	r0, #48	@ 0x30
 800c7ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7b2:	4422      	add	r2, r4
 800c7b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7bc:	3302      	adds	r3, #2
 800c7be:	e7c7      	b.n	800c750 <_printf_common+0x58>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	4641      	mov	r1, r8
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	47c8      	blx	r9
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	d0e6      	beq.n	800c79c <_printf_common+0xa4>
 800c7ce:	3601      	adds	r6, #1
 800c7d0:	e7d9      	b.n	800c786 <_printf_common+0x8e>
	...

0800c7d4 <_printf_i>:
 800c7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d8:	7e0f      	ldrb	r7, [r1, #24]
 800c7da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7dc:	2f78      	cmp	r7, #120	@ 0x78
 800c7de:	4691      	mov	r9, r2
 800c7e0:	4680      	mov	r8, r0
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	469a      	mov	sl, r3
 800c7e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7ea:	d807      	bhi.n	800c7fc <_printf_i+0x28>
 800c7ec:	2f62      	cmp	r7, #98	@ 0x62
 800c7ee:	d80a      	bhi.n	800c806 <_printf_i+0x32>
 800c7f0:	2f00      	cmp	r7, #0
 800c7f2:	f000 80d2 	beq.w	800c99a <_printf_i+0x1c6>
 800c7f6:	2f58      	cmp	r7, #88	@ 0x58
 800c7f8:	f000 80b9 	beq.w	800c96e <_printf_i+0x19a>
 800c7fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c804:	e03a      	b.n	800c87c <_printf_i+0xa8>
 800c806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c80a:	2b15      	cmp	r3, #21
 800c80c:	d8f6      	bhi.n	800c7fc <_printf_i+0x28>
 800c80e:	a101      	add	r1, pc, #4	@ (adr r1, 800c814 <_printf_i+0x40>)
 800c810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c814:	0800c86d 	.word	0x0800c86d
 800c818:	0800c881 	.word	0x0800c881
 800c81c:	0800c7fd 	.word	0x0800c7fd
 800c820:	0800c7fd 	.word	0x0800c7fd
 800c824:	0800c7fd 	.word	0x0800c7fd
 800c828:	0800c7fd 	.word	0x0800c7fd
 800c82c:	0800c881 	.word	0x0800c881
 800c830:	0800c7fd 	.word	0x0800c7fd
 800c834:	0800c7fd 	.word	0x0800c7fd
 800c838:	0800c7fd 	.word	0x0800c7fd
 800c83c:	0800c7fd 	.word	0x0800c7fd
 800c840:	0800c981 	.word	0x0800c981
 800c844:	0800c8ab 	.word	0x0800c8ab
 800c848:	0800c93b 	.word	0x0800c93b
 800c84c:	0800c7fd 	.word	0x0800c7fd
 800c850:	0800c7fd 	.word	0x0800c7fd
 800c854:	0800c9a3 	.word	0x0800c9a3
 800c858:	0800c7fd 	.word	0x0800c7fd
 800c85c:	0800c8ab 	.word	0x0800c8ab
 800c860:	0800c7fd 	.word	0x0800c7fd
 800c864:	0800c7fd 	.word	0x0800c7fd
 800c868:	0800c943 	.word	0x0800c943
 800c86c:	6833      	ldr	r3, [r6, #0]
 800c86e:	1d1a      	adds	r2, r3, #4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6032      	str	r2, [r6, #0]
 800c874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c87c:	2301      	movs	r3, #1
 800c87e:	e09d      	b.n	800c9bc <_printf_i+0x1e8>
 800c880:	6833      	ldr	r3, [r6, #0]
 800c882:	6820      	ldr	r0, [r4, #0]
 800c884:	1d19      	adds	r1, r3, #4
 800c886:	6031      	str	r1, [r6, #0]
 800c888:	0606      	lsls	r6, r0, #24
 800c88a:	d501      	bpl.n	800c890 <_printf_i+0xbc>
 800c88c:	681d      	ldr	r5, [r3, #0]
 800c88e:	e003      	b.n	800c898 <_printf_i+0xc4>
 800c890:	0645      	lsls	r5, r0, #25
 800c892:	d5fb      	bpl.n	800c88c <_printf_i+0xb8>
 800c894:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c898:	2d00      	cmp	r5, #0
 800c89a:	da03      	bge.n	800c8a4 <_printf_i+0xd0>
 800c89c:	232d      	movs	r3, #45	@ 0x2d
 800c89e:	426d      	negs	r5, r5
 800c8a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8a4:	4859      	ldr	r0, [pc, #356]	@ (800ca0c <_printf_i+0x238>)
 800c8a6:	230a      	movs	r3, #10
 800c8a8:	e011      	b.n	800c8ce <_printf_i+0xfa>
 800c8aa:	6821      	ldr	r1, [r4, #0]
 800c8ac:	6833      	ldr	r3, [r6, #0]
 800c8ae:	0608      	lsls	r0, r1, #24
 800c8b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8b4:	d402      	bmi.n	800c8bc <_printf_i+0xe8>
 800c8b6:	0649      	lsls	r1, r1, #25
 800c8b8:	bf48      	it	mi
 800c8ba:	b2ad      	uxthmi	r5, r5
 800c8bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8be:	4853      	ldr	r0, [pc, #332]	@ (800ca0c <_printf_i+0x238>)
 800c8c0:	6033      	str	r3, [r6, #0]
 800c8c2:	bf14      	ite	ne
 800c8c4:	230a      	movne	r3, #10
 800c8c6:	2308      	moveq	r3, #8
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8ce:	6866      	ldr	r6, [r4, #4]
 800c8d0:	60a6      	str	r6, [r4, #8]
 800c8d2:	2e00      	cmp	r6, #0
 800c8d4:	bfa2      	ittt	ge
 800c8d6:	6821      	ldrge	r1, [r4, #0]
 800c8d8:	f021 0104 	bicge.w	r1, r1, #4
 800c8dc:	6021      	strge	r1, [r4, #0]
 800c8de:	b90d      	cbnz	r5, 800c8e4 <_printf_i+0x110>
 800c8e0:	2e00      	cmp	r6, #0
 800c8e2:	d04b      	beq.n	800c97c <_printf_i+0x1a8>
 800c8e4:	4616      	mov	r6, r2
 800c8e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8ea:	fb03 5711 	mls	r7, r3, r1, r5
 800c8ee:	5dc7      	ldrb	r7, [r0, r7]
 800c8f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8f4:	462f      	mov	r7, r5
 800c8f6:	42bb      	cmp	r3, r7
 800c8f8:	460d      	mov	r5, r1
 800c8fa:	d9f4      	bls.n	800c8e6 <_printf_i+0x112>
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d10b      	bne.n	800c918 <_printf_i+0x144>
 800c900:	6823      	ldr	r3, [r4, #0]
 800c902:	07df      	lsls	r7, r3, #31
 800c904:	d508      	bpl.n	800c918 <_printf_i+0x144>
 800c906:	6923      	ldr	r3, [r4, #16]
 800c908:	6861      	ldr	r1, [r4, #4]
 800c90a:	4299      	cmp	r1, r3
 800c90c:	bfde      	ittt	le
 800c90e:	2330      	movle	r3, #48	@ 0x30
 800c910:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c914:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c918:	1b92      	subs	r2, r2, r6
 800c91a:	6122      	str	r2, [r4, #16]
 800c91c:	f8cd a000 	str.w	sl, [sp]
 800c920:	464b      	mov	r3, r9
 800c922:	aa03      	add	r2, sp, #12
 800c924:	4621      	mov	r1, r4
 800c926:	4640      	mov	r0, r8
 800c928:	f7ff fee6 	bl	800c6f8 <_printf_common>
 800c92c:	3001      	adds	r0, #1
 800c92e:	d14a      	bne.n	800c9c6 <_printf_i+0x1f2>
 800c930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c934:	b004      	add	sp, #16
 800c936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	f043 0320 	orr.w	r3, r3, #32
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	4833      	ldr	r0, [pc, #204]	@ (800ca10 <_printf_i+0x23c>)
 800c944:	2778      	movs	r7, #120	@ 0x78
 800c946:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	6831      	ldr	r1, [r6, #0]
 800c94e:	061f      	lsls	r7, r3, #24
 800c950:	f851 5b04 	ldr.w	r5, [r1], #4
 800c954:	d402      	bmi.n	800c95c <_printf_i+0x188>
 800c956:	065f      	lsls	r7, r3, #25
 800c958:	bf48      	it	mi
 800c95a:	b2ad      	uxthmi	r5, r5
 800c95c:	6031      	str	r1, [r6, #0]
 800c95e:	07d9      	lsls	r1, r3, #31
 800c960:	bf44      	itt	mi
 800c962:	f043 0320 	orrmi.w	r3, r3, #32
 800c966:	6023      	strmi	r3, [r4, #0]
 800c968:	b11d      	cbz	r5, 800c972 <_printf_i+0x19e>
 800c96a:	2310      	movs	r3, #16
 800c96c:	e7ac      	b.n	800c8c8 <_printf_i+0xf4>
 800c96e:	4827      	ldr	r0, [pc, #156]	@ (800ca0c <_printf_i+0x238>)
 800c970:	e7e9      	b.n	800c946 <_printf_i+0x172>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	f023 0320 	bic.w	r3, r3, #32
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	e7f6      	b.n	800c96a <_printf_i+0x196>
 800c97c:	4616      	mov	r6, r2
 800c97e:	e7bd      	b.n	800c8fc <_printf_i+0x128>
 800c980:	6833      	ldr	r3, [r6, #0]
 800c982:	6825      	ldr	r5, [r4, #0]
 800c984:	6961      	ldr	r1, [r4, #20]
 800c986:	1d18      	adds	r0, r3, #4
 800c988:	6030      	str	r0, [r6, #0]
 800c98a:	062e      	lsls	r6, r5, #24
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	d501      	bpl.n	800c994 <_printf_i+0x1c0>
 800c990:	6019      	str	r1, [r3, #0]
 800c992:	e002      	b.n	800c99a <_printf_i+0x1c6>
 800c994:	0668      	lsls	r0, r5, #25
 800c996:	d5fb      	bpl.n	800c990 <_printf_i+0x1bc>
 800c998:	8019      	strh	r1, [r3, #0]
 800c99a:	2300      	movs	r3, #0
 800c99c:	6123      	str	r3, [r4, #16]
 800c99e:	4616      	mov	r6, r2
 800c9a0:	e7bc      	b.n	800c91c <_printf_i+0x148>
 800c9a2:	6833      	ldr	r3, [r6, #0]
 800c9a4:	1d1a      	adds	r2, r3, #4
 800c9a6:	6032      	str	r2, [r6, #0]
 800c9a8:	681e      	ldr	r6, [r3, #0]
 800c9aa:	6862      	ldr	r2, [r4, #4]
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f7f3 fc16 	bl	80001e0 <memchr>
 800c9b4:	b108      	cbz	r0, 800c9ba <_printf_i+0x1e6>
 800c9b6:	1b80      	subs	r0, r0, r6
 800c9b8:	6060      	str	r0, [r4, #4]
 800c9ba:	6863      	ldr	r3, [r4, #4]
 800c9bc:	6123      	str	r3, [r4, #16]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9c4:	e7aa      	b.n	800c91c <_printf_i+0x148>
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	4632      	mov	r2, r6
 800c9ca:	4649      	mov	r1, r9
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	47d0      	blx	sl
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d0ad      	beq.n	800c930 <_printf_i+0x15c>
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	079b      	lsls	r3, r3, #30
 800c9d8:	d413      	bmi.n	800ca02 <_printf_i+0x22e>
 800c9da:	68e0      	ldr	r0, [r4, #12]
 800c9dc:	9b03      	ldr	r3, [sp, #12]
 800c9de:	4298      	cmp	r0, r3
 800c9e0:	bfb8      	it	lt
 800c9e2:	4618      	movlt	r0, r3
 800c9e4:	e7a6      	b.n	800c934 <_printf_i+0x160>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	4632      	mov	r2, r6
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	47d0      	blx	sl
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d09d      	beq.n	800c930 <_printf_i+0x15c>
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	68e3      	ldr	r3, [r4, #12]
 800c9f8:	9903      	ldr	r1, [sp, #12]
 800c9fa:	1a5b      	subs	r3, r3, r1
 800c9fc:	42ab      	cmp	r3, r5
 800c9fe:	dcf2      	bgt.n	800c9e6 <_printf_i+0x212>
 800ca00:	e7eb      	b.n	800c9da <_printf_i+0x206>
 800ca02:	2500      	movs	r5, #0
 800ca04:	f104 0619 	add.w	r6, r4, #25
 800ca08:	e7f5      	b.n	800c9f6 <_printf_i+0x222>
 800ca0a:	bf00      	nop
 800ca0c:	0800fd3a 	.word	0x0800fd3a
 800ca10:	0800fd4b 	.word	0x0800fd4b

0800ca14 <_scanf_float>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	b087      	sub	sp, #28
 800ca1a:	4617      	mov	r7, r2
 800ca1c:	9303      	str	r3, [sp, #12]
 800ca1e:	688b      	ldr	r3, [r1, #8]
 800ca20:	1e5a      	subs	r2, r3, #1
 800ca22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ca26:	bf81      	itttt	hi
 800ca28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ca2c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ca30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ca34:	608b      	strhi	r3, [r1, #8]
 800ca36:	680b      	ldr	r3, [r1, #0]
 800ca38:	460a      	mov	r2, r1
 800ca3a:	f04f 0500 	mov.w	r5, #0
 800ca3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ca42:	f842 3b1c 	str.w	r3, [r2], #28
 800ca46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca4a:	4680      	mov	r8, r0
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	bf98      	it	ls
 800ca50:	f04f 0b00 	movls.w	fp, #0
 800ca54:	9201      	str	r2, [sp, #4]
 800ca56:	4616      	mov	r6, r2
 800ca58:	46aa      	mov	sl, r5
 800ca5a:	46a9      	mov	r9, r5
 800ca5c:	9502      	str	r5, [sp, #8]
 800ca5e:	68a2      	ldr	r2, [r4, #8]
 800ca60:	b152      	cbz	r2, 800ca78 <_scanf_float+0x64>
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2b4e      	cmp	r3, #78	@ 0x4e
 800ca68:	d864      	bhi.n	800cb34 <_scanf_float+0x120>
 800ca6a:	2b40      	cmp	r3, #64	@ 0x40
 800ca6c:	d83c      	bhi.n	800cae8 <_scanf_float+0xd4>
 800ca6e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ca72:	b2c8      	uxtb	r0, r1
 800ca74:	280e      	cmp	r0, #14
 800ca76:	d93a      	bls.n	800caee <_scanf_float+0xda>
 800ca78:	f1b9 0f00 	cmp.w	r9, #0
 800ca7c:	d003      	beq.n	800ca86 <_scanf_float+0x72>
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ca8a:	f1ba 0f01 	cmp.w	sl, #1
 800ca8e:	f200 8117 	bhi.w	800ccc0 <_scanf_float+0x2ac>
 800ca92:	9b01      	ldr	r3, [sp, #4]
 800ca94:	429e      	cmp	r6, r3
 800ca96:	f200 8108 	bhi.w	800ccaa <_scanf_float+0x296>
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	b007      	add	sp, #28
 800ca9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800caa6:	2a0d      	cmp	r2, #13
 800caa8:	d8e6      	bhi.n	800ca78 <_scanf_float+0x64>
 800caaa:	a101      	add	r1, pc, #4	@ (adr r1, 800cab0 <_scanf_float+0x9c>)
 800caac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cab0:	0800cbf7 	.word	0x0800cbf7
 800cab4:	0800ca79 	.word	0x0800ca79
 800cab8:	0800ca79 	.word	0x0800ca79
 800cabc:	0800ca79 	.word	0x0800ca79
 800cac0:	0800cc57 	.word	0x0800cc57
 800cac4:	0800cc2f 	.word	0x0800cc2f
 800cac8:	0800ca79 	.word	0x0800ca79
 800cacc:	0800ca79 	.word	0x0800ca79
 800cad0:	0800cc05 	.word	0x0800cc05
 800cad4:	0800ca79 	.word	0x0800ca79
 800cad8:	0800ca79 	.word	0x0800ca79
 800cadc:	0800ca79 	.word	0x0800ca79
 800cae0:	0800ca79 	.word	0x0800ca79
 800cae4:	0800cbbd 	.word	0x0800cbbd
 800cae8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800caec:	e7db      	b.n	800caa6 <_scanf_float+0x92>
 800caee:	290e      	cmp	r1, #14
 800caf0:	d8c2      	bhi.n	800ca78 <_scanf_float+0x64>
 800caf2:	a001      	add	r0, pc, #4	@ (adr r0, 800caf8 <_scanf_float+0xe4>)
 800caf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800caf8:	0800cbad 	.word	0x0800cbad
 800cafc:	0800ca79 	.word	0x0800ca79
 800cb00:	0800cbad 	.word	0x0800cbad
 800cb04:	0800cc43 	.word	0x0800cc43
 800cb08:	0800ca79 	.word	0x0800ca79
 800cb0c:	0800cb55 	.word	0x0800cb55
 800cb10:	0800cb93 	.word	0x0800cb93
 800cb14:	0800cb93 	.word	0x0800cb93
 800cb18:	0800cb93 	.word	0x0800cb93
 800cb1c:	0800cb93 	.word	0x0800cb93
 800cb20:	0800cb93 	.word	0x0800cb93
 800cb24:	0800cb93 	.word	0x0800cb93
 800cb28:	0800cb93 	.word	0x0800cb93
 800cb2c:	0800cb93 	.word	0x0800cb93
 800cb30:	0800cb93 	.word	0x0800cb93
 800cb34:	2b6e      	cmp	r3, #110	@ 0x6e
 800cb36:	d809      	bhi.n	800cb4c <_scanf_float+0x138>
 800cb38:	2b60      	cmp	r3, #96	@ 0x60
 800cb3a:	d8b2      	bhi.n	800caa2 <_scanf_float+0x8e>
 800cb3c:	2b54      	cmp	r3, #84	@ 0x54
 800cb3e:	d07b      	beq.n	800cc38 <_scanf_float+0x224>
 800cb40:	2b59      	cmp	r3, #89	@ 0x59
 800cb42:	d199      	bne.n	800ca78 <_scanf_float+0x64>
 800cb44:	2d07      	cmp	r5, #7
 800cb46:	d197      	bne.n	800ca78 <_scanf_float+0x64>
 800cb48:	2508      	movs	r5, #8
 800cb4a:	e02c      	b.n	800cba6 <_scanf_float+0x192>
 800cb4c:	2b74      	cmp	r3, #116	@ 0x74
 800cb4e:	d073      	beq.n	800cc38 <_scanf_float+0x224>
 800cb50:	2b79      	cmp	r3, #121	@ 0x79
 800cb52:	e7f6      	b.n	800cb42 <_scanf_float+0x12e>
 800cb54:	6821      	ldr	r1, [r4, #0]
 800cb56:	05c8      	lsls	r0, r1, #23
 800cb58:	d51b      	bpl.n	800cb92 <_scanf_float+0x17e>
 800cb5a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cb5e:	6021      	str	r1, [r4, #0]
 800cb60:	f109 0901 	add.w	r9, r9, #1
 800cb64:	f1bb 0f00 	cmp.w	fp, #0
 800cb68:	d003      	beq.n	800cb72 <_scanf_float+0x15e>
 800cb6a:	3201      	adds	r2, #1
 800cb6c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cb70:	60a2      	str	r2, [r4, #8]
 800cb72:	68a3      	ldr	r3, [r4, #8]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	60a3      	str	r3, [r4, #8]
 800cb78:	6923      	ldr	r3, [r4, #16]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	6123      	str	r3, [r4, #16]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	607b      	str	r3, [r7, #4]
 800cb86:	f340 8087 	ble.w	800cc98 <_scanf_float+0x284>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	603b      	str	r3, [r7, #0]
 800cb90:	e765      	b.n	800ca5e <_scanf_float+0x4a>
 800cb92:	eb1a 0105 	adds.w	r1, sl, r5
 800cb96:	f47f af6f 	bne.w	800ca78 <_scanf_float+0x64>
 800cb9a:	6822      	ldr	r2, [r4, #0]
 800cb9c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cba0:	6022      	str	r2, [r4, #0]
 800cba2:	460d      	mov	r5, r1
 800cba4:	468a      	mov	sl, r1
 800cba6:	f806 3b01 	strb.w	r3, [r6], #1
 800cbaa:	e7e2      	b.n	800cb72 <_scanf_float+0x15e>
 800cbac:	6822      	ldr	r2, [r4, #0]
 800cbae:	0610      	lsls	r0, r2, #24
 800cbb0:	f57f af62 	bpl.w	800ca78 <_scanf_float+0x64>
 800cbb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cbb8:	6022      	str	r2, [r4, #0]
 800cbba:	e7f4      	b.n	800cba6 <_scanf_float+0x192>
 800cbbc:	f1ba 0f00 	cmp.w	sl, #0
 800cbc0:	d10e      	bne.n	800cbe0 <_scanf_float+0x1cc>
 800cbc2:	f1b9 0f00 	cmp.w	r9, #0
 800cbc6:	d10e      	bne.n	800cbe6 <_scanf_float+0x1d2>
 800cbc8:	6822      	ldr	r2, [r4, #0]
 800cbca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cbce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cbd2:	d108      	bne.n	800cbe6 <_scanf_float+0x1d2>
 800cbd4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbd8:	6022      	str	r2, [r4, #0]
 800cbda:	f04f 0a01 	mov.w	sl, #1
 800cbde:	e7e2      	b.n	800cba6 <_scanf_float+0x192>
 800cbe0:	f1ba 0f02 	cmp.w	sl, #2
 800cbe4:	d055      	beq.n	800cc92 <_scanf_float+0x27e>
 800cbe6:	2d01      	cmp	r5, #1
 800cbe8:	d002      	beq.n	800cbf0 <_scanf_float+0x1dc>
 800cbea:	2d04      	cmp	r5, #4
 800cbec:	f47f af44 	bne.w	800ca78 <_scanf_float+0x64>
 800cbf0:	3501      	adds	r5, #1
 800cbf2:	b2ed      	uxtb	r5, r5
 800cbf4:	e7d7      	b.n	800cba6 <_scanf_float+0x192>
 800cbf6:	f1ba 0f01 	cmp.w	sl, #1
 800cbfa:	f47f af3d 	bne.w	800ca78 <_scanf_float+0x64>
 800cbfe:	f04f 0a02 	mov.w	sl, #2
 800cc02:	e7d0      	b.n	800cba6 <_scanf_float+0x192>
 800cc04:	b97d      	cbnz	r5, 800cc26 <_scanf_float+0x212>
 800cc06:	f1b9 0f00 	cmp.w	r9, #0
 800cc0a:	f47f af38 	bne.w	800ca7e <_scanf_float+0x6a>
 800cc0e:	6822      	ldr	r2, [r4, #0]
 800cc10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc18:	f040 8108 	bne.w	800ce2c <_scanf_float+0x418>
 800cc1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc20:	6022      	str	r2, [r4, #0]
 800cc22:	2501      	movs	r5, #1
 800cc24:	e7bf      	b.n	800cba6 <_scanf_float+0x192>
 800cc26:	2d03      	cmp	r5, #3
 800cc28:	d0e2      	beq.n	800cbf0 <_scanf_float+0x1dc>
 800cc2a:	2d05      	cmp	r5, #5
 800cc2c:	e7de      	b.n	800cbec <_scanf_float+0x1d8>
 800cc2e:	2d02      	cmp	r5, #2
 800cc30:	f47f af22 	bne.w	800ca78 <_scanf_float+0x64>
 800cc34:	2503      	movs	r5, #3
 800cc36:	e7b6      	b.n	800cba6 <_scanf_float+0x192>
 800cc38:	2d06      	cmp	r5, #6
 800cc3a:	f47f af1d 	bne.w	800ca78 <_scanf_float+0x64>
 800cc3e:	2507      	movs	r5, #7
 800cc40:	e7b1      	b.n	800cba6 <_scanf_float+0x192>
 800cc42:	6822      	ldr	r2, [r4, #0]
 800cc44:	0591      	lsls	r1, r2, #22
 800cc46:	f57f af17 	bpl.w	800ca78 <_scanf_float+0x64>
 800cc4a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc54:	e7a7      	b.n	800cba6 <_scanf_float+0x192>
 800cc56:	6822      	ldr	r2, [r4, #0]
 800cc58:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cc5c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cc60:	d006      	beq.n	800cc70 <_scanf_float+0x25c>
 800cc62:	0550      	lsls	r0, r2, #21
 800cc64:	f57f af08 	bpl.w	800ca78 <_scanf_float+0x64>
 800cc68:	f1b9 0f00 	cmp.w	r9, #0
 800cc6c:	f000 80de 	beq.w	800ce2c <_scanf_float+0x418>
 800cc70:	0591      	lsls	r1, r2, #22
 800cc72:	bf58      	it	pl
 800cc74:	9902      	ldrpl	r1, [sp, #8]
 800cc76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc7a:	bf58      	it	pl
 800cc7c:	eba9 0101 	subpl.w	r1, r9, r1
 800cc80:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cc84:	bf58      	it	pl
 800cc86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc8a:	6022      	str	r2, [r4, #0]
 800cc8c:	f04f 0900 	mov.w	r9, #0
 800cc90:	e789      	b.n	800cba6 <_scanf_float+0x192>
 800cc92:	f04f 0a03 	mov.w	sl, #3
 800cc96:	e786      	b.n	800cba6 <_scanf_float+0x192>
 800cc98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cc9c:	4639      	mov	r1, r7
 800cc9e:	4640      	mov	r0, r8
 800cca0:	4798      	blx	r3
 800cca2:	2800      	cmp	r0, #0
 800cca4:	f43f aedb 	beq.w	800ca5e <_scanf_float+0x4a>
 800cca8:	e6e6      	b.n	800ca78 <_scanf_float+0x64>
 800ccaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccb2:	463a      	mov	r2, r7
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	4798      	blx	r3
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	6123      	str	r3, [r4, #16]
 800ccbe:	e6e8      	b.n	800ca92 <_scanf_float+0x7e>
 800ccc0:	1e6b      	subs	r3, r5, #1
 800ccc2:	2b06      	cmp	r3, #6
 800ccc4:	d824      	bhi.n	800cd10 <_scanf_float+0x2fc>
 800ccc6:	2d02      	cmp	r5, #2
 800ccc8:	d836      	bhi.n	800cd38 <_scanf_float+0x324>
 800ccca:	9b01      	ldr	r3, [sp, #4]
 800cccc:	429e      	cmp	r6, r3
 800ccce:	f67f aee4 	bls.w	800ca9a <_scanf_float+0x86>
 800ccd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4640      	mov	r0, r8
 800ccde:	4798      	blx	r3
 800cce0:	6923      	ldr	r3, [r4, #16]
 800cce2:	3b01      	subs	r3, #1
 800cce4:	6123      	str	r3, [r4, #16]
 800cce6:	e7f0      	b.n	800ccca <_scanf_float+0x2b6>
 800cce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ccf0:	463a      	mov	r2, r7
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	4798      	blx	r3
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	6123      	str	r3, [r4, #16]
 800ccfc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cd00:	fa5f fa8a 	uxtb.w	sl, sl
 800cd04:	f1ba 0f02 	cmp.w	sl, #2
 800cd08:	d1ee      	bne.n	800cce8 <_scanf_float+0x2d4>
 800cd0a:	3d03      	subs	r5, #3
 800cd0c:	b2ed      	uxtb	r5, r5
 800cd0e:	1b76      	subs	r6, r6, r5
 800cd10:	6823      	ldr	r3, [r4, #0]
 800cd12:	05da      	lsls	r2, r3, #23
 800cd14:	d530      	bpl.n	800cd78 <_scanf_float+0x364>
 800cd16:	055b      	lsls	r3, r3, #21
 800cd18:	d511      	bpl.n	800cd3e <_scanf_float+0x32a>
 800cd1a:	9b01      	ldr	r3, [sp, #4]
 800cd1c:	429e      	cmp	r6, r3
 800cd1e:	f67f aebc 	bls.w	800ca9a <_scanf_float+0x86>
 800cd22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd2a:	463a      	mov	r2, r7
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4798      	blx	r3
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	3b01      	subs	r3, #1
 800cd34:	6123      	str	r3, [r4, #16]
 800cd36:	e7f0      	b.n	800cd1a <_scanf_float+0x306>
 800cd38:	46aa      	mov	sl, r5
 800cd3a:	46b3      	mov	fp, r6
 800cd3c:	e7de      	b.n	800ccfc <_scanf_float+0x2e8>
 800cd3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd42:	6923      	ldr	r3, [r4, #16]
 800cd44:	2965      	cmp	r1, #101	@ 0x65
 800cd46:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cd4a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cd4e:	6123      	str	r3, [r4, #16]
 800cd50:	d00c      	beq.n	800cd6c <_scanf_float+0x358>
 800cd52:	2945      	cmp	r1, #69	@ 0x45
 800cd54:	d00a      	beq.n	800cd6c <_scanf_float+0x358>
 800cd56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd5a:	463a      	mov	r2, r7
 800cd5c:	4640      	mov	r0, r8
 800cd5e:	4798      	blx	r3
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	1eb5      	subs	r5, r6, #2
 800cd6a:	6123      	str	r3, [r4, #16]
 800cd6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd70:	463a      	mov	r2, r7
 800cd72:	4640      	mov	r0, r8
 800cd74:	4798      	blx	r3
 800cd76:	462e      	mov	r6, r5
 800cd78:	6822      	ldr	r2, [r4, #0]
 800cd7a:	f012 0210 	ands.w	r2, r2, #16
 800cd7e:	d001      	beq.n	800cd84 <_scanf_float+0x370>
 800cd80:	2000      	movs	r0, #0
 800cd82:	e68b      	b.n	800ca9c <_scanf_float+0x88>
 800cd84:	7032      	strb	r2, [r6, #0]
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cd8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd90:	d11c      	bne.n	800cdcc <_scanf_float+0x3b8>
 800cd92:	9b02      	ldr	r3, [sp, #8]
 800cd94:	454b      	cmp	r3, r9
 800cd96:	eba3 0209 	sub.w	r2, r3, r9
 800cd9a:	d123      	bne.n	800cde4 <_scanf_float+0x3d0>
 800cd9c:	9901      	ldr	r1, [sp, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	4640      	mov	r0, r8
 800cda2:	f7ff f9cd 	bl	800c140 <_strtod_r>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	6821      	ldr	r1, [r4, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f011 0f02 	tst.w	r1, #2
 800cdb0:	ec57 6b10 	vmov	r6, r7, d0
 800cdb4:	f103 0204 	add.w	r2, r3, #4
 800cdb8:	d01f      	beq.n	800cdfa <_scanf_float+0x3e6>
 800cdba:	9903      	ldr	r1, [sp, #12]
 800cdbc:	600a      	str	r2, [r1, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	e9c3 6700 	strd	r6, r7, [r3]
 800cdc4:	68e3      	ldr	r3, [r4, #12]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	60e3      	str	r3, [r4, #12]
 800cdca:	e7d9      	b.n	800cd80 <_scanf_float+0x36c>
 800cdcc:	9b04      	ldr	r3, [sp, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d0e4      	beq.n	800cd9c <_scanf_float+0x388>
 800cdd2:	9905      	ldr	r1, [sp, #20]
 800cdd4:	230a      	movs	r3, #10
 800cdd6:	3101      	adds	r1, #1
 800cdd8:	4640      	mov	r0, r8
 800cdda:	f002 f9dd 	bl	800f198 <_strtol_r>
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	9e05      	ldr	r6, [sp, #20]
 800cde2:	1ac2      	subs	r2, r0, r3
 800cde4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cde8:	429e      	cmp	r6, r3
 800cdea:	bf28      	it	cs
 800cdec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cdf0:	4910      	ldr	r1, [pc, #64]	@ (800ce34 <_scanf_float+0x420>)
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f000 f8e4 	bl	800cfc0 <siprintf>
 800cdf8:	e7d0      	b.n	800cd9c <_scanf_float+0x388>
 800cdfa:	f011 0f04 	tst.w	r1, #4
 800cdfe:	9903      	ldr	r1, [sp, #12]
 800ce00:	600a      	str	r2, [r1, #0]
 800ce02:	d1dc      	bne.n	800cdbe <_scanf_float+0x3aa>
 800ce04:	681d      	ldr	r5, [r3, #0]
 800ce06:	4632      	mov	r2, r6
 800ce08:	463b      	mov	r3, r7
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	4639      	mov	r1, r7
 800ce0e:	f7f3 fe95 	bl	8000b3c <__aeabi_dcmpun>
 800ce12:	b128      	cbz	r0, 800ce20 <_scanf_float+0x40c>
 800ce14:	4808      	ldr	r0, [pc, #32]	@ (800ce38 <_scanf_float+0x424>)
 800ce16:	f000 f9f3 	bl	800d200 <nanf>
 800ce1a:	ed85 0a00 	vstr	s0, [r5]
 800ce1e:	e7d1      	b.n	800cdc4 <_scanf_float+0x3b0>
 800ce20:	4630      	mov	r0, r6
 800ce22:	4639      	mov	r1, r7
 800ce24:	f7f3 fee8 	bl	8000bf8 <__aeabi_d2f>
 800ce28:	6028      	str	r0, [r5, #0]
 800ce2a:	e7cb      	b.n	800cdc4 <_scanf_float+0x3b0>
 800ce2c:	f04f 0900 	mov.w	r9, #0
 800ce30:	e629      	b.n	800ca86 <_scanf_float+0x72>
 800ce32:	bf00      	nop
 800ce34:	0800fd5c 	.word	0x0800fd5c
 800ce38:	080100fd 	.word	0x080100fd

0800ce3c <std>:
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	b510      	push	{r4, lr}
 800ce40:	4604      	mov	r4, r0
 800ce42:	e9c0 3300 	strd	r3, r3, [r0]
 800ce46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce4a:	6083      	str	r3, [r0, #8]
 800ce4c:	8181      	strh	r1, [r0, #12]
 800ce4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce50:	81c2      	strh	r2, [r0, #14]
 800ce52:	6183      	str	r3, [r0, #24]
 800ce54:	4619      	mov	r1, r3
 800ce56:	2208      	movs	r2, #8
 800ce58:	305c      	adds	r0, #92	@ 0x5c
 800ce5a:	f000 f914 	bl	800d086 <memset>
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce94 <std+0x58>)
 800ce60:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce62:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <std+0x5c>)
 800ce64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce66:	4b0d      	ldr	r3, [pc, #52]	@ (800ce9c <std+0x60>)
 800ce68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cea0 <std+0x64>)
 800ce6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <std+0x68>)
 800ce70:	6224      	str	r4, [r4, #32]
 800ce72:	429c      	cmp	r4, r3
 800ce74:	d006      	beq.n	800ce84 <std+0x48>
 800ce76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce7a:	4294      	cmp	r4, r2
 800ce7c:	d002      	beq.n	800ce84 <std+0x48>
 800ce7e:	33d0      	adds	r3, #208	@ 0xd0
 800ce80:	429c      	cmp	r4, r3
 800ce82:	d105      	bne.n	800ce90 <std+0x54>
 800ce84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce8c:	f000 b99c 	b.w	800d1c8 <__retarget_lock_init_recursive>
 800ce90:	bd10      	pop	{r4, pc}
 800ce92:	bf00      	nop
 800ce94:	0800d001 	.word	0x0800d001
 800ce98:	0800d023 	.word	0x0800d023
 800ce9c:	0800d05b 	.word	0x0800d05b
 800cea0:	0800d07f 	.word	0x0800d07f
 800cea4:	200024f0 	.word	0x200024f0

0800cea8 <stdio_exit_handler>:
 800cea8:	4a02      	ldr	r2, [pc, #8]	@ (800ceb4 <stdio_exit_handler+0xc>)
 800ceaa:	4903      	ldr	r1, [pc, #12]	@ (800ceb8 <stdio_exit_handler+0x10>)
 800ceac:	4803      	ldr	r0, [pc, #12]	@ (800cebc <stdio_exit_handler+0x14>)
 800ceae:	f000 b869 	b.w	800cf84 <_fwalk_sglue>
 800ceb2:	bf00      	nop
 800ceb4:	200000fc 	.word	0x200000fc
 800ceb8:	0800f56d 	.word	0x0800f56d
 800cebc:	20000278 	.word	0x20000278

0800cec0 <cleanup_stdio>:
 800cec0:	6841      	ldr	r1, [r0, #4]
 800cec2:	4b0c      	ldr	r3, [pc, #48]	@ (800cef4 <cleanup_stdio+0x34>)
 800cec4:	4299      	cmp	r1, r3
 800cec6:	b510      	push	{r4, lr}
 800cec8:	4604      	mov	r4, r0
 800ceca:	d001      	beq.n	800ced0 <cleanup_stdio+0x10>
 800cecc:	f002 fb4e 	bl	800f56c <_fflush_r>
 800ced0:	68a1      	ldr	r1, [r4, #8]
 800ced2:	4b09      	ldr	r3, [pc, #36]	@ (800cef8 <cleanup_stdio+0x38>)
 800ced4:	4299      	cmp	r1, r3
 800ced6:	d002      	beq.n	800cede <cleanup_stdio+0x1e>
 800ced8:	4620      	mov	r0, r4
 800ceda:	f002 fb47 	bl	800f56c <_fflush_r>
 800cede:	68e1      	ldr	r1, [r4, #12]
 800cee0:	4b06      	ldr	r3, [pc, #24]	@ (800cefc <cleanup_stdio+0x3c>)
 800cee2:	4299      	cmp	r1, r3
 800cee4:	d004      	beq.n	800cef0 <cleanup_stdio+0x30>
 800cee6:	4620      	mov	r0, r4
 800cee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceec:	f002 bb3e 	b.w	800f56c <_fflush_r>
 800cef0:	bd10      	pop	{r4, pc}
 800cef2:	bf00      	nop
 800cef4:	200024f0 	.word	0x200024f0
 800cef8:	20002558 	.word	0x20002558
 800cefc:	200025c0 	.word	0x200025c0

0800cf00 <global_stdio_init.part.0>:
 800cf00:	b510      	push	{r4, lr}
 800cf02:	4b0b      	ldr	r3, [pc, #44]	@ (800cf30 <global_stdio_init.part.0+0x30>)
 800cf04:	4c0b      	ldr	r4, [pc, #44]	@ (800cf34 <global_stdio_init.part.0+0x34>)
 800cf06:	4a0c      	ldr	r2, [pc, #48]	@ (800cf38 <global_stdio_init.part.0+0x38>)
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	2104      	movs	r1, #4
 800cf10:	f7ff ff94 	bl	800ce3c <std>
 800cf14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf18:	2201      	movs	r2, #1
 800cf1a:	2109      	movs	r1, #9
 800cf1c:	f7ff ff8e 	bl	800ce3c <std>
 800cf20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf24:	2202      	movs	r2, #2
 800cf26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf2a:	2112      	movs	r1, #18
 800cf2c:	f7ff bf86 	b.w	800ce3c <std>
 800cf30:	20002628 	.word	0x20002628
 800cf34:	200024f0 	.word	0x200024f0
 800cf38:	0800cea9 	.word	0x0800cea9

0800cf3c <__sfp_lock_acquire>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	@ (800cf44 <__sfp_lock_acquire+0x8>)
 800cf3e:	f000 b944 	b.w	800d1ca <__retarget_lock_acquire_recursive>
 800cf42:	bf00      	nop
 800cf44:	20002631 	.word	0x20002631

0800cf48 <__sfp_lock_release>:
 800cf48:	4801      	ldr	r0, [pc, #4]	@ (800cf50 <__sfp_lock_release+0x8>)
 800cf4a:	f000 b93f 	b.w	800d1cc <__retarget_lock_release_recursive>
 800cf4e:	bf00      	nop
 800cf50:	20002631 	.word	0x20002631

0800cf54 <__sinit>:
 800cf54:	b510      	push	{r4, lr}
 800cf56:	4604      	mov	r4, r0
 800cf58:	f7ff fff0 	bl	800cf3c <__sfp_lock_acquire>
 800cf5c:	6a23      	ldr	r3, [r4, #32]
 800cf5e:	b11b      	cbz	r3, 800cf68 <__sinit+0x14>
 800cf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf64:	f7ff bff0 	b.w	800cf48 <__sfp_lock_release>
 800cf68:	4b04      	ldr	r3, [pc, #16]	@ (800cf7c <__sinit+0x28>)
 800cf6a:	6223      	str	r3, [r4, #32]
 800cf6c:	4b04      	ldr	r3, [pc, #16]	@ (800cf80 <__sinit+0x2c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1f5      	bne.n	800cf60 <__sinit+0xc>
 800cf74:	f7ff ffc4 	bl	800cf00 <global_stdio_init.part.0>
 800cf78:	e7f2      	b.n	800cf60 <__sinit+0xc>
 800cf7a:	bf00      	nop
 800cf7c:	0800cec1 	.word	0x0800cec1
 800cf80:	20002628 	.word	0x20002628

0800cf84 <_fwalk_sglue>:
 800cf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf88:	4607      	mov	r7, r0
 800cf8a:	4688      	mov	r8, r1
 800cf8c:	4614      	mov	r4, r2
 800cf8e:	2600      	movs	r6, #0
 800cf90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf94:	f1b9 0901 	subs.w	r9, r9, #1
 800cf98:	d505      	bpl.n	800cfa6 <_fwalk_sglue+0x22>
 800cf9a:	6824      	ldr	r4, [r4, #0]
 800cf9c:	2c00      	cmp	r4, #0
 800cf9e:	d1f7      	bne.n	800cf90 <_fwalk_sglue+0xc>
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfa6:	89ab      	ldrh	r3, [r5, #12]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d907      	bls.n	800cfbc <_fwalk_sglue+0x38>
 800cfac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	d003      	beq.n	800cfbc <_fwalk_sglue+0x38>
 800cfb4:	4629      	mov	r1, r5
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	47c0      	blx	r8
 800cfba:	4306      	orrs	r6, r0
 800cfbc:	3568      	adds	r5, #104	@ 0x68
 800cfbe:	e7e9      	b.n	800cf94 <_fwalk_sglue+0x10>

0800cfc0 <siprintf>:
 800cfc0:	b40e      	push	{r1, r2, r3}
 800cfc2:	b500      	push	{lr}
 800cfc4:	b09c      	sub	sp, #112	@ 0x70
 800cfc6:	ab1d      	add	r3, sp, #116	@ 0x74
 800cfc8:	9002      	str	r0, [sp, #8]
 800cfca:	9006      	str	r0, [sp, #24]
 800cfcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfd0:	4809      	ldr	r0, [pc, #36]	@ (800cff8 <siprintf+0x38>)
 800cfd2:	9107      	str	r1, [sp, #28]
 800cfd4:	9104      	str	r1, [sp, #16]
 800cfd6:	4909      	ldr	r1, [pc, #36]	@ (800cffc <siprintf+0x3c>)
 800cfd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfdc:	9105      	str	r1, [sp, #20]
 800cfde:	6800      	ldr	r0, [r0, #0]
 800cfe0:	9301      	str	r3, [sp, #4]
 800cfe2:	a902      	add	r1, sp, #8
 800cfe4:	f002 f942 	bl	800f26c <_svfiprintf_r>
 800cfe8:	9b02      	ldr	r3, [sp, #8]
 800cfea:	2200      	movs	r2, #0
 800cfec:	701a      	strb	r2, [r3, #0]
 800cfee:	b01c      	add	sp, #112	@ 0x70
 800cff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cff4:	b003      	add	sp, #12
 800cff6:	4770      	bx	lr
 800cff8:	20000274 	.word	0x20000274
 800cffc:	ffff0208 	.word	0xffff0208

0800d000 <__sread>:
 800d000:	b510      	push	{r4, lr}
 800d002:	460c      	mov	r4, r1
 800d004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d008:	f000 f890 	bl	800d12c <_read_r>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	bfab      	itete	ge
 800d010:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d012:	89a3      	ldrhlt	r3, [r4, #12]
 800d014:	181b      	addge	r3, r3, r0
 800d016:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d01a:	bfac      	ite	ge
 800d01c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d01e:	81a3      	strhlt	r3, [r4, #12]
 800d020:	bd10      	pop	{r4, pc}

0800d022 <__swrite>:
 800d022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d026:	461f      	mov	r7, r3
 800d028:	898b      	ldrh	r3, [r1, #12]
 800d02a:	05db      	lsls	r3, r3, #23
 800d02c:	4605      	mov	r5, r0
 800d02e:	460c      	mov	r4, r1
 800d030:	4616      	mov	r6, r2
 800d032:	d505      	bpl.n	800d040 <__swrite+0x1e>
 800d034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d038:	2302      	movs	r3, #2
 800d03a:	2200      	movs	r2, #0
 800d03c:	f000 f864 	bl	800d108 <_lseek_r>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d04a:	81a3      	strh	r3, [r4, #12]
 800d04c:	4632      	mov	r2, r6
 800d04e:	463b      	mov	r3, r7
 800d050:	4628      	mov	r0, r5
 800d052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d056:	f000 b87b 	b.w	800d150 <_write_r>

0800d05a <__sseek>:
 800d05a:	b510      	push	{r4, lr}
 800d05c:	460c      	mov	r4, r1
 800d05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d062:	f000 f851 	bl	800d108 <_lseek_r>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	bf15      	itete	ne
 800d06c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d06e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d072:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d076:	81a3      	strheq	r3, [r4, #12]
 800d078:	bf18      	it	ne
 800d07a:	81a3      	strhne	r3, [r4, #12]
 800d07c:	bd10      	pop	{r4, pc}

0800d07e <__sclose>:
 800d07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d082:	f000 b831 	b.w	800d0e8 <_close_r>

0800d086 <memset>:
 800d086:	4402      	add	r2, r0
 800d088:	4603      	mov	r3, r0
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d100      	bne.n	800d090 <memset+0xa>
 800d08e:	4770      	bx	lr
 800d090:	f803 1b01 	strb.w	r1, [r3], #1
 800d094:	e7f9      	b.n	800d08a <memset+0x4>

0800d096 <strncmp>:
 800d096:	b510      	push	{r4, lr}
 800d098:	b16a      	cbz	r2, 800d0b6 <strncmp+0x20>
 800d09a:	3901      	subs	r1, #1
 800d09c:	1884      	adds	r4, r0, r2
 800d09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d103      	bne.n	800d0b2 <strncmp+0x1c>
 800d0aa:	42a0      	cmp	r0, r4
 800d0ac:	d001      	beq.n	800d0b2 <strncmp+0x1c>
 800d0ae:	2a00      	cmp	r2, #0
 800d0b0:	d1f5      	bne.n	800d09e <strncmp+0x8>
 800d0b2:	1ad0      	subs	r0, r2, r3
 800d0b4:	bd10      	pop	{r4, pc}
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	e7fc      	b.n	800d0b4 <strncmp+0x1e>

0800d0ba <strncpy>:
 800d0ba:	b510      	push	{r4, lr}
 800d0bc:	3901      	subs	r1, #1
 800d0be:	4603      	mov	r3, r0
 800d0c0:	b132      	cbz	r2, 800d0d0 <strncpy+0x16>
 800d0c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d0c6:	f803 4b01 	strb.w	r4, [r3], #1
 800d0ca:	3a01      	subs	r2, #1
 800d0cc:	2c00      	cmp	r4, #0
 800d0ce:	d1f7      	bne.n	800d0c0 <strncpy+0x6>
 800d0d0:	441a      	add	r2, r3
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d100      	bne.n	800d0da <strncpy+0x20>
 800d0d8:	bd10      	pop	{r4, pc}
 800d0da:	f803 1b01 	strb.w	r1, [r3], #1
 800d0de:	e7f9      	b.n	800d0d4 <strncpy+0x1a>

0800d0e0 <_localeconv_r>:
 800d0e0:	4800      	ldr	r0, [pc, #0]	@ (800d0e4 <_localeconv_r+0x4>)
 800d0e2:	4770      	bx	lr
 800d0e4:	200001f8 	.word	0x200001f8

0800d0e8 <_close_r>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	4d06      	ldr	r5, [pc, #24]	@ (800d104 <_close_r+0x1c>)
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	4608      	mov	r0, r1
 800d0f2:	602b      	str	r3, [r5, #0]
 800d0f4:	f7f5 f972 	bl	80023dc <_close>
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	d102      	bne.n	800d102 <_close_r+0x1a>
 800d0fc:	682b      	ldr	r3, [r5, #0]
 800d0fe:	b103      	cbz	r3, 800d102 <_close_r+0x1a>
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	2000262c 	.word	0x2000262c

0800d108 <_lseek_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4d07      	ldr	r5, [pc, #28]	@ (800d128 <_lseek_r+0x20>)
 800d10c:	4604      	mov	r4, r0
 800d10e:	4608      	mov	r0, r1
 800d110:	4611      	mov	r1, r2
 800d112:	2200      	movs	r2, #0
 800d114:	602a      	str	r2, [r5, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	f7f5 f987 	bl	800242a <_lseek>
 800d11c:	1c43      	adds	r3, r0, #1
 800d11e:	d102      	bne.n	800d126 <_lseek_r+0x1e>
 800d120:	682b      	ldr	r3, [r5, #0]
 800d122:	b103      	cbz	r3, 800d126 <_lseek_r+0x1e>
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	2000262c 	.word	0x2000262c

0800d12c <_read_r>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	4d07      	ldr	r5, [pc, #28]	@ (800d14c <_read_r+0x20>)
 800d130:	4604      	mov	r4, r0
 800d132:	4608      	mov	r0, r1
 800d134:	4611      	mov	r1, r2
 800d136:	2200      	movs	r2, #0
 800d138:	602a      	str	r2, [r5, #0]
 800d13a:	461a      	mov	r2, r3
 800d13c:	f7f5 f915 	bl	800236a <_read>
 800d140:	1c43      	adds	r3, r0, #1
 800d142:	d102      	bne.n	800d14a <_read_r+0x1e>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	b103      	cbz	r3, 800d14a <_read_r+0x1e>
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	2000262c 	.word	0x2000262c

0800d150 <_write_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d07      	ldr	r5, [pc, #28]	@ (800d170 <_write_r+0x20>)
 800d154:	4604      	mov	r4, r0
 800d156:	4608      	mov	r0, r1
 800d158:	4611      	mov	r1, r2
 800d15a:	2200      	movs	r2, #0
 800d15c:	602a      	str	r2, [r5, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	f7f5 f920 	bl	80023a4 <_write>
 800d164:	1c43      	adds	r3, r0, #1
 800d166:	d102      	bne.n	800d16e <_write_r+0x1e>
 800d168:	682b      	ldr	r3, [r5, #0]
 800d16a:	b103      	cbz	r3, 800d16e <_write_r+0x1e>
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	bd38      	pop	{r3, r4, r5, pc}
 800d170:	2000262c 	.word	0x2000262c

0800d174 <__errno>:
 800d174:	4b01      	ldr	r3, [pc, #4]	@ (800d17c <__errno+0x8>)
 800d176:	6818      	ldr	r0, [r3, #0]
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	20000274 	.word	0x20000274

0800d180 <__libc_init_array>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	4d0d      	ldr	r5, [pc, #52]	@ (800d1b8 <__libc_init_array+0x38>)
 800d184:	4c0d      	ldr	r4, [pc, #52]	@ (800d1bc <__libc_init_array+0x3c>)
 800d186:	1b64      	subs	r4, r4, r5
 800d188:	10a4      	asrs	r4, r4, #2
 800d18a:	2600      	movs	r6, #0
 800d18c:	42a6      	cmp	r6, r4
 800d18e:	d109      	bne.n	800d1a4 <__libc_init_array+0x24>
 800d190:	4d0b      	ldr	r5, [pc, #44]	@ (800d1c0 <__libc_init_array+0x40>)
 800d192:	4c0c      	ldr	r4, [pc, #48]	@ (800d1c4 <__libc_init_array+0x44>)
 800d194:	f002 fd5a 	bl	800fc4c <_init>
 800d198:	1b64      	subs	r4, r4, r5
 800d19a:	10a4      	asrs	r4, r4, #2
 800d19c:	2600      	movs	r6, #0
 800d19e:	42a6      	cmp	r6, r4
 800d1a0:	d105      	bne.n	800d1ae <__libc_init_array+0x2e>
 800d1a2:	bd70      	pop	{r4, r5, r6, pc}
 800d1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1a8:	4798      	blx	r3
 800d1aa:	3601      	adds	r6, #1
 800d1ac:	e7ee      	b.n	800d18c <__libc_init_array+0xc>
 800d1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1b2:	4798      	blx	r3
 800d1b4:	3601      	adds	r6, #1
 800d1b6:	e7f2      	b.n	800d19e <__libc_init_array+0x1e>
 800d1b8:	08010108 	.word	0x08010108
 800d1bc:	08010108 	.word	0x08010108
 800d1c0:	08010108 	.word	0x08010108
 800d1c4:	0801010c 	.word	0x0801010c

0800d1c8 <__retarget_lock_init_recursive>:
 800d1c8:	4770      	bx	lr

0800d1ca <__retarget_lock_acquire_recursive>:
 800d1ca:	4770      	bx	lr

0800d1cc <__retarget_lock_release_recursive>:
 800d1cc:	4770      	bx	lr

0800d1ce <memcpy>:
 800d1ce:	440a      	add	r2, r1
 800d1d0:	4291      	cmp	r1, r2
 800d1d2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1d6:	d100      	bne.n	800d1da <memcpy+0xc>
 800d1d8:	4770      	bx	lr
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1e4:	4291      	cmp	r1, r2
 800d1e6:	d1f9      	bne.n	800d1dc <memcpy+0xe>
 800d1e8:	bd10      	pop	{r4, pc}
 800d1ea:	0000      	movs	r0, r0
 800d1ec:	0000      	movs	r0, r0
	...

0800d1f0 <nan>:
 800d1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d1f8 <nan+0x8>
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	00000000 	.word	0x00000000
 800d1fc:	7ff80000 	.word	0x7ff80000

0800d200 <nanf>:
 800d200:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d208 <nanf+0x8>
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	7fc00000 	.word	0x7fc00000

0800d20c <quorem>:
 800d20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d210:	6903      	ldr	r3, [r0, #16]
 800d212:	690c      	ldr	r4, [r1, #16]
 800d214:	42a3      	cmp	r3, r4
 800d216:	4607      	mov	r7, r0
 800d218:	db7e      	blt.n	800d318 <quorem+0x10c>
 800d21a:	3c01      	subs	r4, #1
 800d21c:	f101 0814 	add.w	r8, r1, #20
 800d220:	00a3      	lsls	r3, r4, #2
 800d222:	f100 0514 	add.w	r5, r0, #20
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d22c:	9301      	str	r3, [sp, #4]
 800d22e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d236:	3301      	adds	r3, #1
 800d238:	429a      	cmp	r2, r3
 800d23a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d23e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d242:	d32e      	bcc.n	800d2a2 <quorem+0x96>
 800d244:	f04f 0a00 	mov.w	sl, #0
 800d248:	46c4      	mov	ip, r8
 800d24a:	46ae      	mov	lr, r5
 800d24c:	46d3      	mov	fp, sl
 800d24e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d252:	b298      	uxth	r0, r3
 800d254:	fb06 a000 	mla	r0, r6, r0, sl
 800d258:	0c02      	lsrs	r2, r0, #16
 800d25a:	0c1b      	lsrs	r3, r3, #16
 800d25c:	fb06 2303 	mla	r3, r6, r3, r2
 800d260:	f8de 2000 	ldr.w	r2, [lr]
 800d264:	b280      	uxth	r0, r0
 800d266:	b292      	uxth	r2, r2
 800d268:	1a12      	subs	r2, r2, r0
 800d26a:	445a      	add	r2, fp
 800d26c:	f8de 0000 	ldr.w	r0, [lr]
 800d270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d274:	b29b      	uxth	r3, r3
 800d276:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d27a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d27e:	b292      	uxth	r2, r2
 800d280:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d284:	45e1      	cmp	r9, ip
 800d286:	f84e 2b04 	str.w	r2, [lr], #4
 800d28a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d28e:	d2de      	bcs.n	800d24e <quorem+0x42>
 800d290:	9b00      	ldr	r3, [sp, #0]
 800d292:	58eb      	ldr	r3, [r5, r3]
 800d294:	b92b      	cbnz	r3, 800d2a2 <quorem+0x96>
 800d296:	9b01      	ldr	r3, [sp, #4]
 800d298:	3b04      	subs	r3, #4
 800d29a:	429d      	cmp	r5, r3
 800d29c:	461a      	mov	r2, r3
 800d29e:	d32f      	bcc.n	800d300 <quorem+0xf4>
 800d2a0:	613c      	str	r4, [r7, #16]
 800d2a2:	4638      	mov	r0, r7
 800d2a4:	f001 fd10 	bl	800ecc8 <__mcmp>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	db25      	blt.n	800d2f8 <quorem+0xec>
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d2b4:	f8d1 c000 	ldr.w	ip, [r1]
 800d2b8:	fa1f fe82 	uxth.w	lr, r2
 800d2bc:	fa1f f38c 	uxth.w	r3, ip
 800d2c0:	eba3 030e 	sub.w	r3, r3, lr
 800d2c4:	4403      	add	r3, r0
 800d2c6:	0c12      	lsrs	r2, r2, #16
 800d2c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d2cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2d6:	45c1      	cmp	r9, r8
 800d2d8:	f841 3b04 	str.w	r3, [r1], #4
 800d2dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d2e0:	d2e6      	bcs.n	800d2b0 <quorem+0xa4>
 800d2e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2ea:	b922      	cbnz	r2, 800d2f6 <quorem+0xea>
 800d2ec:	3b04      	subs	r3, #4
 800d2ee:	429d      	cmp	r5, r3
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	d30b      	bcc.n	800d30c <quorem+0x100>
 800d2f4:	613c      	str	r4, [r7, #16]
 800d2f6:	3601      	adds	r6, #1
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	b003      	add	sp, #12
 800d2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d300:	6812      	ldr	r2, [r2, #0]
 800d302:	3b04      	subs	r3, #4
 800d304:	2a00      	cmp	r2, #0
 800d306:	d1cb      	bne.n	800d2a0 <quorem+0x94>
 800d308:	3c01      	subs	r4, #1
 800d30a:	e7c6      	b.n	800d29a <quorem+0x8e>
 800d30c:	6812      	ldr	r2, [r2, #0]
 800d30e:	3b04      	subs	r3, #4
 800d310:	2a00      	cmp	r2, #0
 800d312:	d1ef      	bne.n	800d2f4 <quorem+0xe8>
 800d314:	3c01      	subs	r4, #1
 800d316:	e7ea      	b.n	800d2ee <quorem+0xe2>
 800d318:	2000      	movs	r0, #0
 800d31a:	e7ee      	b.n	800d2fa <quorem+0xee>
 800d31c:	0000      	movs	r0, r0
	...

0800d320 <_dtoa_r>:
 800d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	69c7      	ldr	r7, [r0, #28]
 800d326:	b099      	sub	sp, #100	@ 0x64
 800d328:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d32c:	ec55 4b10 	vmov	r4, r5, d0
 800d330:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d332:	9109      	str	r1, [sp, #36]	@ 0x24
 800d334:	4683      	mov	fp, r0
 800d336:	920e      	str	r2, [sp, #56]	@ 0x38
 800d338:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d33a:	b97f      	cbnz	r7, 800d35c <_dtoa_r+0x3c>
 800d33c:	2010      	movs	r0, #16
 800d33e:	f001 f937 	bl	800e5b0 <malloc>
 800d342:	4602      	mov	r2, r0
 800d344:	f8cb 001c 	str.w	r0, [fp, #28]
 800d348:	b920      	cbnz	r0, 800d354 <_dtoa_r+0x34>
 800d34a:	4ba7      	ldr	r3, [pc, #668]	@ (800d5e8 <_dtoa_r+0x2c8>)
 800d34c:	21ef      	movs	r1, #239	@ 0xef
 800d34e:	48a7      	ldr	r0, [pc, #668]	@ (800d5ec <_dtoa_r+0x2cc>)
 800d350:	f002 f95e 	bl	800f610 <__assert_func>
 800d354:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d358:	6007      	str	r7, [r0, #0]
 800d35a:	60c7      	str	r7, [r0, #12]
 800d35c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d360:	6819      	ldr	r1, [r3, #0]
 800d362:	b159      	cbz	r1, 800d37c <_dtoa_r+0x5c>
 800d364:	685a      	ldr	r2, [r3, #4]
 800d366:	604a      	str	r2, [r1, #4]
 800d368:	2301      	movs	r3, #1
 800d36a:	4093      	lsls	r3, r2
 800d36c:	608b      	str	r3, [r1, #8]
 800d36e:	4658      	mov	r0, fp
 800d370:	f001 fa26 	bl	800e7c0 <_Bfree>
 800d374:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d378:	2200      	movs	r2, #0
 800d37a:	601a      	str	r2, [r3, #0]
 800d37c:	1e2b      	subs	r3, r5, #0
 800d37e:	bfb9      	ittee	lt
 800d380:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d384:	9303      	strlt	r3, [sp, #12]
 800d386:	2300      	movge	r3, #0
 800d388:	6033      	strge	r3, [r6, #0]
 800d38a:	9f03      	ldr	r7, [sp, #12]
 800d38c:	4b98      	ldr	r3, [pc, #608]	@ (800d5f0 <_dtoa_r+0x2d0>)
 800d38e:	bfbc      	itt	lt
 800d390:	2201      	movlt	r2, #1
 800d392:	6032      	strlt	r2, [r6, #0]
 800d394:	43bb      	bics	r3, r7
 800d396:	d112      	bne.n	800d3be <_dtoa_r+0x9e>
 800d398:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d39a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d39e:	6013      	str	r3, [r2, #0]
 800d3a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d3a4:	4323      	orrs	r3, r4
 800d3a6:	f000 854d 	beq.w	800de44 <_dtoa_r+0xb24>
 800d3aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d604 <_dtoa_r+0x2e4>
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 854f 	beq.w	800de54 <_dtoa_r+0xb34>
 800d3b6:	f10a 0303 	add.w	r3, sl, #3
 800d3ba:	f000 bd49 	b.w	800de50 <_dtoa_r+0xb30>
 800d3be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	ec51 0b17 	vmov	r0, r1, d7
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d3ce:	f7f3 fb83 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3d2:	4680      	mov	r8, r0
 800d3d4:	b158      	cbz	r0, 800d3ee <_dtoa_r+0xce>
 800d3d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d3d8:	2301      	movs	r3, #1
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3de:	b113      	cbz	r3, 800d3e6 <_dtoa_r+0xc6>
 800d3e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d3e2:	4b84      	ldr	r3, [pc, #528]	@ (800d5f4 <_dtoa_r+0x2d4>)
 800d3e4:	6013      	str	r3, [r2, #0]
 800d3e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d608 <_dtoa_r+0x2e8>
 800d3ea:	f000 bd33 	b.w	800de54 <_dtoa_r+0xb34>
 800d3ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d3f2:	aa16      	add	r2, sp, #88	@ 0x58
 800d3f4:	a917      	add	r1, sp, #92	@ 0x5c
 800d3f6:	4658      	mov	r0, fp
 800d3f8:	f001 fd86 	bl	800ef08 <__d2b>
 800d3fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d400:	4681      	mov	r9, r0
 800d402:	2e00      	cmp	r6, #0
 800d404:	d077      	beq.n	800d4f6 <_dtoa_r+0x1d6>
 800d406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d408:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d40c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d414:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d418:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d41c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d420:	4619      	mov	r1, r3
 800d422:	2200      	movs	r2, #0
 800d424:	4b74      	ldr	r3, [pc, #464]	@ (800d5f8 <_dtoa_r+0x2d8>)
 800d426:	f7f2 ff37 	bl	8000298 <__aeabi_dsub>
 800d42a:	a369      	add	r3, pc, #420	@ (adr r3, 800d5d0 <_dtoa_r+0x2b0>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	f7f3 f8ea 	bl	8000608 <__aeabi_dmul>
 800d434:	a368      	add	r3, pc, #416	@ (adr r3, 800d5d8 <_dtoa_r+0x2b8>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	f7f2 ff2f 	bl	800029c <__adddf3>
 800d43e:	4604      	mov	r4, r0
 800d440:	4630      	mov	r0, r6
 800d442:	460d      	mov	r5, r1
 800d444:	f7f3 f876 	bl	8000534 <__aeabi_i2d>
 800d448:	a365      	add	r3, pc, #404	@ (adr r3, 800d5e0 <_dtoa_r+0x2c0>)
 800d44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44e:	f7f3 f8db 	bl	8000608 <__aeabi_dmul>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4620      	mov	r0, r4
 800d458:	4629      	mov	r1, r5
 800d45a:	f7f2 ff1f 	bl	800029c <__adddf3>
 800d45e:	4604      	mov	r4, r0
 800d460:	460d      	mov	r5, r1
 800d462:	f7f3 fb81 	bl	8000b68 <__aeabi_d2iz>
 800d466:	2200      	movs	r2, #0
 800d468:	4607      	mov	r7, r0
 800d46a:	2300      	movs	r3, #0
 800d46c:	4620      	mov	r0, r4
 800d46e:	4629      	mov	r1, r5
 800d470:	f7f3 fb3c 	bl	8000aec <__aeabi_dcmplt>
 800d474:	b140      	cbz	r0, 800d488 <_dtoa_r+0x168>
 800d476:	4638      	mov	r0, r7
 800d478:	f7f3 f85c 	bl	8000534 <__aeabi_i2d>
 800d47c:	4622      	mov	r2, r4
 800d47e:	462b      	mov	r3, r5
 800d480:	f7f3 fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d484:	b900      	cbnz	r0, 800d488 <_dtoa_r+0x168>
 800d486:	3f01      	subs	r7, #1
 800d488:	2f16      	cmp	r7, #22
 800d48a:	d851      	bhi.n	800d530 <_dtoa_r+0x210>
 800d48c:	4b5b      	ldr	r3, [pc, #364]	@ (800d5fc <_dtoa_r+0x2dc>)
 800d48e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d49a:	f7f3 fb27 	bl	8000aec <__aeabi_dcmplt>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d048      	beq.n	800d534 <_dtoa_r+0x214>
 800d4a2:	3f01      	subs	r7, #1
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d4a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4aa:	1b9b      	subs	r3, r3, r6
 800d4ac:	1e5a      	subs	r2, r3, #1
 800d4ae:	bf44      	itt	mi
 800d4b0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d4b4:	2300      	movmi	r3, #0
 800d4b6:	9208      	str	r2, [sp, #32]
 800d4b8:	bf54      	ite	pl
 800d4ba:	f04f 0800 	movpl.w	r8, #0
 800d4be:	9308      	strmi	r3, [sp, #32]
 800d4c0:	2f00      	cmp	r7, #0
 800d4c2:	db39      	blt.n	800d538 <_dtoa_r+0x218>
 800d4c4:	9b08      	ldr	r3, [sp, #32]
 800d4c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d4c8:	443b      	add	r3, r7
 800d4ca:	9308      	str	r3, [sp, #32]
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d2:	2b09      	cmp	r3, #9
 800d4d4:	d864      	bhi.n	800d5a0 <_dtoa_r+0x280>
 800d4d6:	2b05      	cmp	r3, #5
 800d4d8:	bfc4      	itt	gt
 800d4da:	3b04      	subgt	r3, #4
 800d4dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e0:	f1a3 0302 	sub.w	r3, r3, #2
 800d4e4:	bfcc      	ite	gt
 800d4e6:	2400      	movgt	r4, #0
 800d4e8:	2401      	movle	r4, #1
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	d863      	bhi.n	800d5b6 <_dtoa_r+0x296>
 800d4ee:	e8df f003 	tbb	[pc, r3]
 800d4f2:	372a      	.short	0x372a
 800d4f4:	5535      	.short	0x5535
 800d4f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d4fa:	441e      	add	r6, r3
 800d4fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d500:	2b20      	cmp	r3, #32
 800d502:	bfc1      	itttt	gt
 800d504:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d508:	409f      	lslgt	r7, r3
 800d50a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d50e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d512:	bfd6      	itet	le
 800d514:	f1c3 0320 	rsble	r3, r3, #32
 800d518:	ea47 0003 	orrgt.w	r0, r7, r3
 800d51c:	fa04 f003 	lslle.w	r0, r4, r3
 800d520:	f7f2 fff8 	bl	8000514 <__aeabi_ui2d>
 800d524:	2201      	movs	r2, #1
 800d526:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d52a:	3e01      	subs	r6, #1
 800d52c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d52e:	e777      	b.n	800d420 <_dtoa_r+0x100>
 800d530:	2301      	movs	r3, #1
 800d532:	e7b8      	b.n	800d4a6 <_dtoa_r+0x186>
 800d534:	9012      	str	r0, [sp, #72]	@ 0x48
 800d536:	e7b7      	b.n	800d4a8 <_dtoa_r+0x188>
 800d538:	427b      	negs	r3, r7
 800d53a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d53c:	2300      	movs	r3, #0
 800d53e:	eba8 0807 	sub.w	r8, r8, r7
 800d542:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d544:	e7c4      	b.n	800d4d0 <_dtoa_r+0x1b0>
 800d546:	2300      	movs	r3, #0
 800d548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d54a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	dc35      	bgt.n	800d5bc <_dtoa_r+0x29c>
 800d550:	2301      	movs	r3, #1
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	9307      	str	r3, [sp, #28]
 800d556:	461a      	mov	r2, r3
 800d558:	920e      	str	r2, [sp, #56]	@ 0x38
 800d55a:	e00b      	b.n	800d574 <_dtoa_r+0x254>
 800d55c:	2301      	movs	r3, #1
 800d55e:	e7f3      	b.n	800d548 <_dtoa_r+0x228>
 800d560:	2300      	movs	r3, #0
 800d562:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d566:	18fb      	adds	r3, r7, r3
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	3301      	adds	r3, #1
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	9307      	str	r3, [sp, #28]
 800d570:	bfb8      	it	lt
 800d572:	2301      	movlt	r3, #1
 800d574:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d578:	2100      	movs	r1, #0
 800d57a:	2204      	movs	r2, #4
 800d57c:	f102 0514 	add.w	r5, r2, #20
 800d580:	429d      	cmp	r5, r3
 800d582:	d91f      	bls.n	800d5c4 <_dtoa_r+0x2a4>
 800d584:	6041      	str	r1, [r0, #4]
 800d586:	4658      	mov	r0, fp
 800d588:	f001 f8da 	bl	800e740 <_Balloc>
 800d58c:	4682      	mov	sl, r0
 800d58e:	2800      	cmp	r0, #0
 800d590:	d13c      	bne.n	800d60c <_dtoa_r+0x2ec>
 800d592:	4b1b      	ldr	r3, [pc, #108]	@ (800d600 <_dtoa_r+0x2e0>)
 800d594:	4602      	mov	r2, r0
 800d596:	f240 11af 	movw	r1, #431	@ 0x1af
 800d59a:	e6d8      	b.n	800d34e <_dtoa_r+0x2e>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e7e0      	b.n	800d562 <_dtoa_r+0x242>
 800d5a0:	2401      	movs	r4, #1
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d5a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	9307      	str	r3, [sp, #28]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2312      	movs	r3, #18
 800d5b4:	e7d0      	b.n	800d558 <_dtoa_r+0x238>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5ba:	e7f5      	b.n	800d5a8 <_dtoa_r+0x288>
 800d5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	9307      	str	r3, [sp, #28]
 800d5c2:	e7d7      	b.n	800d574 <_dtoa_r+0x254>
 800d5c4:	3101      	adds	r1, #1
 800d5c6:	0052      	lsls	r2, r2, #1
 800d5c8:	e7d8      	b.n	800d57c <_dtoa_r+0x25c>
 800d5ca:	bf00      	nop
 800d5cc:	f3af 8000 	nop.w
 800d5d0:	636f4361 	.word	0x636f4361
 800d5d4:	3fd287a7 	.word	0x3fd287a7
 800d5d8:	8b60c8b3 	.word	0x8b60c8b3
 800d5dc:	3fc68a28 	.word	0x3fc68a28
 800d5e0:	509f79fb 	.word	0x509f79fb
 800d5e4:	3fd34413 	.word	0x3fd34413
 800d5e8:	0800fd76 	.word	0x0800fd76
 800d5ec:	0800fd8d 	.word	0x0800fd8d
 800d5f0:	7ff00000 	.word	0x7ff00000
 800d5f4:	0800fd39 	.word	0x0800fd39
 800d5f8:	3ff80000 	.word	0x3ff80000
 800d5fc:	0800fee8 	.word	0x0800fee8
 800d600:	0800fde5 	.word	0x0800fde5
 800d604:	0800fd72 	.word	0x0800fd72
 800d608:	0800fd38 	.word	0x0800fd38
 800d60c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d610:	6018      	str	r0, [r3, #0]
 800d612:	9b07      	ldr	r3, [sp, #28]
 800d614:	2b0e      	cmp	r3, #14
 800d616:	f200 80a4 	bhi.w	800d762 <_dtoa_r+0x442>
 800d61a:	2c00      	cmp	r4, #0
 800d61c:	f000 80a1 	beq.w	800d762 <_dtoa_r+0x442>
 800d620:	2f00      	cmp	r7, #0
 800d622:	dd33      	ble.n	800d68c <_dtoa_r+0x36c>
 800d624:	4bad      	ldr	r3, [pc, #692]	@ (800d8dc <_dtoa_r+0x5bc>)
 800d626:	f007 020f 	and.w	r2, r7, #15
 800d62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d62e:	ed93 7b00 	vldr	d7, [r3]
 800d632:	05f8      	lsls	r0, r7, #23
 800d634:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d638:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d63c:	d516      	bpl.n	800d66c <_dtoa_r+0x34c>
 800d63e:	4ba8      	ldr	r3, [pc, #672]	@ (800d8e0 <_dtoa_r+0x5c0>)
 800d640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d648:	f7f3 f908 	bl	800085c <__aeabi_ddiv>
 800d64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d650:	f004 040f 	and.w	r4, r4, #15
 800d654:	2603      	movs	r6, #3
 800d656:	4da2      	ldr	r5, [pc, #648]	@ (800d8e0 <_dtoa_r+0x5c0>)
 800d658:	b954      	cbnz	r4, 800d670 <_dtoa_r+0x350>
 800d65a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d662:	f7f3 f8fb 	bl	800085c <__aeabi_ddiv>
 800d666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d66a:	e028      	b.n	800d6be <_dtoa_r+0x39e>
 800d66c:	2602      	movs	r6, #2
 800d66e:	e7f2      	b.n	800d656 <_dtoa_r+0x336>
 800d670:	07e1      	lsls	r1, r4, #31
 800d672:	d508      	bpl.n	800d686 <_dtoa_r+0x366>
 800d674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d678:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d67c:	f7f2 ffc4 	bl	8000608 <__aeabi_dmul>
 800d680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d684:	3601      	adds	r6, #1
 800d686:	1064      	asrs	r4, r4, #1
 800d688:	3508      	adds	r5, #8
 800d68a:	e7e5      	b.n	800d658 <_dtoa_r+0x338>
 800d68c:	f000 80d2 	beq.w	800d834 <_dtoa_r+0x514>
 800d690:	427c      	negs	r4, r7
 800d692:	4b92      	ldr	r3, [pc, #584]	@ (800d8dc <_dtoa_r+0x5bc>)
 800d694:	4d92      	ldr	r5, [pc, #584]	@ (800d8e0 <_dtoa_r+0x5c0>)
 800d696:	f004 020f 	and.w	r2, r4, #15
 800d69a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6a6:	f7f2 ffaf 	bl	8000608 <__aeabi_dmul>
 800d6aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6ae:	1124      	asrs	r4, r4, #4
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	2602      	movs	r6, #2
 800d6b4:	2c00      	cmp	r4, #0
 800d6b6:	f040 80b2 	bne.w	800d81e <_dtoa_r+0x4fe>
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1d3      	bne.n	800d666 <_dtoa_r+0x346>
 800d6be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	f000 80b7 	beq.w	800d838 <_dtoa_r+0x518>
 800d6ca:	4b86      	ldr	r3, [pc, #536]	@ (800d8e4 <_dtoa_r+0x5c4>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	f7f3 fa0b 	bl	8000aec <__aeabi_dcmplt>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	f000 80ae 	beq.w	800d838 <_dtoa_r+0x518>
 800d6dc:	9b07      	ldr	r3, [sp, #28]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 80aa 	beq.w	800d838 <_dtoa_r+0x518>
 800d6e4:	9b00      	ldr	r3, [sp, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	dd37      	ble.n	800d75a <_dtoa_r+0x43a>
 800d6ea:	1e7b      	subs	r3, r7, #1
 800d6ec:	9304      	str	r3, [sp, #16]
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4b7d      	ldr	r3, [pc, #500]	@ (800d8e8 <_dtoa_r+0x5c8>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	4629      	mov	r1, r5
 800d6f6:	f7f2 ff87 	bl	8000608 <__aeabi_dmul>
 800d6fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6fe:	9c00      	ldr	r4, [sp, #0]
 800d700:	3601      	adds	r6, #1
 800d702:	4630      	mov	r0, r6
 800d704:	f7f2 ff16 	bl	8000534 <__aeabi_i2d>
 800d708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d70c:	f7f2 ff7c 	bl	8000608 <__aeabi_dmul>
 800d710:	4b76      	ldr	r3, [pc, #472]	@ (800d8ec <_dtoa_r+0x5cc>)
 800d712:	2200      	movs	r2, #0
 800d714:	f7f2 fdc2 	bl	800029c <__adddf3>
 800d718:	4605      	mov	r5, r0
 800d71a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d71e:	2c00      	cmp	r4, #0
 800d720:	f040 808d 	bne.w	800d83e <_dtoa_r+0x51e>
 800d724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d728:	4b71      	ldr	r3, [pc, #452]	@ (800d8f0 <_dtoa_r+0x5d0>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	f7f2 fdb4 	bl	8000298 <__aeabi_dsub>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d738:	462a      	mov	r2, r5
 800d73a:	4633      	mov	r3, r6
 800d73c:	f7f3 f9f4 	bl	8000b28 <__aeabi_dcmpgt>
 800d740:	2800      	cmp	r0, #0
 800d742:	f040 828b 	bne.w	800dc5c <_dtoa_r+0x93c>
 800d746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d74a:	462a      	mov	r2, r5
 800d74c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d750:	f7f3 f9cc 	bl	8000aec <__aeabi_dcmplt>
 800d754:	2800      	cmp	r0, #0
 800d756:	f040 8128 	bne.w	800d9aa <_dtoa_r+0x68a>
 800d75a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d75e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d762:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d764:	2b00      	cmp	r3, #0
 800d766:	f2c0 815a 	blt.w	800da1e <_dtoa_r+0x6fe>
 800d76a:	2f0e      	cmp	r7, #14
 800d76c:	f300 8157 	bgt.w	800da1e <_dtoa_r+0x6fe>
 800d770:	4b5a      	ldr	r3, [pc, #360]	@ (800d8dc <_dtoa_r+0x5bc>)
 800d772:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d776:	ed93 7b00 	vldr	d7, [r3]
 800d77a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	ed8d 7b00 	vstr	d7, [sp]
 800d782:	da03      	bge.n	800d78c <_dtoa_r+0x46c>
 800d784:	9b07      	ldr	r3, [sp, #28]
 800d786:	2b00      	cmp	r3, #0
 800d788:	f340 8101 	ble.w	800d98e <_dtoa_r+0x66e>
 800d78c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d790:	4656      	mov	r6, sl
 800d792:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d796:	4620      	mov	r0, r4
 800d798:	4629      	mov	r1, r5
 800d79a:	f7f3 f85f 	bl	800085c <__aeabi_ddiv>
 800d79e:	f7f3 f9e3 	bl	8000b68 <__aeabi_d2iz>
 800d7a2:	4680      	mov	r8, r0
 800d7a4:	f7f2 fec6 	bl	8000534 <__aeabi_i2d>
 800d7a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ac:	f7f2 ff2c 	bl	8000608 <__aeabi_dmul>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d7bc:	f7f2 fd6c 	bl	8000298 <__aeabi_dsub>
 800d7c0:	f806 4b01 	strb.w	r4, [r6], #1
 800d7c4:	9d07      	ldr	r5, [sp, #28]
 800d7c6:	eba6 040a 	sub.w	r4, r6, sl
 800d7ca:	42a5      	cmp	r5, r4
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	f040 8117 	bne.w	800da02 <_dtoa_r+0x6e2>
 800d7d4:	f7f2 fd62 	bl	800029c <__adddf3>
 800d7d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7dc:	4604      	mov	r4, r0
 800d7de:	460d      	mov	r5, r1
 800d7e0:	f7f3 f9a2 	bl	8000b28 <__aeabi_dcmpgt>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	f040 80f9 	bne.w	800d9dc <_dtoa_r+0x6bc>
 800d7ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	f7f3 f971 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7f6:	b118      	cbz	r0, 800d800 <_dtoa_r+0x4e0>
 800d7f8:	f018 0f01 	tst.w	r8, #1
 800d7fc:	f040 80ee 	bne.w	800d9dc <_dtoa_r+0x6bc>
 800d800:	4649      	mov	r1, r9
 800d802:	4658      	mov	r0, fp
 800d804:	f000 ffdc 	bl	800e7c0 <_Bfree>
 800d808:	2300      	movs	r3, #0
 800d80a:	7033      	strb	r3, [r6, #0]
 800d80c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d80e:	3701      	adds	r7, #1
 800d810:	601f      	str	r7, [r3, #0]
 800d812:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 831d 	beq.w	800de54 <_dtoa_r+0xb34>
 800d81a:	601e      	str	r6, [r3, #0]
 800d81c:	e31a      	b.n	800de54 <_dtoa_r+0xb34>
 800d81e:	07e2      	lsls	r2, r4, #31
 800d820:	d505      	bpl.n	800d82e <_dtoa_r+0x50e>
 800d822:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d826:	f7f2 feef 	bl	8000608 <__aeabi_dmul>
 800d82a:	3601      	adds	r6, #1
 800d82c:	2301      	movs	r3, #1
 800d82e:	1064      	asrs	r4, r4, #1
 800d830:	3508      	adds	r5, #8
 800d832:	e73f      	b.n	800d6b4 <_dtoa_r+0x394>
 800d834:	2602      	movs	r6, #2
 800d836:	e742      	b.n	800d6be <_dtoa_r+0x39e>
 800d838:	9c07      	ldr	r4, [sp, #28]
 800d83a:	9704      	str	r7, [sp, #16]
 800d83c:	e761      	b.n	800d702 <_dtoa_r+0x3e2>
 800d83e:	4b27      	ldr	r3, [pc, #156]	@ (800d8dc <_dtoa_r+0x5bc>)
 800d840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d842:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d846:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d84a:	4454      	add	r4, sl
 800d84c:	2900      	cmp	r1, #0
 800d84e:	d053      	beq.n	800d8f8 <_dtoa_r+0x5d8>
 800d850:	4928      	ldr	r1, [pc, #160]	@ (800d8f4 <_dtoa_r+0x5d4>)
 800d852:	2000      	movs	r0, #0
 800d854:	f7f3 f802 	bl	800085c <__aeabi_ddiv>
 800d858:	4633      	mov	r3, r6
 800d85a:	462a      	mov	r2, r5
 800d85c:	f7f2 fd1c 	bl	8000298 <__aeabi_dsub>
 800d860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d864:	4656      	mov	r6, sl
 800d866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d86a:	f7f3 f97d 	bl	8000b68 <__aeabi_d2iz>
 800d86e:	4605      	mov	r5, r0
 800d870:	f7f2 fe60 	bl	8000534 <__aeabi_i2d>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d87c:	f7f2 fd0c 	bl	8000298 <__aeabi_dsub>
 800d880:	3530      	adds	r5, #48	@ 0x30
 800d882:	4602      	mov	r2, r0
 800d884:	460b      	mov	r3, r1
 800d886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d88a:	f806 5b01 	strb.w	r5, [r6], #1
 800d88e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d892:	f7f3 f92b 	bl	8000aec <__aeabi_dcmplt>
 800d896:	2800      	cmp	r0, #0
 800d898:	d171      	bne.n	800d97e <_dtoa_r+0x65e>
 800d89a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d89e:	4911      	ldr	r1, [pc, #68]	@ (800d8e4 <_dtoa_r+0x5c4>)
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	f7f2 fcf9 	bl	8000298 <__aeabi_dsub>
 800d8a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8aa:	f7f3 f91f 	bl	8000aec <__aeabi_dcmplt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f040 8095 	bne.w	800d9de <_dtoa_r+0x6be>
 800d8b4:	42a6      	cmp	r6, r4
 800d8b6:	f43f af50 	beq.w	800d75a <_dtoa_r+0x43a>
 800d8ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d8be:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e8 <_dtoa_r+0x5c8>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f7f2 fea1 	bl	8000608 <__aeabi_dmul>
 800d8c6:	4b08      	ldr	r3, [pc, #32]	@ (800d8e8 <_dtoa_r+0x5c8>)
 800d8c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8d2:	f7f2 fe99 	bl	8000608 <__aeabi_dmul>
 800d8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8da:	e7c4      	b.n	800d866 <_dtoa_r+0x546>
 800d8dc:	0800fee8 	.word	0x0800fee8
 800d8e0:	0800fec0 	.word	0x0800fec0
 800d8e4:	3ff00000 	.word	0x3ff00000
 800d8e8:	40240000 	.word	0x40240000
 800d8ec:	401c0000 	.word	0x401c0000
 800d8f0:	40140000 	.word	0x40140000
 800d8f4:	3fe00000 	.word	0x3fe00000
 800d8f8:	4631      	mov	r1, r6
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f7f2 fe84 	bl	8000608 <__aeabi_dmul>
 800d900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d904:	9415      	str	r4, [sp, #84]	@ 0x54
 800d906:	4656      	mov	r6, sl
 800d908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d90c:	f7f3 f92c 	bl	8000b68 <__aeabi_d2iz>
 800d910:	4605      	mov	r5, r0
 800d912:	f7f2 fe0f 	bl	8000534 <__aeabi_i2d>
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d91e:	f7f2 fcbb 	bl	8000298 <__aeabi_dsub>
 800d922:	3530      	adds	r5, #48	@ 0x30
 800d924:	f806 5b01 	strb.w	r5, [r6], #1
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	42a6      	cmp	r6, r4
 800d92e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d932:	f04f 0200 	mov.w	r2, #0
 800d936:	d124      	bne.n	800d982 <_dtoa_r+0x662>
 800d938:	4bac      	ldr	r3, [pc, #688]	@ (800dbec <_dtoa_r+0x8cc>)
 800d93a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d93e:	f7f2 fcad 	bl	800029c <__adddf3>
 800d942:	4602      	mov	r2, r0
 800d944:	460b      	mov	r3, r1
 800d946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d94a:	f7f3 f8ed 	bl	8000b28 <__aeabi_dcmpgt>
 800d94e:	2800      	cmp	r0, #0
 800d950:	d145      	bne.n	800d9de <_dtoa_r+0x6be>
 800d952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d956:	49a5      	ldr	r1, [pc, #660]	@ (800dbec <_dtoa_r+0x8cc>)
 800d958:	2000      	movs	r0, #0
 800d95a:	f7f2 fc9d 	bl	8000298 <__aeabi_dsub>
 800d95e:	4602      	mov	r2, r0
 800d960:	460b      	mov	r3, r1
 800d962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d966:	f7f3 f8c1 	bl	8000aec <__aeabi_dcmplt>
 800d96a:	2800      	cmp	r0, #0
 800d96c:	f43f aef5 	beq.w	800d75a <_dtoa_r+0x43a>
 800d970:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d972:	1e73      	subs	r3, r6, #1
 800d974:	9315      	str	r3, [sp, #84]	@ 0x54
 800d976:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d97a:	2b30      	cmp	r3, #48	@ 0x30
 800d97c:	d0f8      	beq.n	800d970 <_dtoa_r+0x650>
 800d97e:	9f04      	ldr	r7, [sp, #16]
 800d980:	e73e      	b.n	800d800 <_dtoa_r+0x4e0>
 800d982:	4b9b      	ldr	r3, [pc, #620]	@ (800dbf0 <_dtoa_r+0x8d0>)
 800d984:	f7f2 fe40 	bl	8000608 <__aeabi_dmul>
 800d988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d98c:	e7bc      	b.n	800d908 <_dtoa_r+0x5e8>
 800d98e:	d10c      	bne.n	800d9aa <_dtoa_r+0x68a>
 800d990:	4b98      	ldr	r3, [pc, #608]	@ (800dbf4 <_dtoa_r+0x8d4>)
 800d992:	2200      	movs	r2, #0
 800d994:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d998:	f7f2 fe36 	bl	8000608 <__aeabi_dmul>
 800d99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9a0:	f7f3 f8b8 	bl	8000b14 <__aeabi_dcmpge>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	f000 8157 	beq.w	800dc58 <_dtoa_r+0x938>
 800d9aa:	2400      	movs	r4, #0
 800d9ac:	4625      	mov	r5, r4
 800d9ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9b0:	43db      	mvns	r3, r3
 800d9b2:	9304      	str	r3, [sp, #16]
 800d9b4:	4656      	mov	r6, sl
 800d9b6:	2700      	movs	r7, #0
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	4658      	mov	r0, fp
 800d9bc:	f000 ff00 	bl	800e7c0 <_Bfree>
 800d9c0:	2d00      	cmp	r5, #0
 800d9c2:	d0dc      	beq.n	800d97e <_dtoa_r+0x65e>
 800d9c4:	b12f      	cbz	r7, 800d9d2 <_dtoa_r+0x6b2>
 800d9c6:	42af      	cmp	r7, r5
 800d9c8:	d003      	beq.n	800d9d2 <_dtoa_r+0x6b2>
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	4658      	mov	r0, fp
 800d9ce:	f000 fef7 	bl	800e7c0 <_Bfree>
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	4658      	mov	r0, fp
 800d9d6:	f000 fef3 	bl	800e7c0 <_Bfree>
 800d9da:	e7d0      	b.n	800d97e <_dtoa_r+0x65e>
 800d9dc:	9704      	str	r7, [sp, #16]
 800d9de:	4633      	mov	r3, r6
 800d9e0:	461e      	mov	r6, r3
 800d9e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9e6:	2a39      	cmp	r2, #57	@ 0x39
 800d9e8:	d107      	bne.n	800d9fa <_dtoa_r+0x6da>
 800d9ea:	459a      	cmp	sl, r3
 800d9ec:	d1f8      	bne.n	800d9e0 <_dtoa_r+0x6c0>
 800d9ee:	9a04      	ldr	r2, [sp, #16]
 800d9f0:	3201      	adds	r2, #1
 800d9f2:	9204      	str	r2, [sp, #16]
 800d9f4:	2230      	movs	r2, #48	@ 0x30
 800d9f6:	f88a 2000 	strb.w	r2, [sl]
 800d9fa:	781a      	ldrb	r2, [r3, #0]
 800d9fc:	3201      	adds	r2, #1
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	e7bd      	b.n	800d97e <_dtoa_r+0x65e>
 800da02:	4b7b      	ldr	r3, [pc, #492]	@ (800dbf0 <_dtoa_r+0x8d0>)
 800da04:	2200      	movs	r2, #0
 800da06:	f7f2 fdff 	bl	8000608 <__aeabi_dmul>
 800da0a:	2200      	movs	r2, #0
 800da0c:	2300      	movs	r3, #0
 800da0e:	4604      	mov	r4, r0
 800da10:	460d      	mov	r5, r1
 800da12:	f7f3 f861 	bl	8000ad8 <__aeabi_dcmpeq>
 800da16:	2800      	cmp	r0, #0
 800da18:	f43f aebb 	beq.w	800d792 <_dtoa_r+0x472>
 800da1c:	e6f0      	b.n	800d800 <_dtoa_r+0x4e0>
 800da1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800da20:	2a00      	cmp	r2, #0
 800da22:	f000 80db 	beq.w	800dbdc <_dtoa_r+0x8bc>
 800da26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da28:	2a01      	cmp	r2, #1
 800da2a:	f300 80bf 	bgt.w	800dbac <_dtoa_r+0x88c>
 800da2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800da30:	2a00      	cmp	r2, #0
 800da32:	f000 80b7 	beq.w	800dba4 <_dtoa_r+0x884>
 800da36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800da3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da3c:	4646      	mov	r6, r8
 800da3e:	9a08      	ldr	r2, [sp, #32]
 800da40:	2101      	movs	r1, #1
 800da42:	441a      	add	r2, r3
 800da44:	4658      	mov	r0, fp
 800da46:	4498      	add	r8, r3
 800da48:	9208      	str	r2, [sp, #32]
 800da4a:	f000 ffb7 	bl	800e9bc <__i2b>
 800da4e:	4605      	mov	r5, r0
 800da50:	b15e      	cbz	r6, 800da6a <_dtoa_r+0x74a>
 800da52:	9b08      	ldr	r3, [sp, #32]
 800da54:	2b00      	cmp	r3, #0
 800da56:	dd08      	ble.n	800da6a <_dtoa_r+0x74a>
 800da58:	42b3      	cmp	r3, r6
 800da5a:	9a08      	ldr	r2, [sp, #32]
 800da5c:	bfa8      	it	ge
 800da5e:	4633      	movge	r3, r6
 800da60:	eba8 0803 	sub.w	r8, r8, r3
 800da64:	1af6      	subs	r6, r6, r3
 800da66:	1ad3      	subs	r3, r2, r3
 800da68:	9308      	str	r3, [sp, #32]
 800da6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da6c:	b1f3      	cbz	r3, 800daac <_dtoa_r+0x78c>
 800da6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 80b7 	beq.w	800dbe4 <_dtoa_r+0x8c4>
 800da76:	b18c      	cbz	r4, 800da9c <_dtoa_r+0x77c>
 800da78:	4629      	mov	r1, r5
 800da7a:	4622      	mov	r2, r4
 800da7c:	4658      	mov	r0, fp
 800da7e:	f001 f85d 	bl	800eb3c <__pow5mult>
 800da82:	464a      	mov	r2, r9
 800da84:	4601      	mov	r1, r0
 800da86:	4605      	mov	r5, r0
 800da88:	4658      	mov	r0, fp
 800da8a:	f000 ffad 	bl	800e9e8 <__multiply>
 800da8e:	4649      	mov	r1, r9
 800da90:	9004      	str	r0, [sp, #16]
 800da92:	4658      	mov	r0, fp
 800da94:	f000 fe94 	bl	800e7c0 <_Bfree>
 800da98:	9b04      	ldr	r3, [sp, #16]
 800da9a:	4699      	mov	r9, r3
 800da9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da9e:	1b1a      	subs	r2, r3, r4
 800daa0:	d004      	beq.n	800daac <_dtoa_r+0x78c>
 800daa2:	4649      	mov	r1, r9
 800daa4:	4658      	mov	r0, fp
 800daa6:	f001 f849 	bl	800eb3c <__pow5mult>
 800daaa:	4681      	mov	r9, r0
 800daac:	2101      	movs	r1, #1
 800daae:	4658      	mov	r0, fp
 800dab0:	f000 ff84 	bl	800e9bc <__i2b>
 800dab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dab6:	4604      	mov	r4, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f000 81cf 	beq.w	800de5c <_dtoa_r+0xb3c>
 800dabe:	461a      	mov	r2, r3
 800dac0:	4601      	mov	r1, r0
 800dac2:	4658      	mov	r0, fp
 800dac4:	f001 f83a 	bl	800eb3c <__pow5mult>
 800dac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daca:	2b01      	cmp	r3, #1
 800dacc:	4604      	mov	r4, r0
 800dace:	f300 8095 	bgt.w	800dbfc <_dtoa_r+0x8dc>
 800dad2:	9b02      	ldr	r3, [sp, #8]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f040 8087 	bne.w	800dbe8 <_dtoa_r+0x8c8>
 800dada:	9b03      	ldr	r3, [sp, #12]
 800dadc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f040 8089 	bne.w	800dbf8 <_dtoa_r+0x8d8>
 800dae6:	9b03      	ldr	r3, [sp, #12]
 800dae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800daec:	0d1b      	lsrs	r3, r3, #20
 800daee:	051b      	lsls	r3, r3, #20
 800daf0:	b12b      	cbz	r3, 800dafe <_dtoa_r+0x7de>
 800daf2:	9b08      	ldr	r3, [sp, #32]
 800daf4:	3301      	adds	r3, #1
 800daf6:	9308      	str	r3, [sp, #32]
 800daf8:	f108 0801 	add.w	r8, r8, #1
 800dafc:	2301      	movs	r3, #1
 800dafe:	930a      	str	r3, [sp, #40]	@ 0x28
 800db00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 81b0 	beq.w	800de68 <_dtoa_r+0xb48>
 800db08:	6923      	ldr	r3, [r4, #16]
 800db0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db0e:	6918      	ldr	r0, [r3, #16]
 800db10:	f000 ff08 	bl	800e924 <__hi0bits>
 800db14:	f1c0 0020 	rsb	r0, r0, #32
 800db18:	9b08      	ldr	r3, [sp, #32]
 800db1a:	4418      	add	r0, r3
 800db1c:	f010 001f 	ands.w	r0, r0, #31
 800db20:	d077      	beq.n	800dc12 <_dtoa_r+0x8f2>
 800db22:	f1c0 0320 	rsb	r3, r0, #32
 800db26:	2b04      	cmp	r3, #4
 800db28:	dd6b      	ble.n	800dc02 <_dtoa_r+0x8e2>
 800db2a:	9b08      	ldr	r3, [sp, #32]
 800db2c:	f1c0 001c 	rsb	r0, r0, #28
 800db30:	4403      	add	r3, r0
 800db32:	4480      	add	r8, r0
 800db34:	4406      	add	r6, r0
 800db36:	9308      	str	r3, [sp, #32]
 800db38:	f1b8 0f00 	cmp.w	r8, #0
 800db3c:	dd05      	ble.n	800db4a <_dtoa_r+0x82a>
 800db3e:	4649      	mov	r1, r9
 800db40:	4642      	mov	r2, r8
 800db42:	4658      	mov	r0, fp
 800db44:	f001 f854 	bl	800ebf0 <__lshift>
 800db48:	4681      	mov	r9, r0
 800db4a:	9b08      	ldr	r3, [sp, #32]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	dd05      	ble.n	800db5c <_dtoa_r+0x83c>
 800db50:	4621      	mov	r1, r4
 800db52:	461a      	mov	r2, r3
 800db54:	4658      	mov	r0, fp
 800db56:	f001 f84b 	bl	800ebf0 <__lshift>
 800db5a:	4604      	mov	r4, r0
 800db5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d059      	beq.n	800dc16 <_dtoa_r+0x8f6>
 800db62:	4621      	mov	r1, r4
 800db64:	4648      	mov	r0, r9
 800db66:	f001 f8af 	bl	800ecc8 <__mcmp>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	da53      	bge.n	800dc16 <_dtoa_r+0x8f6>
 800db6e:	1e7b      	subs	r3, r7, #1
 800db70:	9304      	str	r3, [sp, #16]
 800db72:	4649      	mov	r1, r9
 800db74:	2300      	movs	r3, #0
 800db76:	220a      	movs	r2, #10
 800db78:	4658      	mov	r0, fp
 800db7a:	f000 fe43 	bl	800e804 <__multadd>
 800db7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db80:	4681      	mov	r9, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	f000 8172 	beq.w	800de6c <_dtoa_r+0xb4c>
 800db88:	2300      	movs	r3, #0
 800db8a:	4629      	mov	r1, r5
 800db8c:	220a      	movs	r2, #10
 800db8e:	4658      	mov	r0, fp
 800db90:	f000 fe38 	bl	800e804 <__multadd>
 800db94:	9b00      	ldr	r3, [sp, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	4605      	mov	r5, r0
 800db9a:	dc67      	bgt.n	800dc6c <_dtoa_r+0x94c>
 800db9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	dc41      	bgt.n	800dc26 <_dtoa_r+0x906>
 800dba2:	e063      	b.n	800dc6c <_dtoa_r+0x94c>
 800dba4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dba6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dbaa:	e746      	b.n	800da3a <_dtoa_r+0x71a>
 800dbac:	9b07      	ldr	r3, [sp, #28]
 800dbae:	1e5c      	subs	r4, r3, #1
 800dbb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbb2:	42a3      	cmp	r3, r4
 800dbb4:	bfbf      	itttt	lt
 800dbb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dbb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dbba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dbbc:	1ae3      	sublt	r3, r4, r3
 800dbbe:	bfb4      	ite	lt
 800dbc0:	18d2      	addlt	r2, r2, r3
 800dbc2:	1b1c      	subge	r4, r3, r4
 800dbc4:	9b07      	ldr	r3, [sp, #28]
 800dbc6:	bfbc      	itt	lt
 800dbc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dbca:	2400      	movlt	r4, #0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	bfb5      	itete	lt
 800dbd0:	eba8 0603 	sublt.w	r6, r8, r3
 800dbd4:	9b07      	ldrge	r3, [sp, #28]
 800dbd6:	2300      	movlt	r3, #0
 800dbd8:	4646      	movge	r6, r8
 800dbda:	e730      	b.n	800da3e <_dtoa_r+0x71e>
 800dbdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dbde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dbe0:	4646      	mov	r6, r8
 800dbe2:	e735      	b.n	800da50 <_dtoa_r+0x730>
 800dbe4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbe6:	e75c      	b.n	800daa2 <_dtoa_r+0x782>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	e788      	b.n	800dafe <_dtoa_r+0x7de>
 800dbec:	3fe00000 	.word	0x3fe00000
 800dbf0:	40240000 	.word	0x40240000
 800dbf4:	40140000 	.word	0x40140000
 800dbf8:	9b02      	ldr	r3, [sp, #8]
 800dbfa:	e780      	b.n	800dafe <_dtoa_r+0x7de>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc00:	e782      	b.n	800db08 <_dtoa_r+0x7e8>
 800dc02:	d099      	beq.n	800db38 <_dtoa_r+0x818>
 800dc04:	9a08      	ldr	r2, [sp, #32]
 800dc06:	331c      	adds	r3, #28
 800dc08:	441a      	add	r2, r3
 800dc0a:	4498      	add	r8, r3
 800dc0c:	441e      	add	r6, r3
 800dc0e:	9208      	str	r2, [sp, #32]
 800dc10:	e792      	b.n	800db38 <_dtoa_r+0x818>
 800dc12:	4603      	mov	r3, r0
 800dc14:	e7f6      	b.n	800dc04 <_dtoa_r+0x8e4>
 800dc16:	9b07      	ldr	r3, [sp, #28]
 800dc18:	9704      	str	r7, [sp, #16]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	dc20      	bgt.n	800dc60 <_dtoa_r+0x940>
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	dd1e      	ble.n	800dc64 <_dtoa_r+0x944>
 800dc26:	9b00      	ldr	r3, [sp, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f47f aec0 	bne.w	800d9ae <_dtoa_r+0x68e>
 800dc2e:	4621      	mov	r1, r4
 800dc30:	2205      	movs	r2, #5
 800dc32:	4658      	mov	r0, fp
 800dc34:	f000 fde6 	bl	800e804 <__multadd>
 800dc38:	4601      	mov	r1, r0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4648      	mov	r0, r9
 800dc3e:	f001 f843 	bl	800ecc8 <__mcmp>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	f77f aeb3 	ble.w	800d9ae <_dtoa_r+0x68e>
 800dc48:	4656      	mov	r6, sl
 800dc4a:	2331      	movs	r3, #49	@ 0x31
 800dc4c:	f806 3b01 	strb.w	r3, [r6], #1
 800dc50:	9b04      	ldr	r3, [sp, #16]
 800dc52:	3301      	adds	r3, #1
 800dc54:	9304      	str	r3, [sp, #16]
 800dc56:	e6ae      	b.n	800d9b6 <_dtoa_r+0x696>
 800dc58:	9c07      	ldr	r4, [sp, #28]
 800dc5a:	9704      	str	r7, [sp, #16]
 800dc5c:	4625      	mov	r5, r4
 800dc5e:	e7f3      	b.n	800dc48 <_dtoa_r+0x928>
 800dc60:	9b07      	ldr	r3, [sp, #28]
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f000 8104 	beq.w	800de74 <_dtoa_r+0xb54>
 800dc6c:	2e00      	cmp	r6, #0
 800dc6e:	dd05      	ble.n	800dc7c <_dtoa_r+0x95c>
 800dc70:	4629      	mov	r1, r5
 800dc72:	4632      	mov	r2, r6
 800dc74:	4658      	mov	r0, fp
 800dc76:	f000 ffbb 	bl	800ebf0 <__lshift>
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d05a      	beq.n	800dd38 <_dtoa_r+0xa18>
 800dc82:	6869      	ldr	r1, [r5, #4]
 800dc84:	4658      	mov	r0, fp
 800dc86:	f000 fd5b 	bl	800e740 <_Balloc>
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	b928      	cbnz	r0, 800dc9a <_dtoa_r+0x97a>
 800dc8e:	4b84      	ldr	r3, [pc, #528]	@ (800dea0 <_dtoa_r+0xb80>)
 800dc90:	4602      	mov	r2, r0
 800dc92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dc96:	f7ff bb5a 	b.w	800d34e <_dtoa_r+0x2e>
 800dc9a:	692a      	ldr	r2, [r5, #16]
 800dc9c:	3202      	adds	r2, #2
 800dc9e:	0092      	lsls	r2, r2, #2
 800dca0:	f105 010c 	add.w	r1, r5, #12
 800dca4:	300c      	adds	r0, #12
 800dca6:	f7ff fa92 	bl	800d1ce <memcpy>
 800dcaa:	2201      	movs	r2, #1
 800dcac:	4631      	mov	r1, r6
 800dcae:	4658      	mov	r0, fp
 800dcb0:	f000 ff9e 	bl	800ebf0 <__lshift>
 800dcb4:	f10a 0301 	add.w	r3, sl, #1
 800dcb8:	9307      	str	r3, [sp, #28]
 800dcba:	9b00      	ldr	r3, [sp, #0]
 800dcbc:	4453      	add	r3, sl
 800dcbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcc0:	9b02      	ldr	r3, [sp, #8]
 800dcc2:	f003 0301 	and.w	r3, r3, #1
 800dcc6:	462f      	mov	r7, r5
 800dcc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcca:	4605      	mov	r5, r0
 800dccc:	9b07      	ldr	r3, [sp, #28]
 800dcce:	4621      	mov	r1, r4
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	4648      	mov	r0, r9
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	f7ff fa99 	bl	800d20c <quorem>
 800dcda:	4639      	mov	r1, r7
 800dcdc:	9002      	str	r0, [sp, #8]
 800dcde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dce2:	4648      	mov	r0, r9
 800dce4:	f000 fff0 	bl	800ecc8 <__mcmp>
 800dce8:	462a      	mov	r2, r5
 800dcea:	9008      	str	r0, [sp, #32]
 800dcec:	4621      	mov	r1, r4
 800dcee:	4658      	mov	r0, fp
 800dcf0:	f001 f806 	bl	800ed00 <__mdiff>
 800dcf4:	68c2      	ldr	r2, [r0, #12]
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	bb02      	cbnz	r2, 800dd3c <_dtoa_r+0xa1c>
 800dcfa:	4601      	mov	r1, r0
 800dcfc:	4648      	mov	r0, r9
 800dcfe:	f000 ffe3 	bl	800ecc8 <__mcmp>
 800dd02:	4602      	mov	r2, r0
 800dd04:	4631      	mov	r1, r6
 800dd06:	4658      	mov	r0, fp
 800dd08:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd0a:	f000 fd59 	bl	800e7c0 <_Bfree>
 800dd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd12:	9e07      	ldr	r6, [sp, #28]
 800dd14:	ea43 0102 	orr.w	r1, r3, r2
 800dd18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd1a:	4319      	orrs	r1, r3
 800dd1c:	d110      	bne.n	800dd40 <_dtoa_r+0xa20>
 800dd1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd22:	d029      	beq.n	800dd78 <_dtoa_r+0xa58>
 800dd24:	9b08      	ldr	r3, [sp, #32]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	dd02      	ble.n	800dd30 <_dtoa_r+0xa10>
 800dd2a:	9b02      	ldr	r3, [sp, #8]
 800dd2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dd30:	9b00      	ldr	r3, [sp, #0]
 800dd32:	f883 8000 	strb.w	r8, [r3]
 800dd36:	e63f      	b.n	800d9b8 <_dtoa_r+0x698>
 800dd38:	4628      	mov	r0, r5
 800dd3a:	e7bb      	b.n	800dcb4 <_dtoa_r+0x994>
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	e7e1      	b.n	800dd04 <_dtoa_r+0x9e4>
 800dd40:	9b08      	ldr	r3, [sp, #32]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	db04      	blt.n	800dd50 <_dtoa_r+0xa30>
 800dd46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd48:	430b      	orrs	r3, r1
 800dd4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd4c:	430b      	orrs	r3, r1
 800dd4e:	d120      	bne.n	800dd92 <_dtoa_r+0xa72>
 800dd50:	2a00      	cmp	r2, #0
 800dd52:	dded      	ble.n	800dd30 <_dtoa_r+0xa10>
 800dd54:	4649      	mov	r1, r9
 800dd56:	2201      	movs	r2, #1
 800dd58:	4658      	mov	r0, fp
 800dd5a:	f000 ff49 	bl	800ebf0 <__lshift>
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4681      	mov	r9, r0
 800dd62:	f000 ffb1 	bl	800ecc8 <__mcmp>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	dc03      	bgt.n	800dd72 <_dtoa_r+0xa52>
 800dd6a:	d1e1      	bne.n	800dd30 <_dtoa_r+0xa10>
 800dd6c:	f018 0f01 	tst.w	r8, #1
 800dd70:	d0de      	beq.n	800dd30 <_dtoa_r+0xa10>
 800dd72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd76:	d1d8      	bne.n	800dd2a <_dtoa_r+0xa0a>
 800dd78:	9a00      	ldr	r2, [sp, #0]
 800dd7a:	2339      	movs	r3, #57	@ 0x39
 800dd7c:	7013      	strb	r3, [r2, #0]
 800dd7e:	4633      	mov	r3, r6
 800dd80:	461e      	mov	r6, r3
 800dd82:	3b01      	subs	r3, #1
 800dd84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dd88:	2a39      	cmp	r2, #57	@ 0x39
 800dd8a:	d052      	beq.n	800de32 <_dtoa_r+0xb12>
 800dd8c:	3201      	adds	r2, #1
 800dd8e:	701a      	strb	r2, [r3, #0]
 800dd90:	e612      	b.n	800d9b8 <_dtoa_r+0x698>
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	dd07      	ble.n	800dda6 <_dtoa_r+0xa86>
 800dd96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd9a:	d0ed      	beq.n	800dd78 <_dtoa_r+0xa58>
 800dd9c:	9a00      	ldr	r2, [sp, #0]
 800dd9e:	f108 0301 	add.w	r3, r8, #1
 800dda2:	7013      	strb	r3, [r2, #0]
 800dda4:	e608      	b.n	800d9b8 <_dtoa_r+0x698>
 800dda6:	9b07      	ldr	r3, [sp, #28]
 800dda8:	9a07      	ldr	r2, [sp, #28]
 800ddaa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ddae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d028      	beq.n	800de06 <_dtoa_r+0xae6>
 800ddb4:	4649      	mov	r1, r9
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	220a      	movs	r2, #10
 800ddba:	4658      	mov	r0, fp
 800ddbc:	f000 fd22 	bl	800e804 <__multadd>
 800ddc0:	42af      	cmp	r7, r5
 800ddc2:	4681      	mov	r9, r0
 800ddc4:	f04f 0300 	mov.w	r3, #0
 800ddc8:	f04f 020a 	mov.w	r2, #10
 800ddcc:	4639      	mov	r1, r7
 800ddce:	4658      	mov	r0, fp
 800ddd0:	d107      	bne.n	800dde2 <_dtoa_r+0xac2>
 800ddd2:	f000 fd17 	bl	800e804 <__multadd>
 800ddd6:	4607      	mov	r7, r0
 800ddd8:	4605      	mov	r5, r0
 800ddda:	9b07      	ldr	r3, [sp, #28]
 800dddc:	3301      	adds	r3, #1
 800ddde:	9307      	str	r3, [sp, #28]
 800dde0:	e774      	b.n	800dccc <_dtoa_r+0x9ac>
 800dde2:	f000 fd0f 	bl	800e804 <__multadd>
 800dde6:	4629      	mov	r1, r5
 800dde8:	4607      	mov	r7, r0
 800ddea:	2300      	movs	r3, #0
 800ddec:	220a      	movs	r2, #10
 800ddee:	4658      	mov	r0, fp
 800ddf0:	f000 fd08 	bl	800e804 <__multadd>
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	e7f0      	b.n	800ddda <_dtoa_r+0xaba>
 800ddf8:	9b00      	ldr	r3, [sp, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bfcc      	ite	gt
 800ddfe:	461e      	movgt	r6, r3
 800de00:	2601      	movle	r6, #1
 800de02:	4456      	add	r6, sl
 800de04:	2700      	movs	r7, #0
 800de06:	4649      	mov	r1, r9
 800de08:	2201      	movs	r2, #1
 800de0a:	4658      	mov	r0, fp
 800de0c:	f000 fef0 	bl	800ebf0 <__lshift>
 800de10:	4621      	mov	r1, r4
 800de12:	4681      	mov	r9, r0
 800de14:	f000 ff58 	bl	800ecc8 <__mcmp>
 800de18:	2800      	cmp	r0, #0
 800de1a:	dcb0      	bgt.n	800dd7e <_dtoa_r+0xa5e>
 800de1c:	d102      	bne.n	800de24 <_dtoa_r+0xb04>
 800de1e:	f018 0f01 	tst.w	r8, #1
 800de22:	d1ac      	bne.n	800dd7e <_dtoa_r+0xa5e>
 800de24:	4633      	mov	r3, r6
 800de26:	461e      	mov	r6, r3
 800de28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de2c:	2a30      	cmp	r2, #48	@ 0x30
 800de2e:	d0fa      	beq.n	800de26 <_dtoa_r+0xb06>
 800de30:	e5c2      	b.n	800d9b8 <_dtoa_r+0x698>
 800de32:	459a      	cmp	sl, r3
 800de34:	d1a4      	bne.n	800dd80 <_dtoa_r+0xa60>
 800de36:	9b04      	ldr	r3, [sp, #16]
 800de38:	3301      	adds	r3, #1
 800de3a:	9304      	str	r3, [sp, #16]
 800de3c:	2331      	movs	r3, #49	@ 0x31
 800de3e:	f88a 3000 	strb.w	r3, [sl]
 800de42:	e5b9      	b.n	800d9b8 <_dtoa_r+0x698>
 800de44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dea4 <_dtoa_r+0xb84>
 800de4a:	b11b      	cbz	r3, 800de54 <_dtoa_r+0xb34>
 800de4c:	f10a 0308 	add.w	r3, sl, #8
 800de50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de52:	6013      	str	r3, [r2, #0]
 800de54:	4650      	mov	r0, sl
 800de56:	b019      	add	sp, #100	@ 0x64
 800de58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de5e:	2b01      	cmp	r3, #1
 800de60:	f77f ae37 	ble.w	800dad2 <_dtoa_r+0x7b2>
 800de64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de66:	930a      	str	r3, [sp, #40]	@ 0x28
 800de68:	2001      	movs	r0, #1
 800de6a:	e655      	b.n	800db18 <_dtoa_r+0x7f8>
 800de6c:	9b00      	ldr	r3, [sp, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f77f aed6 	ble.w	800dc20 <_dtoa_r+0x900>
 800de74:	4656      	mov	r6, sl
 800de76:	4621      	mov	r1, r4
 800de78:	4648      	mov	r0, r9
 800de7a:	f7ff f9c7 	bl	800d20c <quorem>
 800de7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de82:	f806 8b01 	strb.w	r8, [r6], #1
 800de86:	9b00      	ldr	r3, [sp, #0]
 800de88:	eba6 020a 	sub.w	r2, r6, sl
 800de8c:	4293      	cmp	r3, r2
 800de8e:	ddb3      	ble.n	800ddf8 <_dtoa_r+0xad8>
 800de90:	4649      	mov	r1, r9
 800de92:	2300      	movs	r3, #0
 800de94:	220a      	movs	r2, #10
 800de96:	4658      	mov	r0, fp
 800de98:	f000 fcb4 	bl	800e804 <__multadd>
 800de9c:	4681      	mov	r9, r0
 800de9e:	e7ea      	b.n	800de76 <_dtoa_r+0xb56>
 800dea0:	0800fde5 	.word	0x0800fde5
 800dea4:	0800fd69 	.word	0x0800fd69

0800dea8 <_free_r>:
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	4605      	mov	r5, r0
 800deac:	2900      	cmp	r1, #0
 800deae:	d041      	beq.n	800df34 <_free_r+0x8c>
 800deb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deb4:	1f0c      	subs	r4, r1, #4
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	bfb8      	it	lt
 800deba:	18e4      	addlt	r4, r4, r3
 800debc:	f000 fc34 	bl	800e728 <__malloc_lock>
 800dec0:	4a1d      	ldr	r2, [pc, #116]	@ (800df38 <_free_r+0x90>)
 800dec2:	6813      	ldr	r3, [r2, #0]
 800dec4:	b933      	cbnz	r3, 800ded4 <_free_r+0x2c>
 800dec6:	6063      	str	r3, [r4, #4]
 800dec8:	6014      	str	r4, [r2, #0]
 800deca:	4628      	mov	r0, r5
 800decc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ded0:	f000 bc30 	b.w	800e734 <__malloc_unlock>
 800ded4:	42a3      	cmp	r3, r4
 800ded6:	d908      	bls.n	800deea <_free_r+0x42>
 800ded8:	6820      	ldr	r0, [r4, #0]
 800deda:	1821      	adds	r1, r4, r0
 800dedc:	428b      	cmp	r3, r1
 800dede:	bf01      	itttt	eq
 800dee0:	6819      	ldreq	r1, [r3, #0]
 800dee2:	685b      	ldreq	r3, [r3, #4]
 800dee4:	1809      	addeq	r1, r1, r0
 800dee6:	6021      	streq	r1, [r4, #0]
 800dee8:	e7ed      	b.n	800dec6 <_free_r+0x1e>
 800deea:	461a      	mov	r2, r3
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	b10b      	cbz	r3, 800def4 <_free_r+0x4c>
 800def0:	42a3      	cmp	r3, r4
 800def2:	d9fa      	bls.n	800deea <_free_r+0x42>
 800def4:	6811      	ldr	r1, [r2, #0]
 800def6:	1850      	adds	r0, r2, r1
 800def8:	42a0      	cmp	r0, r4
 800defa:	d10b      	bne.n	800df14 <_free_r+0x6c>
 800defc:	6820      	ldr	r0, [r4, #0]
 800defe:	4401      	add	r1, r0
 800df00:	1850      	adds	r0, r2, r1
 800df02:	4283      	cmp	r3, r0
 800df04:	6011      	str	r1, [r2, #0]
 800df06:	d1e0      	bne.n	800deca <_free_r+0x22>
 800df08:	6818      	ldr	r0, [r3, #0]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	6053      	str	r3, [r2, #4]
 800df0e:	4408      	add	r0, r1
 800df10:	6010      	str	r0, [r2, #0]
 800df12:	e7da      	b.n	800deca <_free_r+0x22>
 800df14:	d902      	bls.n	800df1c <_free_r+0x74>
 800df16:	230c      	movs	r3, #12
 800df18:	602b      	str	r3, [r5, #0]
 800df1a:	e7d6      	b.n	800deca <_free_r+0x22>
 800df1c:	6820      	ldr	r0, [r4, #0]
 800df1e:	1821      	adds	r1, r4, r0
 800df20:	428b      	cmp	r3, r1
 800df22:	bf04      	itt	eq
 800df24:	6819      	ldreq	r1, [r3, #0]
 800df26:	685b      	ldreq	r3, [r3, #4]
 800df28:	6063      	str	r3, [r4, #4]
 800df2a:	bf04      	itt	eq
 800df2c:	1809      	addeq	r1, r1, r0
 800df2e:	6021      	streq	r1, [r4, #0]
 800df30:	6054      	str	r4, [r2, #4]
 800df32:	e7ca      	b.n	800deca <_free_r+0x22>
 800df34:	bd38      	pop	{r3, r4, r5, pc}
 800df36:	bf00      	nop
 800df38:	20002638 	.word	0x20002638

0800df3c <rshift>:
 800df3c:	6903      	ldr	r3, [r0, #16]
 800df3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800df42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800df4a:	f100 0414 	add.w	r4, r0, #20
 800df4e:	dd45      	ble.n	800dfdc <rshift+0xa0>
 800df50:	f011 011f 	ands.w	r1, r1, #31
 800df54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800df58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800df5c:	d10c      	bne.n	800df78 <rshift+0x3c>
 800df5e:	f100 0710 	add.w	r7, r0, #16
 800df62:	4629      	mov	r1, r5
 800df64:	42b1      	cmp	r1, r6
 800df66:	d334      	bcc.n	800dfd2 <rshift+0x96>
 800df68:	1a9b      	subs	r3, r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	1eea      	subs	r2, r5, #3
 800df6e:	4296      	cmp	r6, r2
 800df70:	bf38      	it	cc
 800df72:	2300      	movcc	r3, #0
 800df74:	4423      	add	r3, r4
 800df76:	e015      	b.n	800dfa4 <rshift+0x68>
 800df78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800df7c:	f1c1 0820 	rsb	r8, r1, #32
 800df80:	40cf      	lsrs	r7, r1
 800df82:	f105 0e04 	add.w	lr, r5, #4
 800df86:	46a1      	mov	r9, r4
 800df88:	4576      	cmp	r6, lr
 800df8a:	46f4      	mov	ip, lr
 800df8c:	d815      	bhi.n	800dfba <rshift+0x7e>
 800df8e:	1a9a      	subs	r2, r3, r2
 800df90:	0092      	lsls	r2, r2, #2
 800df92:	3a04      	subs	r2, #4
 800df94:	3501      	adds	r5, #1
 800df96:	42ae      	cmp	r6, r5
 800df98:	bf38      	it	cc
 800df9a:	2200      	movcc	r2, #0
 800df9c:	18a3      	adds	r3, r4, r2
 800df9e:	50a7      	str	r7, [r4, r2]
 800dfa0:	b107      	cbz	r7, 800dfa4 <rshift+0x68>
 800dfa2:	3304      	adds	r3, #4
 800dfa4:	1b1a      	subs	r2, r3, r4
 800dfa6:	42a3      	cmp	r3, r4
 800dfa8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dfac:	bf08      	it	eq
 800dfae:	2300      	moveq	r3, #0
 800dfb0:	6102      	str	r2, [r0, #16]
 800dfb2:	bf08      	it	eq
 800dfb4:	6143      	streq	r3, [r0, #20]
 800dfb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfba:	f8dc c000 	ldr.w	ip, [ip]
 800dfbe:	fa0c fc08 	lsl.w	ip, ip, r8
 800dfc2:	ea4c 0707 	orr.w	r7, ip, r7
 800dfc6:	f849 7b04 	str.w	r7, [r9], #4
 800dfca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dfce:	40cf      	lsrs	r7, r1
 800dfd0:	e7da      	b.n	800df88 <rshift+0x4c>
 800dfd2:	f851 cb04 	ldr.w	ip, [r1], #4
 800dfd6:	f847 cf04 	str.w	ip, [r7, #4]!
 800dfda:	e7c3      	b.n	800df64 <rshift+0x28>
 800dfdc:	4623      	mov	r3, r4
 800dfde:	e7e1      	b.n	800dfa4 <rshift+0x68>

0800dfe0 <__hexdig_fun>:
 800dfe0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dfe4:	2b09      	cmp	r3, #9
 800dfe6:	d802      	bhi.n	800dfee <__hexdig_fun+0xe>
 800dfe8:	3820      	subs	r0, #32
 800dfea:	b2c0      	uxtb	r0, r0
 800dfec:	4770      	bx	lr
 800dfee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dff2:	2b05      	cmp	r3, #5
 800dff4:	d801      	bhi.n	800dffa <__hexdig_fun+0x1a>
 800dff6:	3847      	subs	r0, #71	@ 0x47
 800dff8:	e7f7      	b.n	800dfea <__hexdig_fun+0xa>
 800dffa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dffe:	2b05      	cmp	r3, #5
 800e000:	d801      	bhi.n	800e006 <__hexdig_fun+0x26>
 800e002:	3827      	subs	r0, #39	@ 0x27
 800e004:	e7f1      	b.n	800dfea <__hexdig_fun+0xa>
 800e006:	2000      	movs	r0, #0
 800e008:	4770      	bx	lr
	...

0800e00c <__gethex>:
 800e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e010:	b085      	sub	sp, #20
 800e012:	468a      	mov	sl, r1
 800e014:	9302      	str	r3, [sp, #8]
 800e016:	680b      	ldr	r3, [r1, #0]
 800e018:	9001      	str	r0, [sp, #4]
 800e01a:	4690      	mov	r8, r2
 800e01c:	1c9c      	adds	r4, r3, #2
 800e01e:	46a1      	mov	r9, r4
 800e020:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e024:	2830      	cmp	r0, #48	@ 0x30
 800e026:	d0fa      	beq.n	800e01e <__gethex+0x12>
 800e028:	eba9 0303 	sub.w	r3, r9, r3
 800e02c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e030:	f7ff ffd6 	bl	800dfe0 <__hexdig_fun>
 800e034:	4605      	mov	r5, r0
 800e036:	2800      	cmp	r0, #0
 800e038:	d168      	bne.n	800e10c <__gethex+0x100>
 800e03a:	49a0      	ldr	r1, [pc, #640]	@ (800e2bc <__gethex+0x2b0>)
 800e03c:	2201      	movs	r2, #1
 800e03e:	4648      	mov	r0, r9
 800e040:	f7ff f829 	bl	800d096 <strncmp>
 800e044:	4607      	mov	r7, r0
 800e046:	2800      	cmp	r0, #0
 800e048:	d167      	bne.n	800e11a <__gethex+0x10e>
 800e04a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e04e:	4626      	mov	r6, r4
 800e050:	f7ff ffc6 	bl	800dfe0 <__hexdig_fun>
 800e054:	2800      	cmp	r0, #0
 800e056:	d062      	beq.n	800e11e <__gethex+0x112>
 800e058:	4623      	mov	r3, r4
 800e05a:	7818      	ldrb	r0, [r3, #0]
 800e05c:	2830      	cmp	r0, #48	@ 0x30
 800e05e:	4699      	mov	r9, r3
 800e060:	f103 0301 	add.w	r3, r3, #1
 800e064:	d0f9      	beq.n	800e05a <__gethex+0x4e>
 800e066:	f7ff ffbb 	bl	800dfe0 <__hexdig_fun>
 800e06a:	fab0 f580 	clz	r5, r0
 800e06e:	096d      	lsrs	r5, r5, #5
 800e070:	f04f 0b01 	mov.w	fp, #1
 800e074:	464a      	mov	r2, r9
 800e076:	4616      	mov	r6, r2
 800e078:	3201      	adds	r2, #1
 800e07a:	7830      	ldrb	r0, [r6, #0]
 800e07c:	f7ff ffb0 	bl	800dfe0 <__hexdig_fun>
 800e080:	2800      	cmp	r0, #0
 800e082:	d1f8      	bne.n	800e076 <__gethex+0x6a>
 800e084:	498d      	ldr	r1, [pc, #564]	@ (800e2bc <__gethex+0x2b0>)
 800e086:	2201      	movs	r2, #1
 800e088:	4630      	mov	r0, r6
 800e08a:	f7ff f804 	bl	800d096 <strncmp>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d13f      	bne.n	800e112 <__gethex+0x106>
 800e092:	b944      	cbnz	r4, 800e0a6 <__gethex+0x9a>
 800e094:	1c74      	adds	r4, r6, #1
 800e096:	4622      	mov	r2, r4
 800e098:	4616      	mov	r6, r2
 800e09a:	3201      	adds	r2, #1
 800e09c:	7830      	ldrb	r0, [r6, #0]
 800e09e:	f7ff ff9f 	bl	800dfe0 <__hexdig_fun>
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	d1f8      	bne.n	800e098 <__gethex+0x8c>
 800e0a6:	1ba4      	subs	r4, r4, r6
 800e0a8:	00a7      	lsls	r7, r4, #2
 800e0aa:	7833      	ldrb	r3, [r6, #0]
 800e0ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e0b0:	2b50      	cmp	r3, #80	@ 0x50
 800e0b2:	d13e      	bne.n	800e132 <__gethex+0x126>
 800e0b4:	7873      	ldrb	r3, [r6, #1]
 800e0b6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e0b8:	d033      	beq.n	800e122 <__gethex+0x116>
 800e0ba:	2b2d      	cmp	r3, #45	@ 0x2d
 800e0bc:	d034      	beq.n	800e128 <__gethex+0x11c>
 800e0be:	1c71      	adds	r1, r6, #1
 800e0c0:	2400      	movs	r4, #0
 800e0c2:	7808      	ldrb	r0, [r1, #0]
 800e0c4:	f7ff ff8c 	bl	800dfe0 <__hexdig_fun>
 800e0c8:	1e43      	subs	r3, r0, #1
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	2b18      	cmp	r3, #24
 800e0ce:	d830      	bhi.n	800e132 <__gethex+0x126>
 800e0d0:	f1a0 0210 	sub.w	r2, r0, #16
 800e0d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e0d8:	f7ff ff82 	bl	800dfe0 <__hexdig_fun>
 800e0dc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800e0e0:	fa5f fc8c 	uxtb.w	ip, ip
 800e0e4:	f1bc 0f18 	cmp.w	ip, #24
 800e0e8:	f04f 030a 	mov.w	r3, #10
 800e0ec:	d91e      	bls.n	800e12c <__gethex+0x120>
 800e0ee:	b104      	cbz	r4, 800e0f2 <__gethex+0xe6>
 800e0f0:	4252      	negs	r2, r2
 800e0f2:	4417      	add	r7, r2
 800e0f4:	f8ca 1000 	str.w	r1, [sl]
 800e0f8:	b1ed      	cbz	r5, 800e136 <__gethex+0x12a>
 800e0fa:	f1bb 0f00 	cmp.w	fp, #0
 800e0fe:	bf0c      	ite	eq
 800e100:	2506      	moveq	r5, #6
 800e102:	2500      	movne	r5, #0
 800e104:	4628      	mov	r0, r5
 800e106:	b005      	add	sp, #20
 800e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10c:	2500      	movs	r5, #0
 800e10e:	462c      	mov	r4, r5
 800e110:	e7b0      	b.n	800e074 <__gethex+0x68>
 800e112:	2c00      	cmp	r4, #0
 800e114:	d1c7      	bne.n	800e0a6 <__gethex+0x9a>
 800e116:	4627      	mov	r7, r4
 800e118:	e7c7      	b.n	800e0aa <__gethex+0x9e>
 800e11a:	464e      	mov	r6, r9
 800e11c:	462f      	mov	r7, r5
 800e11e:	2501      	movs	r5, #1
 800e120:	e7c3      	b.n	800e0aa <__gethex+0x9e>
 800e122:	2400      	movs	r4, #0
 800e124:	1cb1      	adds	r1, r6, #2
 800e126:	e7cc      	b.n	800e0c2 <__gethex+0xb6>
 800e128:	2401      	movs	r4, #1
 800e12a:	e7fb      	b.n	800e124 <__gethex+0x118>
 800e12c:	fb03 0002 	mla	r0, r3, r2, r0
 800e130:	e7ce      	b.n	800e0d0 <__gethex+0xc4>
 800e132:	4631      	mov	r1, r6
 800e134:	e7de      	b.n	800e0f4 <__gethex+0xe8>
 800e136:	eba6 0309 	sub.w	r3, r6, r9
 800e13a:	3b01      	subs	r3, #1
 800e13c:	4629      	mov	r1, r5
 800e13e:	2b07      	cmp	r3, #7
 800e140:	dc0a      	bgt.n	800e158 <__gethex+0x14c>
 800e142:	9801      	ldr	r0, [sp, #4]
 800e144:	f000 fafc 	bl	800e740 <_Balloc>
 800e148:	4604      	mov	r4, r0
 800e14a:	b940      	cbnz	r0, 800e15e <__gethex+0x152>
 800e14c:	4b5c      	ldr	r3, [pc, #368]	@ (800e2c0 <__gethex+0x2b4>)
 800e14e:	4602      	mov	r2, r0
 800e150:	21e4      	movs	r1, #228	@ 0xe4
 800e152:	485c      	ldr	r0, [pc, #368]	@ (800e2c4 <__gethex+0x2b8>)
 800e154:	f001 fa5c 	bl	800f610 <__assert_func>
 800e158:	3101      	adds	r1, #1
 800e15a:	105b      	asrs	r3, r3, #1
 800e15c:	e7ef      	b.n	800e13e <__gethex+0x132>
 800e15e:	f100 0a14 	add.w	sl, r0, #20
 800e162:	2300      	movs	r3, #0
 800e164:	4655      	mov	r5, sl
 800e166:	469b      	mov	fp, r3
 800e168:	45b1      	cmp	r9, r6
 800e16a:	d337      	bcc.n	800e1dc <__gethex+0x1d0>
 800e16c:	f845 bb04 	str.w	fp, [r5], #4
 800e170:	eba5 050a 	sub.w	r5, r5, sl
 800e174:	10ad      	asrs	r5, r5, #2
 800e176:	6125      	str	r5, [r4, #16]
 800e178:	4658      	mov	r0, fp
 800e17a:	f000 fbd3 	bl	800e924 <__hi0bits>
 800e17e:	016d      	lsls	r5, r5, #5
 800e180:	f8d8 6000 	ldr.w	r6, [r8]
 800e184:	1a2d      	subs	r5, r5, r0
 800e186:	42b5      	cmp	r5, r6
 800e188:	dd54      	ble.n	800e234 <__gethex+0x228>
 800e18a:	1bad      	subs	r5, r5, r6
 800e18c:	4629      	mov	r1, r5
 800e18e:	4620      	mov	r0, r4
 800e190:	f000 ff67 	bl	800f062 <__any_on>
 800e194:	4681      	mov	r9, r0
 800e196:	b178      	cbz	r0, 800e1b8 <__gethex+0x1ac>
 800e198:	1e6b      	subs	r3, r5, #1
 800e19a:	1159      	asrs	r1, r3, #5
 800e19c:	f003 021f 	and.w	r2, r3, #31
 800e1a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e1a4:	f04f 0901 	mov.w	r9, #1
 800e1a8:	fa09 f202 	lsl.w	r2, r9, r2
 800e1ac:	420a      	tst	r2, r1
 800e1ae:	d003      	beq.n	800e1b8 <__gethex+0x1ac>
 800e1b0:	454b      	cmp	r3, r9
 800e1b2:	dc36      	bgt.n	800e222 <__gethex+0x216>
 800e1b4:	f04f 0902 	mov.w	r9, #2
 800e1b8:	4629      	mov	r1, r5
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f7ff febe 	bl	800df3c <rshift>
 800e1c0:	442f      	add	r7, r5
 800e1c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1c6:	42bb      	cmp	r3, r7
 800e1c8:	da42      	bge.n	800e250 <__gethex+0x244>
 800e1ca:	9801      	ldr	r0, [sp, #4]
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	f000 faf7 	bl	800e7c0 <_Bfree>
 800e1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	6013      	str	r3, [r2, #0]
 800e1d8:	25a3      	movs	r5, #163	@ 0xa3
 800e1da:	e793      	b.n	800e104 <__gethex+0xf8>
 800e1dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e1e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e1e2:	d012      	beq.n	800e20a <__gethex+0x1fe>
 800e1e4:	2b20      	cmp	r3, #32
 800e1e6:	d104      	bne.n	800e1f2 <__gethex+0x1e6>
 800e1e8:	f845 bb04 	str.w	fp, [r5], #4
 800e1ec:	f04f 0b00 	mov.w	fp, #0
 800e1f0:	465b      	mov	r3, fp
 800e1f2:	7830      	ldrb	r0, [r6, #0]
 800e1f4:	9303      	str	r3, [sp, #12]
 800e1f6:	f7ff fef3 	bl	800dfe0 <__hexdig_fun>
 800e1fa:	9b03      	ldr	r3, [sp, #12]
 800e1fc:	f000 000f 	and.w	r0, r0, #15
 800e200:	4098      	lsls	r0, r3
 800e202:	ea4b 0b00 	orr.w	fp, fp, r0
 800e206:	3304      	adds	r3, #4
 800e208:	e7ae      	b.n	800e168 <__gethex+0x15c>
 800e20a:	45b1      	cmp	r9, r6
 800e20c:	d8ea      	bhi.n	800e1e4 <__gethex+0x1d8>
 800e20e:	492b      	ldr	r1, [pc, #172]	@ (800e2bc <__gethex+0x2b0>)
 800e210:	9303      	str	r3, [sp, #12]
 800e212:	2201      	movs	r2, #1
 800e214:	4630      	mov	r0, r6
 800e216:	f7fe ff3e 	bl	800d096 <strncmp>
 800e21a:	9b03      	ldr	r3, [sp, #12]
 800e21c:	2800      	cmp	r0, #0
 800e21e:	d1e1      	bne.n	800e1e4 <__gethex+0x1d8>
 800e220:	e7a2      	b.n	800e168 <__gethex+0x15c>
 800e222:	1ea9      	subs	r1, r5, #2
 800e224:	4620      	mov	r0, r4
 800e226:	f000 ff1c 	bl	800f062 <__any_on>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d0c2      	beq.n	800e1b4 <__gethex+0x1a8>
 800e22e:	f04f 0903 	mov.w	r9, #3
 800e232:	e7c1      	b.n	800e1b8 <__gethex+0x1ac>
 800e234:	da09      	bge.n	800e24a <__gethex+0x23e>
 800e236:	1b75      	subs	r5, r6, r5
 800e238:	4621      	mov	r1, r4
 800e23a:	9801      	ldr	r0, [sp, #4]
 800e23c:	462a      	mov	r2, r5
 800e23e:	f000 fcd7 	bl	800ebf0 <__lshift>
 800e242:	1b7f      	subs	r7, r7, r5
 800e244:	4604      	mov	r4, r0
 800e246:	f100 0a14 	add.w	sl, r0, #20
 800e24a:	f04f 0900 	mov.w	r9, #0
 800e24e:	e7b8      	b.n	800e1c2 <__gethex+0x1b6>
 800e250:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e254:	42bd      	cmp	r5, r7
 800e256:	dd6f      	ble.n	800e338 <__gethex+0x32c>
 800e258:	1bed      	subs	r5, r5, r7
 800e25a:	42ae      	cmp	r6, r5
 800e25c:	dc34      	bgt.n	800e2c8 <__gethex+0x2bc>
 800e25e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e262:	2b02      	cmp	r3, #2
 800e264:	d022      	beq.n	800e2ac <__gethex+0x2a0>
 800e266:	2b03      	cmp	r3, #3
 800e268:	d024      	beq.n	800e2b4 <__gethex+0x2a8>
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d115      	bne.n	800e29a <__gethex+0x28e>
 800e26e:	42ae      	cmp	r6, r5
 800e270:	d113      	bne.n	800e29a <__gethex+0x28e>
 800e272:	2e01      	cmp	r6, #1
 800e274:	d10b      	bne.n	800e28e <__gethex+0x282>
 800e276:	9a02      	ldr	r2, [sp, #8]
 800e278:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e27c:	6013      	str	r3, [r2, #0]
 800e27e:	2301      	movs	r3, #1
 800e280:	6123      	str	r3, [r4, #16]
 800e282:	f8ca 3000 	str.w	r3, [sl]
 800e286:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e288:	2562      	movs	r5, #98	@ 0x62
 800e28a:	601c      	str	r4, [r3, #0]
 800e28c:	e73a      	b.n	800e104 <__gethex+0xf8>
 800e28e:	1e71      	subs	r1, r6, #1
 800e290:	4620      	mov	r0, r4
 800e292:	f000 fee6 	bl	800f062 <__any_on>
 800e296:	2800      	cmp	r0, #0
 800e298:	d1ed      	bne.n	800e276 <__gethex+0x26a>
 800e29a:	9801      	ldr	r0, [sp, #4]
 800e29c:	4621      	mov	r1, r4
 800e29e:	f000 fa8f 	bl	800e7c0 <_Bfree>
 800e2a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	2550      	movs	r5, #80	@ 0x50
 800e2aa:	e72b      	b.n	800e104 <__gethex+0xf8>
 800e2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1f3      	bne.n	800e29a <__gethex+0x28e>
 800e2b2:	e7e0      	b.n	800e276 <__gethex+0x26a>
 800e2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1dd      	bne.n	800e276 <__gethex+0x26a>
 800e2ba:	e7ee      	b.n	800e29a <__gethex+0x28e>
 800e2bc:	0800fcd0 	.word	0x0800fcd0
 800e2c0:	0800fde5 	.word	0x0800fde5
 800e2c4:	0800fdf6 	.word	0x0800fdf6
 800e2c8:	1e6f      	subs	r7, r5, #1
 800e2ca:	f1b9 0f00 	cmp.w	r9, #0
 800e2ce:	d130      	bne.n	800e332 <__gethex+0x326>
 800e2d0:	b127      	cbz	r7, 800e2dc <__gethex+0x2d0>
 800e2d2:	4639      	mov	r1, r7
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f000 fec4 	bl	800f062 <__any_on>
 800e2da:	4681      	mov	r9, r0
 800e2dc:	117a      	asrs	r2, r7, #5
 800e2de:	2301      	movs	r3, #1
 800e2e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e2e4:	f007 071f 	and.w	r7, r7, #31
 800e2e8:	40bb      	lsls	r3, r7
 800e2ea:	4213      	tst	r3, r2
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	bf18      	it	ne
 800e2f2:	f049 0902 	orrne.w	r9, r9, #2
 800e2f6:	f7ff fe21 	bl	800df3c <rshift>
 800e2fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e2fe:	1b76      	subs	r6, r6, r5
 800e300:	2502      	movs	r5, #2
 800e302:	f1b9 0f00 	cmp.w	r9, #0
 800e306:	d047      	beq.n	800e398 <__gethex+0x38c>
 800e308:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d015      	beq.n	800e33c <__gethex+0x330>
 800e310:	2b03      	cmp	r3, #3
 800e312:	d017      	beq.n	800e344 <__gethex+0x338>
 800e314:	2b01      	cmp	r3, #1
 800e316:	d109      	bne.n	800e32c <__gethex+0x320>
 800e318:	f019 0f02 	tst.w	r9, #2
 800e31c:	d006      	beq.n	800e32c <__gethex+0x320>
 800e31e:	f8da 3000 	ldr.w	r3, [sl]
 800e322:	ea49 0903 	orr.w	r9, r9, r3
 800e326:	f019 0f01 	tst.w	r9, #1
 800e32a:	d10e      	bne.n	800e34a <__gethex+0x33e>
 800e32c:	f045 0510 	orr.w	r5, r5, #16
 800e330:	e032      	b.n	800e398 <__gethex+0x38c>
 800e332:	f04f 0901 	mov.w	r9, #1
 800e336:	e7d1      	b.n	800e2dc <__gethex+0x2d0>
 800e338:	2501      	movs	r5, #1
 800e33a:	e7e2      	b.n	800e302 <__gethex+0x2f6>
 800e33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e33e:	f1c3 0301 	rsb	r3, r3, #1
 800e342:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e346:	2b00      	cmp	r3, #0
 800e348:	d0f0      	beq.n	800e32c <__gethex+0x320>
 800e34a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e34e:	f104 0314 	add.w	r3, r4, #20
 800e352:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e356:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e35a:	f04f 0c00 	mov.w	ip, #0
 800e35e:	4618      	mov	r0, r3
 800e360:	f853 2b04 	ldr.w	r2, [r3], #4
 800e364:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e368:	d01b      	beq.n	800e3a2 <__gethex+0x396>
 800e36a:	3201      	adds	r2, #1
 800e36c:	6002      	str	r2, [r0, #0]
 800e36e:	2d02      	cmp	r5, #2
 800e370:	f104 0314 	add.w	r3, r4, #20
 800e374:	d13c      	bne.n	800e3f0 <__gethex+0x3e4>
 800e376:	f8d8 2000 	ldr.w	r2, [r8]
 800e37a:	3a01      	subs	r2, #1
 800e37c:	42b2      	cmp	r2, r6
 800e37e:	d109      	bne.n	800e394 <__gethex+0x388>
 800e380:	1171      	asrs	r1, r6, #5
 800e382:	2201      	movs	r2, #1
 800e384:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e388:	f006 061f 	and.w	r6, r6, #31
 800e38c:	fa02 f606 	lsl.w	r6, r2, r6
 800e390:	421e      	tst	r6, r3
 800e392:	d13a      	bne.n	800e40a <__gethex+0x3fe>
 800e394:	f045 0520 	orr.w	r5, r5, #32
 800e398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e39a:	601c      	str	r4, [r3, #0]
 800e39c:	9b02      	ldr	r3, [sp, #8]
 800e39e:	601f      	str	r7, [r3, #0]
 800e3a0:	e6b0      	b.n	800e104 <__gethex+0xf8>
 800e3a2:	4299      	cmp	r1, r3
 800e3a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e3a8:	d8d9      	bhi.n	800e35e <__gethex+0x352>
 800e3aa:	68a3      	ldr	r3, [r4, #8]
 800e3ac:	459b      	cmp	fp, r3
 800e3ae:	db17      	blt.n	800e3e0 <__gethex+0x3d4>
 800e3b0:	6861      	ldr	r1, [r4, #4]
 800e3b2:	9801      	ldr	r0, [sp, #4]
 800e3b4:	3101      	adds	r1, #1
 800e3b6:	f000 f9c3 	bl	800e740 <_Balloc>
 800e3ba:	4681      	mov	r9, r0
 800e3bc:	b918      	cbnz	r0, 800e3c6 <__gethex+0x3ba>
 800e3be:	4b1a      	ldr	r3, [pc, #104]	@ (800e428 <__gethex+0x41c>)
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	2184      	movs	r1, #132	@ 0x84
 800e3c4:	e6c5      	b.n	800e152 <__gethex+0x146>
 800e3c6:	6922      	ldr	r2, [r4, #16]
 800e3c8:	3202      	adds	r2, #2
 800e3ca:	f104 010c 	add.w	r1, r4, #12
 800e3ce:	0092      	lsls	r2, r2, #2
 800e3d0:	300c      	adds	r0, #12
 800e3d2:	f7fe fefc 	bl	800d1ce <memcpy>
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	9801      	ldr	r0, [sp, #4]
 800e3da:	f000 f9f1 	bl	800e7c0 <_Bfree>
 800e3de:	464c      	mov	r4, r9
 800e3e0:	6923      	ldr	r3, [r4, #16]
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e3e8:	6122      	str	r2, [r4, #16]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	615a      	str	r2, [r3, #20]
 800e3ee:	e7be      	b.n	800e36e <__gethex+0x362>
 800e3f0:	6922      	ldr	r2, [r4, #16]
 800e3f2:	455a      	cmp	r2, fp
 800e3f4:	dd0b      	ble.n	800e40e <__gethex+0x402>
 800e3f6:	2101      	movs	r1, #1
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f7ff fd9f 	bl	800df3c <rshift>
 800e3fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e402:	3701      	adds	r7, #1
 800e404:	42bb      	cmp	r3, r7
 800e406:	f6ff aee0 	blt.w	800e1ca <__gethex+0x1be>
 800e40a:	2501      	movs	r5, #1
 800e40c:	e7c2      	b.n	800e394 <__gethex+0x388>
 800e40e:	f016 061f 	ands.w	r6, r6, #31
 800e412:	d0fa      	beq.n	800e40a <__gethex+0x3fe>
 800e414:	4453      	add	r3, sl
 800e416:	f1c6 0620 	rsb	r6, r6, #32
 800e41a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e41e:	f000 fa81 	bl	800e924 <__hi0bits>
 800e422:	42b0      	cmp	r0, r6
 800e424:	dbe7      	blt.n	800e3f6 <__gethex+0x3ea>
 800e426:	e7f0      	b.n	800e40a <__gethex+0x3fe>
 800e428:	0800fde5 	.word	0x0800fde5

0800e42c <L_shift>:
 800e42c:	f1c2 0208 	rsb	r2, r2, #8
 800e430:	0092      	lsls	r2, r2, #2
 800e432:	b570      	push	{r4, r5, r6, lr}
 800e434:	f1c2 0620 	rsb	r6, r2, #32
 800e438:	6843      	ldr	r3, [r0, #4]
 800e43a:	6804      	ldr	r4, [r0, #0]
 800e43c:	fa03 f506 	lsl.w	r5, r3, r6
 800e440:	432c      	orrs	r4, r5
 800e442:	40d3      	lsrs	r3, r2
 800e444:	6004      	str	r4, [r0, #0]
 800e446:	f840 3f04 	str.w	r3, [r0, #4]!
 800e44a:	4288      	cmp	r0, r1
 800e44c:	d3f4      	bcc.n	800e438 <L_shift+0xc>
 800e44e:	bd70      	pop	{r4, r5, r6, pc}

0800e450 <__match>:
 800e450:	b530      	push	{r4, r5, lr}
 800e452:	6803      	ldr	r3, [r0, #0]
 800e454:	3301      	adds	r3, #1
 800e456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e45a:	b914      	cbnz	r4, 800e462 <__match+0x12>
 800e45c:	6003      	str	r3, [r0, #0]
 800e45e:	2001      	movs	r0, #1
 800e460:	bd30      	pop	{r4, r5, pc}
 800e462:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e466:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e46a:	2d19      	cmp	r5, #25
 800e46c:	bf98      	it	ls
 800e46e:	3220      	addls	r2, #32
 800e470:	42a2      	cmp	r2, r4
 800e472:	d0f0      	beq.n	800e456 <__match+0x6>
 800e474:	2000      	movs	r0, #0
 800e476:	e7f3      	b.n	800e460 <__match+0x10>

0800e478 <__hexnan>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	680b      	ldr	r3, [r1, #0]
 800e47e:	6801      	ldr	r1, [r0, #0]
 800e480:	115e      	asrs	r6, r3, #5
 800e482:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e486:	f013 031f 	ands.w	r3, r3, #31
 800e48a:	b087      	sub	sp, #28
 800e48c:	bf18      	it	ne
 800e48e:	3604      	addne	r6, #4
 800e490:	2500      	movs	r5, #0
 800e492:	1f37      	subs	r7, r6, #4
 800e494:	4682      	mov	sl, r0
 800e496:	4690      	mov	r8, r2
 800e498:	9301      	str	r3, [sp, #4]
 800e49a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e49e:	46b9      	mov	r9, r7
 800e4a0:	463c      	mov	r4, r7
 800e4a2:	9502      	str	r5, [sp, #8]
 800e4a4:	46ab      	mov	fp, r5
 800e4a6:	784a      	ldrb	r2, [r1, #1]
 800e4a8:	1c4b      	adds	r3, r1, #1
 800e4aa:	9303      	str	r3, [sp, #12]
 800e4ac:	b342      	cbz	r2, 800e500 <__hexnan+0x88>
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	9105      	str	r1, [sp, #20]
 800e4b2:	9204      	str	r2, [sp, #16]
 800e4b4:	f7ff fd94 	bl	800dfe0 <__hexdig_fun>
 800e4b8:	2800      	cmp	r0, #0
 800e4ba:	d151      	bne.n	800e560 <__hexnan+0xe8>
 800e4bc:	9a04      	ldr	r2, [sp, #16]
 800e4be:	9905      	ldr	r1, [sp, #20]
 800e4c0:	2a20      	cmp	r2, #32
 800e4c2:	d818      	bhi.n	800e4f6 <__hexnan+0x7e>
 800e4c4:	9b02      	ldr	r3, [sp, #8]
 800e4c6:	459b      	cmp	fp, r3
 800e4c8:	dd13      	ble.n	800e4f2 <__hexnan+0x7a>
 800e4ca:	454c      	cmp	r4, r9
 800e4cc:	d206      	bcs.n	800e4dc <__hexnan+0x64>
 800e4ce:	2d07      	cmp	r5, #7
 800e4d0:	dc04      	bgt.n	800e4dc <__hexnan+0x64>
 800e4d2:	462a      	mov	r2, r5
 800e4d4:	4649      	mov	r1, r9
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f7ff ffa8 	bl	800e42c <L_shift>
 800e4dc:	4544      	cmp	r4, r8
 800e4de:	d952      	bls.n	800e586 <__hexnan+0x10e>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f1a4 0904 	sub.w	r9, r4, #4
 800e4e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e4ea:	f8cd b008 	str.w	fp, [sp, #8]
 800e4ee:	464c      	mov	r4, r9
 800e4f0:	461d      	mov	r5, r3
 800e4f2:	9903      	ldr	r1, [sp, #12]
 800e4f4:	e7d7      	b.n	800e4a6 <__hexnan+0x2e>
 800e4f6:	2a29      	cmp	r2, #41	@ 0x29
 800e4f8:	d157      	bne.n	800e5aa <__hexnan+0x132>
 800e4fa:	3102      	adds	r1, #2
 800e4fc:	f8ca 1000 	str.w	r1, [sl]
 800e500:	f1bb 0f00 	cmp.w	fp, #0
 800e504:	d051      	beq.n	800e5aa <__hexnan+0x132>
 800e506:	454c      	cmp	r4, r9
 800e508:	d206      	bcs.n	800e518 <__hexnan+0xa0>
 800e50a:	2d07      	cmp	r5, #7
 800e50c:	dc04      	bgt.n	800e518 <__hexnan+0xa0>
 800e50e:	462a      	mov	r2, r5
 800e510:	4649      	mov	r1, r9
 800e512:	4620      	mov	r0, r4
 800e514:	f7ff ff8a 	bl	800e42c <L_shift>
 800e518:	4544      	cmp	r4, r8
 800e51a:	d936      	bls.n	800e58a <__hexnan+0x112>
 800e51c:	f1a8 0204 	sub.w	r2, r8, #4
 800e520:	4623      	mov	r3, r4
 800e522:	f853 1b04 	ldr.w	r1, [r3], #4
 800e526:	f842 1f04 	str.w	r1, [r2, #4]!
 800e52a:	429f      	cmp	r7, r3
 800e52c:	d2f9      	bcs.n	800e522 <__hexnan+0xaa>
 800e52e:	1b3b      	subs	r3, r7, r4
 800e530:	f023 0303 	bic.w	r3, r3, #3
 800e534:	3304      	adds	r3, #4
 800e536:	3401      	adds	r4, #1
 800e538:	3e03      	subs	r6, #3
 800e53a:	42b4      	cmp	r4, r6
 800e53c:	bf88      	it	hi
 800e53e:	2304      	movhi	r3, #4
 800e540:	4443      	add	r3, r8
 800e542:	2200      	movs	r2, #0
 800e544:	f843 2b04 	str.w	r2, [r3], #4
 800e548:	429f      	cmp	r7, r3
 800e54a:	d2fb      	bcs.n	800e544 <__hexnan+0xcc>
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	b91b      	cbnz	r3, 800e558 <__hexnan+0xe0>
 800e550:	4547      	cmp	r7, r8
 800e552:	d128      	bne.n	800e5a6 <__hexnan+0x12e>
 800e554:	2301      	movs	r3, #1
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	2005      	movs	r0, #5
 800e55a:	b007      	add	sp, #28
 800e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e560:	3501      	adds	r5, #1
 800e562:	2d08      	cmp	r5, #8
 800e564:	f10b 0b01 	add.w	fp, fp, #1
 800e568:	dd06      	ble.n	800e578 <__hexnan+0x100>
 800e56a:	4544      	cmp	r4, r8
 800e56c:	d9c1      	bls.n	800e4f2 <__hexnan+0x7a>
 800e56e:	2300      	movs	r3, #0
 800e570:	f844 3c04 	str.w	r3, [r4, #-4]
 800e574:	2501      	movs	r5, #1
 800e576:	3c04      	subs	r4, #4
 800e578:	6822      	ldr	r2, [r4, #0]
 800e57a:	f000 000f 	and.w	r0, r0, #15
 800e57e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e582:	6020      	str	r0, [r4, #0]
 800e584:	e7b5      	b.n	800e4f2 <__hexnan+0x7a>
 800e586:	2508      	movs	r5, #8
 800e588:	e7b3      	b.n	800e4f2 <__hexnan+0x7a>
 800e58a:	9b01      	ldr	r3, [sp, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d0dd      	beq.n	800e54c <__hexnan+0xd4>
 800e590:	f1c3 0320 	rsb	r3, r3, #32
 800e594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e598:	40da      	lsrs	r2, r3
 800e59a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e59e:	4013      	ands	r3, r2
 800e5a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e5a4:	e7d2      	b.n	800e54c <__hexnan+0xd4>
 800e5a6:	3f04      	subs	r7, #4
 800e5a8:	e7d0      	b.n	800e54c <__hexnan+0xd4>
 800e5aa:	2004      	movs	r0, #4
 800e5ac:	e7d5      	b.n	800e55a <__hexnan+0xe2>
	...

0800e5b0 <malloc>:
 800e5b0:	4b02      	ldr	r3, [pc, #8]	@ (800e5bc <malloc+0xc>)
 800e5b2:	4601      	mov	r1, r0
 800e5b4:	6818      	ldr	r0, [r3, #0]
 800e5b6:	f000 b825 	b.w	800e604 <_malloc_r>
 800e5ba:	bf00      	nop
 800e5bc:	20000274 	.word	0x20000274

0800e5c0 <sbrk_aligned>:
 800e5c0:	b570      	push	{r4, r5, r6, lr}
 800e5c2:	4e0f      	ldr	r6, [pc, #60]	@ (800e600 <sbrk_aligned+0x40>)
 800e5c4:	460c      	mov	r4, r1
 800e5c6:	6831      	ldr	r1, [r6, #0]
 800e5c8:	4605      	mov	r5, r0
 800e5ca:	b911      	cbnz	r1, 800e5d2 <sbrk_aligned+0x12>
 800e5cc:	f001 f810 	bl	800f5f0 <_sbrk_r>
 800e5d0:	6030      	str	r0, [r6, #0]
 800e5d2:	4621      	mov	r1, r4
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	f001 f80b 	bl	800f5f0 <_sbrk_r>
 800e5da:	1c43      	adds	r3, r0, #1
 800e5dc:	d103      	bne.n	800e5e6 <sbrk_aligned+0x26>
 800e5de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	bd70      	pop	{r4, r5, r6, pc}
 800e5e6:	1cc4      	adds	r4, r0, #3
 800e5e8:	f024 0403 	bic.w	r4, r4, #3
 800e5ec:	42a0      	cmp	r0, r4
 800e5ee:	d0f8      	beq.n	800e5e2 <sbrk_aligned+0x22>
 800e5f0:	1a21      	subs	r1, r4, r0
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	f000 fffc 	bl	800f5f0 <_sbrk_r>
 800e5f8:	3001      	adds	r0, #1
 800e5fa:	d1f2      	bne.n	800e5e2 <sbrk_aligned+0x22>
 800e5fc:	e7ef      	b.n	800e5de <sbrk_aligned+0x1e>
 800e5fe:	bf00      	nop
 800e600:	20002634 	.word	0x20002634

0800e604 <_malloc_r>:
 800e604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e608:	1ccd      	adds	r5, r1, #3
 800e60a:	f025 0503 	bic.w	r5, r5, #3
 800e60e:	3508      	adds	r5, #8
 800e610:	2d0c      	cmp	r5, #12
 800e612:	bf38      	it	cc
 800e614:	250c      	movcc	r5, #12
 800e616:	2d00      	cmp	r5, #0
 800e618:	4606      	mov	r6, r0
 800e61a:	db01      	blt.n	800e620 <_malloc_r+0x1c>
 800e61c:	42a9      	cmp	r1, r5
 800e61e:	d904      	bls.n	800e62a <_malloc_r+0x26>
 800e620:	230c      	movs	r3, #12
 800e622:	6033      	str	r3, [r6, #0]
 800e624:	2000      	movs	r0, #0
 800e626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e62a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e700 <_malloc_r+0xfc>
 800e62e:	f000 f87b 	bl	800e728 <__malloc_lock>
 800e632:	f8d8 3000 	ldr.w	r3, [r8]
 800e636:	461c      	mov	r4, r3
 800e638:	bb44      	cbnz	r4, 800e68c <_malloc_r+0x88>
 800e63a:	4629      	mov	r1, r5
 800e63c:	4630      	mov	r0, r6
 800e63e:	f7ff ffbf 	bl	800e5c0 <sbrk_aligned>
 800e642:	1c43      	adds	r3, r0, #1
 800e644:	4604      	mov	r4, r0
 800e646:	d158      	bne.n	800e6fa <_malloc_r+0xf6>
 800e648:	f8d8 4000 	ldr.w	r4, [r8]
 800e64c:	4627      	mov	r7, r4
 800e64e:	2f00      	cmp	r7, #0
 800e650:	d143      	bne.n	800e6da <_malloc_r+0xd6>
 800e652:	2c00      	cmp	r4, #0
 800e654:	d04b      	beq.n	800e6ee <_malloc_r+0xea>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	4639      	mov	r1, r7
 800e65a:	4630      	mov	r0, r6
 800e65c:	eb04 0903 	add.w	r9, r4, r3
 800e660:	f000 ffc6 	bl	800f5f0 <_sbrk_r>
 800e664:	4581      	cmp	r9, r0
 800e666:	d142      	bne.n	800e6ee <_malloc_r+0xea>
 800e668:	6821      	ldr	r1, [r4, #0]
 800e66a:	1a6d      	subs	r5, r5, r1
 800e66c:	4629      	mov	r1, r5
 800e66e:	4630      	mov	r0, r6
 800e670:	f7ff ffa6 	bl	800e5c0 <sbrk_aligned>
 800e674:	3001      	adds	r0, #1
 800e676:	d03a      	beq.n	800e6ee <_malloc_r+0xea>
 800e678:	6823      	ldr	r3, [r4, #0]
 800e67a:	442b      	add	r3, r5
 800e67c:	6023      	str	r3, [r4, #0]
 800e67e:	f8d8 3000 	ldr.w	r3, [r8]
 800e682:	685a      	ldr	r2, [r3, #4]
 800e684:	bb62      	cbnz	r2, 800e6e0 <_malloc_r+0xdc>
 800e686:	f8c8 7000 	str.w	r7, [r8]
 800e68a:	e00f      	b.n	800e6ac <_malloc_r+0xa8>
 800e68c:	6822      	ldr	r2, [r4, #0]
 800e68e:	1b52      	subs	r2, r2, r5
 800e690:	d420      	bmi.n	800e6d4 <_malloc_r+0xd0>
 800e692:	2a0b      	cmp	r2, #11
 800e694:	d917      	bls.n	800e6c6 <_malloc_r+0xc2>
 800e696:	1961      	adds	r1, r4, r5
 800e698:	42a3      	cmp	r3, r4
 800e69a:	6025      	str	r5, [r4, #0]
 800e69c:	bf18      	it	ne
 800e69e:	6059      	strne	r1, [r3, #4]
 800e6a0:	6863      	ldr	r3, [r4, #4]
 800e6a2:	bf08      	it	eq
 800e6a4:	f8c8 1000 	streq.w	r1, [r8]
 800e6a8:	5162      	str	r2, [r4, r5]
 800e6aa:	604b      	str	r3, [r1, #4]
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	f000 f841 	bl	800e734 <__malloc_unlock>
 800e6b2:	f104 000b 	add.w	r0, r4, #11
 800e6b6:	1d23      	adds	r3, r4, #4
 800e6b8:	f020 0007 	bic.w	r0, r0, #7
 800e6bc:	1ac2      	subs	r2, r0, r3
 800e6be:	bf1c      	itt	ne
 800e6c0:	1a1b      	subne	r3, r3, r0
 800e6c2:	50a3      	strne	r3, [r4, r2]
 800e6c4:	e7af      	b.n	800e626 <_malloc_r+0x22>
 800e6c6:	6862      	ldr	r2, [r4, #4]
 800e6c8:	42a3      	cmp	r3, r4
 800e6ca:	bf0c      	ite	eq
 800e6cc:	f8c8 2000 	streq.w	r2, [r8]
 800e6d0:	605a      	strne	r2, [r3, #4]
 800e6d2:	e7eb      	b.n	800e6ac <_malloc_r+0xa8>
 800e6d4:	4623      	mov	r3, r4
 800e6d6:	6864      	ldr	r4, [r4, #4]
 800e6d8:	e7ae      	b.n	800e638 <_malloc_r+0x34>
 800e6da:	463c      	mov	r4, r7
 800e6dc:	687f      	ldr	r7, [r7, #4]
 800e6de:	e7b6      	b.n	800e64e <_malloc_r+0x4a>
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	42a3      	cmp	r3, r4
 800e6e6:	d1fb      	bne.n	800e6e0 <_malloc_r+0xdc>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	6053      	str	r3, [r2, #4]
 800e6ec:	e7de      	b.n	800e6ac <_malloc_r+0xa8>
 800e6ee:	230c      	movs	r3, #12
 800e6f0:	6033      	str	r3, [r6, #0]
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f000 f81e 	bl	800e734 <__malloc_unlock>
 800e6f8:	e794      	b.n	800e624 <_malloc_r+0x20>
 800e6fa:	6005      	str	r5, [r0, #0]
 800e6fc:	e7d6      	b.n	800e6ac <_malloc_r+0xa8>
 800e6fe:	bf00      	nop
 800e700:	20002638 	.word	0x20002638

0800e704 <__ascii_mbtowc>:
 800e704:	b082      	sub	sp, #8
 800e706:	b901      	cbnz	r1, 800e70a <__ascii_mbtowc+0x6>
 800e708:	a901      	add	r1, sp, #4
 800e70a:	b142      	cbz	r2, 800e71e <__ascii_mbtowc+0x1a>
 800e70c:	b14b      	cbz	r3, 800e722 <__ascii_mbtowc+0x1e>
 800e70e:	7813      	ldrb	r3, [r2, #0]
 800e710:	600b      	str	r3, [r1, #0]
 800e712:	7812      	ldrb	r2, [r2, #0]
 800e714:	1e10      	subs	r0, r2, #0
 800e716:	bf18      	it	ne
 800e718:	2001      	movne	r0, #1
 800e71a:	b002      	add	sp, #8
 800e71c:	4770      	bx	lr
 800e71e:	4610      	mov	r0, r2
 800e720:	e7fb      	b.n	800e71a <__ascii_mbtowc+0x16>
 800e722:	f06f 0001 	mvn.w	r0, #1
 800e726:	e7f8      	b.n	800e71a <__ascii_mbtowc+0x16>

0800e728 <__malloc_lock>:
 800e728:	4801      	ldr	r0, [pc, #4]	@ (800e730 <__malloc_lock+0x8>)
 800e72a:	f7fe bd4e 	b.w	800d1ca <__retarget_lock_acquire_recursive>
 800e72e:	bf00      	nop
 800e730:	20002630 	.word	0x20002630

0800e734 <__malloc_unlock>:
 800e734:	4801      	ldr	r0, [pc, #4]	@ (800e73c <__malloc_unlock+0x8>)
 800e736:	f7fe bd49 	b.w	800d1cc <__retarget_lock_release_recursive>
 800e73a:	bf00      	nop
 800e73c:	20002630 	.word	0x20002630

0800e740 <_Balloc>:
 800e740:	b570      	push	{r4, r5, r6, lr}
 800e742:	69c6      	ldr	r6, [r0, #28]
 800e744:	4604      	mov	r4, r0
 800e746:	460d      	mov	r5, r1
 800e748:	b976      	cbnz	r6, 800e768 <_Balloc+0x28>
 800e74a:	2010      	movs	r0, #16
 800e74c:	f7ff ff30 	bl	800e5b0 <malloc>
 800e750:	4602      	mov	r2, r0
 800e752:	61e0      	str	r0, [r4, #28]
 800e754:	b920      	cbnz	r0, 800e760 <_Balloc+0x20>
 800e756:	4b18      	ldr	r3, [pc, #96]	@ (800e7b8 <_Balloc+0x78>)
 800e758:	4818      	ldr	r0, [pc, #96]	@ (800e7bc <_Balloc+0x7c>)
 800e75a:	216b      	movs	r1, #107	@ 0x6b
 800e75c:	f000 ff58 	bl	800f610 <__assert_func>
 800e760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e764:	6006      	str	r6, [r0, #0]
 800e766:	60c6      	str	r6, [r0, #12]
 800e768:	69e6      	ldr	r6, [r4, #28]
 800e76a:	68f3      	ldr	r3, [r6, #12]
 800e76c:	b183      	cbz	r3, 800e790 <_Balloc+0x50>
 800e76e:	69e3      	ldr	r3, [r4, #28]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e776:	b9b8      	cbnz	r0, 800e7a8 <_Balloc+0x68>
 800e778:	2101      	movs	r1, #1
 800e77a:	fa01 f605 	lsl.w	r6, r1, r5
 800e77e:	1d72      	adds	r2, r6, #5
 800e780:	0092      	lsls	r2, r2, #2
 800e782:	4620      	mov	r0, r4
 800e784:	f000 ff62 	bl	800f64c <_calloc_r>
 800e788:	b160      	cbz	r0, 800e7a4 <_Balloc+0x64>
 800e78a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e78e:	e00e      	b.n	800e7ae <_Balloc+0x6e>
 800e790:	2221      	movs	r2, #33	@ 0x21
 800e792:	2104      	movs	r1, #4
 800e794:	4620      	mov	r0, r4
 800e796:	f000 ff59 	bl	800f64c <_calloc_r>
 800e79a:	69e3      	ldr	r3, [r4, #28]
 800e79c:	60f0      	str	r0, [r6, #12]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1e4      	bne.n	800e76e <_Balloc+0x2e>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	bd70      	pop	{r4, r5, r6, pc}
 800e7a8:	6802      	ldr	r2, [r0, #0]
 800e7aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7b4:	e7f7      	b.n	800e7a6 <_Balloc+0x66>
 800e7b6:	bf00      	nop
 800e7b8:	0800fd76 	.word	0x0800fd76
 800e7bc:	0800fe56 	.word	0x0800fe56

0800e7c0 <_Bfree>:
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	69c6      	ldr	r6, [r0, #28]
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	460c      	mov	r4, r1
 800e7c8:	b976      	cbnz	r6, 800e7e8 <_Bfree+0x28>
 800e7ca:	2010      	movs	r0, #16
 800e7cc:	f7ff fef0 	bl	800e5b0 <malloc>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	61e8      	str	r0, [r5, #28]
 800e7d4:	b920      	cbnz	r0, 800e7e0 <_Bfree+0x20>
 800e7d6:	4b09      	ldr	r3, [pc, #36]	@ (800e7fc <_Bfree+0x3c>)
 800e7d8:	4809      	ldr	r0, [pc, #36]	@ (800e800 <_Bfree+0x40>)
 800e7da:	218f      	movs	r1, #143	@ 0x8f
 800e7dc:	f000 ff18 	bl	800f610 <__assert_func>
 800e7e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7e4:	6006      	str	r6, [r0, #0]
 800e7e6:	60c6      	str	r6, [r0, #12]
 800e7e8:	b13c      	cbz	r4, 800e7fa <_Bfree+0x3a>
 800e7ea:	69eb      	ldr	r3, [r5, #28]
 800e7ec:	6862      	ldr	r2, [r4, #4]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7f4:	6021      	str	r1, [r4, #0]
 800e7f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e7fa:	bd70      	pop	{r4, r5, r6, pc}
 800e7fc:	0800fd76 	.word	0x0800fd76
 800e800:	0800fe56 	.word	0x0800fe56

0800e804 <__multadd>:
 800e804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e808:	690d      	ldr	r5, [r1, #16]
 800e80a:	4607      	mov	r7, r0
 800e80c:	460c      	mov	r4, r1
 800e80e:	461e      	mov	r6, r3
 800e810:	f101 0c14 	add.w	ip, r1, #20
 800e814:	2000      	movs	r0, #0
 800e816:	f8dc 3000 	ldr.w	r3, [ip]
 800e81a:	b299      	uxth	r1, r3
 800e81c:	fb02 6101 	mla	r1, r2, r1, r6
 800e820:	0c1e      	lsrs	r6, r3, #16
 800e822:	0c0b      	lsrs	r3, r1, #16
 800e824:	fb02 3306 	mla	r3, r2, r6, r3
 800e828:	b289      	uxth	r1, r1
 800e82a:	3001      	adds	r0, #1
 800e82c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e830:	4285      	cmp	r5, r0
 800e832:	f84c 1b04 	str.w	r1, [ip], #4
 800e836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e83a:	dcec      	bgt.n	800e816 <__multadd+0x12>
 800e83c:	b30e      	cbz	r6, 800e882 <__multadd+0x7e>
 800e83e:	68a3      	ldr	r3, [r4, #8]
 800e840:	42ab      	cmp	r3, r5
 800e842:	dc19      	bgt.n	800e878 <__multadd+0x74>
 800e844:	6861      	ldr	r1, [r4, #4]
 800e846:	4638      	mov	r0, r7
 800e848:	3101      	adds	r1, #1
 800e84a:	f7ff ff79 	bl	800e740 <_Balloc>
 800e84e:	4680      	mov	r8, r0
 800e850:	b928      	cbnz	r0, 800e85e <__multadd+0x5a>
 800e852:	4602      	mov	r2, r0
 800e854:	4b0c      	ldr	r3, [pc, #48]	@ (800e888 <__multadd+0x84>)
 800e856:	480d      	ldr	r0, [pc, #52]	@ (800e88c <__multadd+0x88>)
 800e858:	21ba      	movs	r1, #186	@ 0xba
 800e85a:	f000 fed9 	bl	800f610 <__assert_func>
 800e85e:	6922      	ldr	r2, [r4, #16]
 800e860:	3202      	adds	r2, #2
 800e862:	f104 010c 	add.w	r1, r4, #12
 800e866:	0092      	lsls	r2, r2, #2
 800e868:	300c      	adds	r0, #12
 800e86a:	f7fe fcb0 	bl	800d1ce <memcpy>
 800e86e:	4621      	mov	r1, r4
 800e870:	4638      	mov	r0, r7
 800e872:	f7ff ffa5 	bl	800e7c0 <_Bfree>
 800e876:	4644      	mov	r4, r8
 800e878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e87c:	3501      	adds	r5, #1
 800e87e:	615e      	str	r6, [r3, #20]
 800e880:	6125      	str	r5, [r4, #16]
 800e882:	4620      	mov	r0, r4
 800e884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e888:	0800fde5 	.word	0x0800fde5
 800e88c:	0800fe56 	.word	0x0800fe56

0800e890 <__s2b>:
 800e890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e894:	460c      	mov	r4, r1
 800e896:	4615      	mov	r5, r2
 800e898:	461f      	mov	r7, r3
 800e89a:	2209      	movs	r2, #9
 800e89c:	3308      	adds	r3, #8
 800e89e:	4606      	mov	r6, r0
 800e8a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	db09      	blt.n	800e8c0 <__s2b+0x30>
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f7ff ff47 	bl	800e740 <_Balloc>
 800e8b2:	b940      	cbnz	r0, 800e8c6 <__s2b+0x36>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	4b19      	ldr	r3, [pc, #100]	@ (800e91c <__s2b+0x8c>)
 800e8b8:	4819      	ldr	r0, [pc, #100]	@ (800e920 <__s2b+0x90>)
 800e8ba:	21d3      	movs	r1, #211	@ 0xd3
 800e8bc:	f000 fea8 	bl	800f610 <__assert_func>
 800e8c0:	0052      	lsls	r2, r2, #1
 800e8c2:	3101      	adds	r1, #1
 800e8c4:	e7f0      	b.n	800e8a8 <__s2b+0x18>
 800e8c6:	9b08      	ldr	r3, [sp, #32]
 800e8c8:	6143      	str	r3, [r0, #20]
 800e8ca:	2d09      	cmp	r5, #9
 800e8cc:	f04f 0301 	mov.w	r3, #1
 800e8d0:	6103      	str	r3, [r0, #16]
 800e8d2:	dd16      	ble.n	800e902 <__s2b+0x72>
 800e8d4:	f104 0909 	add.w	r9, r4, #9
 800e8d8:	46c8      	mov	r8, r9
 800e8da:	442c      	add	r4, r5
 800e8dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e8e0:	4601      	mov	r1, r0
 800e8e2:	3b30      	subs	r3, #48	@ 0x30
 800e8e4:	220a      	movs	r2, #10
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7ff ff8c 	bl	800e804 <__multadd>
 800e8ec:	45a0      	cmp	r8, r4
 800e8ee:	d1f5      	bne.n	800e8dc <__s2b+0x4c>
 800e8f0:	f1a5 0408 	sub.w	r4, r5, #8
 800e8f4:	444c      	add	r4, r9
 800e8f6:	1b2d      	subs	r5, r5, r4
 800e8f8:	1963      	adds	r3, r4, r5
 800e8fa:	42bb      	cmp	r3, r7
 800e8fc:	db04      	blt.n	800e908 <__s2b+0x78>
 800e8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e902:	340a      	adds	r4, #10
 800e904:	2509      	movs	r5, #9
 800e906:	e7f6      	b.n	800e8f6 <__s2b+0x66>
 800e908:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e90c:	4601      	mov	r1, r0
 800e90e:	3b30      	subs	r3, #48	@ 0x30
 800e910:	220a      	movs	r2, #10
 800e912:	4630      	mov	r0, r6
 800e914:	f7ff ff76 	bl	800e804 <__multadd>
 800e918:	e7ee      	b.n	800e8f8 <__s2b+0x68>
 800e91a:	bf00      	nop
 800e91c:	0800fde5 	.word	0x0800fde5
 800e920:	0800fe56 	.word	0x0800fe56

0800e924 <__hi0bits>:
 800e924:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e928:	4603      	mov	r3, r0
 800e92a:	bf36      	itet	cc
 800e92c:	0403      	lslcc	r3, r0, #16
 800e92e:	2000      	movcs	r0, #0
 800e930:	2010      	movcc	r0, #16
 800e932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e936:	bf3c      	itt	cc
 800e938:	021b      	lslcc	r3, r3, #8
 800e93a:	3008      	addcc	r0, #8
 800e93c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e940:	bf3c      	itt	cc
 800e942:	011b      	lslcc	r3, r3, #4
 800e944:	3004      	addcc	r0, #4
 800e946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e94a:	bf3c      	itt	cc
 800e94c:	009b      	lslcc	r3, r3, #2
 800e94e:	3002      	addcc	r0, #2
 800e950:	2b00      	cmp	r3, #0
 800e952:	db05      	blt.n	800e960 <__hi0bits+0x3c>
 800e954:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e958:	f100 0001 	add.w	r0, r0, #1
 800e95c:	bf08      	it	eq
 800e95e:	2020      	moveq	r0, #32
 800e960:	4770      	bx	lr

0800e962 <__lo0bits>:
 800e962:	6803      	ldr	r3, [r0, #0]
 800e964:	4602      	mov	r2, r0
 800e966:	f013 0007 	ands.w	r0, r3, #7
 800e96a:	d00b      	beq.n	800e984 <__lo0bits+0x22>
 800e96c:	07d9      	lsls	r1, r3, #31
 800e96e:	d421      	bmi.n	800e9b4 <__lo0bits+0x52>
 800e970:	0798      	lsls	r0, r3, #30
 800e972:	bf49      	itett	mi
 800e974:	085b      	lsrmi	r3, r3, #1
 800e976:	089b      	lsrpl	r3, r3, #2
 800e978:	2001      	movmi	r0, #1
 800e97a:	6013      	strmi	r3, [r2, #0]
 800e97c:	bf5c      	itt	pl
 800e97e:	6013      	strpl	r3, [r2, #0]
 800e980:	2002      	movpl	r0, #2
 800e982:	4770      	bx	lr
 800e984:	b299      	uxth	r1, r3
 800e986:	b909      	cbnz	r1, 800e98c <__lo0bits+0x2a>
 800e988:	0c1b      	lsrs	r3, r3, #16
 800e98a:	2010      	movs	r0, #16
 800e98c:	b2d9      	uxtb	r1, r3
 800e98e:	b909      	cbnz	r1, 800e994 <__lo0bits+0x32>
 800e990:	3008      	adds	r0, #8
 800e992:	0a1b      	lsrs	r3, r3, #8
 800e994:	0719      	lsls	r1, r3, #28
 800e996:	bf04      	itt	eq
 800e998:	091b      	lsreq	r3, r3, #4
 800e99a:	3004      	addeq	r0, #4
 800e99c:	0799      	lsls	r1, r3, #30
 800e99e:	bf04      	itt	eq
 800e9a0:	089b      	lsreq	r3, r3, #2
 800e9a2:	3002      	addeq	r0, #2
 800e9a4:	07d9      	lsls	r1, r3, #31
 800e9a6:	d403      	bmi.n	800e9b0 <__lo0bits+0x4e>
 800e9a8:	085b      	lsrs	r3, r3, #1
 800e9aa:	f100 0001 	add.w	r0, r0, #1
 800e9ae:	d003      	beq.n	800e9b8 <__lo0bits+0x56>
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	4770      	bx	lr
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	4770      	bx	lr
 800e9b8:	2020      	movs	r0, #32
 800e9ba:	4770      	bx	lr

0800e9bc <__i2b>:
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	460c      	mov	r4, r1
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	f7ff febd 	bl	800e740 <_Balloc>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	b928      	cbnz	r0, 800e9d6 <__i2b+0x1a>
 800e9ca:	4b05      	ldr	r3, [pc, #20]	@ (800e9e0 <__i2b+0x24>)
 800e9cc:	4805      	ldr	r0, [pc, #20]	@ (800e9e4 <__i2b+0x28>)
 800e9ce:	f240 1145 	movw	r1, #325	@ 0x145
 800e9d2:	f000 fe1d 	bl	800f610 <__assert_func>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	6144      	str	r4, [r0, #20]
 800e9da:	6103      	str	r3, [r0, #16]
 800e9dc:	bd10      	pop	{r4, pc}
 800e9de:	bf00      	nop
 800e9e0:	0800fde5 	.word	0x0800fde5
 800e9e4:	0800fe56 	.word	0x0800fe56

0800e9e8 <__multiply>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	4614      	mov	r4, r2
 800e9ee:	690a      	ldr	r2, [r1, #16]
 800e9f0:	6923      	ldr	r3, [r4, #16]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	bfa8      	it	ge
 800e9f6:	4623      	movge	r3, r4
 800e9f8:	460f      	mov	r7, r1
 800e9fa:	bfa4      	itt	ge
 800e9fc:	460c      	movge	r4, r1
 800e9fe:	461f      	movge	r7, r3
 800ea00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ea04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ea08:	68a3      	ldr	r3, [r4, #8]
 800ea0a:	6861      	ldr	r1, [r4, #4]
 800ea0c:	eb0a 0609 	add.w	r6, sl, r9
 800ea10:	42b3      	cmp	r3, r6
 800ea12:	b085      	sub	sp, #20
 800ea14:	bfb8      	it	lt
 800ea16:	3101      	addlt	r1, #1
 800ea18:	f7ff fe92 	bl	800e740 <_Balloc>
 800ea1c:	b930      	cbnz	r0, 800ea2c <__multiply+0x44>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	4b44      	ldr	r3, [pc, #272]	@ (800eb34 <__multiply+0x14c>)
 800ea22:	4845      	ldr	r0, [pc, #276]	@ (800eb38 <__multiply+0x150>)
 800ea24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ea28:	f000 fdf2 	bl	800f610 <__assert_func>
 800ea2c:	f100 0514 	add.w	r5, r0, #20
 800ea30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea34:	462b      	mov	r3, r5
 800ea36:	2200      	movs	r2, #0
 800ea38:	4543      	cmp	r3, r8
 800ea3a:	d321      	bcc.n	800ea80 <__multiply+0x98>
 800ea3c:	f107 0114 	add.w	r1, r7, #20
 800ea40:	f104 0214 	add.w	r2, r4, #20
 800ea44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ea48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ea4c:	9302      	str	r3, [sp, #8]
 800ea4e:	1b13      	subs	r3, r2, r4
 800ea50:	3b15      	subs	r3, #21
 800ea52:	f023 0303 	bic.w	r3, r3, #3
 800ea56:	3304      	adds	r3, #4
 800ea58:	f104 0715 	add.w	r7, r4, #21
 800ea5c:	42ba      	cmp	r2, r7
 800ea5e:	bf38      	it	cc
 800ea60:	2304      	movcc	r3, #4
 800ea62:	9301      	str	r3, [sp, #4]
 800ea64:	9b02      	ldr	r3, [sp, #8]
 800ea66:	9103      	str	r1, [sp, #12]
 800ea68:	428b      	cmp	r3, r1
 800ea6a:	d80c      	bhi.n	800ea86 <__multiply+0x9e>
 800ea6c:	2e00      	cmp	r6, #0
 800ea6e:	dd03      	ble.n	800ea78 <__multiply+0x90>
 800ea70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d05b      	beq.n	800eb30 <__multiply+0x148>
 800ea78:	6106      	str	r6, [r0, #16]
 800ea7a:	b005      	add	sp, #20
 800ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea80:	f843 2b04 	str.w	r2, [r3], #4
 800ea84:	e7d8      	b.n	800ea38 <__multiply+0x50>
 800ea86:	f8b1 a000 	ldrh.w	sl, [r1]
 800ea8a:	f1ba 0f00 	cmp.w	sl, #0
 800ea8e:	d024      	beq.n	800eada <__multiply+0xf2>
 800ea90:	f104 0e14 	add.w	lr, r4, #20
 800ea94:	46a9      	mov	r9, r5
 800ea96:	f04f 0c00 	mov.w	ip, #0
 800ea9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea9e:	f8d9 3000 	ldr.w	r3, [r9]
 800eaa2:	fa1f fb87 	uxth.w	fp, r7
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	fb0a 330b 	mla	r3, sl, fp, r3
 800eaac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eab0:	f8d9 7000 	ldr.w	r7, [r9]
 800eab4:	4463      	add	r3, ip
 800eab6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eaba:	fb0a c70b 	mla	r7, sl, fp, ip
 800eabe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eac8:	4572      	cmp	r2, lr
 800eaca:	f849 3b04 	str.w	r3, [r9], #4
 800eace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ead2:	d8e2      	bhi.n	800ea9a <__multiply+0xb2>
 800ead4:	9b01      	ldr	r3, [sp, #4]
 800ead6:	f845 c003 	str.w	ip, [r5, r3]
 800eada:	9b03      	ldr	r3, [sp, #12]
 800eadc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eae0:	3104      	adds	r1, #4
 800eae2:	f1b9 0f00 	cmp.w	r9, #0
 800eae6:	d021      	beq.n	800eb2c <__multiply+0x144>
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	f104 0c14 	add.w	ip, r4, #20
 800eaee:	46ae      	mov	lr, r5
 800eaf0:	f04f 0a00 	mov.w	sl, #0
 800eaf4:	f8bc b000 	ldrh.w	fp, [ip]
 800eaf8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eafc:	fb09 770b 	mla	r7, r9, fp, r7
 800eb00:	4457      	add	r7, sl
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eb08:	f84e 3b04 	str.w	r3, [lr], #4
 800eb0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb14:	f8be 3000 	ldrh.w	r3, [lr]
 800eb18:	fb09 330a 	mla	r3, r9, sl, r3
 800eb1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800eb20:	4562      	cmp	r2, ip
 800eb22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb26:	d8e5      	bhi.n	800eaf4 <__multiply+0x10c>
 800eb28:	9f01      	ldr	r7, [sp, #4]
 800eb2a:	51eb      	str	r3, [r5, r7]
 800eb2c:	3504      	adds	r5, #4
 800eb2e:	e799      	b.n	800ea64 <__multiply+0x7c>
 800eb30:	3e01      	subs	r6, #1
 800eb32:	e79b      	b.n	800ea6c <__multiply+0x84>
 800eb34:	0800fde5 	.word	0x0800fde5
 800eb38:	0800fe56 	.word	0x0800fe56

0800eb3c <__pow5mult>:
 800eb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb40:	4615      	mov	r5, r2
 800eb42:	f012 0203 	ands.w	r2, r2, #3
 800eb46:	4607      	mov	r7, r0
 800eb48:	460e      	mov	r6, r1
 800eb4a:	d007      	beq.n	800eb5c <__pow5mult+0x20>
 800eb4c:	4c25      	ldr	r4, [pc, #148]	@ (800ebe4 <__pow5mult+0xa8>)
 800eb4e:	3a01      	subs	r2, #1
 800eb50:	2300      	movs	r3, #0
 800eb52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb56:	f7ff fe55 	bl	800e804 <__multadd>
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	10ad      	asrs	r5, r5, #2
 800eb5e:	d03d      	beq.n	800ebdc <__pow5mult+0xa0>
 800eb60:	69fc      	ldr	r4, [r7, #28]
 800eb62:	b97c      	cbnz	r4, 800eb84 <__pow5mult+0x48>
 800eb64:	2010      	movs	r0, #16
 800eb66:	f7ff fd23 	bl	800e5b0 <malloc>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	61f8      	str	r0, [r7, #28]
 800eb6e:	b928      	cbnz	r0, 800eb7c <__pow5mult+0x40>
 800eb70:	4b1d      	ldr	r3, [pc, #116]	@ (800ebe8 <__pow5mult+0xac>)
 800eb72:	481e      	ldr	r0, [pc, #120]	@ (800ebec <__pow5mult+0xb0>)
 800eb74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eb78:	f000 fd4a 	bl	800f610 <__assert_func>
 800eb7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb80:	6004      	str	r4, [r0, #0]
 800eb82:	60c4      	str	r4, [r0, #12]
 800eb84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800eb88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb8c:	b94c      	cbnz	r4, 800eba2 <__pow5mult+0x66>
 800eb8e:	f240 2171 	movw	r1, #625	@ 0x271
 800eb92:	4638      	mov	r0, r7
 800eb94:	f7ff ff12 	bl	800e9bc <__i2b>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb9e:	4604      	mov	r4, r0
 800eba0:	6003      	str	r3, [r0, #0]
 800eba2:	f04f 0900 	mov.w	r9, #0
 800eba6:	07eb      	lsls	r3, r5, #31
 800eba8:	d50a      	bpl.n	800ebc0 <__pow5mult+0x84>
 800ebaa:	4631      	mov	r1, r6
 800ebac:	4622      	mov	r2, r4
 800ebae:	4638      	mov	r0, r7
 800ebb0:	f7ff ff1a 	bl	800e9e8 <__multiply>
 800ebb4:	4631      	mov	r1, r6
 800ebb6:	4680      	mov	r8, r0
 800ebb8:	4638      	mov	r0, r7
 800ebba:	f7ff fe01 	bl	800e7c0 <_Bfree>
 800ebbe:	4646      	mov	r6, r8
 800ebc0:	106d      	asrs	r5, r5, #1
 800ebc2:	d00b      	beq.n	800ebdc <__pow5mult+0xa0>
 800ebc4:	6820      	ldr	r0, [r4, #0]
 800ebc6:	b938      	cbnz	r0, 800ebd8 <__pow5mult+0x9c>
 800ebc8:	4622      	mov	r2, r4
 800ebca:	4621      	mov	r1, r4
 800ebcc:	4638      	mov	r0, r7
 800ebce:	f7ff ff0b 	bl	800e9e8 <__multiply>
 800ebd2:	6020      	str	r0, [r4, #0]
 800ebd4:	f8c0 9000 	str.w	r9, [r0]
 800ebd8:	4604      	mov	r4, r0
 800ebda:	e7e4      	b.n	800eba6 <__pow5mult+0x6a>
 800ebdc:	4630      	mov	r0, r6
 800ebde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebe2:	bf00      	nop
 800ebe4:	0800feb0 	.word	0x0800feb0
 800ebe8:	0800fd76 	.word	0x0800fd76
 800ebec:	0800fe56 	.word	0x0800fe56

0800ebf0 <__lshift>:
 800ebf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	6849      	ldr	r1, [r1, #4]
 800ebf8:	6923      	ldr	r3, [r4, #16]
 800ebfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ebfe:	68a3      	ldr	r3, [r4, #8]
 800ec00:	4607      	mov	r7, r0
 800ec02:	4691      	mov	r9, r2
 800ec04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec08:	f108 0601 	add.w	r6, r8, #1
 800ec0c:	42b3      	cmp	r3, r6
 800ec0e:	db0b      	blt.n	800ec28 <__lshift+0x38>
 800ec10:	4638      	mov	r0, r7
 800ec12:	f7ff fd95 	bl	800e740 <_Balloc>
 800ec16:	4605      	mov	r5, r0
 800ec18:	b948      	cbnz	r0, 800ec2e <__lshift+0x3e>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	4b28      	ldr	r3, [pc, #160]	@ (800ecc0 <__lshift+0xd0>)
 800ec1e:	4829      	ldr	r0, [pc, #164]	@ (800ecc4 <__lshift+0xd4>)
 800ec20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ec24:	f000 fcf4 	bl	800f610 <__assert_func>
 800ec28:	3101      	adds	r1, #1
 800ec2a:	005b      	lsls	r3, r3, #1
 800ec2c:	e7ee      	b.n	800ec0c <__lshift+0x1c>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f100 0114 	add.w	r1, r0, #20
 800ec34:	f100 0210 	add.w	r2, r0, #16
 800ec38:	4618      	mov	r0, r3
 800ec3a:	4553      	cmp	r3, sl
 800ec3c:	db33      	blt.n	800eca6 <__lshift+0xb6>
 800ec3e:	6920      	ldr	r0, [r4, #16]
 800ec40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec44:	f104 0314 	add.w	r3, r4, #20
 800ec48:	f019 091f 	ands.w	r9, r9, #31
 800ec4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec54:	d02b      	beq.n	800ecae <__lshift+0xbe>
 800ec56:	f1c9 0e20 	rsb	lr, r9, #32
 800ec5a:	468a      	mov	sl, r1
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	6818      	ldr	r0, [r3, #0]
 800ec60:	fa00 f009 	lsl.w	r0, r0, r9
 800ec64:	4310      	orrs	r0, r2
 800ec66:	f84a 0b04 	str.w	r0, [sl], #4
 800ec6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec6e:	459c      	cmp	ip, r3
 800ec70:	fa22 f20e 	lsr.w	r2, r2, lr
 800ec74:	d8f3      	bhi.n	800ec5e <__lshift+0x6e>
 800ec76:	ebac 0304 	sub.w	r3, ip, r4
 800ec7a:	3b15      	subs	r3, #21
 800ec7c:	f023 0303 	bic.w	r3, r3, #3
 800ec80:	3304      	adds	r3, #4
 800ec82:	f104 0015 	add.w	r0, r4, #21
 800ec86:	4584      	cmp	ip, r0
 800ec88:	bf38      	it	cc
 800ec8a:	2304      	movcc	r3, #4
 800ec8c:	50ca      	str	r2, [r1, r3]
 800ec8e:	b10a      	cbz	r2, 800ec94 <__lshift+0xa4>
 800ec90:	f108 0602 	add.w	r6, r8, #2
 800ec94:	3e01      	subs	r6, #1
 800ec96:	4638      	mov	r0, r7
 800ec98:	612e      	str	r6, [r5, #16]
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	f7ff fd90 	bl	800e7c0 <_Bfree>
 800eca0:	4628      	mov	r0, r5
 800eca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecaa:	3301      	adds	r3, #1
 800ecac:	e7c5      	b.n	800ec3a <__lshift+0x4a>
 800ecae:	3904      	subs	r1, #4
 800ecb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecb8:	459c      	cmp	ip, r3
 800ecba:	d8f9      	bhi.n	800ecb0 <__lshift+0xc0>
 800ecbc:	e7ea      	b.n	800ec94 <__lshift+0xa4>
 800ecbe:	bf00      	nop
 800ecc0:	0800fde5 	.word	0x0800fde5
 800ecc4:	0800fe56 	.word	0x0800fe56

0800ecc8 <__mcmp>:
 800ecc8:	690a      	ldr	r2, [r1, #16]
 800ecca:	4603      	mov	r3, r0
 800eccc:	6900      	ldr	r0, [r0, #16]
 800ecce:	1a80      	subs	r0, r0, r2
 800ecd0:	b530      	push	{r4, r5, lr}
 800ecd2:	d10e      	bne.n	800ecf2 <__mcmp+0x2a>
 800ecd4:	3314      	adds	r3, #20
 800ecd6:	3114      	adds	r1, #20
 800ecd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ecdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ece0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ece4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ece8:	4295      	cmp	r5, r2
 800ecea:	d003      	beq.n	800ecf4 <__mcmp+0x2c>
 800ecec:	d205      	bcs.n	800ecfa <__mcmp+0x32>
 800ecee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ecf2:	bd30      	pop	{r4, r5, pc}
 800ecf4:	42a3      	cmp	r3, r4
 800ecf6:	d3f3      	bcc.n	800ece0 <__mcmp+0x18>
 800ecf8:	e7fb      	b.n	800ecf2 <__mcmp+0x2a>
 800ecfa:	2001      	movs	r0, #1
 800ecfc:	e7f9      	b.n	800ecf2 <__mcmp+0x2a>
	...

0800ed00 <__mdiff>:
 800ed00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	4689      	mov	r9, r1
 800ed06:	4606      	mov	r6, r0
 800ed08:	4611      	mov	r1, r2
 800ed0a:	4648      	mov	r0, r9
 800ed0c:	4614      	mov	r4, r2
 800ed0e:	f7ff ffdb 	bl	800ecc8 <__mcmp>
 800ed12:	1e05      	subs	r5, r0, #0
 800ed14:	d112      	bne.n	800ed3c <__mdiff+0x3c>
 800ed16:	4629      	mov	r1, r5
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f7ff fd11 	bl	800e740 <_Balloc>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	b928      	cbnz	r0, 800ed2e <__mdiff+0x2e>
 800ed22:	4b3f      	ldr	r3, [pc, #252]	@ (800ee20 <__mdiff+0x120>)
 800ed24:	f240 2137 	movw	r1, #567	@ 0x237
 800ed28:	483e      	ldr	r0, [pc, #248]	@ (800ee24 <__mdiff+0x124>)
 800ed2a:	f000 fc71 	bl	800f610 <__assert_func>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed34:	4610      	mov	r0, r2
 800ed36:	b003      	add	sp, #12
 800ed38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3c:	bfbc      	itt	lt
 800ed3e:	464b      	movlt	r3, r9
 800ed40:	46a1      	movlt	r9, r4
 800ed42:	4630      	mov	r0, r6
 800ed44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ed48:	bfba      	itte	lt
 800ed4a:	461c      	movlt	r4, r3
 800ed4c:	2501      	movlt	r5, #1
 800ed4e:	2500      	movge	r5, #0
 800ed50:	f7ff fcf6 	bl	800e740 <_Balloc>
 800ed54:	4602      	mov	r2, r0
 800ed56:	b918      	cbnz	r0, 800ed60 <__mdiff+0x60>
 800ed58:	4b31      	ldr	r3, [pc, #196]	@ (800ee20 <__mdiff+0x120>)
 800ed5a:	f240 2145 	movw	r1, #581	@ 0x245
 800ed5e:	e7e3      	b.n	800ed28 <__mdiff+0x28>
 800ed60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ed64:	6926      	ldr	r6, [r4, #16]
 800ed66:	60c5      	str	r5, [r0, #12]
 800ed68:	f109 0310 	add.w	r3, r9, #16
 800ed6c:	f109 0514 	add.w	r5, r9, #20
 800ed70:	f104 0e14 	add.w	lr, r4, #20
 800ed74:	f100 0b14 	add.w	fp, r0, #20
 800ed78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ed7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ed80:	9301      	str	r3, [sp, #4]
 800ed82:	46d9      	mov	r9, fp
 800ed84:	f04f 0c00 	mov.w	ip, #0
 800ed88:	9b01      	ldr	r3, [sp, #4]
 800ed8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ed8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ed92:	9301      	str	r3, [sp, #4]
 800ed94:	fa1f f38a 	uxth.w	r3, sl
 800ed98:	4619      	mov	r1, r3
 800ed9a:	b283      	uxth	r3, r0
 800ed9c:	1acb      	subs	r3, r1, r3
 800ed9e:	0c00      	lsrs	r0, r0, #16
 800eda0:	4463      	add	r3, ip
 800eda2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eda6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800edaa:	b29b      	uxth	r3, r3
 800edac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800edb0:	4576      	cmp	r6, lr
 800edb2:	f849 3b04 	str.w	r3, [r9], #4
 800edb6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800edba:	d8e5      	bhi.n	800ed88 <__mdiff+0x88>
 800edbc:	1b33      	subs	r3, r6, r4
 800edbe:	3b15      	subs	r3, #21
 800edc0:	f023 0303 	bic.w	r3, r3, #3
 800edc4:	3415      	adds	r4, #21
 800edc6:	3304      	adds	r3, #4
 800edc8:	42a6      	cmp	r6, r4
 800edca:	bf38      	it	cc
 800edcc:	2304      	movcc	r3, #4
 800edce:	441d      	add	r5, r3
 800edd0:	445b      	add	r3, fp
 800edd2:	461e      	mov	r6, r3
 800edd4:	462c      	mov	r4, r5
 800edd6:	4544      	cmp	r4, r8
 800edd8:	d30e      	bcc.n	800edf8 <__mdiff+0xf8>
 800edda:	f108 0103 	add.w	r1, r8, #3
 800edde:	1b49      	subs	r1, r1, r5
 800ede0:	f021 0103 	bic.w	r1, r1, #3
 800ede4:	3d03      	subs	r5, #3
 800ede6:	45a8      	cmp	r8, r5
 800ede8:	bf38      	it	cc
 800edea:	2100      	movcc	r1, #0
 800edec:	440b      	add	r3, r1
 800edee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800edf2:	b191      	cbz	r1, 800ee1a <__mdiff+0x11a>
 800edf4:	6117      	str	r7, [r2, #16]
 800edf6:	e79d      	b.n	800ed34 <__mdiff+0x34>
 800edf8:	f854 1b04 	ldr.w	r1, [r4], #4
 800edfc:	46e6      	mov	lr, ip
 800edfe:	0c08      	lsrs	r0, r1, #16
 800ee00:	fa1c fc81 	uxtah	ip, ip, r1
 800ee04:	4471      	add	r1, lr
 800ee06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ee0a:	b289      	uxth	r1, r1
 800ee0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ee10:	f846 1b04 	str.w	r1, [r6], #4
 800ee14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee18:	e7dd      	b.n	800edd6 <__mdiff+0xd6>
 800ee1a:	3f01      	subs	r7, #1
 800ee1c:	e7e7      	b.n	800edee <__mdiff+0xee>
 800ee1e:	bf00      	nop
 800ee20:	0800fde5 	.word	0x0800fde5
 800ee24:	0800fe56 	.word	0x0800fe56

0800ee28 <__ulp>:
 800ee28:	b082      	sub	sp, #8
 800ee2a:	ed8d 0b00 	vstr	d0, [sp]
 800ee2e:	9a01      	ldr	r2, [sp, #4]
 800ee30:	4b0f      	ldr	r3, [pc, #60]	@ (800ee70 <__ulp+0x48>)
 800ee32:	4013      	ands	r3, r2
 800ee34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	dc08      	bgt.n	800ee4e <__ulp+0x26>
 800ee3c:	425b      	negs	r3, r3
 800ee3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ee42:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ee46:	da04      	bge.n	800ee52 <__ulp+0x2a>
 800ee48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ee4c:	4113      	asrs	r3, r2
 800ee4e:	2200      	movs	r2, #0
 800ee50:	e008      	b.n	800ee64 <__ulp+0x3c>
 800ee52:	f1a2 0314 	sub.w	r3, r2, #20
 800ee56:	2b1e      	cmp	r3, #30
 800ee58:	bfda      	itte	le
 800ee5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ee5e:	40da      	lsrle	r2, r3
 800ee60:	2201      	movgt	r2, #1
 800ee62:	2300      	movs	r3, #0
 800ee64:	4619      	mov	r1, r3
 800ee66:	4610      	mov	r0, r2
 800ee68:	ec41 0b10 	vmov	d0, r0, r1
 800ee6c:	b002      	add	sp, #8
 800ee6e:	4770      	bx	lr
 800ee70:	7ff00000 	.word	0x7ff00000

0800ee74 <__b2d>:
 800ee74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee78:	6906      	ldr	r6, [r0, #16]
 800ee7a:	f100 0814 	add.w	r8, r0, #20
 800ee7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ee82:	1f37      	subs	r7, r6, #4
 800ee84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ee88:	4610      	mov	r0, r2
 800ee8a:	f7ff fd4b 	bl	800e924 <__hi0bits>
 800ee8e:	f1c0 0320 	rsb	r3, r0, #32
 800ee92:	280a      	cmp	r0, #10
 800ee94:	600b      	str	r3, [r1, #0]
 800ee96:	491b      	ldr	r1, [pc, #108]	@ (800ef04 <__b2d+0x90>)
 800ee98:	dc15      	bgt.n	800eec6 <__b2d+0x52>
 800ee9a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ee9e:	fa22 f30c 	lsr.w	r3, r2, ip
 800eea2:	45b8      	cmp	r8, r7
 800eea4:	ea43 0501 	orr.w	r5, r3, r1
 800eea8:	bf34      	ite	cc
 800eeaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eeae:	2300      	movcs	r3, #0
 800eeb0:	3015      	adds	r0, #21
 800eeb2:	fa02 f000 	lsl.w	r0, r2, r0
 800eeb6:	fa23 f30c 	lsr.w	r3, r3, ip
 800eeba:	4303      	orrs	r3, r0
 800eebc:	461c      	mov	r4, r3
 800eebe:	ec45 4b10 	vmov	d0, r4, r5
 800eec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec6:	45b8      	cmp	r8, r7
 800eec8:	bf3a      	itte	cc
 800eeca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eece:	f1a6 0708 	subcc.w	r7, r6, #8
 800eed2:	2300      	movcs	r3, #0
 800eed4:	380b      	subs	r0, #11
 800eed6:	d012      	beq.n	800eefe <__b2d+0x8a>
 800eed8:	f1c0 0120 	rsb	r1, r0, #32
 800eedc:	fa23 f401 	lsr.w	r4, r3, r1
 800eee0:	4082      	lsls	r2, r0
 800eee2:	4322      	orrs	r2, r4
 800eee4:	4547      	cmp	r7, r8
 800eee6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800eeea:	bf8c      	ite	hi
 800eeec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800eef0:	2200      	movls	r2, #0
 800eef2:	4083      	lsls	r3, r0
 800eef4:	40ca      	lsrs	r2, r1
 800eef6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800eefa:	4313      	orrs	r3, r2
 800eefc:	e7de      	b.n	800eebc <__b2d+0x48>
 800eefe:	ea42 0501 	orr.w	r5, r2, r1
 800ef02:	e7db      	b.n	800eebc <__b2d+0x48>
 800ef04:	3ff00000 	.word	0x3ff00000

0800ef08 <__d2b>:
 800ef08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef0c:	460f      	mov	r7, r1
 800ef0e:	2101      	movs	r1, #1
 800ef10:	ec59 8b10 	vmov	r8, r9, d0
 800ef14:	4616      	mov	r6, r2
 800ef16:	f7ff fc13 	bl	800e740 <_Balloc>
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	b930      	cbnz	r0, 800ef2c <__d2b+0x24>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	4b23      	ldr	r3, [pc, #140]	@ (800efb0 <__d2b+0xa8>)
 800ef22:	4824      	ldr	r0, [pc, #144]	@ (800efb4 <__d2b+0xac>)
 800ef24:	f240 310f 	movw	r1, #783	@ 0x30f
 800ef28:	f000 fb72 	bl	800f610 <__assert_func>
 800ef2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef34:	b10d      	cbz	r5, 800ef3a <__d2b+0x32>
 800ef36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef3a:	9301      	str	r3, [sp, #4]
 800ef3c:	f1b8 0300 	subs.w	r3, r8, #0
 800ef40:	d023      	beq.n	800ef8a <__d2b+0x82>
 800ef42:	4668      	mov	r0, sp
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	f7ff fd0c 	bl	800e962 <__lo0bits>
 800ef4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ef4e:	b1d0      	cbz	r0, 800ef86 <__d2b+0x7e>
 800ef50:	f1c0 0320 	rsb	r3, r0, #32
 800ef54:	fa02 f303 	lsl.w	r3, r2, r3
 800ef58:	430b      	orrs	r3, r1
 800ef5a:	40c2      	lsrs	r2, r0
 800ef5c:	6163      	str	r3, [r4, #20]
 800ef5e:	9201      	str	r2, [sp, #4]
 800ef60:	9b01      	ldr	r3, [sp, #4]
 800ef62:	61a3      	str	r3, [r4, #24]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	bf0c      	ite	eq
 800ef68:	2201      	moveq	r2, #1
 800ef6a:	2202      	movne	r2, #2
 800ef6c:	6122      	str	r2, [r4, #16]
 800ef6e:	b1a5      	cbz	r5, 800ef9a <__d2b+0x92>
 800ef70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ef74:	4405      	add	r5, r0
 800ef76:	603d      	str	r5, [r7, #0]
 800ef78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ef7c:	6030      	str	r0, [r6, #0]
 800ef7e:	4620      	mov	r0, r4
 800ef80:	b003      	add	sp, #12
 800ef82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef86:	6161      	str	r1, [r4, #20]
 800ef88:	e7ea      	b.n	800ef60 <__d2b+0x58>
 800ef8a:	a801      	add	r0, sp, #4
 800ef8c:	f7ff fce9 	bl	800e962 <__lo0bits>
 800ef90:	9b01      	ldr	r3, [sp, #4]
 800ef92:	6163      	str	r3, [r4, #20]
 800ef94:	3020      	adds	r0, #32
 800ef96:	2201      	movs	r2, #1
 800ef98:	e7e8      	b.n	800ef6c <__d2b+0x64>
 800ef9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ef9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800efa2:	6038      	str	r0, [r7, #0]
 800efa4:	6918      	ldr	r0, [r3, #16]
 800efa6:	f7ff fcbd 	bl	800e924 <__hi0bits>
 800efaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800efae:	e7e5      	b.n	800ef7c <__d2b+0x74>
 800efb0:	0800fde5 	.word	0x0800fde5
 800efb4:	0800fe56 	.word	0x0800fe56

0800efb8 <__ratio>:
 800efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbc:	b085      	sub	sp, #20
 800efbe:	e9cd 1000 	strd	r1, r0, [sp]
 800efc2:	a902      	add	r1, sp, #8
 800efc4:	f7ff ff56 	bl	800ee74 <__b2d>
 800efc8:	9800      	ldr	r0, [sp, #0]
 800efca:	a903      	add	r1, sp, #12
 800efcc:	ec55 4b10 	vmov	r4, r5, d0
 800efd0:	f7ff ff50 	bl	800ee74 <__b2d>
 800efd4:	9b01      	ldr	r3, [sp, #4]
 800efd6:	6919      	ldr	r1, [r3, #16]
 800efd8:	9b00      	ldr	r3, [sp, #0]
 800efda:	691b      	ldr	r3, [r3, #16]
 800efdc:	1ac9      	subs	r1, r1, r3
 800efde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800efe2:	1a9b      	subs	r3, r3, r2
 800efe4:	ec5b ab10 	vmov	sl, fp, d0
 800efe8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800efec:	2b00      	cmp	r3, #0
 800efee:	bfce      	itee	gt
 800eff0:	462a      	movgt	r2, r5
 800eff2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eff6:	465a      	movle	r2, fp
 800eff8:	462f      	mov	r7, r5
 800effa:	46d9      	mov	r9, fp
 800effc:	bfcc      	ite	gt
 800effe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f002:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f006:	464b      	mov	r3, r9
 800f008:	4652      	mov	r2, sl
 800f00a:	4620      	mov	r0, r4
 800f00c:	4639      	mov	r1, r7
 800f00e:	f7f1 fc25 	bl	800085c <__aeabi_ddiv>
 800f012:	ec41 0b10 	vmov	d0, r0, r1
 800f016:	b005      	add	sp, #20
 800f018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f01c <__copybits>:
 800f01c:	3901      	subs	r1, #1
 800f01e:	b570      	push	{r4, r5, r6, lr}
 800f020:	1149      	asrs	r1, r1, #5
 800f022:	6914      	ldr	r4, [r2, #16]
 800f024:	3101      	adds	r1, #1
 800f026:	f102 0314 	add.w	r3, r2, #20
 800f02a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f02e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f032:	1f05      	subs	r5, r0, #4
 800f034:	42a3      	cmp	r3, r4
 800f036:	d30c      	bcc.n	800f052 <__copybits+0x36>
 800f038:	1aa3      	subs	r3, r4, r2
 800f03a:	3b11      	subs	r3, #17
 800f03c:	f023 0303 	bic.w	r3, r3, #3
 800f040:	3211      	adds	r2, #17
 800f042:	42a2      	cmp	r2, r4
 800f044:	bf88      	it	hi
 800f046:	2300      	movhi	r3, #0
 800f048:	4418      	add	r0, r3
 800f04a:	2300      	movs	r3, #0
 800f04c:	4288      	cmp	r0, r1
 800f04e:	d305      	bcc.n	800f05c <__copybits+0x40>
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	f853 6b04 	ldr.w	r6, [r3], #4
 800f056:	f845 6f04 	str.w	r6, [r5, #4]!
 800f05a:	e7eb      	b.n	800f034 <__copybits+0x18>
 800f05c:	f840 3b04 	str.w	r3, [r0], #4
 800f060:	e7f4      	b.n	800f04c <__copybits+0x30>

0800f062 <__any_on>:
 800f062:	f100 0214 	add.w	r2, r0, #20
 800f066:	6900      	ldr	r0, [r0, #16]
 800f068:	114b      	asrs	r3, r1, #5
 800f06a:	4298      	cmp	r0, r3
 800f06c:	b510      	push	{r4, lr}
 800f06e:	db11      	blt.n	800f094 <__any_on+0x32>
 800f070:	dd0a      	ble.n	800f088 <__any_on+0x26>
 800f072:	f011 011f 	ands.w	r1, r1, #31
 800f076:	d007      	beq.n	800f088 <__any_on+0x26>
 800f078:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f07c:	fa24 f001 	lsr.w	r0, r4, r1
 800f080:	fa00 f101 	lsl.w	r1, r0, r1
 800f084:	428c      	cmp	r4, r1
 800f086:	d10b      	bne.n	800f0a0 <__any_on+0x3e>
 800f088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d803      	bhi.n	800f098 <__any_on+0x36>
 800f090:	2000      	movs	r0, #0
 800f092:	bd10      	pop	{r4, pc}
 800f094:	4603      	mov	r3, r0
 800f096:	e7f7      	b.n	800f088 <__any_on+0x26>
 800f098:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f09c:	2900      	cmp	r1, #0
 800f09e:	d0f5      	beq.n	800f08c <__any_on+0x2a>
 800f0a0:	2001      	movs	r0, #1
 800f0a2:	e7f6      	b.n	800f092 <__any_on+0x30>

0800f0a4 <_strtol_l.constprop.0>:
 800f0a4:	2b24      	cmp	r3, #36	@ 0x24
 800f0a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0aa:	4686      	mov	lr, r0
 800f0ac:	4690      	mov	r8, r2
 800f0ae:	d801      	bhi.n	800f0b4 <_strtol_l.constprop.0+0x10>
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d106      	bne.n	800f0c2 <_strtol_l.constprop.0+0x1e>
 800f0b4:	f7fe f85e 	bl	800d174 <__errno>
 800f0b8:	2316      	movs	r3, #22
 800f0ba:	6003      	str	r3, [r0, #0]
 800f0bc:	2000      	movs	r0, #0
 800f0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c2:	4834      	ldr	r0, [pc, #208]	@ (800f194 <_strtol_l.constprop.0+0xf0>)
 800f0c4:	460d      	mov	r5, r1
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0cc:	5d06      	ldrb	r6, [r0, r4]
 800f0ce:	f016 0608 	ands.w	r6, r6, #8
 800f0d2:	d1f8      	bne.n	800f0c6 <_strtol_l.constprop.0+0x22>
 800f0d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f0d6:	d12d      	bne.n	800f134 <_strtol_l.constprop.0+0x90>
 800f0d8:	782c      	ldrb	r4, [r5, #0]
 800f0da:	2601      	movs	r6, #1
 800f0dc:	1c95      	adds	r5, r2, #2
 800f0de:	f033 0210 	bics.w	r2, r3, #16
 800f0e2:	d109      	bne.n	800f0f8 <_strtol_l.constprop.0+0x54>
 800f0e4:	2c30      	cmp	r4, #48	@ 0x30
 800f0e6:	d12a      	bne.n	800f13e <_strtol_l.constprop.0+0x9a>
 800f0e8:	782a      	ldrb	r2, [r5, #0]
 800f0ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f0ee:	2a58      	cmp	r2, #88	@ 0x58
 800f0f0:	d125      	bne.n	800f13e <_strtol_l.constprop.0+0x9a>
 800f0f2:	786c      	ldrb	r4, [r5, #1]
 800f0f4:	2310      	movs	r3, #16
 800f0f6:	3502      	adds	r5, #2
 800f0f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f0fc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f100:	2200      	movs	r2, #0
 800f102:	fbbc f9f3 	udiv	r9, ip, r3
 800f106:	4610      	mov	r0, r2
 800f108:	fb03 ca19 	mls	sl, r3, r9, ip
 800f10c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f110:	2f09      	cmp	r7, #9
 800f112:	d81b      	bhi.n	800f14c <_strtol_l.constprop.0+0xa8>
 800f114:	463c      	mov	r4, r7
 800f116:	42a3      	cmp	r3, r4
 800f118:	dd27      	ble.n	800f16a <_strtol_l.constprop.0+0xc6>
 800f11a:	1c57      	adds	r7, r2, #1
 800f11c:	d007      	beq.n	800f12e <_strtol_l.constprop.0+0x8a>
 800f11e:	4581      	cmp	r9, r0
 800f120:	d320      	bcc.n	800f164 <_strtol_l.constprop.0+0xc0>
 800f122:	d101      	bne.n	800f128 <_strtol_l.constprop.0+0x84>
 800f124:	45a2      	cmp	sl, r4
 800f126:	db1d      	blt.n	800f164 <_strtol_l.constprop.0+0xc0>
 800f128:	fb00 4003 	mla	r0, r0, r3, r4
 800f12c:	2201      	movs	r2, #1
 800f12e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f132:	e7eb      	b.n	800f10c <_strtol_l.constprop.0+0x68>
 800f134:	2c2b      	cmp	r4, #43	@ 0x2b
 800f136:	bf04      	itt	eq
 800f138:	782c      	ldrbeq	r4, [r5, #0]
 800f13a:	1c95      	addeq	r5, r2, #2
 800f13c:	e7cf      	b.n	800f0de <_strtol_l.constprop.0+0x3a>
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1da      	bne.n	800f0f8 <_strtol_l.constprop.0+0x54>
 800f142:	2c30      	cmp	r4, #48	@ 0x30
 800f144:	bf0c      	ite	eq
 800f146:	2308      	moveq	r3, #8
 800f148:	230a      	movne	r3, #10
 800f14a:	e7d5      	b.n	800f0f8 <_strtol_l.constprop.0+0x54>
 800f14c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f150:	2f19      	cmp	r7, #25
 800f152:	d801      	bhi.n	800f158 <_strtol_l.constprop.0+0xb4>
 800f154:	3c37      	subs	r4, #55	@ 0x37
 800f156:	e7de      	b.n	800f116 <_strtol_l.constprop.0+0x72>
 800f158:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f15c:	2f19      	cmp	r7, #25
 800f15e:	d804      	bhi.n	800f16a <_strtol_l.constprop.0+0xc6>
 800f160:	3c57      	subs	r4, #87	@ 0x57
 800f162:	e7d8      	b.n	800f116 <_strtol_l.constprop.0+0x72>
 800f164:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f168:	e7e1      	b.n	800f12e <_strtol_l.constprop.0+0x8a>
 800f16a:	1c53      	adds	r3, r2, #1
 800f16c:	d108      	bne.n	800f180 <_strtol_l.constprop.0+0xdc>
 800f16e:	2322      	movs	r3, #34	@ 0x22
 800f170:	f8ce 3000 	str.w	r3, [lr]
 800f174:	4660      	mov	r0, ip
 800f176:	f1b8 0f00 	cmp.w	r8, #0
 800f17a:	d0a0      	beq.n	800f0be <_strtol_l.constprop.0+0x1a>
 800f17c:	1e69      	subs	r1, r5, #1
 800f17e:	e006      	b.n	800f18e <_strtol_l.constprop.0+0xea>
 800f180:	b106      	cbz	r6, 800f184 <_strtol_l.constprop.0+0xe0>
 800f182:	4240      	negs	r0, r0
 800f184:	f1b8 0f00 	cmp.w	r8, #0
 800f188:	d099      	beq.n	800f0be <_strtol_l.constprop.0+0x1a>
 800f18a:	2a00      	cmp	r2, #0
 800f18c:	d1f6      	bne.n	800f17c <_strtol_l.constprop.0+0xd8>
 800f18e:	f8c8 1000 	str.w	r1, [r8]
 800f192:	e794      	b.n	800f0be <_strtol_l.constprop.0+0x1a>
 800f194:	0800ffb1 	.word	0x0800ffb1

0800f198 <_strtol_r>:
 800f198:	f7ff bf84 	b.w	800f0a4 <_strtol_l.constprop.0>

0800f19c <__ascii_wctomb>:
 800f19c:	4603      	mov	r3, r0
 800f19e:	4608      	mov	r0, r1
 800f1a0:	b141      	cbz	r1, 800f1b4 <__ascii_wctomb+0x18>
 800f1a2:	2aff      	cmp	r2, #255	@ 0xff
 800f1a4:	d904      	bls.n	800f1b0 <__ascii_wctomb+0x14>
 800f1a6:	228a      	movs	r2, #138	@ 0x8a
 800f1a8:	601a      	str	r2, [r3, #0]
 800f1aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1ae:	4770      	bx	lr
 800f1b0:	700a      	strb	r2, [r1, #0]
 800f1b2:	2001      	movs	r0, #1
 800f1b4:	4770      	bx	lr

0800f1b6 <__ssputs_r>:
 800f1b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ba:	688e      	ldr	r6, [r1, #8]
 800f1bc:	461f      	mov	r7, r3
 800f1be:	42be      	cmp	r6, r7
 800f1c0:	680b      	ldr	r3, [r1, #0]
 800f1c2:	4682      	mov	sl, r0
 800f1c4:	460c      	mov	r4, r1
 800f1c6:	4690      	mov	r8, r2
 800f1c8:	d82d      	bhi.n	800f226 <__ssputs_r+0x70>
 800f1ca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1ce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f1d2:	d026      	beq.n	800f222 <__ssputs_r+0x6c>
 800f1d4:	6965      	ldr	r5, [r4, #20]
 800f1d6:	6909      	ldr	r1, [r1, #16]
 800f1d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1dc:	eba3 0901 	sub.w	r9, r3, r1
 800f1e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1e4:	1c7b      	adds	r3, r7, #1
 800f1e6:	444b      	add	r3, r9
 800f1e8:	106d      	asrs	r5, r5, #1
 800f1ea:	429d      	cmp	r5, r3
 800f1ec:	bf38      	it	cc
 800f1ee:	461d      	movcc	r5, r3
 800f1f0:	0553      	lsls	r3, r2, #21
 800f1f2:	d527      	bpl.n	800f244 <__ssputs_r+0x8e>
 800f1f4:	4629      	mov	r1, r5
 800f1f6:	f7ff fa05 	bl	800e604 <_malloc_r>
 800f1fa:	4606      	mov	r6, r0
 800f1fc:	b360      	cbz	r0, 800f258 <__ssputs_r+0xa2>
 800f1fe:	6921      	ldr	r1, [r4, #16]
 800f200:	464a      	mov	r2, r9
 800f202:	f7fd ffe4 	bl	800d1ce <memcpy>
 800f206:	89a3      	ldrh	r3, [r4, #12]
 800f208:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f20c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f210:	81a3      	strh	r3, [r4, #12]
 800f212:	6126      	str	r6, [r4, #16]
 800f214:	6165      	str	r5, [r4, #20]
 800f216:	444e      	add	r6, r9
 800f218:	eba5 0509 	sub.w	r5, r5, r9
 800f21c:	6026      	str	r6, [r4, #0]
 800f21e:	60a5      	str	r5, [r4, #8]
 800f220:	463e      	mov	r6, r7
 800f222:	42be      	cmp	r6, r7
 800f224:	d900      	bls.n	800f228 <__ssputs_r+0x72>
 800f226:	463e      	mov	r6, r7
 800f228:	6820      	ldr	r0, [r4, #0]
 800f22a:	4632      	mov	r2, r6
 800f22c:	4641      	mov	r1, r8
 800f22e:	f000 f9c5 	bl	800f5bc <memmove>
 800f232:	68a3      	ldr	r3, [r4, #8]
 800f234:	1b9b      	subs	r3, r3, r6
 800f236:	60a3      	str	r3, [r4, #8]
 800f238:	6823      	ldr	r3, [r4, #0]
 800f23a:	4433      	add	r3, r6
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	2000      	movs	r0, #0
 800f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f244:	462a      	mov	r2, r5
 800f246:	f000 fa15 	bl	800f674 <_realloc_r>
 800f24a:	4606      	mov	r6, r0
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d1e0      	bne.n	800f212 <__ssputs_r+0x5c>
 800f250:	6921      	ldr	r1, [r4, #16]
 800f252:	4650      	mov	r0, sl
 800f254:	f7fe fe28 	bl	800dea8 <_free_r>
 800f258:	230c      	movs	r3, #12
 800f25a:	f8ca 3000 	str.w	r3, [sl]
 800f25e:	89a3      	ldrh	r3, [r4, #12]
 800f260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f264:	81a3      	strh	r3, [r4, #12]
 800f266:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f26a:	e7e9      	b.n	800f240 <__ssputs_r+0x8a>

0800f26c <_svfiprintf_r>:
 800f26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f270:	4698      	mov	r8, r3
 800f272:	898b      	ldrh	r3, [r1, #12]
 800f274:	061b      	lsls	r3, r3, #24
 800f276:	b09d      	sub	sp, #116	@ 0x74
 800f278:	4607      	mov	r7, r0
 800f27a:	460d      	mov	r5, r1
 800f27c:	4614      	mov	r4, r2
 800f27e:	d510      	bpl.n	800f2a2 <_svfiprintf_r+0x36>
 800f280:	690b      	ldr	r3, [r1, #16]
 800f282:	b973      	cbnz	r3, 800f2a2 <_svfiprintf_r+0x36>
 800f284:	2140      	movs	r1, #64	@ 0x40
 800f286:	f7ff f9bd 	bl	800e604 <_malloc_r>
 800f28a:	6028      	str	r0, [r5, #0]
 800f28c:	6128      	str	r0, [r5, #16]
 800f28e:	b930      	cbnz	r0, 800f29e <_svfiprintf_r+0x32>
 800f290:	230c      	movs	r3, #12
 800f292:	603b      	str	r3, [r7, #0]
 800f294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f298:	b01d      	add	sp, #116	@ 0x74
 800f29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29e:	2340      	movs	r3, #64	@ 0x40
 800f2a0:	616b      	str	r3, [r5, #20]
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2a6:	2320      	movs	r3, #32
 800f2a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2b0:	2330      	movs	r3, #48	@ 0x30
 800f2b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f450 <_svfiprintf_r+0x1e4>
 800f2b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2ba:	f04f 0901 	mov.w	r9, #1
 800f2be:	4623      	mov	r3, r4
 800f2c0:	469a      	mov	sl, r3
 800f2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2c6:	b10a      	cbz	r2, 800f2cc <_svfiprintf_r+0x60>
 800f2c8:	2a25      	cmp	r2, #37	@ 0x25
 800f2ca:	d1f9      	bne.n	800f2c0 <_svfiprintf_r+0x54>
 800f2cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f2d0:	d00b      	beq.n	800f2ea <_svfiprintf_r+0x7e>
 800f2d2:	465b      	mov	r3, fp
 800f2d4:	4622      	mov	r2, r4
 800f2d6:	4629      	mov	r1, r5
 800f2d8:	4638      	mov	r0, r7
 800f2da:	f7ff ff6c 	bl	800f1b6 <__ssputs_r>
 800f2de:	3001      	adds	r0, #1
 800f2e0:	f000 80a7 	beq.w	800f432 <_svfiprintf_r+0x1c6>
 800f2e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2e6:	445a      	add	r2, fp
 800f2e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	f000 809f 	beq.w	800f432 <_svfiprintf_r+0x1c6>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f2fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2fe:	f10a 0a01 	add.w	sl, sl, #1
 800f302:	9304      	str	r3, [sp, #16]
 800f304:	9307      	str	r3, [sp, #28]
 800f306:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f30a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f30c:	4654      	mov	r4, sl
 800f30e:	2205      	movs	r2, #5
 800f310:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f314:	484e      	ldr	r0, [pc, #312]	@ (800f450 <_svfiprintf_r+0x1e4>)
 800f316:	f7f0 ff63 	bl	80001e0 <memchr>
 800f31a:	9a04      	ldr	r2, [sp, #16]
 800f31c:	b9d8      	cbnz	r0, 800f356 <_svfiprintf_r+0xea>
 800f31e:	06d0      	lsls	r0, r2, #27
 800f320:	bf44      	itt	mi
 800f322:	2320      	movmi	r3, #32
 800f324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f328:	0711      	lsls	r1, r2, #28
 800f32a:	bf44      	itt	mi
 800f32c:	232b      	movmi	r3, #43	@ 0x2b
 800f32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f332:	f89a 3000 	ldrb.w	r3, [sl]
 800f336:	2b2a      	cmp	r3, #42	@ 0x2a
 800f338:	d015      	beq.n	800f366 <_svfiprintf_r+0xfa>
 800f33a:	9a07      	ldr	r2, [sp, #28]
 800f33c:	4654      	mov	r4, sl
 800f33e:	2000      	movs	r0, #0
 800f340:	f04f 0c0a 	mov.w	ip, #10
 800f344:	4621      	mov	r1, r4
 800f346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f34a:	3b30      	subs	r3, #48	@ 0x30
 800f34c:	2b09      	cmp	r3, #9
 800f34e:	d94b      	bls.n	800f3e8 <_svfiprintf_r+0x17c>
 800f350:	b1b0      	cbz	r0, 800f380 <_svfiprintf_r+0x114>
 800f352:	9207      	str	r2, [sp, #28]
 800f354:	e014      	b.n	800f380 <_svfiprintf_r+0x114>
 800f356:	eba0 0308 	sub.w	r3, r0, r8
 800f35a:	fa09 f303 	lsl.w	r3, r9, r3
 800f35e:	4313      	orrs	r3, r2
 800f360:	9304      	str	r3, [sp, #16]
 800f362:	46a2      	mov	sl, r4
 800f364:	e7d2      	b.n	800f30c <_svfiprintf_r+0xa0>
 800f366:	9b03      	ldr	r3, [sp, #12]
 800f368:	1d19      	adds	r1, r3, #4
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	9103      	str	r1, [sp, #12]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	bfbb      	ittet	lt
 800f372:	425b      	neglt	r3, r3
 800f374:	f042 0202 	orrlt.w	r2, r2, #2
 800f378:	9307      	strge	r3, [sp, #28]
 800f37a:	9307      	strlt	r3, [sp, #28]
 800f37c:	bfb8      	it	lt
 800f37e:	9204      	strlt	r2, [sp, #16]
 800f380:	7823      	ldrb	r3, [r4, #0]
 800f382:	2b2e      	cmp	r3, #46	@ 0x2e
 800f384:	d10a      	bne.n	800f39c <_svfiprintf_r+0x130>
 800f386:	7863      	ldrb	r3, [r4, #1]
 800f388:	2b2a      	cmp	r3, #42	@ 0x2a
 800f38a:	d132      	bne.n	800f3f2 <_svfiprintf_r+0x186>
 800f38c:	9b03      	ldr	r3, [sp, #12]
 800f38e:	1d1a      	adds	r2, r3, #4
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	9203      	str	r2, [sp, #12]
 800f394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f398:	3402      	adds	r4, #2
 800f39a:	9305      	str	r3, [sp, #20]
 800f39c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f460 <_svfiprintf_r+0x1f4>
 800f3a0:	7821      	ldrb	r1, [r4, #0]
 800f3a2:	2203      	movs	r2, #3
 800f3a4:	4650      	mov	r0, sl
 800f3a6:	f7f0 ff1b 	bl	80001e0 <memchr>
 800f3aa:	b138      	cbz	r0, 800f3bc <_svfiprintf_r+0x150>
 800f3ac:	9b04      	ldr	r3, [sp, #16]
 800f3ae:	eba0 000a 	sub.w	r0, r0, sl
 800f3b2:	2240      	movs	r2, #64	@ 0x40
 800f3b4:	4082      	lsls	r2, r0
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	3401      	adds	r4, #1
 800f3ba:	9304      	str	r3, [sp, #16]
 800f3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3c0:	4824      	ldr	r0, [pc, #144]	@ (800f454 <_svfiprintf_r+0x1e8>)
 800f3c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3c6:	2206      	movs	r2, #6
 800f3c8:	f7f0 ff0a 	bl	80001e0 <memchr>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d036      	beq.n	800f43e <_svfiprintf_r+0x1d2>
 800f3d0:	4b21      	ldr	r3, [pc, #132]	@ (800f458 <_svfiprintf_r+0x1ec>)
 800f3d2:	bb1b      	cbnz	r3, 800f41c <_svfiprintf_r+0x1b0>
 800f3d4:	9b03      	ldr	r3, [sp, #12]
 800f3d6:	3307      	adds	r3, #7
 800f3d8:	f023 0307 	bic.w	r3, r3, #7
 800f3dc:	3308      	adds	r3, #8
 800f3de:	9303      	str	r3, [sp, #12]
 800f3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3e2:	4433      	add	r3, r6
 800f3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3e6:	e76a      	b.n	800f2be <_svfiprintf_r+0x52>
 800f3e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3ec:	460c      	mov	r4, r1
 800f3ee:	2001      	movs	r0, #1
 800f3f0:	e7a8      	b.n	800f344 <_svfiprintf_r+0xd8>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	3401      	adds	r4, #1
 800f3f6:	9305      	str	r3, [sp, #20]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	f04f 0c0a 	mov.w	ip, #10
 800f3fe:	4620      	mov	r0, r4
 800f400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f404:	3a30      	subs	r2, #48	@ 0x30
 800f406:	2a09      	cmp	r2, #9
 800f408:	d903      	bls.n	800f412 <_svfiprintf_r+0x1a6>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d0c6      	beq.n	800f39c <_svfiprintf_r+0x130>
 800f40e:	9105      	str	r1, [sp, #20]
 800f410:	e7c4      	b.n	800f39c <_svfiprintf_r+0x130>
 800f412:	fb0c 2101 	mla	r1, ip, r1, r2
 800f416:	4604      	mov	r4, r0
 800f418:	2301      	movs	r3, #1
 800f41a:	e7f0      	b.n	800f3fe <_svfiprintf_r+0x192>
 800f41c:	ab03      	add	r3, sp, #12
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	462a      	mov	r2, r5
 800f422:	4b0e      	ldr	r3, [pc, #56]	@ (800f45c <_svfiprintf_r+0x1f0>)
 800f424:	a904      	add	r1, sp, #16
 800f426:	4638      	mov	r0, r7
 800f428:	f7fc ff3c 	bl	800c2a4 <_printf_float>
 800f42c:	1c42      	adds	r2, r0, #1
 800f42e:	4606      	mov	r6, r0
 800f430:	d1d6      	bne.n	800f3e0 <_svfiprintf_r+0x174>
 800f432:	89ab      	ldrh	r3, [r5, #12]
 800f434:	065b      	lsls	r3, r3, #25
 800f436:	f53f af2d 	bmi.w	800f294 <_svfiprintf_r+0x28>
 800f43a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f43c:	e72c      	b.n	800f298 <_svfiprintf_r+0x2c>
 800f43e:	ab03      	add	r3, sp, #12
 800f440:	9300      	str	r3, [sp, #0]
 800f442:	462a      	mov	r2, r5
 800f444:	4b05      	ldr	r3, [pc, #20]	@ (800f45c <_svfiprintf_r+0x1f0>)
 800f446:	a904      	add	r1, sp, #16
 800f448:	4638      	mov	r0, r7
 800f44a:	f7fd f9c3 	bl	800c7d4 <_printf_i>
 800f44e:	e7ed      	b.n	800f42c <_svfiprintf_r+0x1c0>
 800f450:	080100b1 	.word	0x080100b1
 800f454:	080100bb 	.word	0x080100bb
 800f458:	0800c2a5 	.word	0x0800c2a5
 800f45c:	0800f1b7 	.word	0x0800f1b7
 800f460:	080100b7 	.word	0x080100b7

0800f464 <__sflush_r>:
 800f464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f46c:	0716      	lsls	r6, r2, #28
 800f46e:	4605      	mov	r5, r0
 800f470:	460c      	mov	r4, r1
 800f472:	d454      	bmi.n	800f51e <__sflush_r+0xba>
 800f474:	684b      	ldr	r3, [r1, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	dc02      	bgt.n	800f480 <__sflush_r+0x1c>
 800f47a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	dd48      	ble.n	800f512 <__sflush_r+0xae>
 800f480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f482:	2e00      	cmp	r6, #0
 800f484:	d045      	beq.n	800f512 <__sflush_r+0xae>
 800f486:	2300      	movs	r3, #0
 800f488:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f48c:	682f      	ldr	r7, [r5, #0]
 800f48e:	6a21      	ldr	r1, [r4, #32]
 800f490:	602b      	str	r3, [r5, #0]
 800f492:	d030      	beq.n	800f4f6 <__sflush_r+0x92>
 800f494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f496:	89a3      	ldrh	r3, [r4, #12]
 800f498:	0759      	lsls	r1, r3, #29
 800f49a:	d505      	bpl.n	800f4a8 <__sflush_r+0x44>
 800f49c:	6863      	ldr	r3, [r4, #4]
 800f49e:	1ad2      	subs	r2, r2, r3
 800f4a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4a2:	b10b      	cbz	r3, 800f4a8 <__sflush_r+0x44>
 800f4a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4a6:	1ad2      	subs	r2, r2, r3
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4ac:	6a21      	ldr	r1, [r4, #32]
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	47b0      	blx	r6
 800f4b2:	1c43      	adds	r3, r0, #1
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	d106      	bne.n	800f4c6 <__sflush_r+0x62>
 800f4b8:	6829      	ldr	r1, [r5, #0]
 800f4ba:	291d      	cmp	r1, #29
 800f4bc:	d82b      	bhi.n	800f516 <__sflush_r+0xb2>
 800f4be:	4a2a      	ldr	r2, [pc, #168]	@ (800f568 <__sflush_r+0x104>)
 800f4c0:	410a      	asrs	r2, r1
 800f4c2:	07d6      	lsls	r6, r2, #31
 800f4c4:	d427      	bmi.n	800f516 <__sflush_r+0xb2>
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	6062      	str	r2, [r4, #4]
 800f4ca:	04d9      	lsls	r1, r3, #19
 800f4cc:	6922      	ldr	r2, [r4, #16]
 800f4ce:	6022      	str	r2, [r4, #0]
 800f4d0:	d504      	bpl.n	800f4dc <__sflush_r+0x78>
 800f4d2:	1c42      	adds	r2, r0, #1
 800f4d4:	d101      	bne.n	800f4da <__sflush_r+0x76>
 800f4d6:	682b      	ldr	r3, [r5, #0]
 800f4d8:	b903      	cbnz	r3, 800f4dc <__sflush_r+0x78>
 800f4da:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4de:	602f      	str	r7, [r5, #0]
 800f4e0:	b1b9      	cbz	r1, 800f512 <__sflush_r+0xae>
 800f4e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4e6:	4299      	cmp	r1, r3
 800f4e8:	d002      	beq.n	800f4f0 <__sflush_r+0x8c>
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f7fe fcdc 	bl	800dea8 <_free_r>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4f4:	e00d      	b.n	800f512 <__sflush_r+0xae>
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	47b0      	blx	r6
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	1c50      	adds	r0, r2, #1
 800f500:	d1c9      	bne.n	800f496 <__sflush_r+0x32>
 800f502:	682b      	ldr	r3, [r5, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d0c6      	beq.n	800f496 <__sflush_r+0x32>
 800f508:	2b1d      	cmp	r3, #29
 800f50a:	d001      	beq.n	800f510 <__sflush_r+0xac>
 800f50c:	2b16      	cmp	r3, #22
 800f50e:	d11e      	bne.n	800f54e <__sflush_r+0xea>
 800f510:	602f      	str	r7, [r5, #0]
 800f512:	2000      	movs	r0, #0
 800f514:	e022      	b.n	800f55c <__sflush_r+0xf8>
 800f516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f51a:	b21b      	sxth	r3, r3
 800f51c:	e01b      	b.n	800f556 <__sflush_r+0xf2>
 800f51e:	690f      	ldr	r7, [r1, #16]
 800f520:	2f00      	cmp	r7, #0
 800f522:	d0f6      	beq.n	800f512 <__sflush_r+0xae>
 800f524:	0793      	lsls	r3, r2, #30
 800f526:	680e      	ldr	r6, [r1, #0]
 800f528:	bf08      	it	eq
 800f52a:	694b      	ldreq	r3, [r1, #20]
 800f52c:	600f      	str	r7, [r1, #0]
 800f52e:	bf18      	it	ne
 800f530:	2300      	movne	r3, #0
 800f532:	eba6 0807 	sub.w	r8, r6, r7
 800f536:	608b      	str	r3, [r1, #8]
 800f538:	f1b8 0f00 	cmp.w	r8, #0
 800f53c:	dde9      	ble.n	800f512 <__sflush_r+0xae>
 800f53e:	6a21      	ldr	r1, [r4, #32]
 800f540:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f542:	4643      	mov	r3, r8
 800f544:	463a      	mov	r2, r7
 800f546:	4628      	mov	r0, r5
 800f548:	47b0      	blx	r6
 800f54a:	2800      	cmp	r0, #0
 800f54c:	dc08      	bgt.n	800f560 <__sflush_r+0xfc>
 800f54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f556:	81a3      	strh	r3, [r4, #12]
 800f558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f560:	4407      	add	r7, r0
 800f562:	eba8 0800 	sub.w	r8, r8, r0
 800f566:	e7e7      	b.n	800f538 <__sflush_r+0xd4>
 800f568:	dfbffffe 	.word	0xdfbffffe

0800f56c <_fflush_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	690b      	ldr	r3, [r1, #16]
 800f570:	4605      	mov	r5, r0
 800f572:	460c      	mov	r4, r1
 800f574:	b913      	cbnz	r3, 800f57c <_fflush_r+0x10>
 800f576:	2500      	movs	r5, #0
 800f578:	4628      	mov	r0, r5
 800f57a:	bd38      	pop	{r3, r4, r5, pc}
 800f57c:	b118      	cbz	r0, 800f586 <_fflush_r+0x1a>
 800f57e:	6a03      	ldr	r3, [r0, #32]
 800f580:	b90b      	cbnz	r3, 800f586 <_fflush_r+0x1a>
 800f582:	f7fd fce7 	bl	800cf54 <__sinit>
 800f586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d0f3      	beq.n	800f576 <_fflush_r+0xa>
 800f58e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f590:	07d0      	lsls	r0, r2, #31
 800f592:	d404      	bmi.n	800f59e <_fflush_r+0x32>
 800f594:	0599      	lsls	r1, r3, #22
 800f596:	d402      	bmi.n	800f59e <_fflush_r+0x32>
 800f598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f59a:	f7fd fe16 	bl	800d1ca <__retarget_lock_acquire_recursive>
 800f59e:	4628      	mov	r0, r5
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	f7ff ff5f 	bl	800f464 <__sflush_r>
 800f5a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5a8:	07da      	lsls	r2, r3, #31
 800f5aa:	4605      	mov	r5, r0
 800f5ac:	d4e4      	bmi.n	800f578 <_fflush_r+0xc>
 800f5ae:	89a3      	ldrh	r3, [r4, #12]
 800f5b0:	059b      	lsls	r3, r3, #22
 800f5b2:	d4e1      	bmi.n	800f578 <_fflush_r+0xc>
 800f5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5b6:	f7fd fe09 	bl	800d1cc <__retarget_lock_release_recursive>
 800f5ba:	e7dd      	b.n	800f578 <_fflush_r+0xc>

0800f5bc <memmove>:
 800f5bc:	4288      	cmp	r0, r1
 800f5be:	b510      	push	{r4, lr}
 800f5c0:	eb01 0402 	add.w	r4, r1, r2
 800f5c4:	d902      	bls.n	800f5cc <memmove+0x10>
 800f5c6:	4284      	cmp	r4, r0
 800f5c8:	4623      	mov	r3, r4
 800f5ca:	d807      	bhi.n	800f5dc <memmove+0x20>
 800f5cc:	1e43      	subs	r3, r0, #1
 800f5ce:	42a1      	cmp	r1, r4
 800f5d0:	d008      	beq.n	800f5e4 <memmove+0x28>
 800f5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5da:	e7f8      	b.n	800f5ce <memmove+0x12>
 800f5dc:	4402      	add	r2, r0
 800f5de:	4601      	mov	r1, r0
 800f5e0:	428a      	cmp	r2, r1
 800f5e2:	d100      	bne.n	800f5e6 <memmove+0x2a>
 800f5e4:	bd10      	pop	{r4, pc}
 800f5e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5ee:	e7f7      	b.n	800f5e0 <memmove+0x24>

0800f5f0 <_sbrk_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4d06      	ldr	r5, [pc, #24]	@ (800f60c <_sbrk_r+0x1c>)
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	4608      	mov	r0, r1
 800f5fa:	602b      	str	r3, [r5, #0]
 800f5fc:	f7f2 ff22 	bl	8002444 <_sbrk>
 800f600:	1c43      	adds	r3, r0, #1
 800f602:	d102      	bne.n	800f60a <_sbrk_r+0x1a>
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	b103      	cbz	r3, 800f60a <_sbrk_r+0x1a>
 800f608:	6023      	str	r3, [r4, #0]
 800f60a:	bd38      	pop	{r3, r4, r5, pc}
 800f60c:	2000262c 	.word	0x2000262c

0800f610 <__assert_func>:
 800f610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f612:	4614      	mov	r4, r2
 800f614:	461a      	mov	r2, r3
 800f616:	4b09      	ldr	r3, [pc, #36]	@ (800f63c <__assert_func+0x2c>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4605      	mov	r5, r0
 800f61c:	68d8      	ldr	r0, [r3, #12]
 800f61e:	b954      	cbnz	r4, 800f636 <__assert_func+0x26>
 800f620:	4b07      	ldr	r3, [pc, #28]	@ (800f640 <__assert_func+0x30>)
 800f622:	461c      	mov	r4, r3
 800f624:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f628:	9100      	str	r1, [sp, #0]
 800f62a:	462b      	mov	r3, r5
 800f62c:	4905      	ldr	r1, [pc, #20]	@ (800f644 <__assert_func+0x34>)
 800f62e:	f000 f84f 	bl	800f6d0 <fiprintf>
 800f632:	f000 f85f 	bl	800f6f4 <abort>
 800f636:	4b04      	ldr	r3, [pc, #16]	@ (800f648 <__assert_func+0x38>)
 800f638:	e7f4      	b.n	800f624 <__assert_func+0x14>
 800f63a:	bf00      	nop
 800f63c:	20000274 	.word	0x20000274
 800f640:	080100fd 	.word	0x080100fd
 800f644:	080100cf 	.word	0x080100cf
 800f648:	080100c2 	.word	0x080100c2

0800f64c <_calloc_r>:
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	fba1 5402 	umull	r5, r4, r1, r2
 800f652:	b93c      	cbnz	r4, 800f664 <_calloc_r+0x18>
 800f654:	4629      	mov	r1, r5
 800f656:	f7fe ffd5 	bl	800e604 <_malloc_r>
 800f65a:	4606      	mov	r6, r0
 800f65c:	b928      	cbnz	r0, 800f66a <_calloc_r+0x1e>
 800f65e:	2600      	movs	r6, #0
 800f660:	4630      	mov	r0, r6
 800f662:	bd70      	pop	{r4, r5, r6, pc}
 800f664:	220c      	movs	r2, #12
 800f666:	6002      	str	r2, [r0, #0]
 800f668:	e7f9      	b.n	800f65e <_calloc_r+0x12>
 800f66a:	462a      	mov	r2, r5
 800f66c:	4621      	mov	r1, r4
 800f66e:	f7fd fd0a 	bl	800d086 <memset>
 800f672:	e7f5      	b.n	800f660 <_calloc_r+0x14>

0800f674 <_realloc_r>:
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	4680      	mov	r8, r0
 800f67a:	4615      	mov	r5, r2
 800f67c:	460c      	mov	r4, r1
 800f67e:	b921      	cbnz	r1, 800f68a <_realloc_r+0x16>
 800f680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f684:	4611      	mov	r1, r2
 800f686:	f7fe bfbd 	b.w	800e604 <_malloc_r>
 800f68a:	b92a      	cbnz	r2, 800f698 <_realloc_r+0x24>
 800f68c:	f7fe fc0c 	bl	800dea8 <_free_r>
 800f690:	2400      	movs	r4, #0
 800f692:	4620      	mov	r0, r4
 800f694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f698:	f000 f833 	bl	800f702 <_malloc_usable_size_r>
 800f69c:	4285      	cmp	r5, r0
 800f69e:	4606      	mov	r6, r0
 800f6a0:	d802      	bhi.n	800f6a8 <_realloc_r+0x34>
 800f6a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f6a6:	d8f4      	bhi.n	800f692 <_realloc_r+0x1e>
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	4640      	mov	r0, r8
 800f6ac:	f7fe ffaa 	bl	800e604 <_malloc_r>
 800f6b0:	4607      	mov	r7, r0
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	d0ec      	beq.n	800f690 <_realloc_r+0x1c>
 800f6b6:	42b5      	cmp	r5, r6
 800f6b8:	462a      	mov	r2, r5
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	bf28      	it	cs
 800f6be:	4632      	movcs	r2, r6
 800f6c0:	f7fd fd85 	bl	800d1ce <memcpy>
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	f7fe fbee 	bl	800dea8 <_free_r>
 800f6cc:	463c      	mov	r4, r7
 800f6ce:	e7e0      	b.n	800f692 <_realloc_r+0x1e>

0800f6d0 <fiprintf>:
 800f6d0:	b40e      	push	{r1, r2, r3}
 800f6d2:	b503      	push	{r0, r1, lr}
 800f6d4:	4601      	mov	r1, r0
 800f6d6:	ab03      	add	r3, sp, #12
 800f6d8:	4805      	ldr	r0, [pc, #20]	@ (800f6f0 <fiprintf+0x20>)
 800f6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6de:	6800      	ldr	r0, [r0, #0]
 800f6e0:	9301      	str	r3, [sp, #4]
 800f6e2:	f000 f83f 	bl	800f764 <_vfiprintf_r>
 800f6e6:	b002      	add	sp, #8
 800f6e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6ec:	b003      	add	sp, #12
 800f6ee:	4770      	bx	lr
 800f6f0:	20000274 	.word	0x20000274

0800f6f4 <abort>:
 800f6f4:	b508      	push	{r3, lr}
 800f6f6:	2006      	movs	r0, #6
 800f6f8:	f000 fa08 	bl	800fb0c <raise>
 800f6fc:	2001      	movs	r0, #1
 800f6fe:	f7f2 fe29 	bl	8002354 <_exit>

0800f702 <_malloc_usable_size_r>:
 800f702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f706:	1f18      	subs	r0, r3, #4
 800f708:	2b00      	cmp	r3, #0
 800f70a:	bfbc      	itt	lt
 800f70c:	580b      	ldrlt	r3, [r1, r0]
 800f70e:	18c0      	addlt	r0, r0, r3
 800f710:	4770      	bx	lr

0800f712 <__sfputc_r>:
 800f712:	6893      	ldr	r3, [r2, #8]
 800f714:	3b01      	subs	r3, #1
 800f716:	2b00      	cmp	r3, #0
 800f718:	b410      	push	{r4}
 800f71a:	6093      	str	r3, [r2, #8]
 800f71c:	da08      	bge.n	800f730 <__sfputc_r+0x1e>
 800f71e:	6994      	ldr	r4, [r2, #24]
 800f720:	42a3      	cmp	r3, r4
 800f722:	db01      	blt.n	800f728 <__sfputc_r+0x16>
 800f724:	290a      	cmp	r1, #10
 800f726:	d103      	bne.n	800f730 <__sfputc_r+0x1e>
 800f728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f72c:	f000 b932 	b.w	800f994 <__swbuf_r>
 800f730:	6813      	ldr	r3, [r2, #0]
 800f732:	1c58      	adds	r0, r3, #1
 800f734:	6010      	str	r0, [r2, #0]
 800f736:	7019      	strb	r1, [r3, #0]
 800f738:	4608      	mov	r0, r1
 800f73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <__sfputs_r>:
 800f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f742:	4606      	mov	r6, r0
 800f744:	460f      	mov	r7, r1
 800f746:	4614      	mov	r4, r2
 800f748:	18d5      	adds	r5, r2, r3
 800f74a:	42ac      	cmp	r4, r5
 800f74c:	d101      	bne.n	800f752 <__sfputs_r+0x12>
 800f74e:	2000      	movs	r0, #0
 800f750:	e007      	b.n	800f762 <__sfputs_r+0x22>
 800f752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f756:	463a      	mov	r2, r7
 800f758:	4630      	mov	r0, r6
 800f75a:	f7ff ffda 	bl	800f712 <__sfputc_r>
 800f75e:	1c43      	adds	r3, r0, #1
 800f760:	d1f3      	bne.n	800f74a <__sfputs_r+0xa>
 800f762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f764 <_vfiprintf_r>:
 800f764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f768:	460d      	mov	r5, r1
 800f76a:	b09d      	sub	sp, #116	@ 0x74
 800f76c:	4614      	mov	r4, r2
 800f76e:	4698      	mov	r8, r3
 800f770:	4606      	mov	r6, r0
 800f772:	b118      	cbz	r0, 800f77c <_vfiprintf_r+0x18>
 800f774:	6a03      	ldr	r3, [r0, #32]
 800f776:	b90b      	cbnz	r3, 800f77c <_vfiprintf_r+0x18>
 800f778:	f7fd fbec 	bl	800cf54 <__sinit>
 800f77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f77e:	07d9      	lsls	r1, r3, #31
 800f780:	d405      	bmi.n	800f78e <_vfiprintf_r+0x2a>
 800f782:	89ab      	ldrh	r3, [r5, #12]
 800f784:	059a      	lsls	r2, r3, #22
 800f786:	d402      	bmi.n	800f78e <_vfiprintf_r+0x2a>
 800f788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f78a:	f7fd fd1e 	bl	800d1ca <__retarget_lock_acquire_recursive>
 800f78e:	89ab      	ldrh	r3, [r5, #12]
 800f790:	071b      	lsls	r3, r3, #28
 800f792:	d501      	bpl.n	800f798 <_vfiprintf_r+0x34>
 800f794:	692b      	ldr	r3, [r5, #16]
 800f796:	b99b      	cbnz	r3, 800f7c0 <_vfiprintf_r+0x5c>
 800f798:	4629      	mov	r1, r5
 800f79a:	4630      	mov	r0, r6
 800f79c:	f000 f938 	bl	800fa10 <__swsetup_r>
 800f7a0:	b170      	cbz	r0, 800f7c0 <_vfiprintf_r+0x5c>
 800f7a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7a4:	07dc      	lsls	r4, r3, #31
 800f7a6:	d504      	bpl.n	800f7b2 <_vfiprintf_r+0x4e>
 800f7a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7ac:	b01d      	add	sp, #116	@ 0x74
 800f7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b2:	89ab      	ldrh	r3, [r5, #12]
 800f7b4:	0598      	lsls	r0, r3, #22
 800f7b6:	d4f7      	bmi.n	800f7a8 <_vfiprintf_r+0x44>
 800f7b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ba:	f7fd fd07 	bl	800d1cc <__retarget_lock_release_recursive>
 800f7be:	e7f3      	b.n	800f7a8 <_vfiprintf_r+0x44>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7c4:	2320      	movs	r3, #32
 800f7c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ce:	2330      	movs	r3, #48	@ 0x30
 800f7d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f980 <_vfiprintf_r+0x21c>
 800f7d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7d8:	f04f 0901 	mov.w	r9, #1
 800f7dc:	4623      	mov	r3, r4
 800f7de:	469a      	mov	sl, r3
 800f7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7e4:	b10a      	cbz	r2, 800f7ea <_vfiprintf_r+0x86>
 800f7e6:	2a25      	cmp	r2, #37	@ 0x25
 800f7e8:	d1f9      	bne.n	800f7de <_vfiprintf_r+0x7a>
 800f7ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f7ee:	d00b      	beq.n	800f808 <_vfiprintf_r+0xa4>
 800f7f0:	465b      	mov	r3, fp
 800f7f2:	4622      	mov	r2, r4
 800f7f4:	4629      	mov	r1, r5
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	f7ff ffa2 	bl	800f740 <__sfputs_r>
 800f7fc:	3001      	adds	r0, #1
 800f7fe:	f000 80a7 	beq.w	800f950 <_vfiprintf_r+0x1ec>
 800f802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f804:	445a      	add	r2, fp
 800f806:	9209      	str	r2, [sp, #36]	@ 0x24
 800f808:	f89a 3000 	ldrb.w	r3, [sl]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f000 809f 	beq.w	800f950 <_vfiprintf_r+0x1ec>
 800f812:	2300      	movs	r3, #0
 800f814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f81c:	f10a 0a01 	add.w	sl, sl, #1
 800f820:	9304      	str	r3, [sp, #16]
 800f822:	9307      	str	r3, [sp, #28]
 800f824:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f828:	931a      	str	r3, [sp, #104]	@ 0x68
 800f82a:	4654      	mov	r4, sl
 800f82c:	2205      	movs	r2, #5
 800f82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f832:	4853      	ldr	r0, [pc, #332]	@ (800f980 <_vfiprintf_r+0x21c>)
 800f834:	f7f0 fcd4 	bl	80001e0 <memchr>
 800f838:	9a04      	ldr	r2, [sp, #16]
 800f83a:	b9d8      	cbnz	r0, 800f874 <_vfiprintf_r+0x110>
 800f83c:	06d1      	lsls	r1, r2, #27
 800f83e:	bf44      	itt	mi
 800f840:	2320      	movmi	r3, #32
 800f842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f846:	0713      	lsls	r3, r2, #28
 800f848:	bf44      	itt	mi
 800f84a:	232b      	movmi	r3, #43	@ 0x2b
 800f84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f850:	f89a 3000 	ldrb.w	r3, [sl]
 800f854:	2b2a      	cmp	r3, #42	@ 0x2a
 800f856:	d015      	beq.n	800f884 <_vfiprintf_r+0x120>
 800f858:	9a07      	ldr	r2, [sp, #28]
 800f85a:	4654      	mov	r4, sl
 800f85c:	2000      	movs	r0, #0
 800f85e:	f04f 0c0a 	mov.w	ip, #10
 800f862:	4621      	mov	r1, r4
 800f864:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f868:	3b30      	subs	r3, #48	@ 0x30
 800f86a:	2b09      	cmp	r3, #9
 800f86c:	d94b      	bls.n	800f906 <_vfiprintf_r+0x1a2>
 800f86e:	b1b0      	cbz	r0, 800f89e <_vfiprintf_r+0x13a>
 800f870:	9207      	str	r2, [sp, #28]
 800f872:	e014      	b.n	800f89e <_vfiprintf_r+0x13a>
 800f874:	eba0 0308 	sub.w	r3, r0, r8
 800f878:	fa09 f303 	lsl.w	r3, r9, r3
 800f87c:	4313      	orrs	r3, r2
 800f87e:	9304      	str	r3, [sp, #16]
 800f880:	46a2      	mov	sl, r4
 800f882:	e7d2      	b.n	800f82a <_vfiprintf_r+0xc6>
 800f884:	9b03      	ldr	r3, [sp, #12]
 800f886:	1d19      	adds	r1, r3, #4
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	9103      	str	r1, [sp, #12]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	bfbb      	ittet	lt
 800f890:	425b      	neglt	r3, r3
 800f892:	f042 0202 	orrlt.w	r2, r2, #2
 800f896:	9307      	strge	r3, [sp, #28]
 800f898:	9307      	strlt	r3, [sp, #28]
 800f89a:	bfb8      	it	lt
 800f89c:	9204      	strlt	r2, [sp, #16]
 800f89e:	7823      	ldrb	r3, [r4, #0]
 800f8a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8a2:	d10a      	bne.n	800f8ba <_vfiprintf_r+0x156>
 800f8a4:	7863      	ldrb	r3, [r4, #1]
 800f8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8a8:	d132      	bne.n	800f910 <_vfiprintf_r+0x1ac>
 800f8aa:	9b03      	ldr	r3, [sp, #12]
 800f8ac:	1d1a      	adds	r2, r3, #4
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	9203      	str	r2, [sp, #12]
 800f8b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8b6:	3402      	adds	r4, #2
 800f8b8:	9305      	str	r3, [sp, #20]
 800f8ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f990 <_vfiprintf_r+0x22c>
 800f8be:	7821      	ldrb	r1, [r4, #0]
 800f8c0:	2203      	movs	r2, #3
 800f8c2:	4650      	mov	r0, sl
 800f8c4:	f7f0 fc8c 	bl	80001e0 <memchr>
 800f8c8:	b138      	cbz	r0, 800f8da <_vfiprintf_r+0x176>
 800f8ca:	9b04      	ldr	r3, [sp, #16]
 800f8cc:	eba0 000a 	sub.w	r0, r0, sl
 800f8d0:	2240      	movs	r2, #64	@ 0x40
 800f8d2:	4082      	lsls	r2, r0
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	3401      	adds	r4, #1
 800f8d8:	9304      	str	r3, [sp, #16]
 800f8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8de:	4829      	ldr	r0, [pc, #164]	@ (800f984 <_vfiprintf_r+0x220>)
 800f8e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8e4:	2206      	movs	r2, #6
 800f8e6:	f7f0 fc7b 	bl	80001e0 <memchr>
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	d03f      	beq.n	800f96e <_vfiprintf_r+0x20a>
 800f8ee:	4b26      	ldr	r3, [pc, #152]	@ (800f988 <_vfiprintf_r+0x224>)
 800f8f0:	bb1b      	cbnz	r3, 800f93a <_vfiprintf_r+0x1d6>
 800f8f2:	9b03      	ldr	r3, [sp, #12]
 800f8f4:	3307      	adds	r3, #7
 800f8f6:	f023 0307 	bic.w	r3, r3, #7
 800f8fa:	3308      	adds	r3, #8
 800f8fc:	9303      	str	r3, [sp, #12]
 800f8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f900:	443b      	add	r3, r7
 800f902:	9309      	str	r3, [sp, #36]	@ 0x24
 800f904:	e76a      	b.n	800f7dc <_vfiprintf_r+0x78>
 800f906:	fb0c 3202 	mla	r2, ip, r2, r3
 800f90a:	460c      	mov	r4, r1
 800f90c:	2001      	movs	r0, #1
 800f90e:	e7a8      	b.n	800f862 <_vfiprintf_r+0xfe>
 800f910:	2300      	movs	r3, #0
 800f912:	3401      	adds	r4, #1
 800f914:	9305      	str	r3, [sp, #20]
 800f916:	4619      	mov	r1, r3
 800f918:	f04f 0c0a 	mov.w	ip, #10
 800f91c:	4620      	mov	r0, r4
 800f91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f922:	3a30      	subs	r2, #48	@ 0x30
 800f924:	2a09      	cmp	r2, #9
 800f926:	d903      	bls.n	800f930 <_vfiprintf_r+0x1cc>
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d0c6      	beq.n	800f8ba <_vfiprintf_r+0x156>
 800f92c:	9105      	str	r1, [sp, #20]
 800f92e:	e7c4      	b.n	800f8ba <_vfiprintf_r+0x156>
 800f930:	fb0c 2101 	mla	r1, ip, r1, r2
 800f934:	4604      	mov	r4, r0
 800f936:	2301      	movs	r3, #1
 800f938:	e7f0      	b.n	800f91c <_vfiprintf_r+0x1b8>
 800f93a:	ab03      	add	r3, sp, #12
 800f93c:	9300      	str	r3, [sp, #0]
 800f93e:	462a      	mov	r2, r5
 800f940:	4b12      	ldr	r3, [pc, #72]	@ (800f98c <_vfiprintf_r+0x228>)
 800f942:	a904      	add	r1, sp, #16
 800f944:	4630      	mov	r0, r6
 800f946:	f7fc fcad 	bl	800c2a4 <_printf_float>
 800f94a:	4607      	mov	r7, r0
 800f94c:	1c78      	adds	r0, r7, #1
 800f94e:	d1d6      	bne.n	800f8fe <_vfiprintf_r+0x19a>
 800f950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f952:	07d9      	lsls	r1, r3, #31
 800f954:	d405      	bmi.n	800f962 <_vfiprintf_r+0x1fe>
 800f956:	89ab      	ldrh	r3, [r5, #12]
 800f958:	059a      	lsls	r2, r3, #22
 800f95a:	d402      	bmi.n	800f962 <_vfiprintf_r+0x1fe>
 800f95c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f95e:	f7fd fc35 	bl	800d1cc <__retarget_lock_release_recursive>
 800f962:	89ab      	ldrh	r3, [r5, #12]
 800f964:	065b      	lsls	r3, r3, #25
 800f966:	f53f af1f 	bmi.w	800f7a8 <_vfiprintf_r+0x44>
 800f96a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f96c:	e71e      	b.n	800f7ac <_vfiprintf_r+0x48>
 800f96e:	ab03      	add	r3, sp, #12
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	462a      	mov	r2, r5
 800f974:	4b05      	ldr	r3, [pc, #20]	@ (800f98c <_vfiprintf_r+0x228>)
 800f976:	a904      	add	r1, sp, #16
 800f978:	4630      	mov	r0, r6
 800f97a:	f7fc ff2b 	bl	800c7d4 <_printf_i>
 800f97e:	e7e4      	b.n	800f94a <_vfiprintf_r+0x1e6>
 800f980:	080100b1 	.word	0x080100b1
 800f984:	080100bb 	.word	0x080100bb
 800f988:	0800c2a5 	.word	0x0800c2a5
 800f98c:	0800f741 	.word	0x0800f741
 800f990:	080100b7 	.word	0x080100b7

0800f994 <__swbuf_r>:
 800f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f996:	460e      	mov	r6, r1
 800f998:	4614      	mov	r4, r2
 800f99a:	4605      	mov	r5, r0
 800f99c:	b118      	cbz	r0, 800f9a6 <__swbuf_r+0x12>
 800f99e:	6a03      	ldr	r3, [r0, #32]
 800f9a0:	b90b      	cbnz	r3, 800f9a6 <__swbuf_r+0x12>
 800f9a2:	f7fd fad7 	bl	800cf54 <__sinit>
 800f9a6:	69a3      	ldr	r3, [r4, #24]
 800f9a8:	60a3      	str	r3, [r4, #8]
 800f9aa:	89a3      	ldrh	r3, [r4, #12]
 800f9ac:	071a      	lsls	r2, r3, #28
 800f9ae:	d501      	bpl.n	800f9b4 <__swbuf_r+0x20>
 800f9b0:	6923      	ldr	r3, [r4, #16]
 800f9b2:	b943      	cbnz	r3, 800f9c6 <__swbuf_r+0x32>
 800f9b4:	4621      	mov	r1, r4
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	f000 f82a 	bl	800fa10 <__swsetup_r>
 800f9bc:	b118      	cbz	r0, 800f9c6 <__swbuf_r+0x32>
 800f9be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f9c2:	4638      	mov	r0, r7
 800f9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	6922      	ldr	r2, [r4, #16]
 800f9ca:	1a98      	subs	r0, r3, r2
 800f9cc:	6963      	ldr	r3, [r4, #20]
 800f9ce:	b2f6      	uxtb	r6, r6
 800f9d0:	4283      	cmp	r3, r0
 800f9d2:	4637      	mov	r7, r6
 800f9d4:	dc05      	bgt.n	800f9e2 <__swbuf_r+0x4e>
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	4628      	mov	r0, r5
 800f9da:	f7ff fdc7 	bl	800f56c <_fflush_r>
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	d1ed      	bne.n	800f9be <__swbuf_r+0x2a>
 800f9e2:	68a3      	ldr	r3, [r4, #8]
 800f9e4:	3b01      	subs	r3, #1
 800f9e6:	60a3      	str	r3, [r4, #8]
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	1c5a      	adds	r2, r3, #1
 800f9ec:	6022      	str	r2, [r4, #0]
 800f9ee:	701e      	strb	r6, [r3, #0]
 800f9f0:	6962      	ldr	r2, [r4, #20]
 800f9f2:	1c43      	adds	r3, r0, #1
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d004      	beq.n	800fa02 <__swbuf_r+0x6e>
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	07db      	lsls	r3, r3, #31
 800f9fc:	d5e1      	bpl.n	800f9c2 <__swbuf_r+0x2e>
 800f9fe:	2e0a      	cmp	r6, #10
 800fa00:	d1df      	bne.n	800f9c2 <__swbuf_r+0x2e>
 800fa02:	4621      	mov	r1, r4
 800fa04:	4628      	mov	r0, r5
 800fa06:	f7ff fdb1 	bl	800f56c <_fflush_r>
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d0d9      	beq.n	800f9c2 <__swbuf_r+0x2e>
 800fa0e:	e7d6      	b.n	800f9be <__swbuf_r+0x2a>

0800fa10 <__swsetup_r>:
 800fa10:	b538      	push	{r3, r4, r5, lr}
 800fa12:	4b29      	ldr	r3, [pc, #164]	@ (800fab8 <__swsetup_r+0xa8>)
 800fa14:	4605      	mov	r5, r0
 800fa16:	6818      	ldr	r0, [r3, #0]
 800fa18:	460c      	mov	r4, r1
 800fa1a:	b118      	cbz	r0, 800fa24 <__swsetup_r+0x14>
 800fa1c:	6a03      	ldr	r3, [r0, #32]
 800fa1e:	b90b      	cbnz	r3, 800fa24 <__swsetup_r+0x14>
 800fa20:	f7fd fa98 	bl	800cf54 <__sinit>
 800fa24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa28:	0719      	lsls	r1, r3, #28
 800fa2a:	d422      	bmi.n	800fa72 <__swsetup_r+0x62>
 800fa2c:	06da      	lsls	r2, r3, #27
 800fa2e:	d407      	bmi.n	800fa40 <__swsetup_r+0x30>
 800fa30:	2209      	movs	r2, #9
 800fa32:	602a      	str	r2, [r5, #0]
 800fa34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa38:	81a3      	strh	r3, [r4, #12]
 800fa3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa3e:	e033      	b.n	800faa8 <__swsetup_r+0x98>
 800fa40:	0758      	lsls	r0, r3, #29
 800fa42:	d512      	bpl.n	800fa6a <__swsetup_r+0x5a>
 800fa44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa46:	b141      	cbz	r1, 800fa5a <__swsetup_r+0x4a>
 800fa48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa4c:	4299      	cmp	r1, r3
 800fa4e:	d002      	beq.n	800fa56 <__swsetup_r+0x46>
 800fa50:	4628      	mov	r0, r5
 800fa52:	f7fe fa29 	bl	800dea8 <_free_r>
 800fa56:	2300      	movs	r3, #0
 800fa58:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa5a:	89a3      	ldrh	r3, [r4, #12]
 800fa5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa60:	81a3      	strh	r3, [r4, #12]
 800fa62:	2300      	movs	r3, #0
 800fa64:	6063      	str	r3, [r4, #4]
 800fa66:	6923      	ldr	r3, [r4, #16]
 800fa68:	6023      	str	r3, [r4, #0]
 800fa6a:	89a3      	ldrh	r3, [r4, #12]
 800fa6c:	f043 0308 	orr.w	r3, r3, #8
 800fa70:	81a3      	strh	r3, [r4, #12]
 800fa72:	6923      	ldr	r3, [r4, #16]
 800fa74:	b94b      	cbnz	r3, 800fa8a <__swsetup_r+0x7a>
 800fa76:	89a3      	ldrh	r3, [r4, #12]
 800fa78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa80:	d003      	beq.n	800fa8a <__swsetup_r+0x7a>
 800fa82:	4621      	mov	r1, r4
 800fa84:	4628      	mov	r0, r5
 800fa86:	f000 f883 	bl	800fb90 <__smakebuf_r>
 800fa8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa8e:	f013 0201 	ands.w	r2, r3, #1
 800fa92:	d00a      	beq.n	800faaa <__swsetup_r+0x9a>
 800fa94:	2200      	movs	r2, #0
 800fa96:	60a2      	str	r2, [r4, #8]
 800fa98:	6962      	ldr	r2, [r4, #20]
 800fa9a:	4252      	negs	r2, r2
 800fa9c:	61a2      	str	r2, [r4, #24]
 800fa9e:	6922      	ldr	r2, [r4, #16]
 800faa0:	b942      	cbnz	r2, 800fab4 <__swsetup_r+0xa4>
 800faa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800faa6:	d1c5      	bne.n	800fa34 <__swsetup_r+0x24>
 800faa8:	bd38      	pop	{r3, r4, r5, pc}
 800faaa:	0799      	lsls	r1, r3, #30
 800faac:	bf58      	it	pl
 800faae:	6962      	ldrpl	r2, [r4, #20]
 800fab0:	60a2      	str	r2, [r4, #8]
 800fab2:	e7f4      	b.n	800fa9e <__swsetup_r+0x8e>
 800fab4:	2000      	movs	r0, #0
 800fab6:	e7f7      	b.n	800faa8 <__swsetup_r+0x98>
 800fab8:	20000274 	.word	0x20000274

0800fabc <_raise_r>:
 800fabc:	291f      	cmp	r1, #31
 800fabe:	b538      	push	{r3, r4, r5, lr}
 800fac0:	4605      	mov	r5, r0
 800fac2:	460c      	mov	r4, r1
 800fac4:	d904      	bls.n	800fad0 <_raise_r+0x14>
 800fac6:	2316      	movs	r3, #22
 800fac8:	6003      	str	r3, [r0, #0]
 800faca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800face:	bd38      	pop	{r3, r4, r5, pc}
 800fad0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fad2:	b112      	cbz	r2, 800fada <_raise_r+0x1e>
 800fad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fad8:	b94b      	cbnz	r3, 800faee <_raise_r+0x32>
 800fada:	4628      	mov	r0, r5
 800fadc:	f000 f830 	bl	800fb40 <_getpid_r>
 800fae0:	4622      	mov	r2, r4
 800fae2:	4601      	mov	r1, r0
 800fae4:	4628      	mov	r0, r5
 800fae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faea:	f000 b817 	b.w	800fb1c <_kill_r>
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d00a      	beq.n	800fb08 <_raise_r+0x4c>
 800faf2:	1c59      	adds	r1, r3, #1
 800faf4:	d103      	bne.n	800fafe <_raise_r+0x42>
 800faf6:	2316      	movs	r3, #22
 800faf8:	6003      	str	r3, [r0, #0]
 800fafa:	2001      	movs	r0, #1
 800fafc:	e7e7      	b.n	800face <_raise_r+0x12>
 800fafe:	2100      	movs	r1, #0
 800fb00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb04:	4620      	mov	r0, r4
 800fb06:	4798      	blx	r3
 800fb08:	2000      	movs	r0, #0
 800fb0a:	e7e0      	b.n	800face <_raise_r+0x12>

0800fb0c <raise>:
 800fb0c:	4b02      	ldr	r3, [pc, #8]	@ (800fb18 <raise+0xc>)
 800fb0e:	4601      	mov	r1, r0
 800fb10:	6818      	ldr	r0, [r3, #0]
 800fb12:	f7ff bfd3 	b.w	800fabc <_raise_r>
 800fb16:	bf00      	nop
 800fb18:	20000274 	.word	0x20000274

0800fb1c <_kill_r>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	4d07      	ldr	r5, [pc, #28]	@ (800fb3c <_kill_r+0x20>)
 800fb20:	2300      	movs	r3, #0
 800fb22:	4604      	mov	r4, r0
 800fb24:	4608      	mov	r0, r1
 800fb26:	4611      	mov	r1, r2
 800fb28:	602b      	str	r3, [r5, #0]
 800fb2a:	f7f2 fc03 	bl	8002334 <_kill>
 800fb2e:	1c43      	adds	r3, r0, #1
 800fb30:	d102      	bne.n	800fb38 <_kill_r+0x1c>
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	b103      	cbz	r3, 800fb38 <_kill_r+0x1c>
 800fb36:	6023      	str	r3, [r4, #0]
 800fb38:	bd38      	pop	{r3, r4, r5, pc}
 800fb3a:	bf00      	nop
 800fb3c:	2000262c 	.word	0x2000262c

0800fb40 <_getpid_r>:
 800fb40:	f7f2 bbf0 	b.w	8002324 <_getpid>

0800fb44 <__swhatbuf_r>:
 800fb44:	b570      	push	{r4, r5, r6, lr}
 800fb46:	460c      	mov	r4, r1
 800fb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4c:	2900      	cmp	r1, #0
 800fb4e:	b096      	sub	sp, #88	@ 0x58
 800fb50:	4615      	mov	r5, r2
 800fb52:	461e      	mov	r6, r3
 800fb54:	da0d      	bge.n	800fb72 <__swhatbuf_r+0x2e>
 800fb56:	89a3      	ldrh	r3, [r4, #12]
 800fb58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb5c:	f04f 0100 	mov.w	r1, #0
 800fb60:	bf14      	ite	ne
 800fb62:	2340      	movne	r3, #64	@ 0x40
 800fb64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb68:	2000      	movs	r0, #0
 800fb6a:	6031      	str	r1, [r6, #0]
 800fb6c:	602b      	str	r3, [r5, #0]
 800fb6e:	b016      	add	sp, #88	@ 0x58
 800fb70:	bd70      	pop	{r4, r5, r6, pc}
 800fb72:	466a      	mov	r2, sp
 800fb74:	f000 f848 	bl	800fc08 <_fstat_r>
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	dbec      	blt.n	800fb56 <__swhatbuf_r+0x12>
 800fb7c:	9901      	ldr	r1, [sp, #4]
 800fb7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb86:	4259      	negs	r1, r3
 800fb88:	4159      	adcs	r1, r3
 800fb8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb8e:	e7eb      	b.n	800fb68 <__swhatbuf_r+0x24>

0800fb90 <__smakebuf_r>:
 800fb90:	898b      	ldrh	r3, [r1, #12]
 800fb92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb94:	079d      	lsls	r5, r3, #30
 800fb96:	4606      	mov	r6, r0
 800fb98:	460c      	mov	r4, r1
 800fb9a:	d507      	bpl.n	800fbac <__smakebuf_r+0x1c>
 800fb9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fba0:	6023      	str	r3, [r4, #0]
 800fba2:	6123      	str	r3, [r4, #16]
 800fba4:	2301      	movs	r3, #1
 800fba6:	6163      	str	r3, [r4, #20]
 800fba8:	b003      	add	sp, #12
 800fbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbac:	ab01      	add	r3, sp, #4
 800fbae:	466a      	mov	r2, sp
 800fbb0:	f7ff ffc8 	bl	800fb44 <__swhatbuf_r>
 800fbb4:	9f00      	ldr	r7, [sp, #0]
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	4639      	mov	r1, r7
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f7fe fd22 	bl	800e604 <_malloc_r>
 800fbc0:	b948      	cbnz	r0, 800fbd6 <__smakebuf_r+0x46>
 800fbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc6:	059a      	lsls	r2, r3, #22
 800fbc8:	d4ee      	bmi.n	800fba8 <__smakebuf_r+0x18>
 800fbca:	f023 0303 	bic.w	r3, r3, #3
 800fbce:	f043 0302 	orr.w	r3, r3, #2
 800fbd2:	81a3      	strh	r3, [r4, #12]
 800fbd4:	e7e2      	b.n	800fb9c <__smakebuf_r+0xc>
 800fbd6:	89a3      	ldrh	r3, [r4, #12]
 800fbd8:	6020      	str	r0, [r4, #0]
 800fbda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbde:	81a3      	strh	r3, [r4, #12]
 800fbe0:	9b01      	ldr	r3, [sp, #4]
 800fbe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbe6:	b15b      	cbz	r3, 800fc00 <__smakebuf_r+0x70>
 800fbe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbec:	4630      	mov	r0, r6
 800fbee:	f000 f81d 	bl	800fc2c <_isatty_r>
 800fbf2:	b128      	cbz	r0, 800fc00 <__smakebuf_r+0x70>
 800fbf4:	89a3      	ldrh	r3, [r4, #12]
 800fbf6:	f023 0303 	bic.w	r3, r3, #3
 800fbfa:	f043 0301 	orr.w	r3, r3, #1
 800fbfe:	81a3      	strh	r3, [r4, #12]
 800fc00:	89a3      	ldrh	r3, [r4, #12]
 800fc02:	431d      	orrs	r5, r3
 800fc04:	81a5      	strh	r5, [r4, #12]
 800fc06:	e7cf      	b.n	800fba8 <__smakebuf_r+0x18>

0800fc08 <_fstat_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4d07      	ldr	r5, [pc, #28]	@ (800fc28 <_fstat_r+0x20>)
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	4604      	mov	r4, r0
 800fc10:	4608      	mov	r0, r1
 800fc12:	4611      	mov	r1, r2
 800fc14:	602b      	str	r3, [r5, #0]
 800fc16:	f7f2 fbed 	bl	80023f4 <_fstat>
 800fc1a:	1c43      	adds	r3, r0, #1
 800fc1c:	d102      	bne.n	800fc24 <_fstat_r+0x1c>
 800fc1e:	682b      	ldr	r3, [r5, #0]
 800fc20:	b103      	cbz	r3, 800fc24 <_fstat_r+0x1c>
 800fc22:	6023      	str	r3, [r4, #0]
 800fc24:	bd38      	pop	{r3, r4, r5, pc}
 800fc26:	bf00      	nop
 800fc28:	2000262c 	.word	0x2000262c

0800fc2c <_isatty_r>:
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	4d06      	ldr	r5, [pc, #24]	@ (800fc48 <_isatty_r+0x1c>)
 800fc30:	2300      	movs	r3, #0
 800fc32:	4604      	mov	r4, r0
 800fc34:	4608      	mov	r0, r1
 800fc36:	602b      	str	r3, [r5, #0]
 800fc38:	f7f2 fbec 	bl	8002414 <_isatty>
 800fc3c:	1c43      	adds	r3, r0, #1
 800fc3e:	d102      	bne.n	800fc46 <_isatty_r+0x1a>
 800fc40:	682b      	ldr	r3, [r5, #0]
 800fc42:	b103      	cbz	r3, 800fc46 <_isatty_r+0x1a>
 800fc44:	6023      	str	r3, [r4, #0]
 800fc46:	bd38      	pop	{r3, r4, r5, pc}
 800fc48:	2000262c 	.word	0x2000262c

0800fc4c <_init>:
 800fc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4e:	bf00      	nop
 800fc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc52:	bc08      	pop	{r3}
 800fc54:	469e      	mov	lr, r3
 800fc56:	4770      	bx	lr

0800fc58 <_fini>:
 800fc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5a:	bf00      	nop
 800fc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc5e:	bc08      	pop	{r3}
 800fc60:	469e      	mov	lr, r3
 800fc62:	4770      	bx	lr
